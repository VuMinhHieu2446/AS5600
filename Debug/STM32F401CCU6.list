
STM32F401CCU6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b28  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08008cbc  08008cbc  00018cbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d18  08008d18  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  08008d18  08008d18  00018d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d20  08008d20  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d20  08008d20  00018d20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d24  08008d24  00018d24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  08008d28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014d4  200000fc  08008e24  000200fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200015d0  08008e24  000215d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001232c  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f13  00000000  00000000  00032458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000eb0  00000000  00000000  00035370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d70  00000000  00000000  00036220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000189c4  00000000  00000000  00036f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001552e  00000000  00000000  0004f954  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000891dc  00000000  00000000  00064e82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ee05e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c3c  00000000  00000000  000ee0b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200000fc 	.word	0x200000fc
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08008ca4 	.word	0x08008ca4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000100 	.word	0x20000100
 80001d0:	08008ca4 	.word	0x08008ca4

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468e      	mov	lr, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14d      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000212:	428a      	cmp	r2, r1
 8000214:	4694      	mov	ip, r2
 8000216:	d969      	bls.n	80002ec <__udivmoddi4+0xe8>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b152      	cbz	r2, 8000234 <__udivmoddi4+0x30>
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	f1c2 0120 	rsb	r1, r2, #32
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	fa0c fc02 	lsl.w	ip, ip, r2
 800022e:	ea41 0e03 	orr.w	lr, r1, r3
 8000232:	4094      	lsls	r4, r2
 8000234:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000238:	0c21      	lsrs	r1, r4, #16
 800023a:	fbbe f6f8 	udiv	r6, lr, r8
 800023e:	fa1f f78c 	uxth.w	r7, ip
 8000242:	fb08 e316 	mls	r3, r8, r6, lr
 8000246:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024a:	fb06 f107 	mul.w	r1, r6, r7
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 811f 	bcs.w	800049c <__udivmoddi4+0x298>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 811c 	bls.w	800049c <__udivmoddi4+0x298>
 8000264:	3e02      	subs	r6, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 f707 	mul.w	r7, r0, r7
 800027c:	42a7      	cmp	r7, r4
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x92>
 8000280:	eb1c 0404 	adds.w	r4, ip, r4
 8000284:	f100 33ff 	add.w	r3, r0, #4294967295
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x29c>
 800028c:	42a7      	cmp	r7, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x29c>
 8000292:	4464      	add	r4, ip
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029a:	1be4      	subs	r4, r4, r7
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xc2>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	f000 80ef 	beq.w	8000496 <__udivmoddi4+0x292>
 80002b8:	2600      	movs	r6, #0
 80002ba:	e9c5 0100 	strd	r0, r1, [r5]
 80002be:	4630      	mov	r0, r6
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f683 	clz	r6, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d14a      	bne.n	8000364 <__udivmoddi4+0x160>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd4>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80f9 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	469e      	mov	lr, r3
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa4>
 80002e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa4>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xec>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 8092 	bne.w	800041e <__udivmoddi4+0x21a>
 80002fa:	eba1 010c 	sub.w	r1, r1, ip
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2601      	movs	r6, #1
 8000308:	0c20      	lsrs	r0, r4, #16
 800030a:	fbb1 f3f7 	udiv	r3, r1, r7
 800030e:	fb07 1113 	mls	r1, r7, r3, r1
 8000312:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000316:	fb0e f003 	mul.w	r0, lr, r3
 800031a:	4288      	cmp	r0, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x12c>
 800031e:	eb1c 0101 	adds.w	r1, ip, r1
 8000322:	f103 38ff 	add.w	r8, r3, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x12a>
 8000328:	4288      	cmp	r0, r1
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2c0>
 800032e:	4643      	mov	r3, r8
 8000330:	1a09      	subs	r1, r1, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb1 f0f7 	udiv	r0, r1, r7
 8000338:	fb07 1110 	mls	r1, r7, r0, r1
 800033c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x156>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x154>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 8000358:	4608      	mov	r0, r1
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000362:	e79c      	b.n	800029e <__udivmoddi4+0x9a>
 8000364:	f1c6 0720 	rsb	r7, r6, #32
 8000368:	40b3      	lsls	r3, r6
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa20 f407 	lsr.w	r4, r0, r7
 8000376:	fa01 f306 	lsl.w	r3, r1, r6
 800037a:	431c      	orrs	r4, r3
 800037c:	40f9      	lsrs	r1, r7
 800037e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000382:	fa00 f306 	lsl.w	r3, r0, r6
 8000386:	fbb1 f8f9 	udiv	r8, r1, r9
 800038a:	0c20      	lsrs	r0, r4, #16
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	fb09 1118 	mls	r1, r9, r8, r1
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	fb08 f00e 	mul.w	r0, r8, lr
 800039c:	4288      	cmp	r0, r1
 800039e:	fa02 f206 	lsl.w	r2, r2, r6
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b8>
 80003a4:	eb1c 0101 	adds.w	r1, ip, r1
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2bc>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2bc>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4461      	add	r1, ip
 80003bc:	1a09      	subs	r1, r1, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c4:	fb09 1110 	mls	r1, r9, r0, r1
 80003c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d0:	458e      	cmp	lr, r1
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1e2>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2b4>
 80003de:	458e      	cmp	lr, r1
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2b4>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4461      	add	r1, ip
 80003e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ea:	fba0 9402 	umull	r9, r4, r0, r2
 80003ee:	eba1 010e 	sub.w	r1, r1, lr
 80003f2:	42a1      	cmp	r1, r4
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46a6      	mov	lr, r4
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x2a4>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x2a0>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x212>
 80003fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000402:	eb61 010e 	sbc.w	r1, r1, lr
 8000406:	fa01 f707 	lsl.w	r7, r1, r7
 800040a:	fa22 f306 	lsr.w	r3, r2, r6
 800040e:	40f1      	lsrs	r1, r6
 8000410:	431f      	orrs	r7, r3
 8000412:	e9c5 7100 	strd	r7, r1, [r5]
 8000416:	2600      	movs	r6, #0
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1c2 0320 	rsb	r3, r2, #32
 8000422:	40d8      	lsrs	r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa21 f303 	lsr.w	r3, r1, r3
 800042c:	4091      	lsls	r1, r2
 800042e:	4301      	orrs	r1, r0
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb3 f0f7 	udiv	r0, r3, r7
 800043c:	fb07 3610 	mls	r6, r7, r0, r3
 8000440:	0c0b      	lsrs	r3, r1, #16
 8000442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000446:	fb00 f60e 	mul.w	r6, r0, lr
 800044a:	429e      	cmp	r6, r3
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x260>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b8>
 800045c:	429e      	cmp	r6, r3
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b8>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	b289      	uxth	r1, r1
 8000468:	fbb3 f6f7 	udiv	r6, r3, r7
 800046c:	fb07 3316 	mls	r3, r7, r6, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb06 f30e 	mul.w	r3, r6, lr
 8000478:	428b      	cmp	r3, r1
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x28a>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f106 38ff 	add.w	r8, r6, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000486:	428b      	cmp	r3, r1
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 800048a:	3e02      	subs	r6, #2
 800048c:	4461      	add	r1, ip
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0x104>
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e705      	b.n	80002a8 <__udivmoddi4+0xa4>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e3      	b.n	8000268 <__udivmoddi4+0x64>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x92>
 80004a4:	454b      	cmp	r3, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f8>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f8>
 80004b4:	4646      	mov	r6, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x28a>
 80004b8:	4620      	mov	r0, r4
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1e2>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x260>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b8>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x12c>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e709      	b.n	80002e2 <__udivmoddi4+0xde>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x156>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004dc:	f000 fa8c 	bl	80009f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e0:	f000 f814 	bl	800050c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e4:	f000 f8da 	bl	800069c <MX_GPIO_Init>
  MX_I2C1_Init();
 80004e8:	f000 f87c 	bl	80005e4 <MX_I2C1_Init>
  MX_I2C2_Init();
 80004ec:	f000 f8a8 	bl	8000640 <MX_I2C2_Init>
  MX_USB_DEVICE_Init();
 80004f0:	f007 fec2 	bl	8008278 <MX_USB_DEVICE_Init>
//			  send_CDC(angle_1, angle_2, "AS1: " , " AS2: ");
//			  count = 0;
//		  }
//		  time = HAL_GetTick();
//	  }
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80004f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004f8:	4803      	ldr	r0, [pc, #12]	; (8000508 <main+0x30>)
 80004fa:	f000 fdf2 	bl	80010e2 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 80004fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000502:	f000 faeb 	bl	8000adc <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000506:	e7f5      	b.n	80004f4 <main+0x1c>
 8000508:	40020800 	.word	0x40020800

0800050c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b094      	sub	sp, #80	; 0x50
 8000510:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000512:	f107 0320 	add.w	r3, r7, #32
 8000516:	2230      	movs	r2, #48	; 0x30
 8000518:	2100      	movs	r1, #0
 800051a:	4618      	mov	r0, r3
 800051c:	f008 fbba 	bl	8008c94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000520:	f107 030c 	add.w	r3, r7, #12
 8000524:	2200      	movs	r2, #0
 8000526:	601a      	str	r2, [r3, #0]
 8000528:	605a      	str	r2, [r3, #4]
 800052a:	609a      	str	r2, [r3, #8]
 800052c:	60da      	str	r2, [r3, #12]
 800052e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000530:	2300      	movs	r3, #0
 8000532:	60bb      	str	r3, [r7, #8]
 8000534:	4b29      	ldr	r3, [pc, #164]	; (80005dc <SystemClock_Config+0xd0>)
 8000536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000538:	4a28      	ldr	r2, [pc, #160]	; (80005dc <SystemClock_Config+0xd0>)
 800053a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800053e:	6413      	str	r3, [r2, #64]	; 0x40
 8000540:	4b26      	ldr	r3, [pc, #152]	; (80005dc <SystemClock_Config+0xd0>)
 8000542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000548:	60bb      	str	r3, [r7, #8]
 800054a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800054c:	2300      	movs	r3, #0
 800054e:	607b      	str	r3, [r7, #4]
 8000550:	4b23      	ldr	r3, [pc, #140]	; (80005e0 <SystemClock_Config+0xd4>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000558:	4a21      	ldr	r2, [pc, #132]	; (80005e0 <SystemClock_Config+0xd4>)
 800055a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800055e:	6013      	str	r3, [r2, #0]
 8000560:	4b1f      	ldr	r3, [pc, #124]	; (80005e0 <SystemClock_Config+0xd4>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000568:	607b      	str	r3, [r7, #4]
 800056a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800056c:	2301      	movs	r3, #1
 800056e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000570:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000574:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000576:	2302      	movs	r3, #2
 8000578:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800057a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800057e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000580:	2319      	movs	r3, #25
 8000582:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000584:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000588:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800058a:	2304      	movs	r3, #4
 800058c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800058e:	2307      	movs	r3, #7
 8000590:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000592:	f107 0320 	add.w	r3, r7, #32
 8000596:	4618      	mov	r0, r3
 8000598:	f003 fe5a 	bl	8004250 <HAL_RCC_OscConfig>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d001      	beq.n	80005a6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005a2:	f000 f8db 	bl	800075c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a6:	230f      	movs	r3, #15
 80005a8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005aa:	2302      	movs	r3, #2
 80005ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ae:	2300      	movs	r3, #0
 80005b0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005b6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b8:	2300      	movs	r3, #0
 80005ba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005bc:	f107 030c 	add.w	r3, r7, #12
 80005c0:	2102      	movs	r1, #2
 80005c2:	4618      	mov	r0, r3
 80005c4:	f004 f8bc 	bl	8004740 <HAL_RCC_ClockConfig>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80005ce:	f000 f8c5 	bl	800075c <Error_Handler>
  }
}
 80005d2:	bf00      	nop
 80005d4:	3750      	adds	r7, #80	; 0x50
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	40023800 	.word	0x40023800
 80005e0:	40007000 	.word	0x40007000

080005e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005e8:	4b12      	ldr	r3, [pc, #72]	; (8000634 <MX_I2C1_Init+0x50>)
 80005ea:	4a13      	ldr	r2, [pc, #76]	; (8000638 <MX_I2C1_Init+0x54>)
 80005ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005ee:	4b11      	ldr	r3, [pc, #68]	; (8000634 <MX_I2C1_Init+0x50>)
 80005f0:	4a12      	ldr	r2, [pc, #72]	; (800063c <MX_I2C1_Init+0x58>)
 80005f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005f4:	4b0f      	ldr	r3, [pc, #60]	; (8000634 <MX_I2C1_Init+0x50>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005fa:	4b0e      	ldr	r3, [pc, #56]	; (8000634 <MX_I2C1_Init+0x50>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000600:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <MX_I2C1_Init+0x50>)
 8000602:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000606:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000608:	4b0a      	ldr	r3, [pc, #40]	; (8000634 <MX_I2C1_Init+0x50>)
 800060a:	2200      	movs	r2, #0
 800060c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800060e:	4b09      	ldr	r3, [pc, #36]	; (8000634 <MX_I2C1_Init+0x50>)
 8000610:	2200      	movs	r2, #0
 8000612:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000614:	4b07      	ldr	r3, [pc, #28]	; (8000634 <MX_I2C1_Init+0x50>)
 8000616:	2200      	movs	r2, #0
 8000618:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800061a:	4b06      	ldr	r3, [pc, #24]	; (8000634 <MX_I2C1_Init+0x50>)
 800061c:	2200      	movs	r2, #0
 800061e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000620:	4804      	ldr	r0, [pc, #16]	; (8000634 <MX_I2C1_Init+0x50>)
 8000622:	f000 fd79 	bl	8001118 <HAL_I2C_Init>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800062c:	f000 f896 	bl	800075c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000630:	bf00      	nop
 8000632:	bd80      	pop	{r7, pc}
 8000634:	20000118 	.word	0x20000118
 8000638:	40005400 	.word	0x40005400
 800063c:	000186a0 	.word	0x000186a0

08000640 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000644:	4b12      	ldr	r3, [pc, #72]	; (8000690 <MX_I2C2_Init+0x50>)
 8000646:	4a13      	ldr	r2, [pc, #76]	; (8000694 <MX_I2C2_Init+0x54>)
 8000648:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800064a:	4b11      	ldr	r3, [pc, #68]	; (8000690 <MX_I2C2_Init+0x50>)
 800064c:	4a12      	ldr	r2, [pc, #72]	; (8000698 <MX_I2C2_Init+0x58>)
 800064e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000650:	4b0f      	ldr	r3, [pc, #60]	; (8000690 <MX_I2C2_Init+0x50>)
 8000652:	2200      	movs	r2, #0
 8000654:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000656:	4b0e      	ldr	r3, [pc, #56]	; (8000690 <MX_I2C2_Init+0x50>)
 8000658:	2200      	movs	r2, #0
 800065a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800065c:	4b0c      	ldr	r3, [pc, #48]	; (8000690 <MX_I2C2_Init+0x50>)
 800065e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000662:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000664:	4b0a      	ldr	r3, [pc, #40]	; (8000690 <MX_I2C2_Init+0x50>)
 8000666:	2200      	movs	r2, #0
 8000668:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800066a:	4b09      	ldr	r3, [pc, #36]	; (8000690 <MX_I2C2_Init+0x50>)
 800066c:	2200      	movs	r2, #0
 800066e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000670:	4b07      	ldr	r3, [pc, #28]	; (8000690 <MX_I2C2_Init+0x50>)
 8000672:	2200      	movs	r2, #0
 8000674:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000676:	4b06      	ldr	r3, [pc, #24]	; (8000690 <MX_I2C2_Init+0x50>)
 8000678:	2200      	movs	r2, #0
 800067a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800067c:	4804      	ldr	r0, [pc, #16]	; (8000690 <MX_I2C2_Init+0x50>)
 800067e:	f000 fd4b 	bl	8001118 <HAL_I2C_Init>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000688:	f000 f868 	bl	800075c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800068c:	bf00      	nop
 800068e:	bd80      	pop	{r7, pc}
 8000690:	2000016c 	.word	0x2000016c
 8000694:	40005800 	.word	0x40005800
 8000698:	000186a0 	.word	0x000186a0

0800069c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b08a      	sub	sp, #40	; 0x28
 80006a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a2:	f107 0314 	add.w	r3, r7, #20
 80006a6:	2200      	movs	r2, #0
 80006a8:	601a      	str	r2, [r3, #0]
 80006aa:	605a      	str	r2, [r3, #4]
 80006ac:	609a      	str	r2, [r3, #8]
 80006ae:	60da      	str	r2, [r3, #12]
 80006b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006b2:	2300      	movs	r3, #0
 80006b4:	613b      	str	r3, [r7, #16]
 80006b6:	4b27      	ldr	r3, [pc, #156]	; (8000754 <MX_GPIO_Init+0xb8>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	4a26      	ldr	r2, [pc, #152]	; (8000754 <MX_GPIO_Init+0xb8>)
 80006bc:	f043 0304 	orr.w	r3, r3, #4
 80006c0:	6313      	str	r3, [r2, #48]	; 0x30
 80006c2:	4b24      	ldr	r3, [pc, #144]	; (8000754 <MX_GPIO_Init+0xb8>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	f003 0304 	and.w	r3, r3, #4
 80006ca:	613b      	str	r3, [r7, #16]
 80006cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ce:	2300      	movs	r3, #0
 80006d0:	60fb      	str	r3, [r7, #12]
 80006d2:	4b20      	ldr	r3, [pc, #128]	; (8000754 <MX_GPIO_Init+0xb8>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	4a1f      	ldr	r2, [pc, #124]	; (8000754 <MX_GPIO_Init+0xb8>)
 80006d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006dc:	6313      	str	r3, [r2, #48]	; 0x30
 80006de:	4b1d      	ldr	r3, [pc, #116]	; (8000754 <MX_GPIO_Init+0xb8>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006e6:	60fb      	str	r3, [r7, #12]
 80006e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ea:	2300      	movs	r3, #0
 80006ec:	60bb      	str	r3, [r7, #8]
 80006ee:	4b19      	ldr	r3, [pc, #100]	; (8000754 <MX_GPIO_Init+0xb8>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	4a18      	ldr	r2, [pc, #96]	; (8000754 <MX_GPIO_Init+0xb8>)
 80006f4:	f043 0302 	orr.w	r3, r3, #2
 80006f8:	6313      	str	r3, [r2, #48]	; 0x30
 80006fa:	4b16      	ldr	r3, [pc, #88]	; (8000754 <MX_GPIO_Init+0xb8>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	f003 0302 	and.w	r3, r3, #2
 8000702:	60bb      	str	r3, [r7, #8]
 8000704:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000706:	2300      	movs	r3, #0
 8000708:	607b      	str	r3, [r7, #4]
 800070a:	4b12      	ldr	r3, [pc, #72]	; (8000754 <MX_GPIO_Init+0xb8>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	4a11      	ldr	r2, [pc, #68]	; (8000754 <MX_GPIO_Init+0xb8>)
 8000710:	f043 0301 	orr.w	r3, r3, #1
 8000714:	6313      	str	r3, [r2, #48]	; 0x30
 8000716:	4b0f      	ldr	r3, [pc, #60]	; (8000754 <MX_GPIO_Init+0xb8>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	f003 0301 	and.w	r3, r3, #1
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000722:	2200      	movs	r2, #0
 8000724:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000728:	480b      	ldr	r0, [pc, #44]	; (8000758 <MX_GPIO_Init+0xbc>)
 800072a:	f000 fcc1 	bl	80010b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800072e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000732:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000734:	2301      	movs	r3, #1
 8000736:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000738:	2300      	movs	r3, #0
 800073a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073c:	2300      	movs	r3, #0
 800073e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000740:	f107 0314 	add.w	r3, r7, #20
 8000744:	4619      	mov	r1, r3
 8000746:	4804      	ldr	r0, [pc, #16]	; (8000758 <MX_GPIO_Init+0xbc>)
 8000748:	f000 fb2e 	bl	8000da8 <HAL_GPIO_Init>

}
 800074c:	bf00      	nop
 800074e:	3728      	adds	r7, #40	; 0x28
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	40023800 	.word	0x40023800
 8000758:	40020800 	.word	0x40020800

0800075c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000760:	b672      	cpsid	i
}
 8000762:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000764:	e7fe      	b.n	8000764 <Error_Handler+0x8>
	...

08000768 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000768:	b480      	push	{r7}
 800076a:	b083      	sub	sp, #12
 800076c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	607b      	str	r3, [r7, #4]
 8000772:	4b10      	ldr	r3, [pc, #64]	; (80007b4 <HAL_MspInit+0x4c>)
 8000774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000776:	4a0f      	ldr	r2, [pc, #60]	; (80007b4 <HAL_MspInit+0x4c>)
 8000778:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800077c:	6453      	str	r3, [r2, #68]	; 0x44
 800077e:	4b0d      	ldr	r3, [pc, #52]	; (80007b4 <HAL_MspInit+0x4c>)
 8000780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000782:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000786:	607b      	str	r3, [r7, #4]
 8000788:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	603b      	str	r3, [r7, #0]
 800078e:	4b09      	ldr	r3, [pc, #36]	; (80007b4 <HAL_MspInit+0x4c>)
 8000790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000792:	4a08      	ldr	r2, [pc, #32]	; (80007b4 <HAL_MspInit+0x4c>)
 8000794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000798:	6413      	str	r3, [r2, #64]	; 0x40
 800079a:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <HAL_MspInit+0x4c>)
 800079c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800079e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007a2:	603b      	str	r3, [r7, #0]
 80007a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007a6:	bf00      	nop
 80007a8:	370c      	adds	r7, #12
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	40023800 	.word	0x40023800

080007b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b08c      	sub	sp, #48	; 0x30
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c0:	f107 031c 	add.w	r3, r7, #28
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
 80007c8:	605a      	str	r2, [r3, #4]
 80007ca:	609a      	str	r2, [r3, #8]
 80007cc:	60da      	str	r2, [r3, #12]
 80007ce:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a42      	ldr	r2, [pc, #264]	; (80008e0 <HAL_I2C_MspInit+0x128>)
 80007d6:	4293      	cmp	r3, r2
 80007d8:	d13c      	bne.n	8000854 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	61bb      	str	r3, [r7, #24]
 80007de:	4b41      	ldr	r3, [pc, #260]	; (80008e4 <HAL_I2C_MspInit+0x12c>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a40      	ldr	r2, [pc, #256]	; (80008e4 <HAL_I2C_MspInit+0x12c>)
 80007e4:	f043 0302 	orr.w	r3, r3, #2
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b3e      	ldr	r3, [pc, #248]	; (80008e4 <HAL_I2C_MspInit+0x12c>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0302 	and.w	r3, r3, #2
 80007f2:	61bb      	str	r3, [r7, #24]
 80007f4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80007f6:	23c0      	movs	r3, #192	; 0xc0
 80007f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007fa:	2312      	movs	r3, #18
 80007fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	2300      	movs	r3, #0
 8000800:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000802:	2303      	movs	r3, #3
 8000804:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000806:	2304      	movs	r3, #4
 8000808:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800080a:	f107 031c 	add.w	r3, r7, #28
 800080e:	4619      	mov	r1, r3
 8000810:	4835      	ldr	r0, [pc, #212]	; (80008e8 <HAL_I2C_MspInit+0x130>)
 8000812:	f000 fac9 	bl	8000da8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	617b      	str	r3, [r7, #20]
 800081a:	4b32      	ldr	r3, [pc, #200]	; (80008e4 <HAL_I2C_MspInit+0x12c>)
 800081c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081e:	4a31      	ldr	r2, [pc, #196]	; (80008e4 <HAL_I2C_MspInit+0x12c>)
 8000820:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000824:	6413      	str	r3, [r2, #64]	; 0x40
 8000826:	4b2f      	ldr	r3, [pc, #188]	; (80008e4 <HAL_I2C_MspInit+0x12c>)
 8000828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800082e:	617b      	str	r3, [r7, #20]
 8000830:	697b      	ldr	r3, [r7, #20]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000832:	2200      	movs	r2, #0
 8000834:	2100      	movs	r1, #0
 8000836:	201f      	movs	r0, #31
 8000838:	f000 fa4f 	bl	8000cda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800083c:	201f      	movs	r0, #31
 800083e:	f000 fa68 	bl	8000d12 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000842:	2200      	movs	r2, #0
 8000844:	2100      	movs	r1, #0
 8000846:	2020      	movs	r0, #32
 8000848:	f000 fa47 	bl	8000cda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800084c:	2020      	movs	r0, #32
 800084e:	f000 fa60 	bl	8000d12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000852:	e041      	b.n	80008d8 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C2)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a24      	ldr	r2, [pc, #144]	; (80008ec <HAL_I2C_MspInit+0x134>)
 800085a:	4293      	cmp	r3, r2
 800085c:	d13c      	bne.n	80008d8 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	613b      	str	r3, [r7, #16]
 8000862:	4b20      	ldr	r3, [pc, #128]	; (80008e4 <HAL_I2C_MspInit+0x12c>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	4a1f      	ldr	r2, [pc, #124]	; (80008e4 <HAL_I2C_MspInit+0x12c>)
 8000868:	f043 0302 	orr.w	r3, r3, #2
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
 800086e:	4b1d      	ldr	r3, [pc, #116]	; (80008e4 <HAL_I2C_MspInit+0x12c>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	f003 0302 	and.w	r3, r3, #2
 8000876:	613b      	str	r3, [r7, #16]
 8000878:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800087a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800087e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000880:	2312      	movs	r3, #18
 8000882:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000888:	2303      	movs	r3, #3
 800088a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800088c:	2304      	movs	r3, #4
 800088e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000890:	f107 031c 	add.w	r3, r7, #28
 8000894:	4619      	mov	r1, r3
 8000896:	4814      	ldr	r0, [pc, #80]	; (80008e8 <HAL_I2C_MspInit+0x130>)
 8000898:	f000 fa86 	bl	8000da8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800089c:	2308      	movs	r3, #8
 800089e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008a0:	2312      	movs	r3, #18
 80008a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a8:	2303      	movs	r3, #3
 80008aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 80008ac:	2309      	movs	r3, #9
 80008ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b0:	f107 031c 	add.w	r3, r7, #28
 80008b4:	4619      	mov	r1, r3
 80008b6:	480c      	ldr	r0, [pc, #48]	; (80008e8 <HAL_I2C_MspInit+0x130>)
 80008b8:	f000 fa76 	bl	8000da8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80008bc:	2300      	movs	r3, #0
 80008be:	60fb      	str	r3, [r7, #12]
 80008c0:	4b08      	ldr	r3, [pc, #32]	; (80008e4 <HAL_I2C_MspInit+0x12c>)
 80008c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c4:	4a07      	ldr	r2, [pc, #28]	; (80008e4 <HAL_I2C_MspInit+0x12c>)
 80008c6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008ca:	6413      	str	r3, [r2, #64]	; 0x40
 80008cc:	4b05      	ldr	r3, [pc, #20]	; (80008e4 <HAL_I2C_MspInit+0x12c>)
 80008ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80008d4:	60fb      	str	r3, [r7, #12]
 80008d6:	68fb      	ldr	r3, [r7, #12]
}
 80008d8:	bf00      	nop
 80008da:	3730      	adds	r7, #48	; 0x30
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	40005400 	.word	0x40005400
 80008e4:	40023800 	.word	0x40023800
 80008e8:	40020400 	.word	0x40020400
 80008ec:	40005800 	.word	0x40005800

080008f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008f4:	e7fe      	b.n	80008f4 <NMI_Handler+0x4>

080008f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008f6:	b480      	push	{r7}
 80008f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008fa:	e7fe      	b.n	80008fa <HardFault_Handler+0x4>

080008fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000900:	e7fe      	b.n	8000900 <MemManage_Handler+0x4>

08000902 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000902:	b480      	push	{r7}
 8000904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000906:	e7fe      	b.n	8000906 <BusFault_Handler+0x4>

08000908 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800090c:	e7fe      	b.n	800090c <UsageFault_Handler+0x4>

0800090e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800090e:	b480      	push	{r7}
 8000910:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000912:	bf00      	nop
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr

0800091c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000920:	bf00      	nop
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr

0800092a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800092a:	b480      	push	{r7}
 800092c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800092e:	bf00      	nop
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr

08000938 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800093c:	f000 f8ae 	bl	8000a9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000940:	bf00      	nop
 8000942:	bd80      	pop	{r7, pc}

08000944 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000948:	4802      	ldr	r0, [pc, #8]	; (8000954 <I2C1_EV_IRQHandler+0x10>)
 800094a:	f000 fd29 	bl	80013a0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800094e:	bf00      	nop
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	20000118 	.word	0x20000118

08000958 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800095c:	4802      	ldr	r0, [pc, #8]	; (8000968 <I2C1_ER_IRQHandler+0x10>)
 800095e:	f000 fe90 	bl	8001682 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	20000118 	.word	0x20000118

0800096c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000970:	4802      	ldr	r0, [pc, #8]	; (800097c <OTG_FS_IRQHandler+0x10>)
 8000972:	f002 fb40 	bl	8002ff6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000976:	bf00      	nop
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	20000ea4 	.word	0x20000ea4

08000980 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000984:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <SystemInit+0x20>)
 8000986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800098a:	4a05      	ldr	r2, [pc, #20]	; (80009a0 <SystemInit+0x20>)
 800098c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000990:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000994:	bf00      	nop
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	e000ed00 	.word	0xe000ed00

080009a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80009a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009dc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009a8:	480d      	ldr	r0, [pc, #52]	; (80009e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009aa:	490e      	ldr	r1, [pc, #56]	; (80009e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009ac:	4a0e      	ldr	r2, [pc, #56]	; (80009e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009b0:	e002      	b.n	80009b8 <LoopCopyDataInit>

080009b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009b6:	3304      	adds	r3, #4

080009b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009bc:	d3f9      	bcc.n	80009b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009be:	4a0b      	ldr	r2, [pc, #44]	; (80009ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009c0:	4c0b      	ldr	r4, [pc, #44]	; (80009f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80009c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009c4:	e001      	b.n	80009ca <LoopFillZerobss>

080009c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009c8:	3204      	adds	r2, #4

080009ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009cc:	d3fb      	bcc.n	80009c6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80009ce:	f7ff ffd7 	bl	8000980 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009d2:	f008 f93b 	bl	8008c4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009d6:	f7ff fd7f 	bl	80004d8 <main>
  bx  lr    
 80009da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80009dc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80009e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009e4:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 80009e8:	08008d28 	.word	0x08008d28
  ldr r2, =_sbss
 80009ec:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 80009f0:	200015d0 	.word	0x200015d0

080009f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009f4:	e7fe      	b.n	80009f4 <ADC_IRQHandler>
	...

080009f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009fc:	4b0e      	ldr	r3, [pc, #56]	; (8000a38 <HAL_Init+0x40>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a0d      	ldr	r2, [pc, #52]	; (8000a38 <HAL_Init+0x40>)
 8000a02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a08:	4b0b      	ldr	r3, [pc, #44]	; (8000a38 <HAL_Init+0x40>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a0a      	ldr	r2, [pc, #40]	; (8000a38 <HAL_Init+0x40>)
 8000a0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a14:	4b08      	ldr	r3, [pc, #32]	; (8000a38 <HAL_Init+0x40>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a07      	ldr	r2, [pc, #28]	; (8000a38 <HAL_Init+0x40>)
 8000a1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a20:	2003      	movs	r0, #3
 8000a22:	f000 f94f 	bl	8000cc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a26:	200f      	movs	r0, #15
 8000a28:	f000 f808 	bl	8000a3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a2c:	f7ff fe9c 	bl	8000768 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a30:	2300      	movs	r3, #0
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	40023c00 	.word	0x40023c00

08000a3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a44:	4b12      	ldr	r3, [pc, #72]	; (8000a90 <HAL_InitTick+0x54>)
 8000a46:	681a      	ldr	r2, [r3, #0]
 8000a48:	4b12      	ldr	r3, [pc, #72]	; (8000a94 <HAL_InitTick+0x58>)
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a52:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f000 f967 	bl	8000d2e <HAL_SYSTICK_Config>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a66:	2301      	movs	r3, #1
 8000a68:	e00e      	b.n	8000a88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	2b0f      	cmp	r3, #15
 8000a6e:	d80a      	bhi.n	8000a86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a70:	2200      	movs	r2, #0
 8000a72:	6879      	ldr	r1, [r7, #4]
 8000a74:	f04f 30ff 	mov.w	r0, #4294967295
 8000a78:	f000 f92f 	bl	8000cda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a7c:	4a06      	ldr	r2, [pc, #24]	; (8000a98 <HAL_InitTick+0x5c>)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a82:	2300      	movs	r3, #0
 8000a84:	e000      	b.n	8000a88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a86:	2301      	movs	r3, #1
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	3708      	adds	r7, #8
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	20000000 	.word	0x20000000
 8000a94:	20000008 	.word	0x20000008
 8000a98:	20000004 	.word	0x20000004

08000a9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000aa0:	4b06      	ldr	r3, [pc, #24]	; (8000abc <HAL_IncTick+0x20>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	461a      	mov	r2, r3
 8000aa6:	4b06      	ldr	r3, [pc, #24]	; (8000ac0 <HAL_IncTick+0x24>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	4413      	add	r3, r2
 8000aac:	4a04      	ldr	r2, [pc, #16]	; (8000ac0 <HAL_IncTick+0x24>)
 8000aae:	6013      	str	r3, [r2, #0]
}
 8000ab0:	bf00      	nop
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	20000008 	.word	0x20000008
 8000ac0:	200001c0 	.word	0x200001c0

08000ac4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ac8:	4b03      	ldr	r3, [pc, #12]	; (8000ad8 <HAL_GetTick+0x14>)
 8000aca:	681b      	ldr	r3, [r3, #0]
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	200001c0 	.word	0x200001c0

08000adc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b084      	sub	sp, #16
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ae4:	f7ff ffee 	bl	8000ac4 <HAL_GetTick>
 8000ae8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000af4:	d005      	beq.n	8000b02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000af6:	4b0a      	ldr	r3, [pc, #40]	; (8000b20 <HAL_Delay+0x44>)
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	461a      	mov	r2, r3
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	4413      	add	r3, r2
 8000b00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b02:	bf00      	nop
 8000b04:	f7ff ffde 	bl	8000ac4 <HAL_GetTick>
 8000b08:	4602      	mov	r2, r0
 8000b0a:	68bb      	ldr	r3, [r7, #8]
 8000b0c:	1ad3      	subs	r3, r2, r3
 8000b0e:	68fa      	ldr	r2, [r7, #12]
 8000b10:	429a      	cmp	r2, r3
 8000b12:	d8f7      	bhi.n	8000b04 <HAL_Delay+0x28>
  {
  }
}
 8000b14:	bf00      	nop
 8000b16:	bf00      	nop
 8000b18:	3710      	adds	r7, #16
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	20000008 	.word	0x20000008

08000b24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b085      	sub	sp, #20
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	f003 0307 	and.w	r3, r3, #7
 8000b32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b34:	4b0c      	ldr	r3, [pc, #48]	; (8000b68 <__NVIC_SetPriorityGrouping+0x44>)
 8000b36:	68db      	ldr	r3, [r3, #12]
 8000b38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b3a:	68ba      	ldr	r2, [r7, #8]
 8000b3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b40:	4013      	ands	r3, r2
 8000b42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b48:	68bb      	ldr	r3, [r7, #8]
 8000b4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b56:	4a04      	ldr	r2, [pc, #16]	; (8000b68 <__NVIC_SetPriorityGrouping+0x44>)
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	60d3      	str	r3, [r2, #12]
}
 8000b5c:	bf00      	nop
 8000b5e:	3714      	adds	r7, #20
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr
 8000b68:	e000ed00 	.word	0xe000ed00

08000b6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b70:	4b04      	ldr	r3, [pc, #16]	; (8000b84 <__NVIC_GetPriorityGrouping+0x18>)
 8000b72:	68db      	ldr	r3, [r3, #12]
 8000b74:	0a1b      	lsrs	r3, r3, #8
 8000b76:	f003 0307 	and.w	r3, r3, #7
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr
 8000b84:	e000ed00 	.word	0xe000ed00

08000b88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	4603      	mov	r3, r0
 8000b90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	db0b      	blt.n	8000bb2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b9a:	79fb      	ldrb	r3, [r7, #7]
 8000b9c:	f003 021f 	and.w	r2, r3, #31
 8000ba0:	4907      	ldr	r1, [pc, #28]	; (8000bc0 <__NVIC_EnableIRQ+0x38>)
 8000ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba6:	095b      	lsrs	r3, r3, #5
 8000ba8:	2001      	movs	r0, #1
 8000baa:	fa00 f202 	lsl.w	r2, r0, r2
 8000bae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bb2:	bf00      	nop
 8000bb4:	370c      	adds	r7, #12
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	e000e100 	.word	0xe000e100

08000bc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	4603      	mov	r3, r0
 8000bcc:	6039      	str	r1, [r7, #0]
 8000bce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	db0a      	blt.n	8000bee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	b2da      	uxtb	r2, r3
 8000bdc:	490c      	ldr	r1, [pc, #48]	; (8000c10 <__NVIC_SetPriority+0x4c>)
 8000bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be2:	0112      	lsls	r2, r2, #4
 8000be4:	b2d2      	uxtb	r2, r2
 8000be6:	440b      	add	r3, r1
 8000be8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bec:	e00a      	b.n	8000c04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	b2da      	uxtb	r2, r3
 8000bf2:	4908      	ldr	r1, [pc, #32]	; (8000c14 <__NVIC_SetPriority+0x50>)
 8000bf4:	79fb      	ldrb	r3, [r7, #7]
 8000bf6:	f003 030f 	and.w	r3, r3, #15
 8000bfa:	3b04      	subs	r3, #4
 8000bfc:	0112      	lsls	r2, r2, #4
 8000bfe:	b2d2      	uxtb	r2, r2
 8000c00:	440b      	add	r3, r1
 8000c02:	761a      	strb	r2, [r3, #24]
}
 8000c04:	bf00      	nop
 8000c06:	370c      	adds	r7, #12
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr
 8000c10:	e000e100 	.word	0xe000e100
 8000c14:	e000ed00 	.word	0xe000ed00

08000c18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b089      	sub	sp, #36	; 0x24
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	60f8      	str	r0, [r7, #12]
 8000c20:	60b9      	str	r1, [r7, #8]
 8000c22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	f003 0307 	and.w	r3, r3, #7
 8000c2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c2c:	69fb      	ldr	r3, [r7, #28]
 8000c2e:	f1c3 0307 	rsb	r3, r3, #7
 8000c32:	2b04      	cmp	r3, #4
 8000c34:	bf28      	it	cs
 8000c36:	2304      	movcs	r3, #4
 8000c38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c3a:	69fb      	ldr	r3, [r7, #28]
 8000c3c:	3304      	adds	r3, #4
 8000c3e:	2b06      	cmp	r3, #6
 8000c40:	d902      	bls.n	8000c48 <NVIC_EncodePriority+0x30>
 8000c42:	69fb      	ldr	r3, [r7, #28]
 8000c44:	3b03      	subs	r3, #3
 8000c46:	e000      	b.n	8000c4a <NVIC_EncodePriority+0x32>
 8000c48:	2300      	movs	r3, #0
 8000c4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c4c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c50:	69bb      	ldr	r3, [r7, #24]
 8000c52:	fa02 f303 	lsl.w	r3, r2, r3
 8000c56:	43da      	mvns	r2, r3
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	401a      	ands	r2, r3
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c60:	f04f 31ff 	mov.w	r1, #4294967295
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	fa01 f303 	lsl.w	r3, r1, r3
 8000c6a:	43d9      	mvns	r1, r3
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c70:	4313      	orrs	r3, r2
         );
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3724      	adds	r7, #36	; 0x24
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
	...

08000c80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	3b01      	subs	r3, #1
 8000c8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c90:	d301      	bcc.n	8000c96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c92:	2301      	movs	r3, #1
 8000c94:	e00f      	b.n	8000cb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c96:	4a0a      	ldr	r2, [pc, #40]	; (8000cc0 <SysTick_Config+0x40>)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	3b01      	subs	r3, #1
 8000c9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c9e:	210f      	movs	r1, #15
 8000ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ca4:	f7ff ff8e 	bl	8000bc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ca8:	4b05      	ldr	r3, [pc, #20]	; (8000cc0 <SysTick_Config+0x40>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cae:	4b04      	ldr	r3, [pc, #16]	; (8000cc0 <SysTick_Config+0x40>)
 8000cb0:	2207      	movs	r2, #7
 8000cb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cb4:	2300      	movs	r3, #0
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	e000e010 	.word	0xe000e010

08000cc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ccc:	6878      	ldr	r0, [r7, #4]
 8000cce:	f7ff ff29 	bl	8000b24 <__NVIC_SetPriorityGrouping>
}
 8000cd2:	bf00      	nop
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}

08000cda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	b086      	sub	sp, #24
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	60b9      	str	r1, [r7, #8]
 8000ce4:	607a      	str	r2, [r7, #4]
 8000ce6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cec:	f7ff ff3e 	bl	8000b6c <__NVIC_GetPriorityGrouping>
 8000cf0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cf2:	687a      	ldr	r2, [r7, #4]
 8000cf4:	68b9      	ldr	r1, [r7, #8]
 8000cf6:	6978      	ldr	r0, [r7, #20]
 8000cf8:	f7ff ff8e 	bl	8000c18 <NVIC_EncodePriority>
 8000cfc:	4602      	mov	r2, r0
 8000cfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d02:	4611      	mov	r1, r2
 8000d04:	4618      	mov	r0, r3
 8000d06:	f7ff ff5d 	bl	8000bc4 <__NVIC_SetPriority>
}
 8000d0a:	bf00      	nop
 8000d0c:	3718      	adds	r7, #24
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b082      	sub	sp, #8
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	4603      	mov	r3, r0
 8000d1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff ff31 	bl	8000b88 <__NVIC_EnableIRQ>
}
 8000d26:	bf00      	nop
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}

08000d2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	b082      	sub	sp, #8
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d36:	6878      	ldr	r0, [r7, #4]
 8000d38:	f7ff ffa2 	bl	8000c80 <SysTick_Config>
 8000d3c:	4603      	mov	r3, r0
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000d46:	b480      	push	{r7}
 8000d48:	b083      	sub	sp, #12
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000d54:	b2db      	uxtb	r3, r3
 8000d56:	2b02      	cmp	r3, #2
 8000d58:	d004      	beq.n	8000d64 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2280      	movs	r2, #128	; 0x80
 8000d5e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000d60:	2301      	movs	r3, #1
 8000d62:	e00c      	b.n	8000d7e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2205      	movs	r2, #5
 8000d68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f022 0201 	bic.w	r2, r2, #1
 8000d7a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000d7c:	2300      	movs	r3, #0
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	370c      	adds	r7, #12
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr

08000d8a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	b083      	sub	sp, #12
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000d98:	b2db      	uxtb	r3, r3
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	370c      	adds	r7, #12
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
	...

08000da8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b089      	sub	sp, #36	; 0x24
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
 8000db0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000db2:	2300      	movs	r3, #0
 8000db4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000db6:	2300      	movs	r3, #0
 8000db8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	61fb      	str	r3, [r7, #28]
 8000dc2:	e159      	b.n	8001078 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dcc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	697a      	ldr	r2, [r7, #20]
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000dd8:	693a      	ldr	r2, [r7, #16]
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	f040 8148 	bne.w	8001072 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	f003 0303 	and.w	r3, r3, #3
 8000dea:	2b01      	cmp	r3, #1
 8000dec:	d005      	beq.n	8000dfa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000df6:	2b02      	cmp	r3, #2
 8000df8:	d130      	bne.n	8000e5c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	689b      	ldr	r3, [r3, #8]
 8000dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e00:	69fb      	ldr	r3, [r7, #28]
 8000e02:	005b      	lsls	r3, r3, #1
 8000e04:	2203      	movs	r2, #3
 8000e06:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0a:	43db      	mvns	r3, r3
 8000e0c:	69ba      	ldr	r2, [r7, #24]
 8000e0e:	4013      	ands	r3, r2
 8000e10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	68da      	ldr	r2, [r3, #12]
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	005b      	lsls	r3, r3, #1
 8000e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1e:	69ba      	ldr	r2, [r7, #24]
 8000e20:	4313      	orrs	r3, r2
 8000e22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	69ba      	ldr	r2, [r7, #24]
 8000e28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e30:	2201      	movs	r2, #1
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	fa02 f303 	lsl.w	r3, r2, r3
 8000e38:	43db      	mvns	r3, r3
 8000e3a:	69ba      	ldr	r2, [r7, #24]
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	091b      	lsrs	r3, r3, #4
 8000e46:	f003 0201 	and.w	r2, r3, #1
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e50:	69ba      	ldr	r2, [r7, #24]
 8000e52:	4313      	orrs	r3, r2
 8000e54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	69ba      	ldr	r2, [r7, #24]
 8000e5a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	f003 0303 	and.w	r3, r3, #3
 8000e64:	2b03      	cmp	r3, #3
 8000e66:	d017      	beq.n	8000e98 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	68db      	ldr	r3, [r3, #12]
 8000e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	005b      	lsls	r3, r3, #1
 8000e72:	2203      	movs	r2, #3
 8000e74:	fa02 f303 	lsl.w	r3, r2, r3
 8000e78:	43db      	mvns	r3, r3
 8000e7a:	69ba      	ldr	r2, [r7, #24]
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	689a      	ldr	r2, [r3, #8]
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	005b      	lsls	r3, r3, #1
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f003 0303 	and.w	r3, r3, #3
 8000ea0:	2b02      	cmp	r3, #2
 8000ea2:	d123      	bne.n	8000eec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	08da      	lsrs	r2, r3, #3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	3208      	adds	r2, #8
 8000eac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	f003 0307 	and.w	r3, r3, #7
 8000eb8:	009b      	lsls	r3, r3, #2
 8000eba:	220f      	movs	r2, #15
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	43db      	mvns	r3, r3
 8000ec2:	69ba      	ldr	r2, [r7, #24]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	691a      	ldr	r2, [r3, #16]
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	f003 0307 	and.w	r3, r3, #7
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	08da      	lsrs	r2, r3, #3
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	3208      	adds	r2, #8
 8000ee6:	69b9      	ldr	r1, [r7, #24]
 8000ee8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	005b      	lsls	r3, r3, #1
 8000ef6:	2203      	movs	r2, #3
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	43db      	mvns	r3, r3
 8000efe:	69ba      	ldr	r2, [r7, #24]
 8000f00:	4013      	ands	r3, r2
 8000f02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	f003 0203 	and.w	r2, r3, #3
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	005b      	lsls	r3, r3, #1
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	4313      	orrs	r3, r2
 8000f18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	f000 80a2 	beq.w	8001072 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60fb      	str	r3, [r7, #12]
 8000f32:	4b57      	ldr	r3, [pc, #348]	; (8001090 <HAL_GPIO_Init+0x2e8>)
 8000f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f36:	4a56      	ldr	r2, [pc, #344]	; (8001090 <HAL_GPIO_Init+0x2e8>)
 8000f38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f3e:	4b54      	ldr	r3, [pc, #336]	; (8001090 <HAL_GPIO_Init+0x2e8>)
 8000f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f4a:	4a52      	ldr	r2, [pc, #328]	; (8001094 <HAL_GPIO_Init+0x2ec>)
 8000f4c:	69fb      	ldr	r3, [r7, #28]
 8000f4e:	089b      	lsrs	r3, r3, #2
 8000f50:	3302      	adds	r3, #2
 8000f52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	f003 0303 	and.w	r3, r3, #3
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	220f      	movs	r2, #15
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	43db      	mvns	r3, r3
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a49      	ldr	r2, [pc, #292]	; (8001098 <HAL_GPIO_Init+0x2f0>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d019      	beq.n	8000faa <HAL_GPIO_Init+0x202>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4a48      	ldr	r2, [pc, #288]	; (800109c <HAL_GPIO_Init+0x2f4>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d013      	beq.n	8000fa6 <HAL_GPIO_Init+0x1fe>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4a47      	ldr	r2, [pc, #284]	; (80010a0 <HAL_GPIO_Init+0x2f8>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d00d      	beq.n	8000fa2 <HAL_GPIO_Init+0x1fa>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4a46      	ldr	r2, [pc, #280]	; (80010a4 <HAL_GPIO_Init+0x2fc>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d007      	beq.n	8000f9e <HAL_GPIO_Init+0x1f6>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4a45      	ldr	r2, [pc, #276]	; (80010a8 <HAL_GPIO_Init+0x300>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d101      	bne.n	8000f9a <HAL_GPIO_Init+0x1f2>
 8000f96:	2304      	movs	r3, #4
 8000f98:	e008      	b.n	8000fac <HAL_GPIO_Init+0x204>
 8000f9a:	2307      	movs	r3, #7
 8000f9c:	e006      	b.n	8000fac <HAL_GPIO_Init+0x204>
 8000f9e:	2303      	movs	r3, #3
 8000fa0:	e004      	b.n	8000fac <HAL_GPIO_Init+0x204>
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	e002      	b.n	8000fac <HAL_GPIO_Init+0x204>
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e000      	b.n	8000fac <HAL_GPIO_Init+0x204>
 8000faa:	2300      	movs	r3, #0
 8000fac:	69fa      	ldr	r2, [r7, #28]
 8000fae:	f002 0203 	and.w	r2, r2, #3
 8000fb2:	0092      	lsls	r2, r2, #2
 8000fb4:	4093      	lsls	r3, r2
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fbc:	4935      	ldr	r1, [pc, #212]	; (8001094 <HAL_GPIO_Init+0x2ec>)
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	089b      	lsrs	r3, r3, #2
 8000fc2:	3302      	adds	r3, #2
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fca:	4b38      	ldr	r3, [pc, #224]	; (80010ac <HAL_GPIO_Init+0x304>)
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	43db      	mvns	r3, r3
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d003      	beq.n	8000fee <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000fe6:	69ba      	ldr	r2, [r7, #24]
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fee:	4a2f      	ldr	r2, [pc, #188]	; (80010ac <HAL_GPIO_Init+0x304>)
 8000ff0:	69bb      	ldr	r3, [r7, #24]
 8000ff2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ff4:	4b2d      	ldr	r3, [pc, #180]	; (80010ac <HAL_GPIO_Init+0x304>)
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	43db      	mvns	r3, r3
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	4013      	ands	r3, r2
 8001002:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800100c:	2b00      	cmp	r3, #0
 800100e:	d003      	beq.n	8001018 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	4313      	orrs	r3, r2
 8001016:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001018:	4a24      	ldr	r2, [pc, #144]	; (80010ac <HAL_GPIO_Init+0x304>)
 800101a:	69bb      	ldr	r3, [r7, #24]
 800101c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800101e:	4b23      	ldr	r3, [pc, #140]	; (80010ac <HAL_GPIO_Init+0x304>)
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	43db      	mvns	r3, r3
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	4013      	ands	r3, r2
 800102c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001036:	2b00      	cmp	r3, #0
 8001038:	d003      	beq.n	8001042 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800103a:	69ba      	ldr	r2, [r7, #24]
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	4313      	orrs	r3, r2
 8001040:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001042:	4a1a      	ldr	r2, [pc, #104]	; (80010ac <HAL_GPIO_Init+0x304>)
 8001044:	69bb      	ldr	r3, [r7, #24]
 8001046:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001048:	4b18      	ldr	r3, [pc, #96]	; (80010ac <HAL_GPIO_Init+0x304>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	43db      	mvns	r3, r3
 8001052:	69ba      	ldr	r2, [r7, #24]
 8001054:	4013      	ands	r3, r2
 8001056:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001060:	2b00      	cmp	r3, #0
 8001062:	d003      	beq.n	800106c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	4313      	orrs	r3, r2
 800106a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800106c:	4a0f      	ldr	r2, [pc, #60]	; (80010ac <HAL_GPIO_Init+0x304>)
 800106e:	69bb      	ldr	r3, [r7, #24]
 8001070:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	3301      	adds	r3, #1
 8001076:	61fb      	str	r3, [r7, #28]
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	2b0f      	cmp	r3, #15
 800107c:	f67f aea2 	bls.w	8000dc4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001080:	bf00      	nop
 8001082:	bf00      	nop
 8001084:	3724      	adds	r7, #36	; 0x24
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	40023800 	.word	0x40023800
 8001094:	40013800 	.word	0x40013800
 8001098:	40020000 	.word	0x40020000
 800109c:	40020400 	.word	0x40020400
 80010a0:	40020800 	.word	0x40020800
 80010a4:	40020c00 	.word	0x40020c00
 80010a8:	40021000 	.word	0x40021000
 80010ac:	40013c00 	.word	0x40013c00

080010b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	460b      	mov	r3, r1
 80010ba:	807b      	strh	r3, [r7, #2]
 80010bc:	4613      	mov	r3, r2
 80010be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010c0:	787b      	ldrb	r3, [r7, #1]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d003      	beq.n	80010ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010c6:	887a      	ldrh	r2, [r7, #2]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010cc:	e003      	b.n	80010d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010ce:	887b      	ldrh	r3, [r7, #2]
 80010d0:	041a      	lsls	r2, r3, #16
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	619a      	str	r2, [r3, #24]
}
 80010d6:	bf00      	nop
 80010d8:	370c      	adds	r7, #12
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr

080010e2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010e2:	b480      	push	{r7}
 80010e4:	b085      	sub	sp, #20
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
 80010ea:	460b      	mov	r3, r1
 80010ec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	695b      	ldr	r3, [r3, #20]
 80010f2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80010f4:	887a      	ldrh	r2, [r7, #2]
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	4013      	ands	r3, r2
 80010fa:	041a      	lsls	r2, r3, #16
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	43d9      	mvns	r1, r3
 8001100:	887b      	ldrh	r3, [r7, #2]
 8001102:	400b      	ands	r3, r1
 8001104:	431a      	orrs	r2, r3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	619a      	str	r2, [r3, #24]
}
 800110a:	bf00      	nop
 800110c:	3714      	adds	r7, #20
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
	...

08001118 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d101      	bne.n	800112a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	e12b      	b.n	8001382 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001130:	b2db      	uxtb	r3, r3
 8001132:	2b00      	cmp	r3, #0
 8001134:	d106      	bne.n	8001144 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2200      	movs	r2, #0
 800113a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	f7ff fb3a 	bl	80007b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2224      	movs	r2, #36	; 0x24
 8001148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f022 0201 	bic.w	r2, r2, #1
 800115a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800116a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800117a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800117c:	f003 fc98 	bl	8004ab0 <HAL_RCC_GetPCLK1Freq>
 8001180:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	4a81      	ldr	r2, [pc, #516]	; (800138c <HAL_I2C_Init+0x274>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d807      	bhi.n	800119c <HAL_I2C_Init+0x84>
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	4a80      	ldr	r2, [pc, #512]	; (8001390 <HAL_I2C_Init+0x278>)
 8001190:	4293      	cmp	r3, r2
 8001192:	bf94      	ite	ls
 8001194:	2301      	movls	r3, #1
 8001196:	2300      	movhi	r3, #0
 8001198:	b2db      	uxtb	r3, r3
 800119a:	e006      	b.n	80011aa <HAL_I2C_Init+0x92>
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	4a7d      	ldr	r2, [pc, #500]	; (8001394 <HAL_I2C_Init+0x27c>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	bf94      	ite	ls
 80011a4:	2301      	movls	r3, #1
 80011a6:	2300      	movhi	r3, #0
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	e0e7      	b.n	8001382 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	4a78      	ldr	r2, [pc, #480]	; (8001398 <HAL_I2C_Init+0x280>)
 80011b6:	fba2 2303 	umull	r2, r3, r2, r3
 80011ba:	0c9b      	lsrs	r3, r3, #18
 80011bc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	68ba      	ldr	r2, [r7, #8]
 80011ce:	430a      	orrs	r2, r1
 80011d0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	6a1b      	ldr	r3, [r3, #32]
 80011d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	4a6a      	ldr	r2, [pc, #424]	; (800138c <HAL_I2C_Init+0x274>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d802      	bhi.n	80011ec <HAL_I2C_Init+0xd4>
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	3301      	adds	r3, #1
 80011ea:	e009      	b.n	8001200 <HAL_I2C_Init+0xe8>
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80011f2:	fb02 f303 	mul.w	r3, r2, r3
 80011f6:	4a69      	ldr	r2, [pc, #420]	; (800139c <HAL_I2C_Init+0x284>)
 80011f8:	fba2 2303 	umull	r2, r3, r2, r3
 80011fc:	099b      	lsrs	r3, r3, #6
 80011fe:	3301      	adds	r3, #1
 8001200:	687a      	ldr	r2, [r7, #4]
 8001202:	6812      	ldr	r2, [r2, #0]
 8001204:	430b      	orrs	r3, r1
 8001206:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	69db      	ldr	r3, [r3, #28]
 800120e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001212:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	495c      	ldr	r1, [pc, #368]	; (800138c <HAL_I2C_Init+0x274>)
 800121c:	428b      	cmp	r3, r1
 800121e:	d819      	bhi.n	8001254 <HAL_I2C_Init+0x13c>
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	1e59      	subs	r1, r3, #1
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	005b      	lsls	r3, r3, #1
 800122a:	fbb1 f3f3 	udiv	r3, r1, r3
 800122e:	1c59      	adds	r1, r3, #1
 8001230:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001234:	400b      	ands	r3, r1
 8001236:	2b00      	cmp	r3, #0
 8001238:	d00a      	beq.n	8001250 <HAL_I2C_Init+0x138>
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	1e59      	subs	r1, r3, #1
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	fbb1 f3f3 	udiv	r3, r1, r3
 8001248:	3301      	adds	r3, #1
 800124a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800124e:	e051      	b.n	80012f4 <HAL_I2C_Init+0x1dc>
 8001250:	2304      	movs	r3, #4
 8001252:	e04f      	b.n	80012f4 <HAL_I2C_Init+0x1dc>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d111      	bne.n	8001280 <HAL_I2C_Init+0x168>
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	1e58      	subs	r0, r3, #1
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6859      	ldr	r1, [r3, #4]
 8001264:	460b      	mov	r3, r1
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	440b      	add	r3, r1
 800126a:	fbb0 f3f3 	udiv	r3, r0, r3
 800126e:	3301      	adds	r3, #1
 8001270:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001274:	2b00      	cmp	r3, #0
 8001276:	bf0c      	ite	eq
 8001278:	2301      	moveq	r3, #1
 800127a:	2300      	movne	r3, #0
 800127c:	b2db      	uxtb	r3, r3
 800127e:	e012      	b.n	80012a6 <HAL_I2C_Init+0x18e>
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	1e58      	subs	r0, r3, #1
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6859      	ldr	r1, [r3, #4]
 8001288:	460b      	mov	r3, r1
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	440b      	add	r3, r1
 800128e:	0099      	lsls	r1, r3, #2
 8001290:	440b      	add	r3, r1
 8001292:	fbb0 f3f3 	udiv	r3, r0, r3
 8001296:	3301      	adds	r3, #1
 8001298:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800129c:	2b00      	cmp	r3, #0
 800129e:	bf0c      	ite	eq
 80012a0:	2301      	moveq	r3, #1
 80012a2:	2300      	movne	r3, #0
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <HAL_I2C_Init+0x196>
 80012aa:	2301      	movs	r3, #1
 80012ac:	e022      	b.n	80012f4 <HAL_I2C_Init+0x1dc>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d10e      	bne.n	80012d4 <HAL_I2C_Init+0x1bc>
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	1e58      	subs	r0, r3, #1
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6859      	ldr	r1, [r3, #4]
 80012be:	460b      	mov	r3, r1
 80012c0:	005b      	lsls	r3, r3, #1
 80012c2:	440b      	add	r3, r1
 80012c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80012c8:	3301      	adds	r3, #1
 80012ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012d2:	e00f      	b.n	80012f4 <HAL_I2C_Init+0x1dc>
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	1e58      	subs	r0, r3, #1
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6859      	ldr	r1, [r3, #4]
 80012dc:	460b      	mov	r3, r1
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	440b      	add	r3, r1
 80012e2:	0099      	lsls	r1, r3, #2
 80012e4:	440b      	add	r3, r1
 80012e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80012ea:	3301      	adds	r3, #1
 80012ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012f4:	6879      	ldr	r1, [r7, #4]
 80012f6:	6809      	ldr	r1, [r1, #0]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	69da      	ldr	r2, [r3, #28]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6a1b      	ldr	r3, [r3, #32]
 800130e:	431a      	orrs	r2, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	430a      	orrs	r2, r1
 8001316:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001322:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001326:	687a      	ldr	r2, [r7, #4]
 8001328:	6911      	ldr	r1, [r2, #16]
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	68d2      	ldr	r2, [r2, #12]
 800132e:	4311      	orrs	r1, r2
 8001330:	687a      	ldr	r2, [r7, #4]
 8001332:	6812      	ldr	r2, [r2, #0]
 8001334:	430b      	orrs	r3, r1
 8001336:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	68db      	ldr	r3, [r3, #12]
 800133e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	695a      	ldr	r2, [r3, #20]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	699b      	ldr	r3, [r3, #24]
 800134a:	431a      	orrs	r2, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	430a      	orrs	r2, r1
 8001352:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f042 0201 	orr.w	r2, r2, #1
 8001362:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2200      	movs	r2, #0
 8001368:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2220      	movs	r2, #32
 800136e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2200      	movs	r2, #0
 8001376:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2200      	movs	r2, #0
 800137c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001380:	2300      	movs	r3, #0
}
 8001382:	4618      	mov	r0, r3
 8001384:	3710      	adds	r7, #16
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	000186a0 	.word	0x000186a0
 8001390:	001e847f 	.word	0x001e847f
 8001394:	003d08ff 	.word	0x003d08ff
 8001398:	431bde83 	.word	0x431bde83
 800139c:	10624dd3 	.word	0x10624dd3

080013a0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b088      	sub	sp, #32
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80013a8:	2300      	movs	r3, #0
 80013aa:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013b8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80013c0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013c8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80013ca:	7bfb      	ldrb	r3, [r7, #15]
 80013cc:	2b10      	cmp	r3, #16
 80013ce:	d003      	beq.n	80013d8 <HAL_I2C_EV_IRQHandler+0x38>
 80013d0:	7bfb      	ldrb	r3, [r7, #15]
 80013d2:	2b40      	cmp	r3, #64	; 0x40
 80013d4:	f040 80c1 	bne.w	800155a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	699b      	ldr	r3, [r3, #24]
 80013de:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	695b      	ldr	r3, [r3, #20]
 80013e6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	f003 0301 	and.w	r3, r3, #1
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d10d      	bne.n	800140e <HAL_I2C_EV_IRQHandler+0x6e>
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80013f8:	d003      	beq.n	8001402 <HAL_I2C_EV_IRQHandler+0x62>
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001400:	d101      	bne.n	8001406 <HAL_I2C_EV_IRQHandler+0x66>
 8001402:	2301      	movs	r3, #1
 8001404:	e000      	b.n	8001408 <HAL_I2C_EV_IRQHandler+0x68>
 8001406:	2300      	movs	r3, #0
 8001408:	2b01      	cmp	r3, #1
 800140a:	f000 8132 	beq.w	8001672 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	f003 0301 	and.w	r3, r3, #1
 8001414:	2b00      	cmp	r3, #0
 8001416:	d00c      	beq.n	8001432 <HAL_I2C_EV_IRQHandler+0x92>
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	0a5b      	lsrs	r3, r3, #9
 800141c:	f003 0301 	and.w	r3, r3, #1
 8001420:	2b00      	cmp	r3, #0
 8001422:	d006      	beq.n	8001432 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f001 fc7b 	bl	8002d20 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f000 fd83 	bl	8001f36 <I2C_Master_SB>
 8001430:	e092      	b.n	8001558 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	08db      	lsrs	r3, r3, #3
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	2b00      	cmp	r3, #0
 800143c:	d009      	beq.n	8001452 <HAL_I2C_EV_IRQHandler+0xb2>
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	0a5b      	lsrs	r3, r3, #9
 8001442:	f003 0301 	and.w	r3, r3, #1
 8001446:	2b00      	cmp	r3, #0
 8001448:	d003      	beq.n	8001452 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f000 fdf9 	bl	8002042 <I2C_Master_ADD10>
 8001450:	e082      	b.n	8001558 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	085b      	lsrs	r3, r3, #1
 8001456:	f003 0301 	and.w	r3, r3, #1
 800145a:	2b00      	cmp	r3, #0
 800145c:	d009      	beq.n	8001472 <HAL_I2C_EV_IRQHandler+0xd2>
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	0a5b      	lsrs	r3, r3, #9
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	2b00      	cmp	r3, #0
 8001468:	d003      	beq.n	8001472 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f000 fe13 	bl	8002096 <I2C_Master_ADDR>
 8001470:	e072      	b.n	8001558 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	089b      	lsrs	r3, r3, #2
 8001476:	f003 0301 	and.w	r3, r3, #1
 800147a:	2b00      	cmp	r3, #0
 800147c:	d03b      	beq.n	80014f6 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001488:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800148c:	f000 80f3 	beq.w	8001676 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	09db      	lsrs	r3, r3, #7
 8001494:	f003 0301 	and.w	r3, r3, #1
 8001498:	2b00      	cmp	r3, #0
 800149a:	d00f      	beq.n	80014bc <HAL_I2C_EV_IRQHandler+0x11c>
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	0a9b      	lsrs	r3, r3, #10
 80014a0:	f003 0301 	and.w	r3, r3, #1
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d009      	beq.n	80014bc <HAL_I2C_EV_IRQHandler+0x11c>
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	089b      	lsrs	r3, r3, #2
 80014ac:	f003 0301 	and.w	r3, r3, #1
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d103      	bne.n	80014bc <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f000 f9f3 	bl	80018a0 <I2C_MasterTransmit_TXE>
 80014ba:	e04d      	b.n	8001558 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	089b      	lsrs	r3, r3, #2
 80014c0:	f003 0301 	and.w	r3, r3, #1
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	f000 80d6 	beq.w	8001676 <HAL_I2C_EV_IRQHandler+0x2d6>
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	0a5b      	lsrs	r3, r3, #9
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	f000 80cf 	beq.w	8001676 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80014d8:	7bbb      	ldrb	r3, [r7, #14]
 80014da:	2b21      	cmp	r3, #33	; 0x21
 80014dc:	d103      	bne.n	80014e6 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f000 fa7a 	bl	80019d8 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80014e4:	e0c7      	b.n	8001676 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80014e6:	7bfb      	ldrb	r3, [r7, #15]
 80014e8:	2b40      	cmp	r3, #64	; 0x40
 80014ea:	f040 80c4 	bne.w	8001676 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f000 fae8 	bl	8001ac4 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80014f4:	e0bf      	b.n	8001676 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001500:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001504:	f000 80b7 	beq.w	8001676 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	099b      	lsrs	r3, r3, #6
 800150c:	f003 0301 	and.w	r3, r3, #1
 8001510:	2b00      	cmp	r3, #0
 8001512:	d00f      	beq.n	8001534 <HAL_I2C_EV_IRQHandler+0x194>
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	0a9b      	lsrs	r3, r3, #10
 8001518:	f003 0301 	and.w	r3, r3, #1
 800151c:	2b00      	cmp	r3, #0
 800151e:	d009      	beq.n	8001534 <HAL_I2C_EV_IRQHandler+0x194>
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	089b      	lsrs	r3, r3, #2
 8001524:	f003 0301 	and.w	r3, r3, #1
 8001528:	2b00      	cmp	r3, #0
 800152a:	d103      	bne.n	8001534 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f000 fb5d 	bl	8001bec <I2C_MasterReceive_RXNE>
 8001532:	e011      	b.n	8001558 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	089b      	lsrs	r3, r3, #2
 8001538:	f003 0301 	and.w	r3, r3, #1
 800153c:	2b00      	cmp	r3, #0
 800153e:	f000 809a 	beq.w	8001676 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	0a5b      	lsrs	r3, r3, #9
 8001546:	f003 0301 	and.w	r3, r3, #1
 800154a:	2b00      	cmp	r3, #0
 800154c:	f000 8093 	beq.w	8001676 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f000 fc06 	bl	8001d62 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001556:	e08e      	b.n	8001676 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001558:	e08d      	b.n	8001676 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155e:	2b00      	cmp	r3, #0
 8001560:	d004      	beq.n	800156c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	695b      	ldr	r3, [r3, #20]
 8001568:	61fb      	str	r3, [r7, #28]
 800156a:	e007      	b.n	800157c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	699b      	ldr	r3, [r3, #24]
 8001572:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	695b      	ldr	r3, [r3, #20]
 800157a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	085b      	lsrs	r3, r3, #1
 8001580:	f003 0301 	and.w	r3, r3, #1
 8001584:	2b00      	cmp	r3, #0
 8001586:	d012      	beq.n	80015ae <HAL_I2C_EV_IRQHandler+0x20e>
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	0a5b      	lsrs	r3, r3, #9
 800158c:	f003 0301 	and.w	r3, r3, #1
 8001590:	2b00      	cmp	r3, #0
 8001592:	d00c      	beq.n	80015ae <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001598:	2b00      	cmp	r3, #0
 800159a:	d003      	beq.n	80015a4 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	699b      	ldr	r3, [r3, #24]
 80015a2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80015a4:	69b9      	ldr	r1, [r7, #24]
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f000 ffc4 	bl	8002534 <I2C_Slave_ADDR>
 80015ac:	e066      	b.n	800167c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	091b      	lsrs	r3, r3, #4
 80015b2:	f003 0301 	and.w	r3, r3, #1
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d009      	beq.n	80015ce <HAL_I2C_EV_IRQHandler+0x22e>
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	0a5b      	lsrs	r3, r3, #9
 80015be:	f003 0301 	and.w	r3, r3, #1
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d003      	beq.n	80015ce <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f000 fffe 	bl	80025c8 <I2C_Slave_STOPF>
 80015cc:	e056      	b.n	800167c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80015ce:	7bbb      	ldrb	r3, [r7, #14]
 80015d0:	2b21      	cmp	r3, #33	; 0x21
 80015d2:	d002      	beq.n	80015da <HAL_I2C_EV_IRQHandler+0x23a>
 80015d4:	7bbb      	ldrb	r3, [r7, #14]
 80015d6:	2b29      	cmp	r3, #41	; 0x29
 80015d8:	d125      	bne.n	8001626 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	09db      	lsrs	r3, r3, #7
 80015de:	f003 0301 	and.w	r3, r3, #1
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d00f      	beq.n	8001606 <HAL_I2C_EV_IRQHandler+0x266>
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	0a9b      	lsrs	r3, r3, #10
 80015ea:	f003 0301 	and.w	r3, r3, #1
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d009      	beq.n	8001606 <HAL_I2C_EV_IRQHandler+0x266>
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	089b      	lsrs	r3, r3, #2
 80015f6:	f003 0301 	and.w	r3, r3, #1
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d103      	bne.n	8001606 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f000 feda 	bl	80023b8 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001604:	e039      	b.n	800167a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	089b      	lsrs	r3, r3, #2
 800160a:	f003 0301 	and.w	r3, r3, #1
 800160e:	2b00      	cmp	r3, #0
 8001610:	d033      	beq.n	800167a <HAL_I2C_EV_IRQHandler+0x2da>
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	0a5b      	lsrs	r3, r3, #9
 8001616:	f003 0301 	and.w	r3, r3, #1
 800161a:	2b00      	cmp	r3, #0
 800161c:	d02d      	beq.n	800167a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f000 ff07 	bl	8002432 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001624:	e029      	b.n	800167a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	099b      	lsrs	r3, r3, #6
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	2b00      	cmp	r3, #0
 8001630:	d00f      	beq.n	8001652 <HAL_I2C_EV_IRQHandler+0x2b2>
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	0a9b      	lsrs	r3, r3, #10
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	2b00      	cmp	r3, #0
 800163c:	d009      	beq.n	8001652 <HAL_I2C_EV_IRQHandler+0x2b2>
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	089b      	lsrs	r3, r3, #2
 8001642:	f003 0301 	and.w	r3, r3, #1
 8001646:	2b00      	cmp	r3, #0
 8001648:	d103      	bne.n	8001652 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f000 ff12 	bl	8002474 <I2C_SlaveReceive_RXNE>
 8001650:	e014      	b.n	800167c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	089b      	lsrs	r3, r3, #2
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	2b00      	cmp	r3, #0
 800165c:	d00e      	beq.n	800167c <HAL_I2C_EV_IRQHandler+0x2dc>
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	0a5b      	lsrs	r3, r3, #9
 8001662:	f003 0301 	and.w	r3, r3, #1
 8001666:	2b00      	cmp	r3, #0
 8001668:	d008      	beq.n	800167c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f000 ff40 	bl	80024f0 <I2C_SlaveReceive_BTF>
 8001670:	e004      	b.n	800167c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8001672:	bf00      	nop
 8001674:	e002      	b.n	800167c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001676:	bf00      	nop
 8001678:	e000      	b.n	800167c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800167a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800167c:	3720      	adds	r7, #32
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001682:	b580      	push	{r7, lr}
 8001684:	b08a      	sub	sp, #40	; 0x28
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	695b      	ldr	r3, [r3, #20]
 8001690:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800169a:	2300      	movs	r3, #0
 800169c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80016a4:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80016a6:	6a3b      	ldr	r3, [r7, #32]
 80016a8:	0a1b      	lsrs	r3, r3, #8
 80016aa:	f003 0301 	and.w	r3, r3, #1
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d00e      	beq.n	80016d0 <HAL_I2C_ER_IRQHandler+0x4e>
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	0a1b      	lsrs	r3, r3, #8
 80016b6:	f003 0301 	and.w	r3, r3, #1
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d008      	beq.n	80016d0 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80016be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c0:	f043 0301 	orr.w	r3, r3, #1
 80016c4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80016ce:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80016d0:	6a3b      	ldr	r3, [r7, #32]
 80016d2:	0a5b      	lsrs	r3, r3, #9
 80016d4:	f003 0301 	and.w	r3, r3, #1
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d00e      	beq.n	80016fa <HAL_I2C_ER_IRQHandler+0x78>
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	0a1b      	lsrs	r3, r3, #8
 80016e0:	f003 0301 	and.w	r3, r3, #1
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d008      	beq.n	80016fa <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80016e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ea:	f043 0302 	orr.w	r3, r3, #2
 80016ee:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80016f8:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80016fa:	6a3b      	ldr	r3, [r7, #32]
 80016fc:	0a9b      	lsrs	r3, r3, #10
 80016fe:	f003 0301 	and.w	r3, r3, #1
 8001702:	2b00      	cmp	r3, #0
 8001704:	d03f      	beq.n	8001786 <HAL_I2C_ER_IRQHandler+0x104>
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	0a1b      	lsrs	r3, r3, #8
 800170a:	f003 0301 	and.w	r3, r3, #1
 800170e:	2b00      	cmp	r3, #0
 8001710:	d039      	beq.n	8001786 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8001712:	7efb      	ldrb	r3, [r7, #27]
 8001714:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800171a:	b29b      	uxth	r3, r3
 800171c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001724:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800172c:	7ebb      	ldrb	r3, [r7, #26]
 800172e:	2b20      	cmp	r3, #32
 8001730:	d112      	bne.n	8001758 <HAL_I2C_ER_IRQHandler+0xd6>
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d10f      	bne.n	8001758 <HAL_I2C_ER_IRQHandler+0xd6>
 8001738:	7cfb      	ldrb	r3, [r7, #19]
 800173a:	2b21      	cmp	r3, #33	; 0x21
 800173c:	d008      	beq.n	8001750 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800173e:	7cfb      	ldrb	r3, [r7, #19]
 8001740:	2b29      	cmp	r3, #41	; 0x29
 8001742:	d005      	beq.n	8001750 <HAL_I2C_ER_IRQHandler+0xce>
 8001744:	7cfb      	ldrb	r3, [r7, #19]
 8001746:	2b28      	cmp	r3, #40	; 0x28
 8001748:	d106      	bne.n	8001758 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	2b21      	cmp	r3, #33	; 0x21
 800174e:	d103      	bne.n	8001758 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f001 f869 	bl	8002828 <I2C_Slave_AF>
 8001756:	e016      	b.n	8001786 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001760:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8001762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001764:	f043 0304 	orr.w	r3, r3, #4
 8001768:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800176a:	7efb      	ldrb	r3, [r7, #27]
 800176c:	2b10      	cmp	r3, #16
 800176e:	d002      	beq.n	8001776 <HAL_I2C_ER_IRQHandler+0xf4>
 8001770:	7efb      	ldrb	r3, [r7, #27]
 8001772:	2b40      	cmp	r3, #64	; 0x40
 8001774:	d107      	bne.n	8001786 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001784:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001786:	6a3b      	ldr	r3, [r7, #32]
 8001788:	0adb      	lsrs	r3, r3, #11
 800178a:	f003 0301 	and.w	r3, r3, #1
 800178e:	2b00      	cmp	r3, #0
 8001790:	d00e      	beq.n	80017b0 <HAL_I2C_ER_IRQHandler+0x12e>
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	0a1b      	lsrs	r3, r3, #8
 8001796:	f003 0301 	and.w	r3, r3, #1
 800179a:	2b00      	cmp	r3, #0
 800179c:	d008      	beq.n	80017b0 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800179e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a0:	f043 0308 	orr.w	r3, r3, #8
 80017a4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80017ae:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80017b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d008      	beq.n	80017c8 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017bc:	431a      	orrs	r2, r3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f001 f8a0 	bl	8002908 <I2C_ITError>
  }
}
 80017c8:	bf00      	nop
 80017ca:	3728      	adds	r7, #40	; 0x28
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80017d8:	bf00      	nop
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr

080017e4 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80017ec:	bf00      	nop
 80017ee:	370c      	adds	r7, #12
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr

080017f8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001800:	bf00      	nop
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001814:	bf00      	nop
 8001816:	370c      	adds	r7, #12
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	460b      	mov	r3, r1
 800182a:	70fb      	strb	r3, [r7, #3]
 800182c:	4613      	mov	r3, r2
 800182e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001830:	bf00      	nop
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8001844:	bf00      	nop
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001858:	bf00      	nop
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800186c:	bf00      	nop
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001880:	bf00      	nop
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001894:	bf00      	nop
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018ae:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80018b6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018bc:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d150      	bne.n	8001968 <I2C_MasterTransmit_TXE+0xc8>
 80018c6:	7bfb      	ldrb	r3, [r7, #15]
 80018c8:	2b21      	cmp	r3, #33	; 0x21
 80018ca:	d14d      	bne.n	8001968 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	2b08      	cmp	r3, #8
 80018d0:	d01d      	beq.n	800190e <I2C_MasterTransmit_TXE+0x6e>
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	2b20      	cmp	r3, #32
 80018d6:	d01a      	beq.n	800190e <I2C_MasterTransmit_TXE+0x6e>
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80018de:	d016      	beq.n	800190e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	685a      	ldr	r2, [r3, #4]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80018ee:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2211      	movs	r2, #17
 80018f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2200      	movs	r2, #0
 80018fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2220      	movs	r2, #32
 8001902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f7ff ff62 	bl	80017d0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800190c:	e060      	b.n	80019d0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	685a      	ldr	r2, [r3, #4]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800191c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800192c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2200      	movs	r2, #0
 8001932:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2220      	movs	r2, #32
 8001938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001942:	b2db      	uxtb	r3, r3
 8001944:	2b40      	cmp	r3, #64	; 0x40
 8001946:	d107      	bne.n	8001958 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2200      	movs	r2, #0
 800194c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f7ff ff7d 	bl	8001850 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001956:	e03b      	b.n	80019d0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2200      	movs	r2, #0
 800195c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f7ff ff35 	bl	80017d0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001966:	e033      	b.n	80019d0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8001968:	7bfb      	ldrb	r3, [r7, #15]
 800196a:	2b21      	cmp	r3, #33	; 0x21
 800196c:	d005      	beq.n	800197a <I2C_MasterTransmit_TXE+0xda>
 800196e:	7bbb      	ldrb	r3, [r7, #14]
 8001970:	2b40      	cmp	r3, #64	; 0x40
 8001972:	d12d      	bne.n	80019d0 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8001974:	7bfb      	ldrb	r3, [r7, #15]
 8001976:	2b22      	cmp	r3, #34	; 0x22
 8001978:	d12a      	bne.n	80019d0 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800197e:	b29b      	uxth	r3, r3
 8001980:	2b00      	cmp	r3, #0
 8001982:	d108      	bne.n	8001996 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	685a      	ldr	r2, [r3, #4]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001992:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8001994:	e01c      	b.n	80019d0 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800199c:	b2db      	uxtb	r3, r3
 800199e:	2b40      	cmp	r3, #64	; 0x40
 80019a0:	d103      	bne.n	80019aa <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f000 f88e 	bl	8001ac4 <I2C_MemoryTransmit_TXE_BTF>
}
 80019a8:	e012      	b.n	80019d0 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ae:	781a      	ldrb	r2, [r3, #0]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ba:	1c5a      	adds	r2, r3, #1
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	3b01      	subs	r3, #1
 80019c8:	b29a      	uxth	r2, r3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80019ce:	e7ff      	b.n	80019d0 <I2C_MasterTransmit_TXE+0x130>
 80019d0:	bf00      	nop
 80019d2:	3710      	adds	r7, #16
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}

080019d8 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e4:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	2b21      	cmp	r3, #33	; 0x21
 80019f0:	d164      	bne.n	8001abc <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d012      	beq.n	8001a22 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a00:	781a      	ldrb	r2, [r3, #0]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a0c:	1c5a      	adds	r2, r3, #1
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a16:	b29b      	uxth	r3, r3
 8001a18:	3b01      	subs	r3, #1
 8001a1a:	b29a      	uxth	r2, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8001a20:	e04c      	b.n	8001abc <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	2b08      	cmp	r3, #8
 8001a26:	d01d      	beq.n	8001a64 <I2C_MasterTransmit_BTF+0x8c>
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	2b20      	cmp	r3, #32
 8001a2c:	d01a      	beq.n	8001a64 <I2C_MasterTransmit_BTF+0x8c>
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001a34:	d016      	beq.n	8001a64 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	685a      	ldr	r2, [r3, #4]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001a44:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2211      	movs	r2, #17
 8001a4a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2220      	movs	r2, #32
 8001a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f7ff feb7 	bl	80017d0 <HAL_I2C_MasterTxCpltCallback>
}
 8001a62:	e02b      	b.n	8001abc <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	685a      	ldr	r2, [r3, #4]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001a72:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a82:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2200      	movs	r2, #0
 8001a88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2220      	movs	r2, #32
 8001a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	2b40      	cmp	r3, #64	; 0x40
 8001a9c:	d107      	bne.n	8001aae <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f7ff fed2 	bl	8001850 <HAL_I2C_MemTxCpltCallback>
}
 8001aac:	e006      	b.n	8001abc <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f7ff fe8a 	bl	80017d0 <HAL_I2C_MasterTxCpltCallback>
}
 8001abc:	bf00      	nop
 8001abe:	3710      	adds	r7, #16
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ad2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d11d      	bne.n	8001b18 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d10b      	bne.n	8001afc <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ae8:	b2da      	uxtb	r2, r3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001af4:	1c9a      	adds	r2, r3, #2
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8001afa:	e073      	b.n	8001be4 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	121b      	asrs	r3, r3, #8
 8001b04:	b2da      	uxtb	r2, r3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b10:	1c5a      	adds	r2, r3, #1
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001b16:	e065      	b.n	8001be4 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d10b      	bne.n	8001b38 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b24:	b2da      	uxtb	r2, r3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b30:	1c5a      	adds	r2, r3, #1
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001b36:	e055      	b.n	8001be4 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d151      	bne.n	8001be4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8001b40:	7bfb      	ldrb	r3, [r7, #15]
 8001b42:	2b22      	cmp	r3, #34	; 0x22
 8001b44:	d10d      	bne.n	8001b62 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b54:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b5a:	1c5a      	adds	r2, r3, #1
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001b60:	e040      	b.n	8001be4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d015      	beq.n	8001b98 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8001b6c:	7bfb      	ldrb	r3, [r7, #15]
 8001b6e:	2b21      	cmp	r3, #33	; 0x21
 8001b70:	d112      	bne.n	8001b98 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b76:	781a      	ldrb	r2, [r3, #0]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b82:	1c5a      	adds	r2, r3, #1
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b8c:	b29b      	uxth	r3, r3
 8001b8e:	3b01      	subs	r3, #1
 8001b90:	b29a      	uxth	r2, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001b96:	e025      	b.n	8001be4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d120      	bne.n	8001be4 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8001ba2:	7bfb      	ldrb	r3, [r7, #15]
 8001ba4:	2b21      	cmp	r3, #33	; 0x21
 8001ba6:	d11d      	bne.n	8001be4 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	685a      	ldr	r2, [r3, #4]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001bb6:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bc6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2220      	movs	r2, #32
 8001bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f7ff fe36 	bl	8001850 <HAL_I2C_MemTxCpltCallback>
}
 8001be4:	bf00      	nop
 8001be6:	3710      	adds	r7, #16
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}

08001bec <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	2b22      	cmp	r3, #34	; 0x22
 8001bfe:	f040 80ac 	bne.w	8001d5a <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c06:	b29b      	uxth	r3, r3
 8001c08:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	2b03      	cmp	r3, #3
 8001c0e:	d921      	bls.n	8001c54 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	691a      	ldr	r2, [r3, #16]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c1a:	b2d2      	uxtb	r2, r2
 8001c1c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c22:	1c5a      	adds	r2, r3, #1
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c2c:	b29b      	uxth	r3, r3
 8001c2e:	3b01      	subs	r3, #1
 8001c30:	b29a      	uxth	r2, r3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	2b03      	cmp	r3, #3
 8001c3e:	f040 808c 	bne.w	8001d5a <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	685a      	ldr	r2, [r3, #4]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c50:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8001c52:	e082      	b.n	8001d5a <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d075      	beq.n	8001d48 <I2C_MasterReceive_RXNE+0x15c>
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d002      	beq.n	8001c68 <I2C_MasterReceive_RXNE+0x7c>
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d16f      	bne.n	8001d48 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f001 f827 	bl	8002cbc <I2C_WaitOnSTOPRequestThroughIT>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d142      	bne.n	8001cfa <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c82:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	685a      	ldr	r2, [r3, #4]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001c92:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	691a      	ldr	r2, [r3, #16]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9e:	b2d2      	uxtb	r2, r2
 8001ca0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca6:	1c5a      	adds	r2, r3, #1
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cb0:	b29b      	uxth	r3, r3
 8001cb2:	3b01      	subs	r3, #1
 8001cb4:	b29a      	uxth	r2, r3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2220      	movs	r2, #32
 8001cbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	2b40      	cmp	r3, #64	; 0x40
 8001ccc:	d10a      	bne.n	8001ce4 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f7ff fdc1 	bl	8001864 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001ce2:	e03a      	b.n	8001d5a <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2212      	movs	r2, #18
 8001cf0:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f7ff fd76 	bl	80017e4 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001cf8:	e02f      	b.n	8001d5a <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	685a      	ldr	r2, [r3, #4]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001d08:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	691a      	ldr	r2, [r3, #16]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d14:	b2d2      	uxtb	r2, r2
 8001d16:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1c:	1c5a      	adds	r2, r3, #1
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	3b01      	subs	r3, #1
 8001d2a:	b29a      	uxth	r2, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2220      	movs	r2, #32
 8001d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f7ff fd99 	bl	8001878 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001d46:	e008      	b.n	8001d5a <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	685a      	ldr	r2, [r3, #4]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d56:	605a      	str	r2, [r3, #4]
}
 8001d58:	e7ff      	b.n	8001d5a <I2C_MasterReceive_RXNE+0x16e>
 8001d5a:	bf00      	nop
 8001d5c:	3710      	adds	r7, #16
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}

08001d62 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8001d62:	b580      	push	{r7, lr}
 8001d64:	b084      	sub	sp, #16
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d6e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d74:	b29b      	uxth	r3, r3
 8001d76:	2b04      	cmp	r3, #4
 8001d78:	d11b      	bne.n	8001db2 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	685a      	ldr	r2, [r3, #4]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d88:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	691a      	ldr	r2, [r3, #16]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d94:	b2d2      	uxtb	r2, r2
 8001d96:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9c:	1c5a      	adds	r2, r3, #1
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	3b01      	subs	r3, #1
 8001daa:	b29a      	uxth	r2, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8001db0:	e0bd      	b.n	8001f2e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	2b03      	cmp	r3, #3
 8001dba:	d129      	bne.n	8001e10 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	685a      	ldr	r2, [r3, #4]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001dca:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2b04      	cmp	r3, #4
 8001dd0:	d00a      	beq.n	8001de8 <I2C_MasterReceive_BTF+0x86>
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d007      	beq.n	8001de8 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001de6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	691a      	ldr	r2, [r3, #16]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df2:	b2d2      	uxtb	r2, r2
 8001df4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfa:	1c5a      	adds	r2, r3, #1
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	3b01      	subs	r3, #1
 8001e08:	b29a      	uxth	r2, r3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001e0e:	e08e      	b.n	8001f2e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d176      	bne.n	8001f08 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d002      	beq.n	8001e26 <I2C_MasterReceive_BTF+0xc4>
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2b10      	cmp	r3, #16
 8001e24:	d108      	bne.n	8001e38 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e34:	601a      	str	r2, [r3, #0]
 8001e36:	e019      	b.n	8001e6c <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2b04      	cmp	r3, #4
 8001e3c:	d002      	beq.n	8001e44 <I2C_MasterReceive_BTF+0xe2>
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d108      	bne.n	8001e56 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001e52:	601a      	str	r2, [r3, #0]
 8001e54:	e00a      	b.n	8001e6c <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2b10      	cmp	r3, #16
 8001e5a:	d007      	beq.n	8001e6c <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e6a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	691a      	ldr	r2, [r3, #16]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e76:	b2d2      	uxtb	r2, r2
 8001e78:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7e:	1c5a      	adds	r2, r3, #1
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e88:	b29b      	uxth	r3, r3
 8001e8a:	3b01      	subs	r3, #1
 8001e8c:	b29a      	uxth	r2, r3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	691a      	ldr	r2, [r3, #16]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e9c:	b2d2      	uxtb	r2, r2
 8001e9e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea4:	1c5a      	adds	r2, r3, #1
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	3b01      	subs	r3, #1
 8001eb2:	b29a      	uxth	r2, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	685a      	ldr	r2, [r3, #4]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001ec6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2220      	movs	r2, #32
 8001ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	2b40      	cmp	r3, #64	; 0x40
 8001eda:	d10a      	bne.n	8001ef2 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f7ff fcba 	bl	8001864 <HAL_I2C_MemRxCpltCallback>
}
 8001ef0:	e01d      	b.n	8001f2e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2212      	movs	r2, #18
 8001efe:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f7ff fc6f 	bl	80017e4 <HAL_I2C_MasterRxCpltCallback>
}
 8001f06:	e012      	b.n	8001f2e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	691a      	ldr	r2, [r3, #16]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f12:	b2d2      	uxtb	r2, r2
 8001f14:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1a:	1c5a      	adds	r2, r3, #1
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f24:	b29b      	uxth	r3, r3
 8001f26:	3b01      	subs	r3, #1
 8001f28:	b29a      	uxth	r2, r3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001f2e:	bf00      	nop
 8001f30:	3710      	adds	r7, #16
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8001f36:	b480      	push	{r7}
 8001f38:	b083      	sub	sp, #12
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	2b40      	cmp	r3, #64	; 0x40
 8001f48:	d117      	bne.n	8001f7a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d109      	bne.n	8001f66 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	461a      	mov	r2, r3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001f62:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8001f64:	e067      	b.n	8002036 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	f043 0301 	orr.w	r3, r3, #1
 8001f70:	b2da      	uxtb	r2, r3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	611a      	str	r2, [r3, #16]
}
 8001f78:	e05d      	b.n	8002036 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	691b      	ldr	r3, [r3, #16]
 8001f7e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001f82:	d133      	bne.n	8001fec <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	2b21      	cmp	r3, #33	; 0x21
 8001f8e:	d109      	bne.n	8001fa4 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	461a      	mov	r2, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001fa0:	611a      	str	r2, [r3, #16]
 8001fa2:	e008      	b.n	8001fb6 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	f043 0301 	orr.w	r3, r3, #1
 8001fae:	b2da      	uxtb	r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d004      	beq.n	8001fc8 <I2C_Master_SB+0x92>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d108      	bne.n	8001fda <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d032      	beq.n	8002036 <I2C_Master_SB+0x100>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d02d      	beq.n	8002036 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	685a      	ldr	r2, [r3, #4]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001fe8:	605a      	str	r2, [r3, #4]
}
 8001fea:	e024      	b.n	8002036 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d10e      	bne.n	8002012 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	11db      	asrs	r3, r3, #7
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	f003 0306 	and.w	r3, r3, #6
 8002002:	b2db      	uxtb	r3, r3
 8002004:	f063 030f 	orn	r3, r3, #15
 8002008:	b2da      	uxtb	r2, r3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	611a      	str	r2, [r3, #16]
}
 8002010:	e011      	b.n	8002036 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002016:	2b01      	cmp	r3, #1
 8002018:	d10d      	bne.n	8002036 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800201e:	b29b      	uxth	r3, r3
 8002020:	11db      	asrs	r3, r3, #7
 8002022:	b2db      	uxtb	r3, r3
 8002024:	f003 0306 	and.w	r3, r3, #6
 8002028:	b2db      	uxtb	r3, r3
 800202a:	f063 030e 	orn	r3, r3, #14
 800202e:	b2da      	uxtb	r2, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	611a      	str	r2, [r3, #16]
}
 8002036:	bf00      	nop
 8002038:	370c      	adds	r7, #12
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr

08002042 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002042:	b480      	push	{r7}
 8002044:	b083      	sub	sp, #12
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800204e:	b2da      	uxtb	r2, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800205a:	2b00      	cmp	r3, #0
 800205c:	d004      	beq.n	8002068 <I2C_Master_ADD10+0x26>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002062:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002064:	2b00      	cmp	r3, #0
 8002066:	d108      	bne.n	800207a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800206c:	2b00      	cmp	r3, #0
 800206e:	d00c      	beq.n	800208a <I2C_Master_ADD10+0x48>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002076:	2b00      	cmp	r3, #0
 8002078:	d007      	beq.n	800208a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	685a      	ldr	r2, [r3, #4]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002088:	605a      	str	r2, [r3, #4]
  }
}
 800208a:	bf00      	nop
 800208c:	370c      	adds	r7, #12
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr

08002096 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002096:	b480      	push	{r7}
 8002098:	b091      	sub	sp, #68	; 0x44
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80020a4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ac:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b2:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	2b22      	cmp	r3, #34	; 0x22
 80020be:	f040 8169 	bne.w	8002394 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d10f      	bne.n	80020ea <I2C_Master_ADDR+0x54>
 80020ca:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80020ce:	2b40      	cmp	r3, #64	; 0x40
 80020d0:	d10b      	bne.n	80020ea <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020d2:	2300      	movs	r3, #0
 80020d4:	633b      	str	r3, [r7, #48]	; 0x30
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	695b      	ldr	r3, [r3, #20]
 80020dc:	633b      	str	r3, [r7, #48]	; 0x30
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	699b      	ldr	r3, [r3, #24]
 80020e4:	633b      	str	r3, [r7, #48]	; 0x30
 80020e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020e8:	e160      	b.n	80023ac <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d11d      	bne.n	800212e <I2C_Master_ADDR+0x98>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	691b      	ldr	r3, [r3, #16]
 80020f6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80020fa:	d118      	bne.n	800212e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020fc:	2300      	movs	r3, #0
 80020fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	695b      	ldr	r3, [r3, #20]
 8002106:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	699b      	ldr	r3, [r3, #24]
 800210e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002110:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002120:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002126:	1c5a      	adds	r2, r3, #1
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	651a      	str	r2, [r3, #80]	; 0x50
 800212c:	e13e      	b.n	80023ac <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002132:	b29b      	uxth	r3, r3
 8002134:	2b00      	cmp	r3, #0
 8002136:	d113      	bne.n	8002160 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002138:	2300      	movs	r3, #0
 800213a:	62bb      	str	r3, [r7, #40]	; 0x28
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	695b      	ldr	r3, [r3, #20]
 8002142:	62bb      	str	r3, [r7, #40]	; 0x28
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	699b      	ldr	r3, [r3, #24]
 800214a:	62bb      	str	r3, [r7, #40]	; 0x28
 800214c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800215c:	601a      	str	r2, [r3, #0]
 800215e:	e115      	b.n	800238c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002164:	b29b      	uxth	r3, r3
 8002166:	2b01      	cmp	r3, #1
 8002168:	f040 808a 	bne.w	8002280 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800216c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800216e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002172:	d137      	bne.n	80021e4 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002182:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800218e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002192:	d113      	bne.n	80021bc <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021a2:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021a4:	2300      	movs	r3, #0
 80021a6:	627b      	str	r3, [r7, #36]	; 0x24
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	695b      	ldr	r3, [r3, #20]
 80021ae:	627b      	str	r3, [r7, #36]	; 0x24
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	699b      	ldr	r3, [r3, #24]
 80021b6:	627b      	str	r3, [r7, #36]	; 0x24
 80021b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ba:	e0e7      	b.n	800238c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021bc:	2300      	movs	r3, #0
 80021be:	623b      	str	r3, [r7, #32]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	695b      	ldr	r3, [r3, #20]
 80021c6:	623b      	str	r3, [r7, #32]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	699b      	ldr	r3, [r3, #24]
 80021ce:	623b      	str	r3, [r7, #32]
 80021d0:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021e0:	601a      	str	r2, [r3, #0]
 80021e2:	e0d3      	b.n	800238c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80021e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021e6:	2b08      	cmp	r3, #8
 80021e8:	d02e      	beq.n	8002248 <I2C_Master_ADDR+0x1b2>
 80021ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021ec:	2b20      	cmp	r3, #32
 80021ee:	d02b      	beq.n	8002248 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80021f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021f2:	2b12      	cmp	r3, #18
 80021f4:	d102      	bne.n	80021fc <I2C_Master_ADDR+0x166>
 80021f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d125      	bne.n	8002248 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80021fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021fe:	2b04      	cmp	r3, #4
 8002200:	d00e      	beq.n	8002220 <I2C_Master_ADDR+0x18a>
 8002202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002204:	2b02      	cmp	r3, #2
 8002206:	d00b      	beq.n	8002220 <I2C_Master_ADDR+0x18a>
 8002208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800220a:	2b10      	cmp	r3, #16
 800220c:	d008      	beq.n	8002220 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800221c:	601a      	str	r2, [r3, #0]
 800221e:	e007      	b.n	8002230 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800222e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002230:	2300      	movs	r3, #0
 8002232:	61fb      	str	r3, [r7, #28]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	695b      	ldr	r3, [r3, #20]
 800223a:	61fb      	str	r3, [r7, #28]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	699b      	ldr	r3, [r3, #24]
 8002242:	61fb      	str	r3, [r7, #28]
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	e0a1      	b.n	800238c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002256:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002258:	2300      	movs	r3, #0
 800225a:	61bb      	str	r3, [r7, #24]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	695b      	ldr	r3, [r3, #20]
 8002262:	61bb      	str	r3, [r7, #24]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	699b      	ldr	r3, [r3, #24]
 800226a:	61bb      	str	r3, [r7, #24]
 800226c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800227c:	601a      	str	r2, [r3, #0]
 800227e:	e085      	b.n	800238c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002284:	b29b      	uxth	r3, r3
 8002286:	2b02      	cmp	r3, #2
 8002288:	d14d      	bne.n	8002326 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800228a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800228c:	2b04      	cmp	r3, #4
 800228e:	d016      	beq.n	80022be <I2C_Master_ADDR+0x228>
 8002290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002292:	2b02      	cmp	r3, #2
 8002294:	d013      	beq.n	80022be <I2C_Master_ADDR+0x228>
 8002296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002298:	2b10      	cmp	r3, #16
 800229a:	d010      	beq.n	80022be <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022aa:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022ba:	601a      	str	r2, [r3, #0]
 80022bc:	e007      	b.n	80022ce <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80022cc:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80022dc:	d117      	bne.n	800230e <I2C_Master_ADDR+0x278>
 80022de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022e0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80022e4:	d00b      	beq.n	80022fe <I2C_Master_ADDR+0x268>
 80022e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d008      	beq.n	80022fe <I2C_Master_ADDR+0x268>
 80022ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022ee:	2b08      	cmp	r3, #8
 80022f0:	d005      	beq.n	80022fe <I2C_Master_ADDR+0x268>
 80022f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022f4:	2b10      	cmp	r3, #16
 80022f6:	d002      	beq.n	80022fe <I2C_Master_ADDR+0x268>
 80022f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022fa:	2b20      	cmp	r3, #32
 80022fc:	d107      	bne.n	800230e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	685a      	ldr	r2, [r3, #4]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800230c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800230e:	2300      	movs	r3, #0
 8002310:	617b      	str	r3, [r7, #20]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	695b      	ldr	r3, [r3, #20]
 8002318:	617b      	str	r3, [r7, #20]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	699b      	ldr	r3, [r3, #24]
 8002320:	617b      	str	r3, [r7, #20]
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	e032      	b.n	800238c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002334:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002340:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002344:	d117      	bne.n	8002376 <I2C_Master_ADDR+0x2e0>
 8002346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002348:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800234c:	d00b      	beq.n	8002366 <I2C_Master_ADDR+0x2d0>
 800234e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002350:	2b01      	cmp	r3, #1
 8002352:	d008      	beq.n	8002366 <I2C_Master_ADDR+0x2d0>
 8002354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002356:	2b08      	cmp	r3, #8
 8002358:	d005      	beq.n	8002366 <I2C_Master_ADDR+0x2d0>
 800235a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800235c:	2b10      	cmp	r3, #16
 800235e:	d002      	beq.n	8002366 <I2C_Master_ADDR+0x2d0>
 8002360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002362:	2b20      	cmp	r3, #32
 8002364:	d107      	bne.n	8002376 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	685a      	ldr	r2, [r3, #4]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002374:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002376:	2300      	movs	r3, #0
 8002378:	613b      	str	r3, [r7, #16]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	695b      	ldr	r3, [r3, #20]
 8002380:	613b      	str	r3, [r7, #16]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	699b      	ldr	r3, [r3, #24]
 8002388:	613b      	str	r3, [r7, #16]
 800238a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2200      	movs	r2, #0
 8002390:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002392:	e00b      	b.n	80023ac <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002394:	2300      	movs	r3, #0
 8002396:	60fb      	str	r3, [r7, #12]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	695b      	ldr	r3, [r3, #20]
 800239e:	60fb      	str	r3, [r7, #12]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	699b      	ldr	r3, [r3, #24]
 80023a6:	60fb      	str	r3, [r7, #12]
 80023a8:	68fb      	ldr	r3, [r7, #12]
}
 80023aa:	e7ff      	b.n	80023ac <I2C_Master_ADDR+0x316>
 80023ac:	bf00      	nop
 80023ae:	3744      	adds	r7, #68	; 0x44
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr

080023b8 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023c6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d02b      	beq.n	800242a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d6:	781a      	ldrb	r2, [r3, #0]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e2:	1c5a      	adds	r2, r3, #1
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	3b01      	subs	r3, #1
 80023f0:	b29a      	uxth	r2, r3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023fa:	b29b      	uxth	r3, r3
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d114      	bne.n	800242a <I2C_SlaveTransmit_TXE+0x72>
 8002400:	7bfb      	ldrb	r3, [r7, #15]
 8002402:	2b29      	cmp	r3, #41	; 0x29
 8002404:	d111      	bne.n	800242a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	685a      	ldr	r2, [r3, #4]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002414:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2221      	movs	r2, #33	; 0x21
 800241a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2228      	movs	r2, #40	; 0x28
 8002420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f7ff f9e7 	bl	80017f8 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800242a:	bf00      	nop
 800242c:	3710      	adds	r7, #16
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}

08002432 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002432:	b480      	push	{r7}
 8002434:	b083      	sub	sp, #12
 8002436:	af00      	add	r7, sp, #0
 8002438:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800243e:	b29b      	uxth	r3, r3
 8002440:	2b00      	cmp	r3, #0
 8002442:	d011      	beq.n	8002468 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002448:	781a      	ldrb	r2, [r3, #0]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002454:	1c5a      	adds	r2, r3, #1
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800245e:	b29b      	uxth	r3, r3
 8002460:	3b01      	subs	r3, #1
 8002462:	b29a      	uxth	r2, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002468:	bf00      	nop
 800246a:	370c      	adds	r7, #12
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr

08002474 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002482:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002488:	b29b      	uxth	r3, r3
 800248a:	2b00      	cmp	r3, #0
 800248c:	d02c      	beq.n	80024e8 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	691a      	ldr	r2, [r3, #16]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002498:	b2d2      	uxtb	r2, r2
 800249a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a0:	1c5a      	adds	r2, r3, #1
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	3b01      	subs	r3, #1
 80024ae:	b29a      	uxth	r2, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d114      	bne.n	80024e8 <I2C_SlaveReceive_RXNE+0x74>
 80024be:	7bfb      	ldrb	r3, [r7, #15]
 80024c0:	2b2a      	cmp	r3, #42	; 0x2a
 80024c2:	d111      	bne.n	80024e8 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	685a      	ldr	r2, [r3, #4]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024d2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2222      	movs	r2, #34	; 0x22
 80024d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2228      	movs	r2, #40	; 0x28
 80024de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f7ff f992 	bl	800180c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80024e8:	bf00      	nop
 80024ea:	3710      	adds	r7, #16
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}

080024f0 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024fc:	b29b      	uxth	r3, r3
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d012      	beq.n	8002528 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	691a      	ldr	r2, [r3, #16]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250c:	b2d2      	uxtb	r2, r2
 800250e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002514:	1c5a      	adds	r2, r3, #1
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800251e:	b29b      	uxth	r3, r3
 8002520:	3b01      	subs	r3, #1
 8002522:	b29a      	uxth	r2, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002528:	bf00      	nop
 800252a:	370c      	adds	r7, #12
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800253e:	2300      	movs	r3, #0
 8002540:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002548:	b2db      	uxtb	r3, r3
 800254a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800254e:	2b28      	cmp	r3, #40	; 0x28
 8002550:	d127      	bne.n	80025a2 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	685a      	ldr	r2, [r3, #4]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002560:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	089b      	lsrs	r3, r3, #2
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	2b00      	cmp	r3, #0
 800256c:	d101      	bne.n	8002572 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800256e:	2301      	movs	r3, #1
 8002570:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	09db      	lsrs	r3, r3, #7
 8002576:	f003 0301 	and.w	r3, r3, #1
 800257a:	2b00      	cmp	r3, #0
 800257c:	d103      	bne.n	8002586 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	81bb      	strh	r3, [r7, #12]
 8002584:	e002      	b.n	800258c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	699b      	ldr	r3, [r3, #24]
 800258a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2200      	movs	r2, #0
 8002590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002594:	89ba      	ldrh	r2, [r7, #12]
 8002596:	7bfb      	ldrb	r3, [r7, #15]
 8002598:	4619      	mov	r1, r3
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f7ff f940 	bl	8001820 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80025a0:	e00e      	b.n	80025c0 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025a2:	2300      	movs	r3, #0
 80025a4:	60bb      	str	r3, [r7, #8]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	695b      	ldr	r3, [r3, #20]
 80025ac:	60bb      	str	r3, [r7, #8]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	699b      	ldr	r3, [r3, #24]
 80025b4:	60bb      	str	r3, [r7, #8]
 80025b6:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2200      	movs	r2, #0
 80025bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80025c0:	bf00      	nop
 80025c2:	3710      	adds	r7, #16
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025d6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	685a      	ldr	r2, [r3, #4]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80025e6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80025e8:	2300      	movs	r3, #0
 80025ea:	60bb      	str	r3, [r7, #8]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	695b      	ldr	r3, [r3, #20]
 80025f2:	60bb      	str	r3, [r7, #8]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f042 0201 	orr.w	r2, r2, #1
 8002602:	601a      	str	r2, [r3, #0]
 8002604:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002614:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002620:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002624:	d172      	bne.n	800270c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002626:	7bfb      	ldrb	r3, [r7, #15]
 8002628:	2b22      	cmp	r3, #34	; 0x22
 800262a:	d002      	beq.n	8002632 <I2C_Slave_STOPF+0x6a>
 800262c:	7bfb      	ldrb	r3, [r7, #15]
 800262e:	2b2a      	cmp	r3, #42	; 0x2a
 8002630:	d135      	bne.n	800269e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	b29a      	uxth	r2, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002644:	b29b      	uxth	r3, r3
 8002646:	2b00      	cmp	r3, #0
 8002648:	d005      	beq.n	8002656 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264e:	f043 0204 	orr.w	r2, r3, #4
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	685a      	ldr	r2, [r3, #4]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002664:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800266a:	4618      	mov	r0, r3
 800266c:	f7fe fb8d 	bl	8000d8a <HAL_DMA_GetState>
 8002670:	4603      	mov	r3, r0
 8002672:	2b01      	cmp	r3, #1
 8002674:	d049      	beq.n	800270a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800267a:	4a69      	ldr	r2, [pc, #420]	; (8002820 <I2C_Slave_STOPF+0x258>)
 800267c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002682:	4618      	mov	r0, r3
 8002684:	f7fe fb5f 	bl	8000d46 <HAL_DMA_Abort_IT>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d03d      	beq.n	800270a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002692:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002698:	4610      	mov	r0, r2
 800269a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800269c:	e035      	b.n	800270a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	b29a      	uxth	r2, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d005      	beq.n	80026c2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ba:	f043 0204 	orr.w	r2, r3, #4
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	685a      	ldr	r2, [r3, #4]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026d0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7fe fb57 	bl	8000d8a <HAL_DMA_GetState>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d014      	beq.n	800270c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026e6:	4a4e      	ldr	r2, [pc, #312]	; (8002820 <I2C_Slave_STOPF+0x258>)
 80026e8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026ee:	4618      	mov	r0, r3
 80026f0:	f7fe fb29 	bl	8000d46 <HAL_DMA_Abort_IT>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d008      	beq.n	800270c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002704:	4610      	mov	r0, r2
 8002706:	4798      	blx	r3
 8002708:	e000      	b.n	800270c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800270a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002710:	b29b      	uxth	r3, r3
 8002712:	2b00      	cmp	r3, #0
 8002714:	d03e      	beq.n	8002794 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	695b      	ldr	r3, [r3, #20]
 800271c:	f003 0304 	and.w	r3, r3, #4
 8002720:	2b04      	cmp	r3, #4
 8002722:	d112      	bne.n	800274a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	691a      	ldr	r2, [r3, #16]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272e:	b2d2      	uxtb	r2, r2
 8002730:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002736:	1c5a      	adds	r2, r3, #1
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002740:	b29b      	uxth	r3, r3
 8002742:	3b01      	subs	r3, #1
 8002744:	b29a      	uxth	r2, r3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	695b      	ldr	r3, [r3, #20]
 8002750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002754:	2b40      	cmp	r3, #64	; 0x40
 8002756:	d112      	bne.n	800277e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	691a      	ldr	r2, [r3, #16]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002762:	b2d2      	uxtb	r2, r2
 8002764:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276a:	1c5a      	adds	r2, r3, #1
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002774:	b29b      	uxth	r3, r3
 8002776:	3b01      	subs	r3, #1
 8002778:	b29a      	uxth	r2, r3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002782:	b29b      	uxth	r3, r3
 8002784:	2b00      	cmp	r3, #0
 8002786:	d005      	beq.n	8002794 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278c:	f043 0204 	orr.w	r2, r3, #4
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002798:	2b00      	cmp	r3, #0
 800279a:	d003      	beq.n	80027a4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f000 f8b3 	bl	8002908 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80027a2:	e039      	b.n	8002818 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80027a4:	7bfb      	ldrb	r3, [r7, #15]
 80027a6:	2b2a      	cmp	r3, #42	; 0x2a
 80027a8:	d109      	bne.n	80027be <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2228      	movs	r2, #40	; 0x28
 80027b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f7ff f827 	bl	800180c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	2b28      	cmp	r3, #40	; 0x28
 80027c8:	d111      	bne.n	80027ee <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a15      	ldr	r2, [pc, #84]	; (8002824 <I2C_Slave_STOPF+0x25c>)
 80027ce:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2220      	movs	r2, #32
 80027da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f7ff f828 	bl	800183c <HAL_I2C_ListenCpltCallback>
}
 80027ec:	e014      	b.n	8002818 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f2:	2b22      	cmp	r3, #34	; 0x22
 80027f4:	d002      	beq.n	80027fc <I2C_Slave_STOPF+0x234>
 80027f6:	7bfb      	ldrb	r3, [r7, #15]
 80027f8:	2b22      	cmp	r3, #34	; 0x22
 80027fa:	d10d      	bne.n	8002818 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2200      	movs	r2, #0
 8002800:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2220      	movs	r2, #32
 8002806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f7fe fffa 	bl	800180c <HAL_I2C_SlaveRxCpltCallback>
}
 8002818:	bf00      	nop
 800281a:	3710      	adds	r7, #16
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}
 8002820:	08002b6d 	.word	0x08002b6d
 8002824:	ffff0000 	.word	0xffff0000

08002828 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002836:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800283c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	2b08      	cmp	r3, #8
 8002842:	d002      	beq.n	800284a <I2C_Slave_AF+0x22>
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	2b20      	cmp	r3, #32
 8002848:	d129      	bne.n	800289e <I2C_Slave_AF+0x76>
 800284a:	7bfb      	ldrb	r3, [r7, #15]
 800284c:	2b28      	cmp	r3, #40	; 0x28
 800284e:	d126      	bne.n	800289e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	4a2c      	ldr	r2, [pc, #176]	; (8002904 <I2C_Slave_AF+0xdc>)
 8002854:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	685a      	ldr	r2, [r3, #4]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002864:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800286e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800287e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2200      	movs	r2, #0
 8002884:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2220      	movs	r2, #32
 800288a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f7fe ffd0 	bl	800183c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800289c:	e02e      	b.n	80028fc <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800289e:	7bfb      	ldrb	r3, [r7, #15]
 80028a0:	2b21      	cmp	r3, #33	; 0x21
 80028a2:	d126      	bne.n	80028f2 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	4a17      	ldr	r2, [pc, #92]	; (8002904 <I2C_Slave_AF+0xdc>)
 80028a8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2221      	movs	r2, #33	; 0x21
 80028ae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2220      	movs	r2, #32
 80028b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	685a      	ldr	r2, [r3, #4]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80028ce:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80028d8:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028e8:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f7fe ff84 	bl	80017f8 <HAL_I2C_SlaveTxCpltCallback>
}
 80028f0:	e004      	b.n	80028fc <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80028fa:	615a      	str	r2, [r3, #20]
}
 80028fc:	bf00      	nop
 80028fe:	3710      	adds	r7, #16
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	ffff0000 	.word	0xffff0000

08002908 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002916:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800291e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002920:	7bbb      	ldrb	r3, [r7, #14]
 8002922:	2b10      	cmp	r3, #16
 8002924:	d002      	beq.n	800292c <I2C_ITError+0x24>
 8002926:	7bbb      	ldrb	r3, [r7, #14]
 8002928:	2b40      	cmp	r3, #64	; 0x40
 800292a:	d10a      	bne.n	8002942 <I2C_ITError+0x3a>
 800292c:	7bfb      	ldrb	r3, [r7, #15]
 800292e:	2b22      	cmp	r3, #34	; 0x22
 8002930:	d107      	bne.n	8002942 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002940:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002942:	7bfb      	ldrb	r3, [r7, #15]
 8002944:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002948:	2b28      	cmp	r3, #40	; 0x28
 800294a:	d107      	bne.n	800295c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2228      	movs	r2, #40	; 0x28
 8002956:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800295a:	e015      	b.n	8002988 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002966:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800296a:	d00a      	beq.n	8002982 <I2C_ITError+0x7a>
 800296c:	7bfb      	ldrb	r3, [r7, #15]
 800296e:	2b60      	cmp	r3, #96	; 0x60
 8002970:	d007      	beq.n	8002982 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2220      	movs	r2, #32
 8002976:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002992:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002996:	d162      	bne.n	8002a5e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	685a      	ldr	r2, [r3, #4]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029a6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d020      	beq.n	80029f8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029ba:	4a6a      	ldr	r2, [pc, #424]	; (8002b64 <I2C_ITError+0x25c>)
 80029bc:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029c2:	4618      	mov	r0, r3
 80029c4:	f7fe f9bf 	bl	8000d46 <HAL_DMA_Abort_IT>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	f000 8089 	beq.w	8002ae2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f022 0201 	bic.w	r2, r2, #1
 80029de:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2220      	movs	r2, #32
 80029e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80029f2:	4610      	mov	r0, r2
 80029f4:	4798      	blx	r3
 80029f6:	e074      	b.n	8002ae2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029fc:	4a59      	ldr	r2, [pc, #356]	; (8002b64 <I2C_ITError+0x25c>)
 80029fe:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7fe f99e 	bl	8000d46 <HAL_DMA_Abort_IT>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d068      	beq.n	8002ae2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	695b      	ldr	r3, [r3, #20]
 8002a16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a1a:	2b40      	cmp	r3, #64	; 0x40
 8002a1c:	d10b      	bne.n	8002a36 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	691a      	ldr	r2, [r3, #16]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a28:	b2d2      	uxtb	r2, r2
 8002a2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a30:	1c5a      	adds	r2, r3, #1
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f022 0201 	bic.w	r2, r2, #1
 8002a44:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2220      	movs	r2, #32
 8002a4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a58:	4610      	mov	r0, r2
 8002a5a:	4798      	blx	r3
 8002a5c:	e041      	b.n	8002ae2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	2b60      	cmp	r3, #96	; 0x60
 8002a68:	d125      	bne.n	8002ab6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2220      	movs	r2, #32
 8002a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	695b      	ldr	r3, [r3, #20]
 8002a7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a82:	2b40      	cmp	r3, #64	; 0x40
 8002a84:	d10b      	bne.n	8002a9e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	691a      	ldr	r2, [r3, #16]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a90:	b2d2      	uxtb	r2, r2
 8002a92:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a98:	1c5a      	adds	r2, r3, #1
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f022 0201 	bic.w	r2, r2, #1
 8002aac:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f7fe feec 	bl	800188c <HAL_I2C_AbortCpltCallback>
 8002ab4:	e015      	b.n	8002ae2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	695b      	ldr	r3, [r3, #20]
 8002abc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ac0:	2b40      	cmp	r3, #64	; 0x40
 8002ac2:	d10b      	bne.n	8002adc <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	691a      	ldr	r2, [r3, #16]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ace:	b2d2      	uxtb	r2, r2
 8002ad0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad6:	1c5a      	adds	r2, r3, #1
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f7fe fecb 	bl	8001878 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	f003 0301 	and.w	r3, r3, #1
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d10e      	bne.n	8002b10 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d109      	bne.n	8002b10 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d104      	bne.n	8002b10 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d007      	beq.n	8002b20 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	685a      	ldr	r2, [r3, #4]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002b1e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b26:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2c:	f003 0304 	and.w	r3, r3, #4
 8002b30:	2b04      	cmp	r3, #4
 8002b32:	d113      	bne.n	8002b5c <I2C_ITError+0x254>
 8002b34:	7bfb      	ldrb	r3, [r7, #15]
 8002b36:	2b28      	cmp	r3, #40	; 0x28
 8002b38:	d110      	bne.n	8002b5c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a0a      	ldr	r2, [pc, #40]	; (8002b68 <I2C_ITError+0x260>)
 8002b3e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2200      	movs	r2, #0
 8002b44:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2220      	movs	r2, #32
 8002b4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f7fe fe70 	bl	800183c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002b5c:	bf00      	nop
 8002b5e:	3710      	adds	r7, #16
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	08002b6d 	.word	0x08002b6d
 8002b68:	ffff0000 	.word	0xffff0000

08002b6c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b086      	sub	sp, #24
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002b74:	2300      	movs	r3, #0
 8002b76:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b7c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b84:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002b86:	4b4b      	ldr	r3, [pc, #300]	; (8002cb4 <I2C_DMAAbort+0x148>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	08db      	lsrs	r3, r3, #3
 8002b8c:	4a4a      	ldr	r2, [pc, #296]	; (8002cb8 <I2C_DMAAbort+0x14c>)
 8002b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b92:	0a1a      	lsrs	r2, r3, #8
 8002b94:	4613      	mov	r3, r2
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	4413      	add	r3, r2
 8002b9a:	00da      	lsls	r2, r3, #3
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d106      	bne.n	8002bb4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002baa:	f043 0220 	orr.w	r2, r3, #32
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8002bb2:	e00a      	b.n	8002bca <I2C_DMAAbort+0x5e>
    }
    count--;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bc8:	d0ea      	beq.n	8002ba0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d003      	beq.n	8002bda <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d003      	beq.n	8002bea <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002be6:	2200      	movs	r2, #0
 8002be8:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bf8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d003      	beq.n	8002c10 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d003      	beq.n	8002c20 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f022 0201 	bic.w	r2, r2, #1
 8002c2e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	2b60      	cmp	r3, #96	; 0x60
 8002c3a:	d10e      	bne.n	8002c5a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	2220      	movs	r2, #32
 8002c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	2200      	movs	r2, #0
 8002c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002c52:	6978      	ldr	r0, [r7, #20]
 8002c54:	f7fe fe1a 	bl	800188c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002c58:	e027      	b.n	8002caa <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002c5a:	7cfb      	ldrb	r3, [r7, #19]
 8002c5c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002c60:	2b28      	cmp	r3, #40	; 0x28
 8002c62:	d117      	bne.n	8002c94 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f042 0201 	orr.w	r2, r2, #1
 8002c72:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c82:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	2200      	movs	r2, #0
 8002c88:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	2228      	movs	r2, #40	; 0x28
 8002c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002c92:	e007      	b.n	8002ca4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	2220      	movs	r2, #32
 8002c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8002ca4:	6978      	ldr	r0, [r7, #20]
 8002ca6:	f7fe fde7 	bl	8001878 <HAL_I2C_ErrorCallback>
}
 8002caa:	bf00      	nop
 8002cac:	3718      	adds	r7, #24
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	20000000 	.word	0x20000000
 8002cb8:	14f8b589 	.word	0x14f8b589

08002cbc <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b085      	sub	sp, #20
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8002cc8:	4b13      	ldr	r3, [pc, #76]	; (8002d18 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	08db      	lsrs	r3, r3, #3
 8002cce:	4a13      	ldr	r2, [pc, #76]	; (8002d1c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8002cd0:	fba2 2303 	umull	r2, r3, r2, r3
 8002cd4:	0a1a      	lsrs	r2, r3, #8
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	4413      	add	r3, r2
 8002cdc:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	3b01      	subs	r3, #1
 8002ce2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d107      	bne.n	8002cfa <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cee:	f043 0220 	orr.w	r2, r3, #32
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e008      	b.n	8002d0c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d08:	d0e9      	beq.n	8002cde <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8002d0a:	2300      	movs	r3, #0
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3714      	adds	r7, #20
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr
 8002d18:	20000000 	.word	0x20000000
 8002d1c:	14f8b589 	.word	0x14f8b589

08002d20 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d2c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002d30:	d103      	bne.n	8002d3a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2201      	movs	r2, #1
 8002d36:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8002d38:	e007      	b.n	8002d4a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d3e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002d42:	d102      	bne.n	8002d4a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2208      	movs	r2, #8
 8002d48:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002d4a:	bf00      	nop
 8002d4c:	370c      	adds	r7, #12
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr

08002d56 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002d56:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d58:	b08f      	sub	sp, #60	; 0x3c
 8002d5a:	af0a      	add	r7, sp, #40	; 0x28
 8002d5c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d101      	bne.n	8002d68 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e10f      	b.n	8002f88 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d106      	bne.n	8002d88 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f005 fc58 	bl	8008638 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2203      	movs	r2, #3
 8002d8c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d102      	bne.n	8002da2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f001 ffab 	bl	8004d02 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	603b      	str	r3, [r7, #0]
 8002db2:	687e      	ldr	r6, [r7, #4]
 8002db4:	466d      	mov	r5, sp
 8002db6:	f106 0410 	add.w	r4, r6, #16
 8002dba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002dbc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002dbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002dc0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002dc2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002dc6:	e885 0003 	stmia.w	r5, {r0, r1}
 8002dca:	1d33      	adds	r3, r6, #4
 8002dcc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002dce:	6838      	ldr	r0, [r7, #0]
 8002dd0:	f001 fe82 	bl	8004ad8 <USB_CoreInit>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d005      	beq.n	8002de6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2202      	movs	r2, #2
 8002dde:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e0d0      	b.n	8002f88 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	2100      	movs	r1, #0
 8002dec:	4618      	mov	r0, r3
 8002dee:	f001 ff99 	bl	8004d24 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002df2:	2300      	movs	r3, #0
 8002df4:	73fb      	strb	r3, [r7, #15]
 8002df6:	e04a      	b.n	8002e8e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002df8:	7bfa      	ldrb	r2, [r7, #15]
 8002dfa:	6879      	ldr	r1, [r7, #4]
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	00db      	lsls	r3, r3, #3
 8002e00:	4413      	add	r3, r2
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	440b      	add	r3, r1
 8002e06:	333d      	adds	r3, #61	; 0x3d
 8002e08:	2201      	movs	r2, #1
 8002e0a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002e0c:	7bfa      	ldrb	r2, [r7, #15]
 8002e0e:	6879      	ldr	r1, [r7, #4]
 8002e10:	4613      	mov	r3, r2
 8002e12:	00db      	lsls	r3, r3, #3
 8002e14:	4413      	add	r3, r2
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	440b      	add	r3, r1
 8002e1a:	333c      	adds	r3, #60	; 0x3c
 8002e1c:	7bfa      	ldrb	r2, [r7, #15]
 8002e1e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002e20:	7bfa      	ldrb	r2, [r7, #15]
 8002e22:	7bfb      	ldrb	r3, [r7, #15]
 8002e24:	b298      	uxth	r0, r3
 8002e26:	6879      	ldr	r1, [r7, #4]
 8002e28:	4613      	mov	r3, r2
 8002e2a:	00db      	lsls	r3, r3, #3
 8002e2c:	4413      	add	r3, r2
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	440b      	add	r3, r1
 8002e32:	3344      	adds	r3, #68	; 0x44
 8002e34:	4602      	mov	r2, r0
 8002e36:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002e38:	7bfa      	ldrb	r2, [r7, #15]
 8002e3a:	6879      	ldr	r1, [r7, #4]
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	00db      	lsls	r3, r3, #3
 8002e40:	4413      	add	r3, r2
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	440b      	add	r3, r1
 8002e46:	3340      	adds	r3, #64	; 0x40
 8002e48:	2200      	movs	r2, #0
 8002e4a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002e4c:	7bfa      	ldrb	r2, [r7, #15]
 8002e4e:	6879      	ldr	r1, [r7, #4]
 8002e50:	4613      	mov	r3, r2
 8002e52:	00db      	lsls	r3, r3, #3
 8002e54:	4413      	add	r3, r2
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	440b      	add	r3, r1
 8002e5a:	3348      	adds	r3, #72	; 0x48
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002e60:	7bfa      	ldrb	r2, [r7, #15]
 8002e62:	6879      	ldr	r1, [r7, #4]
 8002e64:	4613      	mov	r3, r2
 8002e66:	00db      	lsls	r3, r3, #3
 8002e68:	4413      	add	r3, r2
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	440b      	add	r3, r1
 8002e6e:	334c      	adds	r3, #76	; 0x4c
 8002e70:	2200      	movs	r2, #0
 8002e72:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002e74:	7bfa      	ldrb	r2, [r7, #15]
 8002e76:	6879      	ldr	r1, [r7, #4]
 8002e78:	4613      	mov	r3, r2
 8002e7a:	00db      	lsls	r3, r3, #3
 8002e7c:	4413      	add	r3, r2
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	440b      	add	r3, r1
 8002e82:	3354      	adds	r3, #84	; 0x54
 8002e84:	2200      	movs	r2, #0
 8002e86:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e88:	7bfb      	ldrb	r3, [r7, #15]
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	73fb      	strb	r3, [r7, #15]
 8002e8e:	7bfa      	ldrb	r2, [r7, #15]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d3af      	bcc.n	8002df8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e98:	2300      	movs	r3, #0
 8002e9a:	73fb      	strb	r3, [r7, #15]
 8002e9c:	e044      	b.n	8002f28 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002e9e:	7bfa      	ldrb	r2, [r7, #15]
 8002ea0:	6879      	ldr	r1, [r7, #4]
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	00db      	lsls	r3, r3, #3
 8002ea6:	4413      	add	r3, r2
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	440b      	add	r3, r1
 8002eac:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002eb4:	7bfa      	ldrb	r2, [r7, #15]
 8002eb6:	6879      	ldr	r1, [r7, #4]
 8002eb8:	4613      	mov	r3, r2
 8002eba:	00db      	lsls	r3, r3, #3
 8002ebc:	4413      	add	r3, r2
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	440b      	add	r3, r1
 8002ec2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002ec6:	7bfa      	ldrb	r2, [r7, #15]
 8002ec8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002eca:	7bfa      	ldrb	r2, [r7, #15]
 8002ecc:	6879      	ldr	r1, [r7, #4]
 8002ece:	4613      	mov	r3, r2
 8002ed0:	00db      	lsls	r3, r3, #3
 8002ed2:	4413      	add	r3, r2
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	440b      	add	r3, r1
 8002ed8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002edc:	2200      	movs	r2, #0
 8002ede:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002ee0:	7bfa      	ldrb	r2, [r7, #15]
 8002ee2:	6879      	ldr	r1, [r7, #4]
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	00db      	lsls	r3, r3, #3
 8002ee8:	4413      	add	r3, r2
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	440b      	add	r3, r1
 8002eee:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002ef6:	7bfa      	ldrb	r2, [r7, #15]
 8002ef8:	6879      	ldr	r1, [r7, #4]
 8002efa:	4613      	mov	r3, r2
 8002efc:	00db      	lsls	r3, r3, #3
 8002efe:	4413      	add	r3, r2
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	440b      	add	r3, r1
 8002f04:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002f08:	2200      	movs	r2, #0
 8002f0a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002f0c:	7bfa      	ldrb	r2, [r7, #15]
 8002f0e:	6879      	ldr	r1, [r7, #4]
 8002f10:	4613      	mov	r3, r2
 8002f12:	00db      	lsls	r3, r3, #3
 8002f14:	4413      	add	r3, r2
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	440b      	add	r3, r1
 8002f1a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002f1e:	2200      	movs	r2, #0
 8002f20:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f22:	7bfb      	ldrb	r3, [r7, #15]
 8002f24:	3301      	adds	r3, #1
 8002f26:	73fb      	strb	r3, [r7, #15]
 8002f28:	7bfa      	ldrb	r2, [r7, #15]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d3b5      	bcc.n	8002e9e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	603b      	str	r3, [r7, #0]
 8002f38:	687e      	ldr	r6, [r7, #4]
 8002f3a:	466d      	mov	r5, sp
 8002f3c:	f106 0410 	add.w	r4, r6, #16
 8002f40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f48:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002f4c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002f50:	1d33      	adds	r3, r6, #4
 8002f52:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f54:	6838      	ldr	r0, [r7, #0]
 8002f56:	f001 ff31 	bl	8004dbc <USB_DevInit>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d005      	beq.n	8002f6c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2202      	movs	r2, #2
 8002f64:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e00d      	b.n	8002f88 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4618      	mov	r0, r3
 8002f82:	f003 f880 	bl	8006086 <USB_DevDisconnect>

  return HAL_OK;
 8002f86:	2300      	movs	r3, #0
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3714      	adds	r7, #20
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002f90 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d101      	bne.n	8002fac <HAL_PCD_Start+0x1c>
 8002fa8:	2302      	movs	r3, #2
 8002faa:	e020      	b.n	8002fee <HAL_PCD_Start+0x5e>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d109      	bne.n	8002fd0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d005      	beq.n	8002fd0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fc8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f001 fe83 	bl	8004ce0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f003 f830 	bl	8006044 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3710      	adds	r7, #16
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}

08002ff6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002ff6:	b590      	push	{r4, r7, lr}
 8002ff8:	b08d      	sub	sp, #52	; 0x34
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003004:	6a3b      	ldr	r3, [r7, #32]
 8003006:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4618      	mov	r0, r3
 800300e:	f003 f8ee 	bl	80061ee <USB_GetMode>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	f040 848a 	bne.w	800392e <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4618      	mov	r0, r3
 8003020:	f003 f852 	bl	80060c8 <USB_ReadInterrupts>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	f000 8480 	beq.w	800392c <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	0a1b      	lsrs	r3, r3, #8
 8003036:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4618      	mov	r0, r3
 8003046:	f003 f83f 	bl	80060c8 <USB_ReadInterrupts>
 800304a:	4603      	mov	r3, r0
 800304c:	f003 0302 	and.w	r3, r3, #2
 8003050:	2b02      	cmp	r3, #2
 8003052:	d107      	bne.n	8003064 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	695a      	ldr	r2, [r3, #20]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f002 0202 	and.w	r2, r2, #2
 8003062:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4618      	mov	r0, r3
 800306a:	f003 f82d 	bl	80060c8 <USB_ReadInterrupts>
 800306e:	4603      	mov	r3, r0
 8003070:	f003 0310 	and.w	r3, r3, #16
 8003074:	2b10      	cmp	r3, #16
 8003076:	d161      	bne.n	800313c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	699a      	ldr	r2, [r3, #24]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f022 0210 	bic.w	r2, r2, #16
 8003086:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003088:	6a3b      	ldr	r3, [r7, #32]
 800308a:	6a1b      	ldr	r3, [r3, #32]
 800308c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800308e:	69bb      	ldr	r3, [r7, #24]
 8003090:	f003 020f 	and.w	r2, r3, #15
 8003094:	4613      	mov	r3, r2
 8003096:	00db      	lsls	r3, r3, #3
 8003098:	4413      	add	r3, r2
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	4413      	add	r3, r2
 80030a4:	3304      	adds	r3, #4
 80030a6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	0c5b      	lsrs	r3, r3, #17
 80030ac:	f003 030f 	and.w	r3, r3, #15
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	d124      	bne.n	80030fe <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80030b4:	69ba      	ldr	r2, [r7, #24]
 80030b6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80030ba:	4013      	ands	r3, r2
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d035      	beq.n	800312c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	091b      	lsrs	r3, r3, #4
 80030c8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80030ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	461a      	mov	r2, r3
 80030d2:	6a38      	ldr	r0, [r7, #32]
 80030d4:	f002 fe64 	bl	8005da0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	691a      	ldr	r2, [r3, #16]
 80030dc:	69bb      	ldr	r3, [r7, #24]
 80030de:	091b      	lsrs	r3, r3, #4
 80030e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80030e4:	441a      	add	r2, r3
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	6a1a      	ldr	r2, [r3, #32]
 80030ee:	69bb      	ldr	r3, [r7, #24]
 80030f0:	091b      	lsrs	r3, r3, #4
 80030f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80030f6:	441a      	add	r2, r3
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	621a      	str	r2, [r3, #32]
 80030fc:	e016      	b.n	800312c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	0c5b      	lsrs	r3, r3, #17
 8003102:	f003 030f 	and.w	r3, r3, #15
 8003106:	2b06      	cmp	r3, #6
 8003108:	d110      	bne.n	800312c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003110:	2208      	movs	r2, #8
 8003112:	4619      	mov	r1, r3
 8003114:	6a38      	ldr	r0, [r7, #32]
 8003116:	f002 fe43 	bl	8005da0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	6a1a      	ldr	r2, [r3, #32]
 800311e:	69bb      	ldr	r3, [r7, #24]
 8003120:	091b      	lsrs	r3, r3, #4
 8003122:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003126:	441a      	add	r2, r3
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	699a      	ldr	r2, [r3, #24]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f042 0210 	orr.w	r2, r2, #16
 800313a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4618      	mov	r0, r3
 8003142:	f002 ffc1 	bl	80060c8 <USB_ReadInterrupts>
 8003146:	4603      	mov	r3, r0
 8003148:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800314c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003150:	f040 80a7 	bne.w	80032a2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003154:	2300      	movs	r3, #0
 8003156:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4618      	mov	r0, r3
 800315e:	f002 ffc6 	bl	80060ee <USB_ReadDevAllOutEpInterrupt>
 8003162:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003164:	e099      	b.n	800329a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003168:	f003 0301 	and.w	r3, r3, #1
 800316c:	2b00      	cmp	r3, #0
 800316e:	f000 808e 	beq.w	800328e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003178:	b2d2      	uxtb	r2, r2
 800317a:	4611      	mov	r1, r2
 800317c:	4618      	mov	r0, r3
 800317e:	f002 ffea 	bl	8006156 <USB_ReadDevOutEPInterrupt>
 8003182:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	f003 0301 	and.w	r3, r3, #1
 800318a:	2b00      	cmp	r3, #0
 800318c:	d00c      	beq.n	80031a8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800318e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003190:	015a      	lsls	r2, r3, #5
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	4413      	add	r3, r2
 8003196:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800319a:	461a      	mov	r2, r3
 800319c:	2301      	movs	r3, #1
 800319e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80031a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f000 fec2 	bl	8003f2c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	f003 0308 	and.w	r3, r3, #8
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d00c      	beq.n	80031cc <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80031b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b4:	015a      	lsls	r2, r3, #5
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	4413      	add	r3, r2
 80031ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031be:	461a      	mov	r2, r3
 80031c0:	2308      	movs	r3, #8
 80031c2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80031c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f000 ff98 	bl	80040fc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	f003 0310 	and.w	r3, r3, #16
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d008      	beq.n	80031e8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80031d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d8:	015a      	lsls	r2, r3, #5
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	4413      	add	r3, r2
 80031de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031e2:	461a      	mov	r2, r3
 80031e4:	2310      	movs	r3, #16
 80031e6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	f003 0302 	and.w	r3, r3, #2
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d030      	beq.n	8003254 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80031f2:	6a3b      	ldr	r3, [r7, #32]
 80031f4:	695b      	ldr	r3, [r3, #20]
 80031f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031fa:	2b80      	cmp	r3, #128	; 0x80
 80031fc:	d109      	bne.n	8003212 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	69fa      	ldr	r2, [r7, #28]
 8003208:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800320c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003210:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003212:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003214:	4613      	mov	r3, r2
 8003216:	00db      	lsls	r3, r3, #3
 8003218:	4413      	add	r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	4413      	add	r3, r2
 8003224:	3304      	adds	r3, #4
 8003226:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	78db      	ldrb	r3, [r3, #3]
 800322c:	2b01      	cmp	r3, #1
 800322e:	d108      	bne.n	8003242 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	2200      	movs	r2, #0
 8003234:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003238:	b2db      	uxtb	r3, r3
 800323a:	4619      	mov	r1, r3
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f005 faf7 	bl	8008830 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003244:	015a      	lsls	r2, r3, #5
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	4413      	add	r3, r2
 800324a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800324e:	461a      	mov	r2, r3
 8003250:	2302      	movs	r3, #2
 8003252:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	f003 0320 	and.w	r3, r3, #32
 800325a:	2b00      	cmp	r3, #0
 800325c:	d008      	beq.n	8003270 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800325e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003260:	015a      	lsls	r2, r3, #5
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	4413      	add	r3, r2
 8003266:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800326a:	461a      	mov	r2, r3
 800326c:	2320      	movs	r3, #32
 800326e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d009      	beq.n	800328e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800327a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327c:	015a      	lsls	r2, r3, #5
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	4413      	add	r3, r2
 8003282:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003286:	461a      	mov	r2, r3
 8003288:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800328c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800328e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003290:	3301      	adds	r3, #1
 8003292:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003296:	085b      	lsrs	r3, r3, #1
 8003298:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800329a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800329c:	2b00      	cmp	r3, #0
 800329e:	f47f af62 	bne.w	8003166 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4618      	mov	r0, r3
 80032a8:	f002 ff0e 	bl	80060c8 <USB_ReadInterrupts>
 80032ac:	4603      	mov	r3, r0
 80032ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032b2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80032b6:	f040 80db 	bne.w	8003470 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4618      	mov	r0, r3
 80032c0:	f002 ff2f 	bl	8006122 <USB_ReadDevAllInEpInterrupt>
 80032c4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80032c6:	2300      	movs	r3, #0
 80032c8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80032ca:	e0cd      	b.n	8003468 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80032cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ce:	f003 0301 	and.w	r3, r3, #1
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	f000 80c2 	beq.w	800345c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032de:	b2d2      	uxtb	r2, r2
 80032e0:	4611      	mov	r1, r2
 80032e2:	4618      	mov	r0, r3
 80032e4:	f002 ff55 	bl	8006192 <USB_ReadDevInEPInterrupt>
 80032e8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	f003 0301 	and.w	r3, r3, #1
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d057      	beq.n	80033a4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80032f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f6:	f003 030f 	and.w	r3, r3, #15
 80032fa:	2201      	movs	r2, #1
 80032fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003300:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003308:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	43db      	mvns	r3, r3
 800330e:	69f9      	ldr	r1, [r7, #28]
 8003310:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003314:	4013      	ands	r3, r2
 8003316:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331a:	015a      	lsls	r2, r3, #5
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	4413      	add	r3, r2
 8003320:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003324:	461a      	mov	r2, r3
 8003326:	2301      	movs	r3, #1
 8003328:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	691b      	ldr	r3, [r3, #16]
 800332e:	2b01      	cmp	r3, #1
 8003330:	d132      	bne.n	8003398 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003332:	6879      	ldr	r1, [r7, #4]
 8003334:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003336:	4613      	mov	r3, r2
 8003338:	00db      	lsls	r3, r3, #3
 800333a:	4413      	add	r3, r2
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	440b      	add	r3, r1
 8003340:	334c      	adds	r3, #76	; 0x4c
 8003342:	6819      	ldr	r1, [r3, #0]
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003348:	4613      	mov	r3, r2
 800334a:	00db      	lsls	r3, r3, #3
 800334c:	4413      	add	r3, r2
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	4403      	add	r3, r0
 8003352:	3348      	adds	r3, #72	; 0x48
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4419      	add	r1, r3
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800335c:	4613      	mov	r3, r2
 800335e:	00db      	lsls	r3, r3, #3
 8003360:	4413      	add	r3, r2
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	4403      	add	r3, r0
 8003366:	334c      	adds	r3, #76	; 0x4c
 8003368:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800336a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336c:	2b00      	cmp	r3, #0
 800336e:	d113      	bne.n	8003398 <HAL_PCD_IRQHandler+0x3a2>
 8003370:	6879      	ldr	r1, [r7, #4]
 8003372:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003374:	4613      	mov	r3, r2
 8003376:	00db      	lsls	r3, r3, #3
 8003378:	4413      	add	r3, r2
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	440b      	add	r3, r1
 800337e:	3354      	adds	r3, #84	; 0x54
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d108      	bne.n	8003398 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6818      	ldr	r0, [r3, #0]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003390:	461a      	mov	r2, r3
 8003392:	2101      	movs	r1, #1
 8003394:	f002 ff5c 	bl	8006250 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339a:	b2db      	uxtb	r3, r3
 800339c:	4619      	mov	r1, r3
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f005 f9cb 	bl	800873a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	f003 0308 	and.w	r3, r3, #8
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d008      	beq.n	80033c0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80033ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b0:	015a      	lsls	r2, r3, #5
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	4413      	add	r3, r2
 80033b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033ba:	461a      	mov	r2, r3
 80033bc:	2308      	movs	r3, #8
 80033be:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	f003 0310 	and.w	r3, r3, #16
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d008      	beq.n	80033dc <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80033ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033cc:	015a      	lsls	r2, r3, #5
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	4413      	add	r3, r2
 80033d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033d6:	461a      	mov	r2, r3
 80033d8:	2310      	movs	r3, #16
 80033da:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d008      	beq.n	80033f8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80033e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e8:	015a      	lsls	r2, r3, #5
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	4413      	add	r3, r2
 80033ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033f2:	461a      	mov	r2, r3
 80033f4:	2340      	movs	r3, #64	; 0x40
 80033f6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	f003 0302 	and.w	r3, r3, #2
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d023      	beq.n	800344a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003402:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003404:	6a38      	ldr	r0, [r7, #32]
 8003406:	f001 fe3d 	bl	8005084 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800340a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800340c:	4613      	mov	r3, r2
 800340e:	00db      	lsls	r3, r3, #3
 8003410:	4413      	add	r3, r2
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	3338      	adds	r3, #56	; 0x38
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	4413      	add	r3, r2
 800341a:	3304      	adds	r3, #4
 800341c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	78db      	ldrb	r3, [r3, #3]
 8003422:	2b01      	cmp	r3, #1
 8003424:	d108      	bne.n	8003438 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	2200      	movs	r2, #0
 800342a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800342c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342e:	b2db      	uxtb	r3, r3
 8003430:	4619      	mov	r1, r3
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f005 fa0e 	bl	8008854 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343a:	015a      	lsls	r2, r3, #5
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	4413      	add	r3, r2
 8003440:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003444:	461a      	mov	r2, r3
 8003446:	2302      	movs	r3, #2
 8003448:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003450:	2b00      	cmp	r3, #0
 8003452:	d003      	beq.n	800345c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003454:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f000 fcdb 	bl	8003e12 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800345c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345e:	3301      	adds	r3, #1
 8003460:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003464:	085b      	lsrs	r3, r3, #1
 8003466:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800346a:	2b00      	cmp	r3, #0
 800346c:	f47f af2e 	bne.w	80032cc <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4618      	mov	r0, r3
 8003476:	f002 fe27 	bl	80060c8 <USB_ReadInterrupts>
 800347a:	4603      	mov	r3, r0
 800347c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003480:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003484:	d122      	bne.n	80034cc <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	69fa      	ldr	r2, [r7, #28]
 8003490:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003494:	f023 0301 	bic.w	r3, r3, #1
 8003498:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d108      	bne.n	80034b6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80034ac:	2100      	movs	r1, #0
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f000 fec2 	bl	8004238 <HAL_PCDEx_LPM_Callback>
 80034b4:	e002      	b.n	80034bc <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f005 f9ac 	bl	8008814 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	695a      	ldr	r2, [r3, #20]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80034ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4618      	mov	r0, r3
 80034d2:	f002 fdf9 	bl	80060c8 <USB_ReadInterrupts>
 80034d6:	4603      	mov	r3, r0
 80034d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034e0:	d112      	bne.n	8003508 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d102      	bne.n	80034f8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f005 f968 	bl	80087c8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	695a      	ldr	r2, [r3, #20]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003506:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4618      	mov	r0, r3
 800350e:	f002 fddb 	bl	80060c8 <USB_ReadInterrupts>
 8003512:	4603      	mov	r3, r0
 8003514:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003518:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800351c:	f040 80b7 	bne.w	800368e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	69fa      	ldr	r2, [r7, #28]
 800352a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800352e:	f023 0301 	bic.w	r3, r3, #1
 8003532:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	2110      	movs	r1, #16
 800353a:	4618      	mov	r0, r3
 800353c:	f001 fda2 	bl	8005084 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003540:	2300      	movs	r3, #0
 8003542:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003544:	e046      	b.n	80035d4 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003548:	015a      	lsls	r2, r3, #5
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	4413      	add	r3, r2
 800354e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003552:	461a      	mov	r2, r3
 8003554:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003558:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800355a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800355c:	015a      	lsls	r2, r3, #5
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	4413      	add	r3, r2
 8003562:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800356a:	0151      	lsls	r1, r2, #5
 800356c:	69fa      	ldr	r2, [r7, #28]
 800356e:	440a      	add	r2, r1
 8003570:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003574:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003578:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800357a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800357c:	015a      	lsls	r2, r3, #5
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	4413      	add	r3, r2
 8003582:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003586:	461a      	mov	r2, r3
 8003588:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800358c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800358e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003590:	015a      	lsls	r2, r3, #5
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	4413      	add	r3, r2
 8003596:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800359e:	0151      	lsls	r1, r2, #5
 80035a0:	69fa      	ldr	r2, [r7, #28]
 80035a2:	440a      	add	r2, r1
 80035a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80035a8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80035ac:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80035ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035b0:	015a      	lsls	r2, r3, #5
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	4413      	add	r3, r2
 80035b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035be:	0151      	lsls	r1, r2, #5
 80035c0:	69fa      	ldr	r2, [r7, #28]
 80035c2:	440a      	add	r2, r1
 80035c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80035c8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80035cc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035d0:	3301      	adds	r3, #1
 80035d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035da:	429a      	cmp	r2, r3
 80035dc:	d3b3      	bcc.n	8003546 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035e4:	69db      	ldr	r3, [r3, #28]
 80035e6:	69fa      	ldr	r2, [r7, #28]
 80035e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035ec:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80035f0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d016      	beq.n	8003628 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003600:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003604:	69fa      	ldr	r2, [r7, #28]
 8003606:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800360a:	f043 030b 	orr.w	r3, r3, #11
 800360e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800361a:	69fa      	ldr	r2, [r7, #28]
 800361c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003620:	f043 030b 	orr.w	r3, r3, #11
 8003624:	6453      	str	r3, [r2, #68]	; 0x44
 8003626:	e015      	b.n	8003654 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800362e:	695b      	ldr	r3, [r3, #20]
 8003630:	69fa      	ldr	r2, [r7, #28]
 8003632:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003636:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800363a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800363e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003646:	691b      	ldr	r3, [r3, #16]
 8003648:	69fa      	ldr	r2, [r7, #28]
 800364a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800364e:	f043 030b 	orr.w	r3, r3, #11
 8003652:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	69fa      	ldr	r2, [r7, #28]
 800365e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003662:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003666:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6818      	ldr	r0, [r3, #0]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	691b      	ldr	r3, [r3, #16]
 8003670:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003678:	461a      	mov	r2, r3
 800367a:	f002 fde9 	bl	8006250 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	695a      	ldr	r2, [r3, #20]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800368c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4618      	mov	r0, r3
 8003694:	f002 fd18 	bl	80060c8 <USB_ReadInterrupts>
 8003698:	4603      	mov	r3, r0
 800369a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800369e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036a2:	d124      	bne.n	80036ee <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4618      	mov	r0, r3
 80036aa:	f002 fdae 	bl	800620a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4618      	mov	r0, r3
 80036b4:	f001 fd63 	bl	800517e <USB_GetDevSpeed>
 80036b8:	4603      	mov	r3, r0
 80036ba:	461a      	mov	r2, r3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681c      	ldr	r4, [r3, #0]
 80036c4:	f001 f9e8 	bl	8004a98 <HAL_RCC_GetHCLKFreq>
 80036c8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	461a      	mov	r2, r3
 80036d2:	4620      	mov	r0, r4
 80036d4:	f001 fa62 	bl	8004b9c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f005 f856 	bl	800878a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	695a      	ldr	r2, [r3, #20]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80036ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4618      	mov	r0, r3
 80036f4:	f002 fce8 	bl	80060c8 <USB_ReadInterrupts>
 80036f8:	4603      	mov	r3, r0
 80036fa:	f003 0308 	and.w	r3, r3, #8
 80036fe:	2b08      	cmp	r3, #8
 8003700:	d10a      	bne.n	8003718 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f005 f833 	bl	800876e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	695a      	ldr	r2, [r3, #20]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f002 0208 	and.w	r2, r2, #8
 8003716:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4618      	mov	r0, r3
 800371e:	f002 fcd3 	bl	80060c8 <USB_ReadInterrupts>
 8003722:	4603      	mov	r3, r0
 8003724:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003728:	2b80      	cmp	r3, #128	; 0x80
 800372a:	d122      	bne.n	8003772 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800372c:	6a3b      	ldr	r3, [r7, #32]
 800372e:	699b      	ldr	r3, [r3, #24]
 8003730:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003734:	6a3b      	ldr	r3, [r7, #32]
 8003736:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003738:	2301      	movs	r3, #1
 800373a:	627b      	str	r3, [r7, #36]	; 0x24
 800373c:	e014      	b.n	8003768 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800373e:	6879      	ldr	r1, [r7, #4]
 8003740:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003742:	4613      	mov	r3, r2
 8003744:	00db      	lsls	r3, r3, #3
 8003746:	4413      	add	r3, r2
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	440b      	add	r3, r1
 800374c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003750:	781b      	ldrb	r3, [r3, #0]
 8003752:	2b01      	cmp	r3, #1
 8003754:	d105      	bne.n	8003762 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003758:	b2db      	uxtb	r3, r3
 800375a:	4619      	mov	r1, r3
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f000 fb27 	bl	8003db0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003764:	3301      	adds	r3, #1
 8003766:	627b      	str	r3, [r7, #36]	; 0x24
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800376e:	429a      	cmp	r2, r3
 8003770:	d3e5      	bcc.n	800373e <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4618      	mov	r0, r3
 8003778:	f002 fca6 	bl	80060c8 <USB_ReadInterrupts>
 800377c:	4603      	mov	r3, r0
 800377e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003782:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003786:	d13b      	bne.n	8003800 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003788:	2301      	movs	r3, #1
 800378a:	627b      	str	r3, [r7, #36]	; 0x24
 800378c:	e02b      	b.n	80037e6 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800378e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003790:	015a      	lsls	r2, r3, #5
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	4413      	add	r3, r2
 8003796:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800379e:	6879      	ldr	r1, [r7, #4]
 80037a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037a2:	4613      	mov	r3, r2
 80037a4:	00db      	lsls	r3, r3, #3
 80037a6:	4413      	add	r3, r2
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	440b      	add	r3, r1
 80037ac:	3340      	adds	r3, #64	; 0x40
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d115      	bne.n	80037e0 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80037b4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	da12      	bge.n	80037e0 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80037ba:	6879      	ldr	r1, [r7, #4]
 80037bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037be:	4613      	mov	r3, r2
 80037c0:	00db      	lsls	r3, r3, #3
 80037c2:	4413      	add	r3, r2
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	440b      	add	r3, r1
 80037c8:	333f      	adds	r3, #63	; 0x3f
 80037ca:	2201      	movs	r2, #1
 80037cc:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80037ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	4619      	mov	r1, r3
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f000 fae8 	bl	8003db0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80037e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e2:	3301      	adds	r3, #1
 80037e4:	627b      	str	r3, [r7, #36]	; 0x24
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d3ce      	bcc.n	800378e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	695a      	ldr	r2, [r3, #20]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80037fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4618      	mov	r0, r3
 8003806:	f002 fc5f 	bl	80060c8 <USB_ReadInterrupts>
 800380a:	4603      	mov	r3, r0
 800380c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003810:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003814:	d155      	bne.n	80038c2 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003816:	2301      	movs	r3, #1
 8003818:	627b      	str	r3, [r7, #36]	; 0x24
 800381a:	e045      	b.n	80038a8 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800381c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381e:	015a      	lsls	r2, r3, #5
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	4413      	add	r3, r2
 8003824:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800382c:	6879      	ldr	r1, [r7, #4]
 800382e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003830:	4613      	mov	r3, r2
 8003832:	00db      	lsls	r3, r3, #3
 8003834:	4413      	add	r3, r2
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	440b      	add	r3, r1
 800383a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	2b01      	cmp	r3, #1
 8003842:	d12e      	bne.n	80038a2 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003844:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003846:	2b00      	cmp	r3, #0
 8003848:	da2b      	bge.n	80038a2 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800384a:	69bb      	ldr	r3, [r7, #24]
 800384c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003856:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800385a:	429a      	cmp	r2, r3
 800385c:	d121      	bne.n	80038a2 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800385e:	6879      	ldr	r1, [r7, #4]
 8003860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003862:	4613      	mov	r3, r2
 8003864:	00db      	lsls	r3, r3, #3
 8003866:	4413      	add	r3, r2
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	440b      	add	r3, r1
 800386c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003870:	2201      	movs	r2, #1
 8003872:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003874:	6a3b      	ldr	r3, [r7, #32]
 8003876:	699b      	ldr	r3, [r3, #24]
 8003878:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800387c:	6a3b      	ldr	r3, [r7, #32]
 800387e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003880:	6a3b      	ldr	r3, [r7, #32]
 8003882:	695b      	ldr	r3, [r3, #20]
 8003884:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003888:	2b00      	cmp	r3, #0
 800388a:	d10a      	bne.n	80038a2 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	69fa      	ldr	r2, [r7, #28]
 8003896:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800389a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800389e:	6053      	str	r3, [r2, #4]
            break;
 80038a0:	e007      	b.n	80038b2 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80038a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a4:	3301      	adds	r3, #1
 80038a6:	627b      	str	r3, [r7, #36]	; 0x24
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d3b4      	bcc.n	800381c <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	695a      	ldr	r2, [r3, #20]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80038c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4618      	mov	r0, r3
 80038c8:	f002 fbfe 	bl	80060c8 <USB_ReadInterrupts>
 80038cc:	4603      	mov	r3, r0
 80038ce:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80038d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038d6:	d10a      	bne.n	80038ee <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f004 ffcd 	bl	8008878 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	695a      	ldr	r2, [r3, #20]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80038ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4618      	mov	r0, r3
 80038f4:	f002 fbe8 	bl	80060c8 <USB_ReadInterrupts>
 80038f8:	4603      	mov	r3, r0
 80038fa:	f003 0304 	and.w	r3, r3, #4
 80038fe:	2b04      	cmp	r3, #4
 8003900:	d115      	bne.n	800392e <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800390a:	69bb      	ldr	r3, [r7, #24]
 800390c:	f003 0304 	and.w	r3, r3, #4
 8003910:	2b00      	cmp	r3, #0
 8003912:	d002      	beq.n	800391a <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f004 ffbd 	bl	8008894 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	6859      	ldr	r1, [r3, #4]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	69ba      	ldr	r2, [r7, #24]
 8003926:	430a      	orrs	r2, r1
 8003928:	605a      	str	r2, [r3, #4]
 800392a:	e000      	b.n	800392e <HAL_PCD_IRQHandler+0x938>
      return;
 800392c:	bf00      	nop
    }
  }
}
 800392e:	3734      	adds	r7, #52	; 0x34
 8003930:	46bd      	mov	sp, r7
 8003932:	bd90      	pop	{r4, r7, pc}

08003934 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	460b      	mov	r3, r1
 800393e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003946:	2b01      	cmp	r3, #1
 8003948:	d101      	bne.n	800394e <HAL_PCD_SetAddress+0x1a>
 800394a:	2302      	movs	r3, #2
 800394c:	e013      	b.n	8003976 <HAL_PCD_SetAddress+0x42>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2201      	movs	r2, #1
 8003952:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	78fa      	ldrb	r2, [r7, #3]
 800395a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	78fa      	ldrb	r2, [r7, #3]
 8003964:	4611      	mov	r1, r2
 8003966:	4618      	mov	r0, r3
 8003968:	f002 fb46 	bl	8005ff8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003974:	2300      	movs	r3, #0
}
 8003976:	4618      	mov	r0, r3
 8003978:	3708      	adds	r7, #8
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}

0800397e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800397e:	b580      	push	{r7, lr}
 8003980:	b084      	sub	sp, #16
 8003982:	af00      	add	r7, sp, #0
 8003984:	6078      	str	r0, [r7, #4]
 8003986:	4608      	mov	r0, r1
 8003988:	4611      	mov	r1, r2
 800398a:	461a      	mov	r2, r3
 800398c:	4603      	mov	r3, r0
 800398e:	70fb      	strb	r3, [r7, #3]
 8003990:	460b      	mov	r3, r1
 8003992:	803b      	strh	r3, [r7, #0]
 8003994:	4613      	mov	r3, r2
 8003996:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003998:	2300      	movs	r3, #0
 800399a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800399c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	da0f      	bge.n	80039c4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039a4:	78fb      	ldrb	r3, [r7, #3]
 80039a6:	f003 020f 	and.w	r2, r3, #15
 80039aa:	4613      	mov	r3, r2
 80039ac:	00db      	lsls	r3, r3, #3
 80039ae:	4413      	add	r3, r2
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	3338      	adds	r3, #56	; 0x38
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	4413      	add	r3, r2
 80039b8:	3304      	adds	r3, #4
 80039ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2201      	movs	r2, #1
 80039c0:	705a      	strb	r2, [r3, #1]
 80039c2:	e00f      	b.n	80039e4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80039c4:	78fb      	ldrb	r3, [r7, #3]
 80039c6:	f003 020f 	and.w	r2, r3, #15
 80039ca:	4613      	mov	r3, r2
 80039cc:	00db      	lsls	r3, r3, #3
 80039ce:	4413      	add	r3, r2
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	4413      	add	r3, r2
 80039da:	3304      	adds	r3, #4
 80039dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2200      	movs	r2, #0
 80039e2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80039e4:	78fb      	ldrb	r3, [r7, #3]
 80039e6:	f003 030f 	and.w	r3, r3, #15
 80039ea:	b2da      	uxtb	r2, r3
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80039f0:	883a      	ldrh	r2, [r7, #0]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	78ba      	ldrb	r2, [r7, #2]
 80039fa:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	785b      	ldrb	r3, [r3, #1]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d004      	beq.n	8003a0e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	781b      	ldrb	r3, [r3, #0]
 8003a08:	b29a      	uxth	r2, r3
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003a0e:	78bb      	ldrb	r3, [r7, #2]
 8003a10:	2b02      	cmp	r3, #2
 8003a12:	d102      	bne.n	8003a1a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2200      	movs	r2, #0
 8003a18:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d101      	bne.n	8003a28 <HAL_PCD_EP_Open+0xaa>
 8003a24:	2302      	movs	r3, #2
 8003a26:	e00e      	b.n	8003a46 <HAL_PCD_EP_Open+0xc8>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	68f9      	ldr	r1, [r7, #12]
 8003a36:	4618      	mov	r0, r3
 8003a38:	f001 fbc6 	bl	80051c8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003a44:	7afb      	ldrb	r3, [r7, #11]
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3710      	adds	r7, #16
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}

08003a4e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a4e:	b580      	push	{r7, lr}
 8003a50:	b084      	sub	sp, #16
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	6078      	str	r0, [r7, #4]
 8003a56:	460b      	mov	r3, r1
 8003a58:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003a5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	da0f      	bge.n	8003a82 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a62:	78fb      	ldrb	r3, [r7, #3]
 8003a64:	f003 020f 	and.w	r2, r3, #15
 8003a68:	4613      	mov	r3, r2
 8003a6a:	00db      	lsls	r3, r3, #3
 8003a6c:	4413      	add	r3, r2
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	3338      	adds	r3, #56	; 0x38
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	4413      	add	r3, r2
 8003a76:	3304      	adds	r3, #4
 8003a78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	705a      	strb	r2, [r3, #1]
 8003a80:	e00f      	b.n	8003aa2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a82:	78fb      	ldrb	r3, [r7, #3]
 8003a84:	f003 020f 	and.w	r2, r3, #15
 8003a88:	4613      	mov	r3, r2
 8003a8a:	00db      	lsls	r3, r3, #3
 8003a8c:	4413      	add	r3, r2
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	4413      	add	r3, r2
 8003a98:	3304      	adds	r3, #4
 8003a9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003aa2:	78fb      	ldrb	r3, [r7, #3]
 8003aa4:	f003 030f 	and.w	r3, r3, #15
 8003aa8:	b2da      	uxtb	r2, r3
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d101      	bne.n	8003abc <HAL_PCD_EP_Close+0x6e>
 8003ab8:	2302      	movs	r3, #2
 8003aba:	e00e      	b.n	8003ada <HAL_PCD_EP_Close+0x8c>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	68f9      	ldr	r1, [r7, #12]
 8003aca:	4618      	mov	r0, r3
 8003acc:	f001 fc04 	bl	80052d8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003ad8:	2300      	movs	r3, #0
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3710      	adds	r7, #16
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}

08003ae2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003ae2:	b580      	push	{r7, lr}
 8003ae4:	b086      	sub	sp, #24
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	60f8      	str	r0, [r7, #12]
 8003aea:	607a      	str	r2, [r7, #4]
 8003aec:	603b      	str	r3, [r7, #0]
 8003aee:	460b      	mov	r3, r1
 8003af0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003af2:	7afb      	ldrb	r3, [r7, #11]
 8003af4:	f003 020f 	and.w	r2, r3, #15
 8003af8:	4613      	mov	r3, r2
 8003afa:	00db      	lsls	r3, r3, #3
 8003afc:	4413      	add	r3, r2
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003b04:	68fa      	ldr	r2, [r7, #12]
 8003b06:	4413      	add	r3, r2
 8003b08:	3304      	adds	r3, #4
 8003b0a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	683a      	ldr	r2, [r7, #0]
 8003b16:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	2200      	movs	r2, #0
 8003b22:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b24:	7afb      	ldrb	r3, [r7, #11]
 8003b26:	f003 030f 	and.w	r3, r3, #15
 8003b2a:	b2da      	uxtb	r2, r3
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	691b      	ldr	r3, [r3, #16]
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d102      	bne.n	8003b3e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003b3e:	7afb      	ldrb	r3, [r7, #11]
 8003b40:	f003 030f 	and.w	r3, r3, #15
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d109      	bne.n	8003b5c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6818      	ldr	r0, [r3, #0]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	691b      	ldr	r3, [r3, #16]
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	461a      	mov	r2, r3
 8003b54:	6979      	ldr	r1, [r7, #20]
 8003b56:	f001 fee3 	bl	8005920 <USB_EP0StartXfer>
 8003b5a:	e008      	b.n	8003b6e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6818      	ldr	r0, [r3, #0]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	691b      	ldr	r3, [r3, #16]
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	461a      	mov	r2, r3
 8003b68:	6979      	ldr	r1, [r7, #20]
 8003b6a:	f001 fc91 	bl	8005490 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003b6e:	2300      	movs	r3, #0
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	3718      	adds	r7, #24
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	460b      	mov	r3, r1
 8003b82:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003b84:	78fb      	ldrb	r3, [r7, #3]
 8003b86:	f003 020f 	and.w	r2, r3, #15
 8003b8a:	6879      	ldr	r1, [r7, #4]
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	00db      	lsls	r3, r3, #3
 8003b90:	4413      	add	r3, r2
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	440b      	add	r3, r1
 8003b96:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003b9a:	681b      	ldr	r3, [r3, #0]
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	370c      	adds	r7, #12
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr

08003ba8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b086      	sub	sp, #24
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	60f8      	str	r0, [r7, #12]
 8003bb0:	607a      	str	r2, [r7, #4]
 8003bb2:	603b      	str	r3, [r7, #0]
 8003bb4:	460b      	mov	r3, r1
 8003bb6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bb8:	7afb      	ldrb	r3, [r7, #11]
 8003bba:	f003 020f 	and.w	r2, r3, #15
 8003bbe:	4613      	mov	r3, r2
 8003bc0:	00db      	lsls	r3, r3, #3
 8003bc2:	4413      	add	r3, r2
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	3338      	adds	r3, #56	; 0x38
 8003bc8:	68fa      	ldr	r2, [r7, #12]
 8003bca:	4413      	add	r3, r2
 8003bcc:	3304      	adds	r3, #4
 8003bce:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	683a      	ldr	r2, [r7, #0]
 8003bda:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	2200      	movs	r2, #0
 8003be0:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	2201      	movs	r2, #1
 8003be6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003be8:	7afb      	ldrb	r3, [r7, #11]
 8003bea:	f003 030f 	and.w	r3, r3, #15
 8003bee:	b2da      	uxtb	r2, r3
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	691b      	ldr	r3, [r3, #16]
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d102      	bne.n	8003c02 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003c02:	7afb      	ldrb	r3, [r7, #11]
 8003c04:	f003 030f 	and.w	r3, r3, #15
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d109      	bne.n	8003c20 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6818      	ldr	r0, [r3, #0]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	691b      	ldr	r3, [r3, #16]
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	461a      	mov	r2, r3
 8003c18:	6979      	ldr	r1, [r7, #20]
 8003c1a:	f001 fe81 	bl	8005920 <USB_EP0StartXfer>
 8003c1e:	e008      	b.n	8003c32 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6818      	ldr	r0, [r3, #0]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	691b      	ldr	r3, [r3, #16]
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	6979      	ldr	r1, [r7, #20]
 8003c2e:	f001 fc2f 	bl	8005490 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003c32:	2300      	movs	r3, #0
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3718      	adds	r7, #24
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	460b      	mov	r3, r1
 8003c46:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003c48:	78fb      	ldrb	r3, [r7, #3]
 8003c4a:	f003 020f 	and.w	r2, r3, #15
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d901      	bls.n	8003c5a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e050      	b.n	8003cfc <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003c5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	da0f      	bge.n	8003c82 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c62:	78fb      	ldrb	r3, [r7, #3]
 8003c64:	f003 020f 	and.w	r2, r3, #15
 8003c68:	4613      	mov	r3, r2
 8003c6a:	00db      	lsls	r3, r3, #3
 8003c6c:	4413      	add	r3, r2
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	3338      	adds	r3, #56	; 0x38
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	4413      	add	r3, r2
 8003c76:	3304      	adds	r3, #4
 8003c78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	705a      	strb	r2, [r3, #1]
 8003c80:	e00d      	b.n	8003c9e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003c82:	78fa      	ldrb	r2, [r7, #3]
 8003c84:	4613      	mov	r3, r2
 8003c86:	00db      	lsls	r3, r3, #3
 8003c88:	4413      	add	r3, r2
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	4413      	add	r3, r2
 8003c94:	3304      	adds	r3, #4
 8003c96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ca4:	78fb      	ldrb	r3, [r7, #3]
 8003ca6:	f003 030f 	and.w	r3, r3, #15
 8003caa:	b2da      	uxtb	r2, r3
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d101      	bne.n	8003cbe <HAL_PCD_EP_SetStall+0x82>
 8003cba:	2302      	movs	r3, #2
 8003cbc:	e01e      	b.n	8003cfc <HAL_PCD_EP_SetStall+0xc0>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	68f9      	ldr	r1, [r7, #12]
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f002 f8bf 	bl	8005e50 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003cd2:	78fb      	ldrb	r3, [r7, #3]
 8003cd4:	f003 030f 	and.w	r3, r3, #15
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d10a      	bne.n	8003cf2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6818      	ldr	r0, [r3, #0]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	691b      	ldr	r3, [r3, #16]
 8003ce4:	b2d9      	uxtb	r1, r3
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003cec:	461a      	mov	r2, r3
 8003cee:	f002 faaf 	bl	8006250 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003cfa:	2300      	movs	r3, #0
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3710      	adds	r7, #16
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}

08003d04 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b084      	sub	sp, #16
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	460b      	mov	r3, r1
 8003d0e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003d10:	78fb      	ldrb	r3, [r7, #3]
 8003d12:	f003 020f 	and.w	r2, r3, #15
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d901      	bls.n	8003d22 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e042      	b.n	8003da8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003d22:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	da0f      	bge.n	8003d4a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d2a:	78fb      	ldrb	r3, [r7, #3]
 8003d2c:	f003 020f 	and.w	r2, r3, #15
 8003d30:	4613      	mov	r3, r2
 8003d32:	00db      	lsls	r3, r3, #3
 8003d34:	4413      	add	r3, r2
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	3338      	adds	r3, #56	; 0x38
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	4413      	add	r3, r2
 8003d3e:	3304      	adds	r3, #4
 8003d40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2201      	movs	r2, #1
 8003d46:	705a      	strb	r2, [r3, #1]
 8003d48:	e00f      	b.n	8003d6a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d4a:	78fb      	ldrb	r3, [r7, #3]
 8003d4c:	f003 020f 	and.w	r2, r3, #15
 8003d50:	4613      	mov	r3, r2
 8003d52:	00db      	lsls	r3, r3, #3
 8003d54:	4413      	add	r3, r2
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	4413      	add	r3, r2
 8003d60:	3304      	adds	r3, #4
 8003d62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2200      	movs	r2, #0
 8003d68:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d70:	78fb      	ldrb	r3, [r7, #3]
 8003d72:	f003 030f 	and.w	r3, r3, #15
 8003d76:	b2da      	uxtb	r2, r3
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d101      	bne.n	8003d8a <HAL_PCD_EP_ClrStall+0x86>
 8003d86:	2302      	movs	r3, #2
 8003d88:	e00e      	b.n	8003da8 <HAL_PCD_EP_ClrStall+0xa4>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	68f9      	ldr	r1, [r7, #12]
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f002 f8c7 	bl	8005f2c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003da6:	2300      	movs	r3, #0
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3710      	adds	r7, #16
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}

08003db0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	460b      	mov	r3, r1
 8003dba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003dbc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	da0c      	bge.n	8003dde <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003dc4:	78fb      	ldrb	r3, [r7, #3]
 8003dc6:	f003 020f 	and.w	r2, r3, #15
 8003dca:	4613      	mov	r3, r2
 8003dcc:	00db      	lsls	r3, r3, #3
 8003dce:	4413      	add	r3, r2
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	3338      	adds	r3, #56	; 0x38
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	4413      	add	r3, r2
 8003dd8:	3304      	adds	r3, #4
 8003dda:	60fb      	str	r3, [r7, #12]
 8003ddc:	e00c      	b.n	8003df8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003dde:	78fb      	ldrb	r3, [r7, #3]
 8003de0:	f003 020f 	and.w	r2, r3, #15
 8003de4:	4613      	mov	r3, r2
 8003de6:	00db      	lsls	r3, r3, #3
 8003de8:	4413      	add	r3, r2
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003df0:	687a      	ldr	r2, [r7, #4]
 8003df2:	4413      	add	r3, r2
 8003df4:	3304      	adds	r3, #4
 8003df6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	68f9      	ldr	r1, [r7, #12]
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f001 fee6 	bl	8005bd0 <USB_EPStopXfer>
 8003e04:	4603      	mov	r3, r0
 8003e06:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003e08:	7afb      	ldrb	r3, [r7, #11]
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3710      	adds	r7, #16
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}

08003e12 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003e12:	b580      	push	{r7, lr}
 8003e14:	b08a      	sub	sp, #40	; 0x28
 8003e16:	af02      	add	r7, sp, #8
 8003e18:	6078      	str	r0, [r7, #4]
 8003e1a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003e26:	683a      	ldr	r2, [r7, #0]
 8003e28:	4613      	mov	r3, r2
 8003e2a:	00db      	lsls	r3, r3, #3
 8003e2c:	4413      	add	r3, r2
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	3338      	adds	r3, #56	; 0x38
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	4413      	add	r3, r2
 8003e36:	3304      	adds	r3, #4
 8003e38:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6a1a      	ldr	r2, [r3, #32]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	699b      	ldr	r3, [r3, #24]
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d901      	bls.n	8003e4a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e06c      	b.n	8003f24 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	699a      	ldr	r2, [r3, #24]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6a1b      	ldr	r3, [r3, #32]
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	69fa      	ldr	r2, [r7, #28]
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d902      	bls.n	8003e66 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003e66:	69fb      	ldr	r3, [r7, #28]
 8003e68:	3303      	adds	r3, #3
 8003e6a:	089b      	lsrs	r3, r3, #2
 8003e6c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003e6e:	e02b      	b.n	8003ec8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	699a      	ldr	r2, [r3, #24]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6a1b      	ldr	r3, [r3, #32]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	69fa      	ldr	r2, [r7, #28]
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d902      	bls.n	8003e8c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	3303      	adds	r3, #3
 8003e90:	089b      	lsrs	r3, r3, #2
 8003e92:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6919      	ldr	r1, [r3, #16]
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	b2da      	uxtb	r2, r3
 8003e9c:	69fb      	ldr	r3, [r7, #28]
 8003e9e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	9300      	str	r3, [sp, #0]
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	6978      	ldr	r0, [r7, #20]
 8003eac:	f001 ff3a 	bl	8005d24 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	691a      	ldr	r2, [r3, #16]
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	441a      	add	r2, r3
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6a1a      	ldr	r2, [r3, #32]
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	441a      	add	r2, r3
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	015a      	lsls	r2, r3, #5
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	4413      	add	r3, r2
 8003ed0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ed4:	699b      	ldr	r3, [r3, #24]
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	69ba      	ldr	r2, [r7, #24]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d809      	bhi.n	8003ef2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	6a1a      	ldr	r2, [r3, #32]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d203      	bcs.n	8003ef2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	699b      	ldr	r3, [r3, #24]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d1be      	bne.n	8003e70 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	699a      	ldr	r2, [r3, #24]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	6a1b      	ldr	r3, [r3, #32]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d811      	bhi.n	8003f22 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	f003 030f 	and.w	r3, r3, #15
 8003f04:	2201      	movs	r2, #1
 8003f06:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	43db      	mvns	r3, r3
 8003f18:	6939      	ldr	r1, [r7, #16]
 8003f1a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f1e:	4013      	ands	r3, r2
 8003f20:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003f22:	2300      	movs	r3, #0
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3720      	adds	r7, #32
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}

08003f2c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b088      	sub	sp, #32
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f3c:	69fb      	ldr	r3, [r7, #28]
 8003f3e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003f40:	69fb      	ldr	r3, [r7, #28]
 8003f42:	333c      	adds	r3, #60	; 0x3c
 8003f44:	3304      	adds	r3, #4
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	015a      	lsls	r2, r3, #5
 8003f4e:	69bb      	ldr	r3, [r7, #24]
 8003f50:	4413      	add	r3, r2
 8003f52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	691b      	ldr	r3, [r3, #16]
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d17b      	bne.n	800405a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	f003 0308 	and.w	r3, r3, #8
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d015      	beq.n	8003f98 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	4a61      	ldr	r2, [pc, #388]	; (80040f4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	f240 80b9 	bls.w	80040e8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	f000 80b3 	beq.w	80040e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	015a      	lsls	r2, r3, #5
 8003f86:	69bb      	ldr	r3, [r7, #24]
 8003f88:	4413      	add	r3, r2
 8003f8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f8e:	461a      	mov	r2, r3
 8003f90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f94:	6093      	str	r3, [r2, #8]
 8003f96:	e0a7      	b.n	80040e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	f003 0320 	and.w	r3, r3, #32
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d009      	beq.n	8003fb6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	015a      	lsls	r2, r3, #5
 8003fa6:	69bb      	ldr	r3, [r7, #24]
 8003fa8:	4413      	add	r3, r2
 8003faa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fae:	461a      	mov	r2, r3
 8003fb0:	2320      	movs	r3, #32
 8003fb2:	6093      	str	r3, [r2, #8]
 8003fb4:	e098      	b.n	80040e8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	f040 8093 	bne.w	80040e8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	4a4b      	ldr	r2, [pc, #300]	; (80040f4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d90f      	bls.n	8003fea <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d00a      	beq.n	8003fea <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	015a      	lsls	r2, r3, #5
 8003fd8:	69bb      	ldr	r3, [r7, #24]
 8003fda:	4413      	add	r3, r2
 8003fdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fe6:	6093      	str	r3, [r2, #8]
 8003fe8:	e07e      	b.n	80040e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003fea:	683a      	ldr	r2, [r7, #0]
 8003fec:	4613      	mov	r3, r2
 8003fee:	00db      	lsls	r3, r3, #3
 8003ff0:	4413      	add	r3, r2
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003ff8:	687a      	ldr	r2, [r7, #4]
 8003ffa:	4413      	add	r3, r2
 8003ffc:	3304      	adds	r3, #4
 8003ffe:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	69da      	ldr	r2, [r3, #28]
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	0159      	lsls	r1, r3, #5
 8004008:	69bb      	ldr	r3, [r7, #24]
 800400a:	440b      	add	r3, r1
 800400c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004010:	691b      	ldr	r3, [r3, #16]
 8004012:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004016:	1ad2      	subs	r2, r2, r3
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d114      	bne.n	800404c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	699b      	ldr	r3, [r3, #24]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d109      	bne.n	800403e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6818      	ldr	r0, [r3, #0]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004034:	461a      	mov	r2, r3
 8004036:	2101      	movs	r1, #1
 8004038:	f002 f90a 	bl	8006250 <USB_EP0_OutStart>
 800403c:	e006      	b.n	800404c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	691a      	ldr	r2, [r3, #16]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	6a1b      	ldr	r3, [r3, #32]
 8004046:	441a      	add	r2, r3
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	b2db      	uxtb	r3, r3
 8004050:	4619      	mov	r1, r3
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f004 fb56 	bl	8008704 <HAL_PCD_DataOutStageCallback>
 8004058:	e046      	b.n	80040e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	4a26      	ldr	r2, [pc, #152]	; (80040f8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d124      	bne.n	80040ac <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004068:	2b00      	cmp	r3, #0
 800406a:	d00a      	beq.n	8004082 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	015a      	lsls	r2, r3, #5
 8004070:	69bb      	ldr	r3, [r7, #24]
 8004072:	4413      	add	r3, r2
 8004074:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004078:	461a      	mov	r2, r3
 800407a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800407e:	6093      	str	r3, [r2, #8]
 8004080:	e032      	b.n	80040e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	f003 0320 	and.w	r3, r3, #32
 8004088:	2b00      	cmp	r3, #0
 800408a:	d008      	beq.n	800409e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	015a      	lsls	r2, r3, #5
 8004090:	69bb      	ldr	r3, [r7, #24]
 8004092:	4413      	add	r3, r2
 8004094:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004098:	461a      	mov	r2, r3
 800409a:	2320      	movs	r3, #32
 800409c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	4619      	mov	r1, r3
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f004 fb2d 	bl	8008704 <HAL_PCD_DataOutStageCallback>
 80040aa:	e01d      	b.n	80040e8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d114      	bne.n	80040dc <PCD_EP_OutXfrComplete_int+0x1b0>
 80040b2:	6879      	ldr	r1, [r7, #4]
 80040b4:	683a      	ldr	r2, [r7, #0]
 80040b6:	4613      	mov	r3, r2
 80040b8:	00db      	lsls	r3, r3, #3
 80040ba:	4413      	add	r3, r2
 80040bc:	009b      	lsls	r3, r3, #2
 80040be:	440b      	add	r3, r1
 80040c0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d108      	bne.n	80040dc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6818      	ldr	r0, [r3, #0]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80040d4:	461a      	mov	r2, r3
 80040d6:	2100      	movs	r1, #0
 80040d8:	f002 f8ba 	bl	8006250 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	4619      	mov	r1, r3
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f004 fb0e 	bl	8008704 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80040e8:	2300      	movs	r3, #0
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3720      	adds	r7, #32
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	bf00      	nop
 80040f4:	4f54300a 	.word	0x4f54300a
 80040f8:	4f54310a 	.word	0x4f54310a

080040fc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b086      	sub	sp, #24
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	333c      	adds	r3, #60	; 0x3c
 8004114:	3304      	adds	r3, #4
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	015a      	lsls	r2, r3, #5
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	4413      	add	r3, r2
 8004122:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	4a15      	ldr	r2, [pc, #84]	; (8004184 <PCD_EP_OutSetupPacket_int+0x88>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d90e      	bls.n	8004150 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004138:	2b00      	cmp	r3, #0
 800413a:	d009      	beq.n	8004150 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	015a      	lsls	r2, r3, #5
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	4413      	add	r3, r2
 8004144:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004148:	461a      	mov	r2, r3
 800414a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800414e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f004 fac5 	bl	80086e0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	4a0a      	ldr	r2, [pc, #40]	; (8004184 <PCD_EP_OutSetupPacket_int+0x88>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d90c      	bls.n	8004178 <PCD_EP_OutSetupPacket_int+0x7c>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	691b      	ldr	r3, [r3, #16]
 8004162:	2b01      	cmp	r3, #1
 8004164:	d108      	bne.n	8004178 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6818      	ldr	r0, [r3, #0]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004170:	461a      	mov	r2, r3
 8004172:	2101      	movs	r1, #1
 8004174:	f002 f86c 	bl	8006250 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004178:	2300      	movs	r3, #0
}
 800417a:	4618      	mov	r0, r3
 800417c:	3718      	adds	r7, #24
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	4f54300a 	.word	0x4f54300a

08004188 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004188:	b480      	push	{r7}
 800418a:	b085      	sub	sp, #20
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	460b      	mov	r3, r1
 8004192:	70fb      	strb	r3, [r7, #3]
 8004194:	4613      	mov	r3, r2
 8004196:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80041a0:	78fb      	ldrb	r3, [r7, #3]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d107      	bne.n	80041b6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80041a6:	883b      	ldrh	r3, [r7, #0]
 80041a8:	0419      	lsls	r1, r3, #16
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	68ba      	ldr	r2, [r7, #8]
 80041b0:	430a      	orrs	r2, r1
 80041b2:	629a      	str	r2, [r3, #40]	; 0x28
 80041b4:	e028      	b.n	8004208 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041bc:	0c1b      	lsrs	r3, r3, #16
 80041be:	68ba      	ldr	r2, [r7, #8]
 80041c0:	4413      	add	r3, r2
 80041c2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80041c4:	2300      	movs	r3, #0
 80041c6:	73fb      	strb	r3, [r7, #15]
 80041c8:	e00d      	b.n	80041e6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	7bfb      	ldrb	r3, [r7, #15]
 80041d0:	3340      	adds	r3, #64	; 0x40
 80041d2:	009b      	lsls	r3, r3, #2
 80041d4:	4413      	add	r3, r2
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	0c1b      	lsrs	r3, r3, #16
 80041da:	68ba      	ldr	r2, [r7, #8]
 80041dc:	4413      	add	r3, r2
 80041de:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80041e0:	7bfb      	ldrb	r3, [r7, #15]
 80041e2:	3301      	adds	r3, #1
 80041e4:	73fb      	strb	r3, [r7, #15]
 80041e6:	7bfa      	ldrb	r2, [r7, #15]
 80041e8:	78fb      	ldrb	r3, [r7, #3]
 80041ea:	3b01      	subs	r3, #1
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d3ec      	bcc.n	80041ca <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80041f0:	883b      	ldrh	r3, [r7, #0]
 80041f2:	0418      	lsls	r0, r3, #16
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6819      	ldr	r1, [r3, #0]
 80041f8:	78fb      	ldrb	r3, [r7, #3]
 80041fa:	3b01      	subs	r3, #1
 80041fc:	68ba      	ldr	r2, [r7, #8]
 80041fe:	4302      	orrs	r2, r0
 8004200:	3340      	adds	r3, #64	; 0x40
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	440b      	add	r3, r1
 8004206:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004208:	2300      	movs	r3, #0
}
 800420a:	4618      	mov	r0, r3
 800420c:	3714      	adds	r7, #20
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr

08004216 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004216:	b480      	push	{r7}
 8004218:	b083      	sub	sp, #12
 800421a:	af00      	add	r7, sp, #0
 800421c:	6078      	str	r0, [r7, #4]
 800421e:	460b      	mov	r3, r1
 8004220:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	887a      	ldrh	r2, [r7, #2]
 8004228:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800422a:	2300      	movs	r3, #0
}
 800422c:	4618      	mov	r0, r3
 800422e:	370c      	adds	r7, #12
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr

08004238 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004238:	b480      	push	{r7}
 800423a:	b083      	sub	sp, #12
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	460b      	mov	r3, r1
 8004242:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004244:	bf00      	nop
 8004246:	370c      	adds	r7, #12
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr

08004250 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b086      	sub	sp, #24
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d101      	bne.n	8004262 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e267      	b.n	8004732 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 0301 	and.w	r3, r3, #1
 800426a:	2b00      	cmp	r3, #0
 800426c:	d075      	beq.n	800435a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800426e:	4b88      	ldr	r3, [pc, #544]	; (8004490 <HAL_RCC_OscConfig+0x240>)
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	f003 030c 	and.w	r3, r3, #12
 8004276:	2b04      	cmp	r3, #4
 8004278:	d00c      	beq.n	8004294 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800427a:	4b85      	ldr	r3, [pc, #532]	; (8004490 <HAL_RCC_OscConfig+0x240>)
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004282:	2b08      	cmp	r3, #8
 8004284:	d112      	bne.n	80042ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004286:	4b82      	ldr	r3, [pc, #520]	; (8004490 <HAL_RCC_OscConfig+0x240>)
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800428e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004292:	d10b      	bne.n	80042ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004294:	4b7e      	ldr	r3, [pc, #504]	; (8004490 <HAL_RCC_OscConfig+0x240>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800429c:	2b00      	cmp	r3, #0
 800429e:	d05b      	beq.n	8004358 <HAL_RCC_OscConfig+0x108>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d157      	bne.n	8004358 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	e242      	b.n	8004732 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042b4:	d106      	bne.n	80042c4 <HAL_RCC_OscConfig+0x74>
 80042b6:	4b76      	ldr	r3, [pc, #472]	; (8004490 <HAL_RCC_OscConfig+0x240>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a75      	ldr	r2, [pc, #468]	; (8004490 <HAL_RCC_OscConfig+0x240>)
 80042bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042c0:	6013      	str	r3, [r2, #0]
 80042c2:	e01d      	b.n	8004300 <HAL_RCC_OscConfig+0xb0>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042cc:	d10c      	bne.n	80042e8 <HAL_RCC_OscConfig+0x98>
 80042ce:	4b70      	ldr	r3, [pc, #448]	; (8004490 <HAL_RCC_OscConfig+0x240>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a6f      	ldr	r2, [pc, #444]	; (8004490 <HAL_RCC_OscConfig+0x240>)
 80042d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042d8:	6013      	str	r3, [r2, #0]
 80042da:	4b6d      	ldr	r3, [pc, #436]	; (8004490 <HAL_RCC_OscConfig+0x240>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a6c      	ldr	r2, [pc, #432]	; (8004490 <HAL_RCC_OscConfig+0x240>)
 80042e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042e4:	6013      	str	r3, [r2, #0]
 80042e6:	e00b      	b.n	8004300 <HAL_RCC_OscConfig+0xb0>
 80042e8:	4b69      	ldr	r3, [pc, #420]	; (8004490 <HAL_RCC_OscConfig+0x240>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a68      	ldr	r2, [pc, #416]	; (8004490 <HAL_RCC_OscConfig+0x240>)
 80042ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042f2:	6013      	str	r3, [r2, #0]
 80042f4:	4b66      	ldr	r3, [pc, #408]	; (8004490 <HAL_RCC_OscConfig+0x240>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a65      	ldr	r2, [pc, #404]	; (8004490 <HAL_RCC_OscConfig+0x240>)
 80042fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d013      	beq.n	8004330 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004308:	f7fc fbdc 	bl	8000ac4 <HAL_GetTick>
 800430c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800430e:	e008      	b.n	8004322 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004310:	f7fc fbd8 	bl	8000ac4 <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	2b64      	cmp	r3, #100	; 0x64
 800431c:	d901      	bls.n	8004322 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	e207      	b.n	8004732 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004322:	4b5b      	ldr	r3, [pc, #364]	; (8004490 <HAL_RCC_OscConfig+0x240>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d0f0      	beq.n	8004310 <HAL_RCC_OscConfig+0xc0>
 800432e:	e014      	b.n	800435a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004330:	f7fc fbc8 	bl	8000ac4 <HAL_GetTick>
 8004334:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004336:	e008      	b.n	800434a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004338:	f7fc fbc4 	bl	8000ac4 <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	2b64      	cmp	r3, #100	; 0x64
 8004344:	d901      	bls.n	800434a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e1f3      	b.n	8004732 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800434a:	4b51      	ldr	r3, [pc, #324]	; (8004490 <HAL_RCC_OscConfig+0x240>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004352:	2b00      	cmp	r3, #0
 8004354:	d1f0      	bne.n	8004338 <HAL_RCC_OscConfig+0xe8>
 8004356:	e000      	b.n	800435a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004358:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 0302 	and.w	r3, r3, #2
 8004362:	2b00      	cmp	r3, #0
 8004364:	d063      	beq.n	800442e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004366:	4b4a      	ldr	r3, [pc, #296]	; (8004490 <HAL_RCC_OscConfig+0x240>)
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	f003 030c 	and.w	r3, r3, #12
 800436e:	2b00      	cmp	r3, #0
 8004370:	d00b      	beq.n	800438a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004372:	4b47      	ldr	r3, [pc, #284]	; (8004490 <HAL_RCC_OscConfig+0x240>)
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800437a:	2b08      	cmp	r3, #8
 800437c:	d11c      	bne.n	80043b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800437e:	4b44      	ldr	r3, [pc, #272]	; (8004490 <HAL_RCC_OscConfig+0x240>)
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d116      	bne.n	80043b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800438a:	4b41      	ldr	r3, [pc, #260]	; (8004490 <HAL_RCC_OscConfig+0x240>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 0302 	and.w	r3, r3, #2
 8004392:	2b00      	cmp	r3, #0
 8004394:	d005      	beq.n	80043a2 <HAL_RCC_OscConfig+0x152>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	2b01      	cmp	r3, #1
 800439c:	d001      	beq.n	80043a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e1c7      	b.n	8004732 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043a2:	4b3b      	ldr	r3, [pc, #236]	; (8004490 <HAL_RCC_OscConfig+0x240>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	691b      	ldr	r3, [r3, #16]
 80043ae:	00db      	lsls	r3, r3, #3
 80043b0:	4937      	ldr	r1, [pc, #220]	; (8004490 <HAL_RCC_OscConfig+0x240>)
 80043b2:	4313      	orrs	r3, r2
 80043b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043b6:	e03a      	b.n	800442e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d020      	beq.n	8004402 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043c0:	4b34      	ldr	r3, [pc, #208]	; (8004494 <HAL_RCC_OscConfig+0x244>)
 80043c2:	2201      	movs	r2, #1
 80043c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043c6:	f7fc fb7d 	bl	8000ac4 <HAL_GetTick>
 80043ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043cc:	e008      	b.n	80043e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043ce:	f7fc fb79 	bl	8000ac4 <HAL_GetTick>
 80043d2:	4602      	mov	r2, r0
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	2b02      	cmp	r3, #2
 80043da:	d901      	bls.n	80043e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80043dc:	2303      	movs	r3, #3
 80043de:	e1a8      	b.n	8004732 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043e0:	4b2b      	ldr	r3, [pc, #172]	; (8004490 <HAL_RCC_OscConfig+0x240>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 0302 	and.w	r3, r3, #2
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d0f0      	beq.n	80043ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043ec:	4b28      	ldr	r3, [pc, #160]	; (8004490 <HAL_RCC_OscConfig+0x240>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	691b      	ldr	r3, [r3, #16]
 80043f8:	00db      	lsls	r3, r3, #3
 80043fa:	4925      	ldr	r1, [pc, #148]	; (8004490 <HAL_RCC_OscConfig+0x240>)
 80043fc:	4313      	orrs	r3, r2
 80043fe:	600b      	str	r3, [r1, #0]
 8004400:	e015      	b.n	800442e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004402:	4b24      	ldr	r3, [pc, #144]	; (8004494 <HAL_RCC_OscConfig+0x244>)
 8004404:	2200      	movs	r2, #0
 8004406:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004408:	f7fc fb5c 	bl	8000ac4 <HAL_GetTick>
 800440c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800440e:	e008      	b.n	8004422 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004410:	f7fc fb58 	bl	8000ac4 <HAL_GetTick>
 8004414:	4602      	mov	r2, r0
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	2b02      	cmp	r3, #2
 800441c:	d901      	bls.n	8004422 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e187      	b.n	8004732 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004422:	4b1b      	ldr	r3, [pc, #108]	; (8004490 <HAL_RCC_OscConfig+0x240>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0302 	and.w	r3, r3, #2
 800442a:	2b00      	cmp	r3, #0
 800442c:	d1f0      	bne.n	8004410 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0308 	and.w	r3, r3, #8
 8004436:	2b00      	cmp	r3, #0
 8004438:	d036      	beq.n	80044a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	695b      	ldr	r3, [r3, #20]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d016      	beq.n	8004470 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004442:	4b15      	ldr	r3, [pc, #84]	; (8004498 <HAL_RCC_OscConfig+0x248>)
 8004444:	2201      	movs	r2, #1
 8004446:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004448:	f7fc fb3c 	bl	8000ac4 <HAL_GetTick>
 800444c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800444e:	e008      	b.n	8004462 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004450:	f7fc fb38 	bl	8000ac4 <HAL_GetTick>
 8004454:	4602      	mov	r2, r0
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	2b02      	cmp	r3, #2
 800445c:	d901      	bls.n	8004462 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800445e:	2303      	movs	r3, #3
 8004460:	e167      	b.n	8004732 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004462:	4b0b      	ldr	r3, [pc, #44]	; (8004490 <HAL_RCC_OscConfig+0x240>)
 8004464:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004466:	f003 0302 	and.w	r3, r3, #2
 800446a:	2b00      	cmp	r3, #0
 800446c:	d0f0      	beq.n	8004450 <HAL_RCC_OscConfig+0x200>
 800446e:	e01b      	b.n	80044a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004470:	4b09      	ldr	r3, [pc, #36]	; (8004498 <HAL_RCC_OscConfig+0x248>)
 8004472:	2200      	movs	r2, #0
 8004474:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004476:	f7fc fb25 	bl	8000ac4 <HAL_GetTick>
 800447a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800447c:	e00e      	b.n	800449c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800447e:	f7fc fb21 	bl	8000ac4 <HAL_GetTick>
 8004482:	4602      	mov	r2, r0
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	1ad3      	subs	r3, r2, r3
 8004488:	2b02      	cmp	r3, #2
 800448a:	d907      	bls.n	800449c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800448c:	2303      	movs	r3, #3
 800448e:	e150      	b.n	8004732 <HAL_RCC_OscConfig+0x4e2>
 8004490:	40023800 	.word	0x40023800
 8004494:	42470000 	.word	0x42470000
 8004498:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800449c:	4b88      	ldr	r3, [pc, #544]	; (80046c0 <HAL_RCC_OscConfig+0x470>)
 800449e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044a0:	f003 0302 	and.w	r3, r3, #2
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d1ea      	bne.n	800447e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 0304 	and.w	r3, r3, #4
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	f000 8097 	beq.w	80045e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044b6:	2300      	movs	r3, #0
 80044b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044ba:	4b81      	ldr	r3, [pc, #516]	; (80046c0 <HAL_RCC_OscConfig+0x470>)
 80044bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d10f      	bne.n	80044e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044c6:	2300      	movs	r3, #0
 80044c8:	60bb      	str	r3, [r7, #8]
 80044ca:	4b7d      	ldr	r3, [pc, #500]	; (80046c0 <HAL_RCC_OscConfig+0x470>)
 80044cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ce:	4a7c      	ldr	r2, [pc, #496]	; (80046c0 <HAL_RCC_OscConfig+0x470>)
 80044d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044d4:	6413      	str	r3, [r2, #64]	; 0x40
 80044d6:	4b7a      	ldr	r3, [pc, #488]	; (80046c0 <HAL_RCC_OscConfig+0x470>)
 80044d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044de:	60bb      	str	r3, [r7, #8]
 80044e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044e2:	2301      	movs	r3, #1
 80044e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044e6:	4b77      	ldr	r3, [pc, #476]	; (80046c4 <HAL_RCC_OscConfig+0x474>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d118      	bne.n	8004524 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044f2:	4b74      	ldr	r3, [pc, #464]	; (80046c4 <HAL_RCC_OscConfig+0x474>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a73      	ldr	r2, [pc, #460]	; (80046c4 <HAL_RCC_OscConfig+0x474>)
 80044f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044fe:	f7fc fae1 	bl	8000ac4 <HAL_GetTick>
 8004502:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004504:	e008      	b.n	8004518 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004506:	f7fc fadd 	bl	8000ac4 <HAL_GetTick>
 800450a:	4602      	mov	r2, r0
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	1ad3      	subs	r3, r2, r3
 8004510:	2b02      	cmp	r3, #2
 8004512:	d901      	bls.n	8004518 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004514:	2303      	movs	r3, #3
 8004516:	e10c      	b.n	8004732 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004518:	4b6a      	ldr	r3, [pc, #424]	; (80046c4 <HAL_RCC_OscConfig+0x474>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004520:	2b00      	cmp	r3, #0
 8004522:	d0f0      	beq.n	8004506 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	2b01      	cmp	r3, #1
 800452a:	d106      	bne.n	800453a <HAL_RCC_OscConfig+0x2ea>
 800452c:	4b64      	ldr	r3, [pc, #400]	; (80046c0 <HAL_RCC_OscConfig+0x470>)
 800452e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004530:	4a63      	ldr	r2, [pc, #396]	; (80046c0 <HAL_RCC_OscConfig+0x470>)
 8004532:	f043 0301 	orr.w	r3, r3, #1
 8004536:	6713      	str	r3, [r2, #112]	; 0x70
 8004538:	e01c      	b.n	8004574 <HAL_RCC_OscConfig+0x324>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	2b05      	cmp	r3, #5
 8004540:	d10c      	bne.n	800455c <HAL_RCC_OscConfig+0x30c>
 8004542:	4b5f      	ldr	r3, [pc, #380]	; (80046c0 <HAL_RCC_OscConfig+0x470>)
 8004544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004546:	4a5e      	ldr	r2, [pc, #376]	; (80046c0 <HAL_RCC_OscConfig+0x470>)
 8004548:	f043 0304 	orr.w	r3, r3, #4
 800454c:	6713      	str	r3, [r2, #112]	; 0x70
 800454e:	4b5c      	ldr	r3, [pc, #368]	; (80046c0 <HAL_RCC_OscConfig+0x470>)
 8004550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004552:	4a5b      	ldr	r2, [pc, #364]	; (80046c0 <HAL_RCC_OscConfig+0x470>)
 8004554:	f043 0301 	orr.w	r3, r3, #1
 8004558:	6713      	str	r3, [r2, #112]	; 0x70
 800455a:	e00b      	b.n	8004574 <HAL_RCC_OscConfig+0x324>
 800455c:	4b58      	ldr	r3, [pc, #352]	; (80046c0 <HAL_RCC_OscConfig+0x470>)
 800455e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004560:	4a57      	ldr	r2, [pc, #348]	; (80046c0 <HAL_RCC_OscConfig+0x470>)
 8004562:	f023 0301 	bic.w	r3, r3, #1
 8004566:	6713      	str	r3, [r2, #112]	; 0x70
 8004568:	4b55      	ldr	r3, [pc, #340]	; (80046c0 <HAL_RCC_OscConfig+0x470>)
 800456a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800456c:	4a54      	ldr	r2, [pc, #336]	; (80046c0 <HAL_RCC_OscConfig+0x470>)
 800456e:	f023 0304 	bic.w	r3, r3, #4
 8004572:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d015      	beq.n	80045a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800457c:	f7fc faa2 	bl	8000ac4 <HAL_GetTick>
 8004580:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004582:	e00a      	b.n	800459a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004584:	f7fc fa9e 	bl	8000ac4 <HAL_GetTick>
 8004588:	4602      	mov	r2, r0
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004592:	4293      	cmp	r3, r2
 8004594:	d901      	bls.n	800459a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004596:	2303      	movs	r3, #3
 8004598:	e0cb      	b.n	8004732 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800459a:	4b49      	ldr	r3, [pc, #292]	; (80046c0 <HAL_RCC_OscConfig+0x470>)
 800459c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800459e:	f003 0302 	and.w	r3, r3, #2
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d0ee      	beq.n	8004584 <HAL_RCC_OscConfig+0x334>
 80045a6:	e014      	b.n	80045d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045a8:	f7fc fa8c 	bl	8000ac4 <HAL_GetTick>
 80045ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045ae:	e00a      	b.n	80045c6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045b0:	f7fc fa88 	bl	8000ac4 <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80045be:	4293      	cmp	r3, r2
 80045c0:	d901      	bls.n	80045c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80045c2:	2303      	movs	r3, #3
 80045c4:	e0b5      	b.n	8004732 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045c6:	4b3e      	ldr	r3, [pc, #248]	; (80046c0 <HAL_RCC_OscConfig+0x470>)
 80045c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ca:	f003 0302 	and.w	r3, r3, #2
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d1ee      	bne.n	80045b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80045d2:	7dfb      	ldrb	r3, [r7, #23]
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d105      	bne.n	80045e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045d8:	4b39      	ldr	r3, [pc, #228]	; (80046c0 <HAL_RCC_OscConfig+0x470>)
 80045da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045dc:	4a38      	ldr	r2, [pc, #224]	; (80046c0 <HAL_RCC_OscConfig+0x470>)
 80045de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045e2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	699b      	ldr	r3, [r3, #24]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	f000 80a1 	beq.w	8004730 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80045ee:	4b34      	ldr	r3, [pc, #208]	; (80046c0 <HAL_RCC_OscConfig+0x470>)
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	f003 030c 	and.w	r3, r3, #12
 80045f6:	2b08      	cmp	r3, #8
 80045f8:	d05c      	beq.n	80046b4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	699b      	ldr	r3, [r3, #24]
 80045fe:	2b02      	cmp	r3, #2
 8004600:	d141      	bne.n	8004686 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004602:	4b31      	ldr	r3, [pc, #196]	; (80046c8 <HAL_RCC_OscConfig+0x478>)
 8004604:	2200      	movs	r2, #0
 8004606:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004608:	f7fc fa5c 	bl	8000ac4 <HAL_GetTick>
 800460c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800460e:	e008      	b.n	8004622 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004610:	f7fc fa58 	bl	8000ac4 <HAL_GetTick>
 8004614:	4602      	mov	r2, r0
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	2b02      	cmp	r3, #2
 800461c:	d901      	bls.n	8004622 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800461e:	2303      	movs	r3, #3
 8004620:	e087      	b.n	8004732 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004622:	4b27      	ldr	r3, [pc, #156]	; (80046c0 <HAL_RCC_OscConfig+0x470>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d1f0      	bne.n	8004610 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	69da      	ldr	r2, [r3, #28]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a1b      	ldr	r3, [r3, #32]
 8004636:	431a      	orrs	r2, r3
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463c:	019b      	lsls	r3, r3, #6
 800463e:	431a      	orrs	r2, r3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004644:	085b      	lsrs	r3, r3, #1
 8004646:	3b01      	subs	r3, #1
 8004648:	041b      	lsls	r3, r3, #16
 800464a:	431a      	orrs	r2, r3
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004650:	061b      	lsls	r3, r3, #24
 8004652:	491b      	ldr	r1, [pc, #108]	; (80046c0 <HAL_RCC_OscConfig+0x470>)
 8004654:	4313      	orrs	r3, r2
 8004656:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004658:	4b1b      	ldr	r3, [pc, #108]	; (80046c8 <HAL_RCC_OscConfig+0x478>)
 800465a:	2201      	movs	r2, #1
 800465c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800465e:	f7fc fa31 	bl	8000ac4 <HAL_GetTick>
 8004662:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004664:	e008      	b.n	8004678 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004666:	f7fc fa2d 	bl	8000ac4 <HAL_GetTick>
 800466a:	4602      	mov	r2, r0
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	1ad3      	subs	r3, r2, r3
 8004670:	2b02      	cmp	r3, #2
 8004672:	d901      	bls.n	8004678 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004674:	2303      	movs	r3, #3
 8004676:	e05c      	b.n	8004732 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004678:	4b11      	ldr	r3, [pc, #68]	; (80046c0 <HAL_RCC_OscConfig+0x470>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004680:	2b00      	cmp	r3, #0
 8004682:	d0f0      	beq.n	8004666 <HAL_RCC_OscConfig+0x416>
 8004684:	e054      	b.n	8004730 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004686:	4b10      	ldr	r3, [pc, #64]	; (80046c8 <HAL_RCC_OscConfig+0x478>)
 8004688:	2200      	movs	r2, #0
 800468a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800468c:	f7fc fa1a 	bl	8000ac4 <HAL_GetTick>
 8004690:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004692:	e008      	b.n	80046a6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004694:	f7fc fa16 	bl	8000ac4 <HAL_GetTick>
 8004698:	4602      	mov	r2, r0
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	2b02      	cmp	r3, #2
 80046a0:	d901      	bls.n	80046a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80046a2:	2303      	movs	r3, #3
 80046a4:	e045      	b.n	8004732 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046a6:	4b06      	ldr	r3, [pc, #24]	; (80046c0 <HAL_RCC_OscConfig+0x470>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d1f0      	bne.n	8004694 <HAL_RCC_OscConfig+0x444>
 80046b2:	e03d      	b.n	8004730 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	699b      	ldr	r3, [r3, #24]
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d107      	bne.n	80046cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	e038      	b.n	8004732 <HAL_RCC_OscConfig+0x4e2>
 80046c0:	40023800 	.word	0x40023800
 80046c4:	40007000 	.word	0x40007000
 80046c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80046cc:	4b1b      	ldr	r3, [pc, #108]	; (800473c <HAL_RCC_OscConfig+0x4ec>)
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	699b      	ldr	r3, [r3, #24]
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d028      	beq.n	800472c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d121      	bne.n	800472c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d11a      	bne.n	800472c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046f6:	68fa      	ldr	r2, [r7, #12]
 80046f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80046fc:	4013      	ands	r3, r2
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004702:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004704:	4293      	cmp	r3, r2
 8004706:	d111      	bne.n	800472c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004712:	085b      	lsrs	r3, r3, #1
 8004714:	3b01      	subs	r3, #1
 8004716:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004718:	429a      	cmp	r2, r3
 800471a:	d107      	bne.n	800472c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004726:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004728:	429a      	cmp	r2, r3
 800472a:	d001      	beq.n	8004730 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	e000      	b.n	8004732 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004730:	2300      	movs	r3, #0
}
 8004732:	4618      	mov	r0, r3
 8004734:	3718      	adds	r7, #24
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
 800473a:	bf00      	nop
 800473c:	40023800 	.word	0x40023800

08004740 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b084      	sub	sp, #16
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d101      	bne.n	8004754 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	e0cc      	b.n	80048ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004754:	4b68      	ldr	r3, [pc, #416]	; (80048f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 0307 	and.w	r3, r3, #7
 800475c:	683a      	ldr	r2, [r7, #0]
 800475e:	429a      	cmp	r2, r3
 8004760:	d90c      	bls.n	800477c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004762:	4b65      	ldr	r3, [pc, #404]	; (80048f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004764:	683a      	ldr	r2, [r7, #0]
 8004766:	b2d2      	uxtb	r2, r2
 8004768:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800476a:	4b63      	ldr	r3, [pc, #396]	; (80048f8 <HAL_RCC_ClockConfig+0x1b8>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 0307 	and.w	r3, r3, #7
 8004772:	683a      	ldr	r2, [r7, #0]
 8004774:	429a      	cmp	r2, r3
 8004776:	d001      	beq.n	800477c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	e0b8      	b.n	80048ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 0302 	and.w	r3, r3, #2
 8004784:	2b00      	cmp	r3, #0
 8004786:	d020      	beq.n	80047ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 0304 	and.w	r3, r3, #4
 8004790:	2b00      	cmp	r3, #0
 8004792:	d005      	beq.n	80047a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004794:	4b59      	ldr	r3, [pc, #356]	; (80048fc <HAL_RCC_ClockConfig+0x1bc>)
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	4a58      	ldr	r2, [pc, #352]	; (80048fc <HAL_RCC_ClockConfig+0x1bc>)
 800479a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800479e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 0308 	and.w	r3, r3, #8
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d005      	beq.n	80047b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047ac:	4b53      	ldr	r3, [pc, #332]	; (80048fc <HAL_RCC_ClockConfig+0x1bc>)
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	4a52      	ldr	r2, [pc, #328]	; (80048fc <HAL_RCC_ClockConfig+0x1bc>)
 80047b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80047b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047b8:	4b50      	ldr	r3, [pc, #320]	; (80048fc <HAL_RCC_ClockConfig+0x1bc>)
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	494d      	ldr	r1, [pc, #308]	; (80048fc <HAL_RCC_ClockConfig+0x1bc>)
 80047c6:	4313      	orrs	r3, r2
 80047c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0301 	and.w	r3, r3, #1
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d044      	beq.n	8004860 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d107      	bne.n	80047ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047de:	4b47      	ldr	r3, [pc, #284]	; (80048fc <HAL_RCC_ClockConfig+0x1bc>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d119      	bne.n	800481e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e07f      	b.n	80048ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	2b02      	cmp	r3, #2
 80047f4:	d003      	beq.n	80047fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047fa:	2b03      	cmp	r3, #3
 80047fc:	d107      	bne.n	800480e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047fe:	4b3f      	ldr	r3, [pc, #252]	; (80048fc <HAL_RCC_ClockConfig+0x1bc>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004806:	2b00      	cmp	r3, #0
 8004808:	d109      	bne.n	800481e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e06f      	b.n	80048ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800480e:	4b3b      	ldr	r3, [pc, #236]	; (80048fc <HAL_RCC_ClockConfig+0x1bc>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 0302 	and.w	r3, r3, #2
 8004816:	2b00      	cmp	r3, #0
 8004818:	d101      	bne.n	800481e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e067      	b.n	80048ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800481e:	4b37      	ldr	r3, [pc, #220]	; (80048fc <HAL_RCC_ClockConfig+0x1bc>)
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	f023 0203 	bic.w	r2, r3, #3
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	4934      	ldr	r1, [pc, #208]	; (80048fc <HAL_RCC_ClockConfig+0x1bc>)
 800482c:	4313      	orrs	r3, r2
 800482e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004830:	f7fc f948 	bl	8000ac4 <HAL_GetTick>
 8004834:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004836:	e00a      	b.n	800484e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004838:	f7fc f944 	bl	8000ac4 <HAL_GetTick>
 800483c:	4602      	mov	r2, r0
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	f241 3288 	movw	r2, #5000	; 0x1388
 8004846:	4293      	cmp	r3, r2
 8004848:	d901      	bls.n	800484e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800484a:	2303      	movs	r3, #3
 800484c:	e04f      	b.n	80048ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800484e:	4b2b      	ldr	r3, [pc, #172]	; (80048fc <HAL_RCC_ClockConfig+0x1bc>)
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	f003 020c 	and.w	r2, r3, #12
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	429a      	cmp	r2, r3
 800485e:	d1eb      	bne.n	8004838 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004860:	4b25      	ldr	r3, [pc, #148]	; (80048f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 0307 	and.w	r3, r3, #7
 8004868:	683a      	ldr	r2, [r7, #0]
 800486a:	429a      	cmp	r2, r3
 800486c:	d20c      	bcs.n	8004888 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800486e:	4b22      	ldr	r3, [pc, #136]	; (80048f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004870:	683a      	ldr	r2, [r7, #0]
 8004872:	b2d2      	uxtb	r2, r2
 8004874:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004876:	4b20      	ldr	r3, [pc, #128]	; (80048f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 0307 	and.w	r3, r3, #7
 800487e:	683a      	ldr	r2, [r7, #0]
 8004880:	429a      	cmp	r2, r3
 8004882:	d001      	beq.n	8004888 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e032      	b.n	80048ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 0304 	and.w	r3, r3, #4
 8004890:	2b00      	cmp	r3, #0
 8004892:	d008      	beq.n	80048a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004894:	4b19      	ldr	r3, [pc, #100]	; (80048fc <HAL_RCC_ClockConfig+0x1bc>)
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	68db      	ldr	r3, [r3, #12]
 80048a0:	4916      	ldr	r1, [pc, #88]	; (80048fc <HAL_RCC_ClockConfig+0x1bc>)
 80048a2:	4313      	orrs	r3, r2
 80048a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 0308 	and.w	r3, r3, #8
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d009      	beq.n	80048c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048b2:	4b12      	ldr	r3, [pc, #72]	; (80048fc <HAL_RCC_ClockConfig+0x1bc>)
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	691b      	ldr	r3, [r3, #16]
 80048be:	00db      	lsls	r3, r3, #3
 80048c0:	490e      	ldr	r1, [pc, #56]	; (80048fc <HAL_RCC_ClockConfig+0x1bc>)
 80048c2:	4313      	orrs	r3, r2
 80048c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80048c6:	f000 f821 	bl	800490c <HAL_RCC_GetSysClockFreq>
 80048ca:	4602      	mov	r2, r0
 80048cc:	4b0b      	ldr	r3, [pc, #44]	; (80048fc <HAL_RCC_ClockConfig+0x1bc>)
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	091b      	lsrs	r3, r3, #4
 80048d2:	f003 030f 	and.w	r3, r3, #15
 80048d6:	490a      	ldr	r1, [pc, #40]	; (8004900 <HAL_RCC_ClockConfig+0x1c0>)
 80048d8:	5ccb      	ldrb	r3, [r1, r3]
 80048da:	fa22 f303 	lsr.w	r3, r2, r3
 80048de:	4a09      	ldr	r2, [pc, #36]	; (8004904 <HAL_RCC_ClockConfig+0x1c4>)
 80048e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80048e2:	4b09      	ldr	r3, [pc, #36]	; (8004908 <HAL_RCC_ClockConfig+0x1c8>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4618      	mov	r0, r3
 80048e8:	f7fc f8a8 	bl	8000a3c <HAL_InitTick>

  return HAL_OK;
 80048ec:	2300      	movs	r3, #0
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3710      	adds	r7, #16
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	bf00      	nop
 80048f8:	40023c00 	.word	0x40023c00
 80048fc:	40023800 	.word	0x40023800
 8004900:	08008d00 	.word	0x08008d00
 8004904:	20000000 	.word	0x20000000
 8004908:	20000004 	.word	0x20000004

0800490c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800490c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004910:	b090      	sub	sp, #64	; 0x40
 8004912:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004914:	2300      	movs	r3, #0
 8004916:	637b      	str	r3, [r7, #52]	; 0x34
 8004918:	2300      	movs	r3, #0
 800491a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800491c:	2300      	movs	r3, #0
 800491e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004920:	2300      	movs	r3, #0
 8004922:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004924:	4b59      	ldr	r3, [pc, #356]	; (8004a8c <HAL_RCC_GetSysClockFreq+0x180>)
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	f003 030c 	and.w	r3, r3, #12
 800492c:	2b08      	cmp	r3, #8
 800492e:	d00d      	beq.n	800494c <HAL_RCC_GetSysClockFreq+0x40>
 8004930:	2b08      	cmp	r3, #8
 8004932:	f200 80a1 	bhi.w	8004a78 <HAL_RCC_GetSysClockFreq+0x16c>
 8004936:	2b00      	cmp	r3, #0
 8004938:	d002      	beq.n	8004940 <HAL_RCC_GetSysClockFreq+0x34>
 800493a:	2b04      	cmp	r3, #4
 800493c:	d003      	beq.n	8004946 <HAL_RCC_GetSysClockFreq+0x3a>
 800493e:	e09b      	b.n	8004a78 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004940:	4b53      	ldr	r3, [pc, #332]	; (8004a90 <HAL_RCC_GetSysClockFreq+0x184>)
 8004942:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004944:	e09b      	b.n	8004a7e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004946:	4b53      	ldr	r3, [pc, #332]	; (8004a94 <HAL_RCC_GetSysClockFreq+0x188>)
 8004948:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800494a:	e098      	b.n	8004a7e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800494c:	4b4f      	ldr	r3, [pc, #316]	; (8004a8c <HAL_RCC_GetSysClockFreq+0x180>)
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004954:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004956:	4b4d      	ldr	r3, [pc, #308]	; (8004a8c <HAL_RCC_GetSysClockFreq+0x180>)
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800495e:	2b00      	cmp	r3, #0
 8004960:	d028      	beq.n	80049b4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004962:	4b4a      	ldr	r3, [pc, #296]	; (8004a8c <HAL_RCC_GetSysClockFreq+0x180>)
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	099b      	lsrs	r3, r3, #6
 8004968:	2200      	movs	r2, #0
 800496a:	623b      	str	r3, [r7, #32]
 800496c:	627a      	str	r2, [r7, #36]	; 0x24
 800496e:	6a3b      	ldr	r3, [r7, #32]
 8004970:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004974:	2100      	movs	r1, #0
 8004976:	4b47      	ldr	r3, [pc, #284]	; (8004a94 <HAL_RCC_GetSysClockFreq+0x188>)
 8004978:	fb03 f201 	mul.w	r2, r3, r1
 800497c:	2300      	movs	r3, #0
 800497e:	fb00 f303 	mul.w	r3, r0, r3
 8004982:	4413      	add	r3, r2
 8004984:	4a43      	ldr	r2, [pc, #268]	; (8004a94 <HAL_RCC_GetSysClockFreq+0x188>)
 8004986:	fba0 1202 	umull	r1, r2, r0, r2
 800498a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800498c:	460a      	mov	r2, r1
 800498e:	62ba      	str	r2, [r7, #40]	; 0x28
 8004990:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004992:	4413      	add	r3, r2
 8004994:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004996:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004998:	2200      	movs	r2, #0
 800499a:	61bb      	str	r3, [r7, #24]
 800499c:	61fa      	str	r2, [r7, #28]
 800499e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049a2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80049a6:	f7fb fc15 	bl	80001d4 <__aeabi_uldivmod>
 80049aa:	4602      	mov	r2, r0
 80049ac:	460b      	mov	r3, r1
 80049ae:	4613      	mov	r3, r2
 80049b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049b2:	e053      	b.n	8004a5c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049b4:	4b35      	ldr	r3, [pc, #212]	; (8004a8c <HAL_RCC_GetSysClockFreq+0x180>)
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	099b      	lsrs	r3, r3, #6
 80049ba:	2200      	movs	r2, #0
 80049bc:	613b      	str	r3, [r7, #16]
 80049be:	617a      	str	r2, [r7, #20]
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80049c6:	f04f 0b00 	mov.w	fp, #0
 80049ca:	4652      	mov	r2, sl
 80049cc:	465b      	mov	r3, fp
 80049ce:	f04f 0000 	mov.w	r0, #0
 80049d2:	f04f 0100 	mov.w	r1, #0
 80049d6:	0159      	lsls	r1, r3, #5
 80049d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049dc:	0150      	lsls	r0, r2, #5
 80049de:	4602      	mov	r2, r0
 80049e0:	460b      	mov	r3, r1
 80049e2:	ebb2 080a 	subs.w	r8, r2, sl
 80049e6:	eb63 090b 	sbc.w	r9, r3, fp
 80049ea:	f04f 0200 	mov.w	r2, #0
 80049ee:	f04f 0300 	mov.w	r3, #0
 80049f2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80049f6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80049fa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80049fe:	ebb2 0408 	subs.w	r4, r2, r8
 8004a02:	eb63 0509 	sbc.w	r5, r3, r9
 8004a06:	f04f 0200 	mov.w	r2, #0
 8004a0a:	f04f 0300 	mov.w	r3, #0
 8004a0e:	00eb      	lsls	r3, r5, #3
 8004a10:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a14:	00e2      	lsls	r2, r4, #3
 8004a16:	4614      	mov	r4, r2
 8004a18:	461d      	mov	r5, r3
 8004a1a:	eb14 030a 	adds.w	r3, r4, sl
 8004a1e:	603b      	str	r3, [r7, #0]
 8004a20:	eb45 030b 	adc.w	r3, r5, fp
 8004a24:	607b      	str	r3, [r7, #4]
 8004a26:	f04f 0200 	mov.w	r2, #0
 8004a2a:	f04f 0300 	mov.w	r3, #0
 8004a2e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004a32:	4629      	mov	r1, r5
 8004a34:	028b      	lsls	r3, r1, #10
 8004a36:	4621      	mov	r1, r4
 8004a38:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a3c:	4621      	mov	r1, r4
 8004a3e:	028a      	lsls	r2, r1, #10
 8004a40:	4610      	mov	r0, r2
 8004a42:	4619      	mov	r1, r3
 8004a44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a46:	2200      	movs	r2, #0
 8004a48:	60bb      	str	r3, [r7, #8]
 8004a4a:	60fa      	str	r2, [r7, #12]
 8004a4c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a50:	f7fb fbc0 	bl	80001d4 <__aeabi_uldivmod>
 8004a54:	4602      	mov	r2, r0
 8004a56:	460b      	mov	r3, r1
 8004a58:	4613      	mov	r3, r2
 8004a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a5c:	4b0b      	ldr	r3, [pc, #44]	; (8004a8c <HAL_RCC_GetSysClockFreq+0x180>)
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	0c1b      	lsrs	r3, r3, #16
 8004a62:	f003 0303 	and.w	r3, r3, #3
 8004a66:	3301      	adds	r3, #1
 8004a68:	005b      	lsls	r3, r3, #1
 8004a6a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004a6c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a70:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a74:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004a76:	e002      	b.n	8004a7e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a78:	4b05      	ldr	r3, [pc, #20]	; (8004a90 <HAL_RCC_GetSysClockFreq+0x184>)
 8004a7a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004a7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	3740      	adds	r7, #64	; 0x40
 8004a84:	46bd      	mov	sp, r7
 8004a86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a8a:	bf00      	nop
 8004a8c:	40023800 	.word	0x40023800
 8004a90:	00f42400 	.word	0x00f42400
 8004a94:	017d7840 	.word	0x017d7840

08004a98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a9c:	4b03      	ldr	r3, [pc, #12]	; (8004aac <HAL_RCC_GetHCLKFreq+0x14>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr
 8004aaa:	bf00      	nop
 8004aac:	20000000 	.word	0x20000000

08004ab0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ab4:	f7ff fff0 	bl	8004a98 <HAL_RCC_GetHCLKFreq>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	4b05      	ldr	r3, [pc, #20]	; (8004ad0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	0a9b      	lsrs	r3, r3, #10
 8004ac0:	f003 0307 	and.w	r3, r3, #7
 8004ac4:	4903      	ldr	r1, [pc, #12]	; (8004ad4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ac6:	5ccb      	ldrb	r3, [r1, r3]
 8004ac8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	40023800 	.word	0x40023800
 8004ad4:	08008d10 	.word	0x08008d10

08004ad8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ad8:	b084      	sub	sp, #16
 8004ada:	b580      	push	{r7, lr}
 8004adc:	b084      	sub	sp, #16
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	6078      	str	r0, [r7, #4]
 8004ae2:	f107 001c 	add.w	r0, r7, #28
 8004ae6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d122      	bne.n	8004b36 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004b04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004b18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d105      	bne.n	8004b2a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	68db      	ldr	r3, [r3, #12]
 8004b22:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f001 fbee 	bl	800630c <USB_CoreReset>
 8004b30:	4603      	mov	r3, r0
 8004b32:	73fb      	strb	r3, [r7, #15]
 8004b34:	e01a      	b.n	8004b6c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	68db      	ldr	r3, [r3, #12]
 8004b3a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f001 fbe2 	bl	800630c <USB_CoreReset>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004b4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d106      	bne.n	8004b60 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b56:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	639a      	str	r2, [r3, #56]	; 0x38
 8004b5e:	e005      	b.n	8004b6c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b64:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d10b      	bne.n	8004b8a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	f043 0206 	orr.w	r2, r3, #6
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	f043 0220 	orr.w	r2, r3, #32
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004b8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3710      	adds	r7, #16
 8004b90:	46bd      	mov	sp, r7
 8004b92:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b96:	b004      	add	sp, #16
 8004b98:	4770      	bx	lr
	...

08004b9c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b087      	sub	sp, #28
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	60f8      	str	r0, [r7, #12]
 8004ba4:	60b9      	str	r1, [r7, #8]
 8004ba6:	4613      	mov	r3, r2
 8004ba8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004baa:	79fb      	ldrb	r3, [r7, #7]
 8004bac:	2b02      	cmp	r3, #2
 8004bae:	d165      	bne.n	8004c7c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	4a41      	ldr	r2, [pc, #260]	; (8004cb8 <USB_SetTurnaroundTime+0x11c>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d906      	bls.n	8004bc6 <USB_SetTurnaroundTime+0x2a>
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	4a40      	ldr	r2, [pc, #256]	; (8004cbc <USB_SetTurnaroundTime+0x120>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d202      	bcs.n	8004bc6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004bc0:	230f      	movs	r3, #15
 8004bc2:	617b      	str	r3, [r7, #20]
 8004bc4:	e062      	b.n	8004c8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	4a3c      	ldr	r2, [pc, #240]	; (8004cbc <USB_SetTurnaroundTime+0x120>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d306      	bcc.n	8004bdc <USB_SetTurnaroundTime+0x40>
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	4a3b      	ldr	r2, [pc, #236]	; (8004cc0 <USB_SetTurnaroundTime+0x124>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d202      	bcs.n	8004bdc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004bd6:	230e      	movs	r3, #14
 8004bd8:	617b      	str	r3, [r7, #20]
 8004bda:	e057      	b.n	8004c8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	4a38      	ldr	r2, [pc, #224]	; (8004cc0 <USB_SetTurnaroundTime+0x124>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d306      	bcc.n	8004bf2 <USB_SetTurnaroundTime+0x56>
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	4a37      	ldr	r2, [pc, #220]	; (8004cc4 <USB_SetTurnaroundTime+0x128>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d202      	bcs.n	8004bf2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004bec:	230d      	movs	r3, #13
 8004bee:	617b      	str	r3, [r7, #20]
 8004bf0:	e04c      	b.n	8004c8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	4a33      	ldr	r2, [pc, #204]	; (8004cc4 <USB_SetTurnaroundTime+0x128>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d306      	bcc.n	8004c08 <USB_SetTurnaroundTime+0x6c>
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	4a32      	ldr	r2, [pc, #200]	; (8004cc8 <USB_SetTurnaroundTime+0x12c>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d802      	bhi.n	8004c08 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004c02:	230c      	movs	r3, #12
 8004c04:	617b      	str	r3, [r7, #20]
 8004c06:	e041      	b.n	8004c8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	4a2f      	ldr	r2, [pc, #188]	; (8004cc8 <USB_SetTurnaroundTime+0x12c>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d906      	bls.n	8004c1e <USB_SetTurnaroundTime+0x82>
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	4a2e      	ldr	r2, [pc, #184]	; (8004ccc <USB_SetTurnaroundTime+0x130>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d802      	bhi.n	8004c1e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004c18:	230b      	movs	r3, #11
 8004c1a:	617b      	str	r3, [r7, #20]
 8004c1c:	e036      	b.n	8004c8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	4a2a      	ldr	r2, [pc, #168]	; (8004ccc <USB_SetTurnaroundTime+0x130>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d906      	bls.n	8004c34 <USB_SetTurnaroundTime+0x98>
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	4a29      	ldr	r2, [pc, #164]	; (8004cd0 <USB_SetTurnaroundTime+0x134>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d802      	bhi.n	8004c34 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004c2e:	230a      	movs	r3, #10
 8004c30:	617b      	str	r3, [r7, #20]
 8004c32:	e02b      	b.n	8004c8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	4a26      	ldr	r2, [pc, #152]	; (8004cd0 <USB_SetTurnaroundTime+0x134>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d906      	bls.n	8004c4a <USB_SetTurnaroundTime+0xae>
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	4a25      	ldr	r2, [pc, #148]	; (8004cd4 <USB_SetTurnaroundTime+0x138>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d202      	bcs.n	8004c4a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004c44:	2309      	movs	r3, #9
 8004c46:	617b      	str	r3, [r7, #20]
 8004c48:	e020      	b.n	8004c8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	4a21      	ldr	r2, [pc, #132]	; (8004cd4 <USB_SetTurnaroundTime+0x138>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d306      	bcc.n	8004c60 <USB_SetTurnaroundTime+0xc4>
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	4a20      	ldr	r2, [pc, #128]	; (8004cd8 <USB_SetTurnaroundTime+0x13c>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d802      	bhi.n	8004c60 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004c5a:	2308      	movs	r3, #8
 8004c5c:	617b      	str	r3, [r7, #20]
 8004c5e:	e015      	b.n	8004c8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	4a1d      	ldr	r2, [pc, #116]	; (8004cd8 <USB_SetTurnaroundTime+0x13c>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d906      	bls.n	8004c76 <USB_SetTurnaroundTime+0xda>
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	4a1c      	ldr	r2, [pc, #112]	; (8004cdc <USB_SetTurnaroundTime+0x140>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d202      	bcs.n	8004c76 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004c70:	2307      	movs	r3, #7
 8004c72:	617b      	str	r3, [r7, #20]
 8004c74:	e00a      	b.n	8004c8c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004c76:	2306      	movs	r3, #6
 8004c78:	617b      	str	r3, [r7, #20]
 8004c7a:	e007      	b.n	8004c8c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004c7c:	79fb      	ldrb	r3, [r7, #7]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d102      	bne.n	8004c88 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004c82:	2309      	movs	r3, #9
 8004c84:	617b      	str	r3, [r7, #20]
 8004c86:	e001      	b.n	8004c8c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004c88:	2309      	movs	r3, #9
 8004c8a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	68da      	ldr	r2, [r3, #12]
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	029b      	lsls	r3, r3, #10
 8004ca0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004ca4:	431a      	orrs	r2, r3
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004caa:	2300      	movs	r3, #0
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	371c      	adds	r7, #28
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr
 8004cb8:	00d8acbf 	.word	0x00d8acbf
 8004cbc:	00e4e1c0 	.word	0x00e4e1c0
 8004cc0:	00f42400 	.word	0x00f42400
 8004cc4:	01067380 	.word	0x01067380
 8004cc8:	011a499f 	.word	0x011a499f
 8004ccc:	01312cff 	.word	0x01312cff
 8004cd0:	014ca43f 	.word	0x014ca43f
 8004cd4:	016e3600 	.word	0x016e3600
 8004cd8:	01a6ab1f 	.word	0x01a6ab1f
 8004cdc:	01e84800 	.word	0x01e84800

08004ce0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b083      	sub	sp, #12
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	f043 0201 	orr.w	r2, r3, #1
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004cf4:	2300      	movs	r3, #0
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	370c      	adds	r7, #12
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr

08004d02 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d02:	b480      	push	{r7}
 8004d04:	b083      	sub	sp, #12
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	f023 0201 	bic.w	r2, r3, #1
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004d16:	2300      	movs	r3, #0
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	370c      	adds	r7, #12
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr

08004d24 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b084      	sub	sp, #16
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	460b      	mov	r3, r1
 8004d2e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004d30:	2300      	movs	r3, #0
 8004d32:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004d40:	78fb      	ldrb	r3, [r7, #3]
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d115      	bne.n	8004d72 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	68db      	ldr	r3, [r3, #12]
 8004d4a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004d52:	2001      	movs	r0, #1
 8004d54:	f7fb fec2 	bl	8000adc <HAL_Delay>
      ms++;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	3301      	adds	r3, #1
 8004d5c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f001 fa45 	bl	80061ee <USB_GetMode>
 8004d64:	4603      	mov	r3, r0
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	d01e      	beq.n	8004da8 <USB_SetCurrentMode+0x84>
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2b31      	cmp	r3, #49	; 0x31
 8004d6e:	d9f0      	bls.n	8004d52 <USB_SetCurrentMode+0x2e>
 8004d70:	e01a      	b.n	8004da8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004d72:	78fb      	ldrb	r3, [r7, #3]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d115      	bne.n	8004da4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004d84:	2001      	movs	r0, #1
 8004d86:	f7fb fea9 	bl	8000adc <HAL_Delay>
      ms++;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	3301      	adds	r3, #1
 8004d8e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f001 fa2c 	bl	80061ee <USB_GetMode>
 8004d96:	4603      	mov	r3, r0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d005      	beq.n	8004da8 <USB_SetCurrentMode+0x84>
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2b31      	cmp	r3, #49	; 0x31
 8004da0:	d9f0      	bls.n	8004d84 <USB_SetCurrentMode+0x60>
 8004da2:	e001      	b.n	8004da8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	e005      	b.n	8004db4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2b32      	cmp	r3, #50	; 0x32
 8004dac:	d101      	bne.n	8004db2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e000      	b.n	8004db4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004db2:	2300      	movs	r3, #0
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	3710      	adds	r7, #16
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}

08004dbc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004dbc:	b084      	sub	sp, #16
 8004dbe:	b580      	push	{r7, lr}
 8004dc0:	b086      	sub	sp, #24
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6078      	str	r0, [r7, #4]
 8004dc6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004dca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	613b      	str	r3, [r7, #16]
 8004dda:	e009      	b.n	8004df0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004ddc:	687a      	ldr	r2, [r7, #4]
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	3340      	adds	r3, #64	; 0x40
 8004de2:	009b      	lsls	r3, r3, #2
 8004de4:	4413      	add	r3, r2
 8004de6:	2200      	movs	r2, #0
 8004de8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	3301      	adds	r3, #1
 8004dee:	613b      	str	r3, [r7, #16]
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	2b0e      	cmp	r3, #14
 8004df4:	d9f2      	bls.n	8004ddc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004df6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d11c      	bne.n	8004e36 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	68fa      	ldr	r2, [r7, #12]
 8004e06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e0a:	f043 0302 	orr.w	r3, r3, #2
 8004e0e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e14:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e20:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e2c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	639a      	str	r2, [r3, #56]	; 0x38
 8004e34:	e00b      	b.n	8004e4e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e3a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e46:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004e54:	461a      	mov	r2, r3
 8004e56:	2300      	movs	r3, #0
 8004e58:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e60:	4619      	mov	r1, r3
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e68:	461a      	mov	r2, r3
 8004e6a:	680b      	ldr	r3, [r1, #0]
 8004e6c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d10c      	bne.n	8004e8e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d104      	bne.n	8004e84 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004e7a:	2100      	movs	r1, #0
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f000 f965 	bl	800514c <USB_SetDevSpeed>
 8004e82:	e008      	b.n	8004e96 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004e84:	2101      	movs	r1, #1
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f000 f960 	bl	800514c <USB_SetDevSpeed>
 8004e8c:	e003      	b.n	8004e96 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004e8e:	2103      	movs	r1, #3
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	f000 f95b 	bl	800514c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004e96:	2110      	movs	r1, #16
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	f000 f8f3 	bl	8005084 <USB_FlushTxFifo>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d001      	beq.n	8004ea8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f000 f91f 	bl	80050ec <USB_FlushRxFifo>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d001      	beq.n	8004eb8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eca:	461a      	mov	r2, r3
 8004ecc:	2300      	movs	r3, #0
 8004ece:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ed6:	461a      	mov	r2, r3
 8004ed8:	2300      	movs	r3, #0
 8004eda:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004edc:	2300      	movs	r3, #0
 8004ede:	613b      	str	r3, [r7, #16]
 8004ee0:	e043      	b.n	8004f6a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	015a      	lsls	r2, r3, #5
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	4413      	add	r3, r2
 8004eea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ef4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ef8:	d118      	bne.n	8004f2c <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d10a      	bne.n	8004f16 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	015a      	lsls	r2, r3, #5
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	4413      	add	r3, r2
 8004f08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f0c:	461a      	mov	r2, r3
 8004f0e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004f12:	6013      	str	r3, [r2, #0]
 8004f14:	e013      	b.n	8004f3e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	015a      	lsls	r2, r3, #5
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	4413      	add	r3, r2
 8004f1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f22:	461a      	mov	r2, r3
 8004f24:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004f28:	6013      	str	r3, [r2, #0]
 8004f2a:	e008      	b.n	8004f3e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	015a      	lsls	r2, r3, #5
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	4413      	add	r3, r2
 8004f34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f38:	461a      	mov	r2, r3
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	015a      	lsls	r2, r3, #5
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	4413      	add	r3, r2
 8004f46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	015a      	lsls	r2, r3, #5
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	4413      	add	r3, r2
 8004f58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004f62:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	3301      	adds	r3, #1
 8004f68:	613b      	str	r3, [r7, #16]
 8004f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6c:	693a      	ldr	r2, [r7, #16]
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d3b7      	bcc.n	8004ee2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f72:	2300      	movs	r3, #0
 8004f74:	613b      	str	r3, [r7, #16]
 8004f76:	e043      	b.n	8005000 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	015a      	lsls	r2, r3, #5
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	4413      	add	r3, r2
 8004f80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f8e:	d118      	bne.n	8004fc2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d10a      	bne.n	8004fac <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	015a      	lsls	r2, r3, #5
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	4413      	add	r3, r2
 8004f9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004fa8:	6013      	str	r3, [r2, #0]
 8004faa:	e013      	b.n	8004fd4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	015a      	lsls	r2, r3, #5
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	4413      	add	r3, r2
 8004fb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fb8:	461a      	mov	r2, r3
 8004fba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004fbe:	6013      	str	r3, [r2, #0]
 8004fc0:	e008      	b.n	8004fd4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	015a      	lsls	r2, r3, #5
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	4413      	add	r3, r2
 8004fca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fce:	461a      	mov	r2, r3
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	015a      	lsls	r2, r3, #5
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	4413      	add	r3, r2
 8004fdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fe0:	461a      	mov	r2, r3
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	015a      	lsls	r2, r3, #5
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	4413      	add	r3, r2
 8004fee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004ff8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	3301      	adds	r3, #1
 8004ffe:	613b      	str	r3, [r7, #16]
 8005000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005002:	693a      	ldr	r2, [r7, #16]
 8005004:	429a      	cmp	r2, r3
 8005006:	d3b7      	bcc.n	8004f78 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800500e:	691b      	ldr	r3, [r3, #16]
 8005010:	68fa      	ldr	r2, [r7, #12]
 8005012:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005016:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800501a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005028:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800502a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800502c:	2b00      	cmp	r3, #0
 800502e:	d105      	bne.n	800503c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	699b      	ldr	r3, [r3, #24]
 8005034:	f043 0210 	orr.w	r2, r3, #16
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	699a      	ldr	r2, [r3, #24]
 8005040:	4b0f      	ldr	r3, [pc, #60]	; (8005080 <USB_DevInit+0x2c4>)
 8005042:	4313      	orrs	r3, r2
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005048:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800504a:	2b00      	cmp	r3, #0
 800504c:	d005      	beq.n	800505a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	699b      	ldr	r3, [r3, #24]
 8005052:	f043 0208 	orr.w	r2, r3, #8
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800505a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800505c:	2b01      	cmp	r3, #1
 800505e:	d107      	bne.n	8005070 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	699b      	ldr	r3, [r3, #24]
 8005064:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005068:	f043 0304 	orr.w	r3, r3, #4
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005070:	7dfb      	ldrb	r3, [r7, #23]
}
 8005072:	4618      	mov	r0, r3
 8005074:	3718      	adds	r7, #24
 8005076:	46bd      	mov	sp, r7
 8005078:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800507c:	b004      	add	sp, #16
 800507e:	4770      	bx	lr
 8005080:	803c3800 	.word	0x803c3800

08005084 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005084:	b480      	push	{r7}
 8005086:	b085      	sub	sp, #20
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
 800508c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800508e:	2300      	movs	r3, #0
 8005090:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	3301      	adds	r3, #1
 8005096:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	4a13      	ldr	r2, [pc, #76]	; (80050e8 <USB_FlushTxFifo+0x64>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d901      	bls.n	80050a4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80050a0:	2303      	movs	r3, #3
 80050a2:	e01b      	b.n	80050dc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	691b      	ldr	r3, [r3, #16]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	daf2      	bge.n	8005092 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80050ac:	2300      	movs	r3, #0
 80050ae:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	019b      	lsls	r3, r3, #6
 80050b4:	f043 0220 	orr.w	r2, r3, #32
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	3301      	adds	r3, #1
 80050c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	4a08      	ldr	r2, [pc, #32]	; (80050e8 <USB_FlushTxFifo+0x64>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d901      	bls.n	80050ce <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80050ca:	2303      	movs	r3, #3
 80050cc:	e006      	b.n	80050dc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	691b      	ldr	r3, [r3, #16]
 80050d2:	f003 0320 	and.w	r3, r3, #32
 80050d6:	2b20      	cmp	r3, #32
 80050d8:	d0f0      	beq.n	80050bc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80050da:	2300      	movs	r3, #0
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3714      	adds	r7, #20
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr
 80050e8:	00030d40 	.word	0x00030d40

080050ec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b085      	sub	sp, #20
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80050f4:	2300      	movs	r3, #0
 80050f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	3301      	adds	r3, #1
 80050fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	4a11      	ldr	r2, [pc, #68]	; (8005148 <USB_FlushRxFifo+0x5c>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d901      	bls.n	800510a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005106:	2303      	movs	r3, #3
 8005108:	e018      	b.n	800513c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	691b      	ldr	r3, [r3, #16]
 800510e:	2b00      	cmp	r3, #0
 8005110:	daf2      	bge.n	80050f8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005112:	2300      	movs	r3, #0
 8005114:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2210      	movs	r2, #16
 800511a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	3301      	adds	r3, #1
 8005120:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	4a08      	ldr	r2, [pc, #32]	; (8005148 <USB_FlushRxFifo+0x5c>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d901      	bls.n	800512e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800512a:	2303      	movs	r3, #3
 800512c:	e006      	b.n	800513c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	691b      	ldr	r3, [r3, #16]
 8005132:	f003 0310 	and.w	r3, r3, #16
 8005136:	2b10      	cmp	r3, #16
 8005138:	d0f0      	beq.n	800511c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800513a:	2300      	movs	r3, #0
}
 800513c:	4618      	mov	r0, r3
 800513e:	3714      	adds	r7, #20
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr
 8005148:	00030d40 	.word	0x00030d40

0800514c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800514c:	b480      	push	{r7}
 800514e:	b085      	sub	sp, #20
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	460b      	mov	r3, r1
 8005156:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	78fb      	ldrb	r3, [r7, #3]
 8005166:	68f9      	ldr	r1, [r7, #12]
 8005168:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800516c:	4313      	orrs	r3, r2
 800516e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005170:	2300      	movs	r3, #0
}
 8005172:	4618      	mov	r0, r3
 8005174:	3714      	adds	r7, #20
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr

0800517e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800517e:	b480      	push	{r7}
 8005180:	b087      	sub	sp, #28
 8005182:	af00      	add	r7, sp, #0
 8005184:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	f003 0306 	and.w	r3, r3, #6
 8005196:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d102      	bne.n	80051a4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800519e:	2300      	movs	r3, #0
 80051a0:	75fb      	strb	r3, [r7, #23]
 80051a2:	e00a      	b.n	80051ba <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2b02      	cmp	r3, #2
 80051a8:	d002      	beq.n	80051b0 <USB_GetDevSpeed+0x32>
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2b06      	cmp	r3, #6
 80051ae:	d102      	bne.n	80051b6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80051b0:	2302      	movs	r3, #2
 80051b2:	75fb      	strb	r3, [r7, #23]
 80051b4:	e001      	b.n	80051ba <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80051b6:	230f      	movs	r3, #15
 80051b8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80051ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80051bc:	4618      	mov	r0, r3
 80051be:	371c      	adds	r7, #28
 80051c0:	46bd      	mov	sp, r7
 80051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c6:	4770      	bx	lr

080051c8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b085      	sub	sp, #20
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	781b      	ldrb	r3, [r3, #0]
 80051da:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	785b      	ldrb	r3, [r3, #1]
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d13a      	bne.n	800525a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051ea:	69da      	ldr	r2, [r3, #28]
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	781b      	ldrb	r3, [r3, #0]
 80051f0:	f003 030f 	and.w	r3, r3, #15
 80051f4:	2101      	movs	r1, #1
 80051f6:	fa01 f303 	lsl.w	r3, r1, r3
 80051fa:	b29b      	uxth	r3, r3
 80051fc:	68f9      	ldr	r1, [r7, #12]
 80051fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005202:	4313      	orrs	r3, r2
 8005204:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	015a      	lsls	r2, r3, #5
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	4413      	add	r3, r2
 800520e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005218:	2b00      	cmp	r3, #0
 800521a:	d155      	bne.n	80052c8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	015a      	lsls	r2, r3, #5
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	4413      	add	r3, r2
 8005224:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	68db      	ldr	r3, [r3, #12]
 800522e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	791b      	ldrb	r3, [r3, #4]
 8005236:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005238:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	059b      	lsls	r3, r3, #22
 800523e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005240:	4313      	orrs	r3, r2
 8005242:	68ba      	ldr	r2, [r7, #8]
 8005244:	0151      	lsls	r1, r2, #5
 8005246:	68fa      	ldr	r2, [r7, #12]
 8005248:	440a      	add	r2, r1
 800524a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800524e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005252:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005256:	6013      	str	r3, [r2, #0]
 8005258:	e036      	b.n	80052c8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005260:	69da      	ldr	r2, [r3, #28]
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	781b      	ldrb	r3, [r3, #0]
 8005266:	f003 030f 	and.w	r3, r3, #15
 800526a:	2101      	movs	r1, #1
 800526c:	fa01 f303 	lsl.w	r3, r1, r3
 8005270:	041b      	lsls	r3, r3, #16
 8005272:	68f9      	ldr	r1, [r7, #12]
 8005274:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005278:	4313      	orrs	r3, r2
 800527a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	015a      	lsls	r2, r3, #5
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	4413      	add	r3, r2
 8005284:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800528e:	2b00      	cmp	r3, #0
 8005290:	d11a      	bne.n	80052c8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	015a      	lsls	r2, r3, #5
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	4413      	add	r3, r2
 800529a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	791b      	ldrb	r3, [r3, #4]
 80052ac:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80052ae:	430b      	orrs	r3, r1
 80052b0:	4313      	orrs	r3, r2
 80052b2:	68ba      	ldr	r2, [r7, #8]
 80052b4:	0151      	lsls	r1, r2, #5
 80052b6:	68fa      	ldr	r2, [r7, #12]
 80052b8:	440a      	add	r2, r1
 80052ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052c6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80052c8:	2300      	movs	r3, #0
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3714      	adds	r7, #20
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr
	...

080052d8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80052d8:	b480      	push	{r7}
 80052da:	b085      	sub	sp, #20
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	781b      	ldrb	r3, [r3, #0]
 80052ea:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	785b      	ldrb	r3, [r3, #1]
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d161      	bne.n	80053b8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	015a      	lsls	r2, r3, #5
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	4413      	add	r3, r2
 80052fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005306:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800530a:	d11f      	bne.n	800534c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	015a      	lsls	r2, r3, #5
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	4413      	add	r3, r2
 8005314:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	68ba      	ldr	r2, [r7, #8]
 800531c:	0151      	lsls	r1, r2, #5
 800531e:	68fa      	ldr	r2, [r7, #12]
 8005320:	440a      	add	r2, r1
 8005322:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005326:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800532a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	015a      	lsls	r2, r3, #5
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	4413      	add	r3, r2
 8005334:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	68ba      	ldr	r2, [r7, #8]
 800533c:	0151      	lsls	r1, r2, #5
 800533e:	68fa      	ldr	r2, [r7, #12]
 8005340:	440a      	add	r2, r1
 8005342:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005346:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800534a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005352:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	781b      	ldrb	r3, [r3, #0]
 8005358:	f003 030f 	and.w	r3, r3, #15
 800535c:	2101      	movs	r1, #1
 800535e:	fa01 f303 	lsl.w	r3, r1, r3
 8005362:	b29b      	uxth	r3, r3
 8005364:	43db      	mvns	r3, r3
 8005366:	68f9      	ldr	r1, [r7, #12]
 8005368:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800536c:	4013      	ands	r3, r2
 800536e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005376:	69da      	ldr	r2, [r3, #28]
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	781b      	ldrb	r3, [r3, #0]
 800537c:	f003 030f 	and.w	r3, r3, #15
 8005380:	2101      	movs	r1, #1
 8005382:	fa01 f303 	lsl.w	r3, r1, r3
 8005386:	b29b      	uxth	r3, r3
 8005388:	43db      	mvns	r3, r3
 800538a:	68f9      	ldr	r1, [r7, #12]
 800538c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005390:	4013      	ands	r3, r2
 8005392:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	015a      	lsls	r2, r3, #5
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	4413      	add	r3, r2
 800539c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	0159      	lsls	r1, r3, #5
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	440b      	add	r3, r1
 80053aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053ae:	4619      	mov	r1, r3
 80053b0:	4b35      	ldr	r3, [pc, #212]	; (8005488 <USB_DeactivateEndpoint+0x1b0>)
 80053b2:	4013      	ands	r3, r2
 80053b4:	600b      	str	r3, [r1, #0]
 80053b6:	e060      	b.n	800547a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	015a      	lsls	r2, r3, #5
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	4413      	add	r3, r2
 80053c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80053ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053ce:	d11f      	bne.n	8005410 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	015a      	lsls	r2, r3, #5
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	4413      	add	r3, r2
 80053d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	68ba      	ldr	r2, [r7, #8]
 80053e0:	0151      	lsls	r1, r2, #5
 80053e2:	68fa      	ldr	r2, [r7, #12]
 80053e4:	440a      	add	r2, r1
 80053e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053ea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80053ee:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	015a      	lsls	r2, r3, #5
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	4413      	add	r3, r2
 80053f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	68ba      	ldr	r2, [r7, #8]
 8005400:	0151      	lsls	r1, r2, #5
 8005402:	68fa      	ldr	r2, [r7, #12]
 8005404:	440a      	add	r2, r1
 8005406:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800540a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800540e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005416:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	781b      	ldrb	r3, [r3, #0]
 800541c:	f003 030f 	and.w	r3, r3, #15
 8005420:	2101      	movs	r1, #1
 8005422:	fa01 f303 	lsl.w	r3, r1, r3
 8005426:	041b      	lsls	r3, r3, #16
 8005428:	43db      	mvns	r3, r3
 800542a:	68f9      	ldr	r1, [r7, #12]
 800542c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005430:	4013      	ands	r3, r2
 8005432:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800543a:	69da      	ldr	r2, [r3, #28]
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	781b      	ldrb	r3, [r3, #0]
 8005440:	f003 030f 	and.w	r3, r3, #15
 8005444:	2101      	movs	r1, #1
 8005446:	fa01 f303 	lsl.w	r3, r1, r3
 800544a:	041b      	lsls	r3, r3, #16
 800544c:	43db      	mvns	r3, r3
 800544e:	68f9      	ldr	r1, [r7, #12]
 8005450:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005454:	4013      	ands	r3, r2
 8005456:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	015a      	lsls	r2, r3, #5
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	4413      	add	r3, r2
 8005460:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	0159      	lsls	r1, r3, #5
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	440b      	add	r3, r1
 800546e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005472:	4619      	mov	r1, r3
 8005474:	4b05      	ldr	r3, [pc, #20]	; (800548c <USB_DeactivateEndpoint+0x1b4>)
 8005476:	4013      	ands	r3, r2
 8005478:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800547a:	2300      	movs	r3, #0
}
 800547c:	4618      	mov	r0, r3
 800547e:	3714      	adds	r7, #20
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr
 8005488:	ec337800 	.word	0xec337800
 800548c:	eff37800 	.word	0xeff37800

08005490 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b08a      	sub	sp, #40	; 0x28
 8005494:	af02      	add	r7, sp, #8
 8005496:	60f8      	str	r0, [r7, #12]
 8005498:	60b9      	str	r1, [r7, #8]
 800549a:	4613      	mov	r3, r2
 800549c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	781b      	ldrb	r3, [r3, #0]
 80054a6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	785b      	ldrb	r3, [r3, #1]
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	f040 815c 	bne.w	800576a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	699b      	ldr	r3, [r3, #24]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d132      	bne.n	8005520 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80054ba:	69bb      	ldr	r3, [r7, #24]
 80054bc:	015a      	lsls	r2, r3, #5
 80054be:	69fb      	ldr	r3, [r7, #28]
 80054c0:	4413      	add	r3, r2
 80054c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054c6:	691b      	ldr	r3, [r3, #16]
 80054c8:	69ba      	ldr	r2, [r7, #24]
 80054ca:	0151      	lsls	r1, r2, #5
 80054cc:	69fa      	ldr	r2, [r7, #28]
 80054ce:	440a      	add	r2, r1
 80054d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054d4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80054d8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80054dc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80054de:	69bb      	ldr	r3, [r7, #24]
 80054e0:	015a      	lsls	r2, r3, #5
 80054e2:	69fb      	ldr	r3, [r7, #28]
 80054e4:	4413      	add	r3, r2
 80054e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054ea:	691b      	ldr	r3, [r3, #16]
 80054ec:	69ba      	ldr	r2, [r7, #24]
 80054ee:	0151      	lsls	r1, r2, #5
 80054f0:	69fa      	ldr	r2, [r7, #28]
 80054f2:	440a      	add	r2, r1
 80054f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80054fc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80054fe:	69bb      	ldr	r3, [r7, #24]
 8005500:	015a      	lsls	r2, r3, #5
 8005502:	69fb      	ldr	r3, [r7, #28]
 8005504:	4413      	add	r3, r2
 8005506:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800550a:	691b      	ldr	r3, [r3, #16]
 800550c:	69ba      	ldr	r2, [r7, #24]
 800550e:	0151      	lsls	r1, r2, #5
 8005510:	69fa      	ldr	r2, [r7, #28]
 8005512:	440a      	add	r2, r1
 8005514:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005518:	0cdb      	lsrs	r3, r3, #19
 800551a:	04db      	lsls	r3, r3, #19
 800551c:	6113      	str	r3, [r2, #16]
 800551e:	e074      	b.n	800560a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005520:	69bb      	ldr	r3, [r7, #24]
 8005522:	015a      	lsls	r2, r3, #5
 8005524:	69fb      	ldr	r3, [r7, #28]
 8005526:	4413      	add	r3, r2
 8005528:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800552c:	691b      	ldr	r3, [r3, #16]
 800552e:	69ba      	ldr	r2, [r7, #24]
 8005530:	0151      	lsls	r1, r2, #5
 8005532:	69fa      	ldr	r2, [r7, #28]
 8005534:	440a      	add	r2, r1
 8005536:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800553a:	0cdb      	lsrs	r3, r3, #19
 800553c:	04db      	lsls	r3, r3, #19
 800553e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005540:	69bb      	ldr	r3, [r7, #24]
 8005542:	015a      	lsls	r2, r3, #5
 8005544:	69fb      	ldr	r3, [r7, #28]
 8005546:	4413      	add	r3, r2
 8005548:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800554c:	691b      	ldr	r3, [r3, #16]
 800554e:	69ba      	ldr	r2, [r7, #24]
 8005550:	0151      	lsls	r1, r2, #5
 8005552:	69fa      	ldr	r2, [r7, #28]
 8005554:	440a      	add	r2, r1
 8005556:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800555a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800555e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005562:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005564:	69bb      	ldr	r3, [r7, #24]
 8005566:	015a      	lsls	r2, r3, #5
 8005568:	69fb      	ldr	r3, [r7, #28]
 800556a:	4413      	add	r3, r2
 800556c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005570:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	6999      	ldr	r1, [r3, #24]
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	68db      	ldr	r3, [r3, #12]
 800557a:	440b      	add	r3, r1
 800557c:	1e59      	subs	r1, r3, #1
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	68db      	ldr	r3, [r3, #12]
 8005582:	fbb1 f3f3 	udiv	r3, r1, r3
 8005586:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005588:	4b9d      	ldr	r3, [pc, #628]	; (8005800 <USB_EPStartXfer+0x370>)
 800558a:	400b      	ands	r3, r1
 800558c:	69b9      	ldr	r1, [r7, #24]
 800558e:	0148      	lsls	r0, r1, #5
 8005590:	69f9      	ldr	r1, [r7, #28]
 8005592:	4401      	add	r1, r0
 8005594:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005598:	4313      	orrs	r3, r2
 800559a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800559c:	69bb      	ldr	r3, [r7, #24]
 800559e:	015a      	lsls	r2, r3, #5
 80055a0:	69fb      	ldr	r3, [r7, #28]
 80055a2:	4413      	add	r3, r2
 80055a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055a8:	691a      	ldr	r2, [r3, #16]
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	699b      	ldr	r3, [r3, #24]
 80055ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055b2:	69b9      	ldr	r1, [r7, #24]
 80055b4:	0148      	lsls	r0, r1, #5
 80055b6:	69f9      	ldr	r1, [r7, #28]
 80055b8:	4401      	add	r1, r0
 80055ba:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80055be:	4313      	orrs	r3, r2
 80055c0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	791b      	ldrb	r3, [r3, #4]
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d11f      	bne.n	800560a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80055ca:	69bb      	ldr	r3, [r7, #24]
 80055cc:	015a      	lsls	r2, r3, #5
 80055ce:	69fb      	ldr	r3, [r7, #28]
 80055d0:	4413      	add	r3, r2
 80055d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055d6:	691b      	ldr	r3, [r3, #16]
 80055d8:	69ba      	ldr	r2, [r7, #24]
 80055da:	0151      	lsls	r1, r2, #5
 80055dc:	69fa      	ldr	r2, [r7, #28]
 80055de:	440a      	add	r2, r1
 80055e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055e4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80055e8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80055ea:	69bb      	ldr	r3, [r7, #24]
 80055ec:	015a      	lsls	r2, r3, #5
 80055ee:	69fb      	ldr	r3, [r7, #28]
 80055f0:	4413      	add	r3, r2
 80055f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055f6:	691b      	ldr	r3, [r3, #16]
 80055f8:	69ba      	ldr	r2, [r7, #24]
 80055fa:	0151      	lsls	r1, r2, #5
 80055fc:	69fa      	ldr	r2, [r7, #28]
 80055fe:	440a      	add	r2, r1
 8005600:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005604:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005608:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800560a:	79fb      	ldrb	r3, [r7, #7]
 800560c:	2b01      	cmp	r3, #1
 800560e:	d14b      	bne.n	80056a8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	695b      	ldr	r3, [r3, #20]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d009      	beq.n	800562c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005618:	69bb      	ldr	r3, [r7, #24]
 800561a:	015a      	lsls	r2, r3, #5
 800561c:	69fb      	ldr	r3, [r7, #28]
 800561e:	4413      	add	r3, r2
 8005620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005624:	461a      	mov	r2, r3
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	695b      	ldr	r3, [r3, #20]
 800562a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	791b      	ldrb	r3, [r3, #4]
 8005630:	2b01      	cmp	r3, #1
 8005632:	d128      	bne.n	8005686 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005634:	69fb      	ldr	r3, [r7, #28]
 8005636:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005640:	2b00      	cmp	r3, #0
 8005642:	d110      	bne.n	8005666 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005644:	69bb      	ldr	r3, [r7, #24]
 8005646:	015a      	lsls	r2, r3, #5
 8005648:	69fb      	ldr	r3, [r7, #28]
 800564a:	4413      	add	r3, r2
 800564c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	69ba      	ldr	r2, [r7, #24]
 8005654:	0151      	lsls	r1, r2, #5
 8005656:	69fa      	ldr	r2, [r7, #28]
 8005658:	440a      	add	r2, r1
 800565a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800565e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005662:	6013      	str	r3, [r2, #0]
 8005664:	e00f      	b.n	8005686 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005666:	69bb      	ldr	r3, [r7, #24]
 8005668:	015a      	lsls	r2, r3, #5
 800566a:	69fb      	ldr	r3, [r7, #28]
 800566c:	4413      	add	r3, r2
 800566e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	69ba      	ldr	r2, [r7, #24]
 8005676:	0151      	lsls	r1, r2, #5
 8005678:	69fa      	ldr	r2, [r7, #28]
 800567a:	440a      	add	r2, r1
 800567c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005680:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005684:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005686:	69bb      	ldr	r3, [r7, #24]
 8005688:	015a      	lsls	r2, r3, #5
 800568a:	69fb      	ldr	r3, [r7, #28]
 800568c:	4413      	add	r3, r2
 800568e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	69ba      	ldr	r2, [r7, #24]
 8005696:	0151      	lsls	r1, r2, #5
 8005698:	69fa      	ldr	r2, [r7, #28]
 800569a:	440a      	add	r2, r1
 800569c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056a0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80056a4:	6013      	str	r3, [r2, #0]
 80056a6:	e133      	b.n	8005910 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80056a8:	69bb      	ldr	r3, [r7, #24]
 80056aa:	015a      	lsls	r2, r3, #5
 80056ac:	69fb      	ldr	r3, [r7, #28]
 80056ae:	4413      	add	r3, r2
 80056b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	69ba      	ldr	r2, [r7, #24]
 80056b8:	0151      	lsls	r1, r2, #5
 80056ba:	69fa      	ldr	r2, [r7, #28]
 80056bc:	440a      	add	r2, r1
 80056be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056c2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80056c6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	791b      	ldrb	r3, [r3, #4]
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d015      	beq.n	80056fc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	699b      	ldr	r3, [r3, #24]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	f000 811b 	beq.w	8005910 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80056da:	69fb      	ldr	r3, [r7, #28]
 80056dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	781b      	ldrb	r3, [r3, #0]
 80056e6:	f003 030f 	and.w	r3, r3, #15
 80056ea:	2101      	movs	r1, #1
 80056ec:	fa01 f303 	lsl.w	r3, r1, r3
 80056f0:	69f9      	ldr	r1, [r7, #28]
 80056f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056f6:	4313      	orrs	r3, r2
 80056f8:	634b      	str	r3, [r1, #52]	; 0x34
 80056fa:	e109      	b.n	8005910 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80056fc:	69fb      	ldr	r3, [r7, #28]
 80056fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005708:	2b00      	cmp	r3, #0
 800570a:	d110      	bne.n	800572e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800570c:	69bb      	ldr	r3, [r7, #24]
 800570e:	015a      	lsls	r2, r3, #5
 8005710:	69fb      	ldr	r3, [r7, #28]
 8005712:	4413      	add	r3, r2
 8005714:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	69ba      	ldr	r2, [r7, #24]
 800571c:	0151      	lsls	r1, r2, #5
 800571e:	69fa      	ldr	r2, [r7, #28]
 8005720:	440a      	add	r2, r1
 8005722:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005726:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800572a:	6013      	str	r3, [r2, #0]
 800572c:	e00f      	b.n	800574e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800572e:	69bb      	ldr	r3, [r7, #24]
 8005730:	015a      	lsls	r2, r3, #5
 8005732:	69fb      	ldr	r3, [r7, #28]
 8005734:	4413      	add	r3, r2
 8005736:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	69ba      	ldr	r2, [r7, #24]
 800573e:	0151      	lsls	r1, r2, #5
 8005740:	69fa      	ldr	r2, [r7, #28]
 8005742:	440a      	add	r2, r1
 8005744:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005748:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800574c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	6919      	ldr	r1, [r3, #16]
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	781a      	ldrb	r2, [r3, #0]
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	699b      	ldr	r3, [r3, #24]
 800575a:	b298      	uxth	r0, r3
 800575c:	79fb      	ldrb	r3, [r7, #7]
 800575e:	9300      	str	r3, [sp, #0]
 8005760:	4603      	mov	r3, r0
 8005762:	68f8      	ldr	r0, [r7, #12]
 8005764:	f000 fade 	bl	8005d24 <USB_WritePacket>
 8005768:	e0d2      	b.n	8005910 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800576a:	69bb      	ldr	r3, [r7, #24]
 800576c:	015a      	lsls	r2, r3, #5
 800576e:	69fb      	ldr	r3, [r7, #28]
 8005770:	4413      	add	r3, r2
 8005772:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005776:	691b      	ldr	r3, [r3, #16]
 8005778:	69ba      	ldr	r2, [r7, #24]
 800577a:	0151      	lsls	r1, r2, #5
 800577c:	69fa      	ldr	r2, [r7, #28]
 800577e:	440a      	add	r2, r1
 8005780:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005784:	0cdb      	lsrs	r3, r3, #19
 8005786:	04db      	lsls	r3, r3, #19
 8005788:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800578a:	69bb      	ldr	r3, [r7, #24]
 800578c:	015a      	lsls	r2, r3, #5
 800578e:	69fb      	ldr	r3, [r7, #28]
 8005790:	4413      	add	r3, r2
 8005792:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005796:	691b      	ldr	r3, [r3, #16]
 8005798:	69ba      	ldr	r2, [r7, #24]
 800579a:	0151      	lsls	r1, r2, #5
 800579c:	69fa      	ldr	r2, [r7, #28]
 800579e:	440a      	add	r2, r1
 80057a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057a4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80057a8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80057ac:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	699b      	ldr	r3, [r3, #24]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d126      	bne.n	8005804 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80057b6:	69bb      	ldr	r3, [r7, #24]
 80057b8:	015a      	lsls	r2, r3, #5
 80057ba:	69fb      	ldr	r3, [r7, #28]
 80057bc:	4413      	add	r3, r2
 80057be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057c2:	691a      	ldr	r2, [r3, #16]
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057cc:	69b9      	ldr	r1, [r7, #24]
 80057ce:	0148      	lsls	r0, r1, #5
 80057d0:	69f9      	ldr	r1, [r7, #28]
 80057d2:	4401      	add	r1, r0
 80057d4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80057d8:	4313      	orrs	r3, r2
 80057da:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80057dc:	69bb      	ldr	r3, [r7, #24]
 80057de:	015a      	lsls	r2, r3, #5
 80057e0:	69fb      	ldr	r3, [r7, #28]
 80057e2:	4413      	add	r3, r2
 80057e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057e8:	691b      	ldr	r3, [r3, #16]
 80057ea:	69ba      	ldr	r2, [r7, #24]
 80057ec:	0151      	lsls	r1, r2, #5
 80057ee:	69fa      	ldr	r2, [r7, #28]
 80057f0:	440a      	add	r2, r1
 80057f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80057fa:	6113      	str	r3, [r2, #16]
 80057fc:	e03a      	b.n	8005874 <USB_EPStartXfer+0x3e4>
 80057fe:	bf00      	nop
 8005800:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	699a      	ldr	r2, [r3, #24]
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	68db      	ldr	r3, [r3, #12]
 800580c:	4413      	add	r3, r2
 800580e:	1e5a      	subs	r2, r3, #1
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	68db      	ldr	r3, [r3, #12]
 8005814:	fbb2 f3f3 	udiv	r3, r2, r3
 8005818:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	68db      	ldr	r3, [r3, #12]
 800581e:	8afa      	ldrh	r2, [r7, #22]
 8005820:	fb03 f202 	mul.w	r2, r3, r2
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005828:	69bb      	ldr	r3, [r7, #24]
 800582a:	015a      	lsls	r2, r3, #5
 800582c:	69fb      	ldr	r3, [r7, #28]
 800582e:	4413      	add	r3, r2
 8005830:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005834:	691a      	ldr	r2, [r3, #16]
 8005836:	8afb      	ldrh	r3, [r7, #22]
 8005838:	04d9      	lsls	r1, r3, #19
 800583a:	4b38      	ldr	r3, [pc, #224]	; (800591c <USB_EPStartXfer+0x48c>)
 800583c:	400b      	ands	r3, r1
 800583e:	69b9      	ldr	r1, [r7, #24]
 8005840:	0148      	lsls	r0, r1, #5
 8005842:	69f9      	ldr	r1, [r7, #28]
 8005844:	4401      	add	r1, r0
 8005846:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800584a:	4313      	orrs	r3, r2
 800584c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800584e:	69bb      	ldr	r3, [r7, #24]
 8005850:	015a      	lsls	r2, r3, #5
 8005852:	69fb      	ldr	r3, [r7, #28]
 8005854:	4413      	add	r3, r2
 8005856:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800585a:	691a      	ldr	r2, [r3, #16]
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	69db      	ldr	r3, [r3, #28]
 8005860:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005864:	69b9      	ldr	r1, [r7, #24]
 8005866:	0148      	lsls	r0, r1, #5
 8005868:	69f9      	ldr	r1, [r7, #28]
 800586a:	4401      	add	r1, r0
 800586c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005870:	4313      	orrs	r3, r2
 8005872:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005874:	79fb      	ldrb	r3, [r7, #7]
 8005876:	2b01      	cmp	r3, #1
 8005878:	d10d      	bne.n	8005896 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	691b      	ldr	r3, [r3, #16]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d009      	beq.n	8005896 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	6919      	ldr	r1, [r3, #16]
 8005886:	69bb      	ldr	r3, [r7, #24]
 8005888:	015a      	lsls	r2, r3, #5
 800588a:	69fb      	ldr	r3, [r7, #28]
 800588c:	4413      	add	r3, r2
 800588e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005892:	460a      	mov	r2, r1
 8005894:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	791b      	ldrb	r3, [r3, #4]
 800589a:	2b01      	cmp	r3, #1
 800589c:	d128      	bne.n	80058f0 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800589e:	69fb      	ldr	r3, [r7, #28]
 80058a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d110      	bne.n	80058d0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80058ae:	69bb      	ldr	r3, [r7, #24]
 80058b0:	015a      	lsls	r2, r3, #5
 80058b2:	69fb      	ldr	r3, [r7, #28]
 80058b4:	4413      	add	r3, r2
 80058b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	69ba      	ldr	r2, [r7, #24]
 80058be:	0151      	lsls	r1, r2, #5
 80058c0:	69fa      	ldr	r2, [r7, #28]
 80058c2:	440a      	add	r2, r1
 80058c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80058cc:	6013      	str	r3, [r2, #0]
 80058ce:	e00f      	b.n	80058f0 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80058d0:	69bb      	ldr	r3, [r7, #24]
 80058d2:	015a      	lsls	r2, r3, #5
 80058d4:	69fb      	ldr	r3, [r7, #28]
 80058d6:	4413      	add	r3, r2
 80058d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	69ba      	ldr	r2, [r7, #24]
 80058e0:	0151      	lsls	r1, r2, #5
 80058e2:	69fa      	ldr	r2, [r7, #28]
 80058e4:	440a      	add	r2, r1
 80058e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058ee:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80058f0:	69bb      	ldr	r3, [r7, #24]
 80058f2:	015a      	lsls	r2, r3, #5
 80058f4:	69fb      	ldr	r3, [r7, #28]
 80058f6:	4413      	add	r3, r2
 80058f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	69ba      	ldr	r2, [r7, #24]
 8005900:	0151      	lsls	r1, r2, #5
 8005902:	69fa      	ldr	r2, [r7, #28]
 8005904:	440a      	add	r2, r1
 8005906:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800590a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800590e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005910:	2300      	movs	r3, #0
}
 8005912:	4618      	mov	r0, r3
 8005914:	3720      	adds	r7, #32
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}
 800591a:	bf00      	nop
 800591c:	1ff80000 	.word	0x1ff80000

08005920 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005920:	b480      	push	{r7}
 8005922:	b087      	sub	sp, #28
 8005924:	af00      	add	r7, sp, #0
 8005926:	60f8      	str	r0, [r7, #12]
 8005928:	60b9      	str	r1, [r7, #8]
 800592a:	4613      	mov	r3, r2
 800592c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	781b      	ldrb	r3, [r3, #0]
 8005936:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	785b      	ldrb	r3, [r3, #1]
 800593c:	2b01      	cmp	r3, #1
 800593e:	f040 80ce 	bne.w	8005ade <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	699b      	ldr	r3, [r3, #24]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d132      	bne.n	80059b0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	015a      	lsls	r2, r3, #5
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	4413      	add	r3, r2
 8005952:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005956:	691b      	ldr	r3, [r3, #16]
 8005958:	693a      	ldr	r2, [r7, #16]
 800595a:	0151      	lsls	r1, r2, #5
 800595c:	697a      	ldr	r2, [r7, #20]
 800595e:	440a      	add	r2, r1
 8005960:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005964:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005968:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800596c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	015a      	lsls	r2, r3, #5
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	4413      	add	r3, r2
 8005976:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800597a:	691b      	ldr	r3, [r3, #16]
 800597c:	693a      	ldr	r2, [r7, #16]
 800597e:	0151      	lsls	r1, r2, #5
 8005980:	697a      	ldr	r2, [r7, #20]
 8005982:	440a      	add	r2, r1
 8005984:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005988:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800598c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	015a      	lsls	r2, r3, #5
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	4413      	add	r3, r2
 8005996:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800599a:	691b      	ldr	r3, [r3, #16]
 800599c:	693a      	ldr	r2, [r7, #16]
 800599e:	0151      	lsls	r1, r2, #5
 80059a0:	697a      	ldr	r2, [r7, #20]
 80059a2:	440a      	add	r2, r1
 80059a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059a8:	0cdb      	lsrs	r3, r3, #19
 80059aa:	04db      	lsls	r3, r3, #19
 80059ac:	6113      	str	r3, [r2, #16]
 80059ae:	e04e      	b.n	8005a4e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	015a      	lsls	r2, r3, #5
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	4413      	add	r3, r2
 80059b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059bc:	691b      	ldr	r3, [r3, #16]
 80059be:	693a      	ldr	r2, [r7, #16]
 80059c0:	0151      	lsls	r1, r2, #5
 80059c2:	697a      	ldr	r2, [r7, #20]
 80059c4:	440a      	add	r2, r1
 80059c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059ca:	0cdb      	lsrs	r3, r3, #19
 80059cc:	04db      	lsls	r3, r3, #19
 80059ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	015a      	lsls	r2, r3, #5
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	4413      	add	r3, r2
 80059d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059dc:	691b      	ldr	r3, [r3, #16]
 80059de:	693a      	ldr	r2, [r7, #16]
 80059e0:	0151      	lsls	r1, r2, #5
 80059e2:	697a      	ldr	r2, [r7, #20]
 80059e4:	440a      	add	r2, r1
 80059e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059ea:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80059ee:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80059f2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	699a      	ldr	r2, [r3, #24]
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d903      	bls.n	8005a08 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	68da      	ldr	r2, [r3, #12]
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	015a      	lsls	r2, r3, #5
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	4413      	add	r3, r2
 8005a10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a14:	691b      	ldr	r3, [r3, #16]
 8005a16:	693a      	ldr	r2, [r7, #16]
 8005a18:	0151      	lsls	r1, r2, #5
 8005a1a:	697a      	ldr	r2, [r7, #20]
 8005a1c:	440a      	add	r2, r1
 8005a1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a22:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a26:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	015a      	lsls	r2, r3, #5
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	4413      	add	r3, r2
 8005a30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a34:	691a      	ldr	r2, [r3, #16]
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	699b      	ldr	r3, [r3, #24]
 8005a3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a3e:	6939      	ldr	r1, [r7, #16]
 8005a40:	0148      	lsls	r0, r1, #5
 8005a42:	6979      	ldr	r1, [r7, #20]
 8005a44:	4401      	add	r1, r0
 8005a46:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005a4e:	79fb      	ldrb	r3, [r7, #7]
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d11e      	bne.n	8005a92 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	695b      	ldr	r3, [r3, #20]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d009      	beq.n	8005a70 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	015a      	lsls	r2, r3, #5
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	4413      	add	r3, r2
 8005a64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a68:	461a      	mov	r2, r3
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	695b      	ldr	r3, [r3, #20]
 8005a6e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	015a      	lsls	r2, r3, #5
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	4413      	add	r3, r2
 8005a78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	693a      	ldr	r2, [r7, #16]
 8005a80:	0151      	lsls	r1, r2, #5
 8005a82:	697a      	ldr	r2, [r7, #20]
 8005a84:	440a      	add	r2, r1
 8005a86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a8a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005a8e:	6013      	str	r3, [r2, #0]
 8005a90:	e097      	b.n	8005bc2 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	015a      	lsls	r2, r3, #5
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	4413      	add	r3, r2
 8005a9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	693a      	ldr	r2, [r7, #16]
 8005aa2:	0151      	lsls	r1, r2, #5
 8005aa4:	697a      	ldr	r2, [r7, #20]
 8005aa6:	440a      	add	r2, r1
 8005aa8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005aac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005ab0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	699b      	ldr	r3, [r3, #24]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	f000 8083 	beq.w	8005bc2 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ac2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	781b      	ldrb	r3, [r3, #0]
 8005ac8:	f003 030f 	and.w	r3, r3, #15
 8005acc:	2101      	movs	r1, #1
 8005ace:	fa01 f303 	lsl.w	r3, r1, r3
 8005ad2:	6979      	ldr	r1, [r7, #20]
 8005ad4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	634b      	str	r3, [r1, #52]	; 0x34
 8005adc:	e071      	b.n	8005bc2 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	015a      	lsls	r2, r3, #5
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	4413      	add	r3, r2
 8005ae6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aea:	691b      	ldr	r3, [r3, #16]
 8005aec:	693a      	ldr	r2, [r7, #16]
 8005aee:	0151      	lsls	r1, r2, #5
 8005af0:	697a      	ldr	r2, [r7, #20]
 8005af2:	440a      	add	r2, r1
 8005af4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005af8:	0cdb      	lsrs	r3, r3, #19
 8005afa:	04db      	lsls	r3, r3, #19
 8005afc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	015a      	lsls	r2, r3, #5
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	4413      	add	r3, r2
 8005b06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b0a:	691b      	ldr	r3, [r3, #16]
 8005b0c:	693a      	ldr	r2, [r7, #16]
 8005b0e:	0151      	lsls	r1, r2, #5
 8005b10:	697a      	ldr	r2, [r7, #20]
 8005b12:	440a      	add	r2, r1
 8005b14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b18:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005b1c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005b20:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	699b      	ldr	r3, [r3, #24]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d003      	beq.n	8005b32 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	68da      	ldr	r2, [r3, #12]
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	68da      	ldr	r2, [r3, #12]
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	015a      	lsls	r2, r3, #5
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	4413      	add	r3, r2
 8005b42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b46:	691b      	ldr	r3, [r3, #16]
 8005b48:	693a      	ldr	r2, [r7, #16]
 8005b4a:	0151      	lsls	r1, r2, #5
 8005b4c:	697a      	ldr	r2, [r7, #20]
 8005b4e:	440a      	add	r2, r1
 8005b50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b54:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b58:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	015a      	lsls	r2, r3, #5
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	4413      	add	r3, r2
 8005b62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b66:	691a      	ldr	r2, [r3, #16]
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	69db      	ldr	r3, [r3, #28]
 8005b6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b70:	6939      	ldr	r1, [r7, #16]
 8005b72:	0148      	lsls	r0, r1, #5
 8005b74:	6979      	ldr	r1, [r7, #20]
 8005b76:	4401      	add	r1, r0
 8005b78:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005b80:	79fb      	ldrb	r3, [r7, #7]
 8005b82:	2b01      	cmp	r3, #1
 8005b84:	d10d      	bne.n	8005ba2 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	691b      	ldr	r3, [r3, #16]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d009      	beq.n	8005ba2 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	6919      	ldr	r1, [r3, #16]
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	015a      	lsls	r2, r3, #5
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	4413      	add	r3, r2
 8005b9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b9e:	460a      	mov	r2, r1
 8005ba0:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	015a      	lsls	r2, r3, #5
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	4413      	add	r3, r2
 8005baa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	693a      	ldr	r2, [r7, #16]
 8005bb2:	0151      	lsls	r1, r2, #5
 8005bb4:	697a      	ldr	r2, [r7, #20]
 8005bb6:	440a      	add	r2, r1
 8005bb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bbc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005bc0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005bc2:	2300      	movs	r3, #0
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	371c      	adds	r7, #28
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr

08005bd0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b087      	sub	sp, #28
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005bde:	2300      	movs	r3, #0
 8005be0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	785b      	ldrb	r3, [r3, #1]
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d14a      	bne.n	8005c84 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	781b      	ldrb	r3, [r3, #0]
 8005bf2:	015a      	lsls	r2, r3, #5
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	4413      	add	r3, r2
 8005bf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c06:	f040 8086 	bne.w	8005d16 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	781b      	ldrb	r3, [r3, #0]
 8005c0e:	015a      	lsls	r2, r3, #5
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	4413      	add	r3, r2
 8005c14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	683a      	ldr	r2, [r7, #0]
 8005c1c:	7812      	ldrb	r2, [r2, #0]
 8005c1e:	0151      	lsls	r1, r2, #5
 8005c20:	693a      	ldr	r2, [r7, #16]
 8005c22:	440a      	add	r2, r1
 8005c24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c28:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005c2c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	781b      	ldrb	r3, [r3, #0]
 8005c32:	015a      	lsls	r2, r3, #5
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	4413      	add	r3, r2
 8005c38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	683a      	ldr	r2, [r7, #0]
 8005c40:	7812      	ldrb	r2, [r2, #0]
 8005c42:	0151      	lsls	r1, r2, #5
 8005c44:	693a      	ldr	r2, [r7, #16]
 8005c46:	440a      	add	r2, r1
 8005c48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c4c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c50:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	3301      	adds	r3, #1
 8005c56:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f242 7210 	movw	r2, #10000	; 0x2710
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d902      	bls.n	8005c68 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005c62:	2301      	movs	r3, #1
 8005c64:	75fb      	strb	r3, [r7, #23]
          break;
 8005c66:	e056      	b.n	8005d16 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	781b      	ldrb	r3, [r3, #0]
 8005c6c:	015a      	lsls	r2, r3, #5
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	4413      	add	r3, r2
 8005c72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c80:	d0e7      	beq.n	8005c52 <USB_EPStopXfer+0x82>
 8005c82:	e048      	b.n	8005d16 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	781b      	ldrb	r3, [r3, #0]
 8005c88:	015a      	lsls	r2, r3, #5
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	4413      	add	r3, r2
 8005c8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c9c:	d13b      	bne.n	8005d16 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	781b      	ldrb	r3, [r3, #0]
 8005ca2:	015a      	lsls	r2, r3, #5
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	4413      	add	r3, r2
 8005ca8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	683a      	ldr	r2, [r7, #0]
 8005cb0:	7812      	ldrb	r2, [r2, #0]
 8005cb2:	0151      	lsls	r1, r2, #5
 8005cb4:	693a      	ldr	r2, [r7, #16]
 8005cb6:	440a      	add	r2, r1
 8005cb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cbc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005cc0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	781b      	ldrb	r3, [r3, #0]
 8005cc6:	015a      	lsls	r2, r3, #5
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	4413      	add	r3, r2
 8005ccc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	683a      	ldr	r2, [r7, #0]
 8005cd4:	7812      	ldrb	r2, [r2, #0]
 8005cd6:	0151      	lsls	r1, r2, #5
 8005cd8:	693a      	ldr	r2, [r7, #16]
 8005cda:	440a      	add	r2, r1
 8005cdc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ce0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ce4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	3301      	adds	r3, #1
 8005cea:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f242 7210 	movw	r2, #10000	; 0x2710
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d902      	bls.n	8005cfc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	75fb      	strb	r3, [r7, #23]
          break;
 8005cfa:	e00c      	b.n	8005d16 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	781b      	ldrb	r3, [r3, #0]
 8005d00:	015a      	lsls	r2, r3, #5
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	4413      	add	r3, r2
 8005d06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d14:	d0e7      	beq.n	8005ce6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005d16:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	371c      	adds	r7, #28
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d22:	4770      	bx	lr

08005d24 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b089      	sub	sp, #36	; 0x24
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	60f8      	str	r0, [r7, #12]
 8005d2c:	60b9      	str	r1, [r7, #8]
 8005d2e:	4611      	mov	r1, r2
 8005d30:	461a      	mov	r2, r3
 8005d32:	460b      	mov	r3, r1
 8005d34:	71fb      	strb	r3, [r7, #7]
 8005d36:	4613      	mov	r3, r2
 8005d38:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005d42:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d123      	bne.n	8005d92 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005d4a:	88bb      	ldrh	r3, [r7, #4]
 8005d4c:	3303      	adds	r3, #3
 8005d4e:	089b      	lsrs	r3, r3, #2
 8005d50:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005d52:	2300      	movs	r3, #0
 8005d54:	61bb      	str	r3, [r7, #24]
 8005d56:	e018      	b.n	8005d8a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005d58:	79fb      	ldrb	r3, [r7, #7]
 8005d5a:	031a      	lsls	r2, r3, #12
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	4413      	add	r3, r2
 8005d60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d64:	461a      	mov	r2, r3
 8005d66:	69fb      	ldr	r3, [r7, #28]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005d6c:	69fb      	ldr	r3, [r7, #28]
 8005d6e:	3301      	adds	r3, #1
 8005d70:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005d72:	69fb      	ldr	r3, [r7, #28]
 8005d74:	3301      	adds	r3, #1
 8005d76:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005d78:	69fb      	ldr	r3, [r7, #28]
 8005d7a:	3301      	adds	r3, #1
 8005d7c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005d7e:	69fb      	ldr	r3, [r7, #28]
 8005d80:	3301      	adds	r3, #1
 8005d82:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005d84:	69bb      	ldr	r3, [r7, #24]
 8005d86:	3301      	adds	r3, #1
 8005d88:	61bb      	str	r3, [r7, #24]
 8005d8a:	69ba      	ldr	r2, [r7, #24]
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	429a      	cmp	r2, r3
 8005d90:	d3e2      	bcc.n	8005d58 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005d92:	2300      	movs	r3, #0
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3724      	adds	r7, #36	; 0x24
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9e:	4770      	bx	lr

08005da0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b08b      	sub	sp, #44	; 0x2c
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	60f8      	str	r0, [r7, #12]
 8005da8:	60b9      	str	r1, [r7, #8]
 8005daa:	4613      	mov	r3, r2
 8005dac:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005db6:	88fb      	ldrh	r3, [r7, #6]
 8005db8:	089b      	lsrs	r3, r3, #2
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005dbe:	88fb      	ldrh	r3, [r7, #6]
 8005dc0:	f003 0303 	and.w	r3, r3, #3
 8005dc4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	623b      	str	r3, [r7, #32]
 8005dca:	e014      	b.n	8005df6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005dcc:	69bb      	ldr	r3, [r7, #24]
 8005dce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd6:	601a      	str	r2, [r3, #0]
    pDest++;
 8005dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dda:	3301      	adds	r3, #1
 8005ddc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de0:	3301      	adds	r3, #1
 8005de2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de6:	3301      	adds	r3, #1
 8005de8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dec:	3301      	adds	r3, #1
 8005dee:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005df0:	6a3b      	ldr	r3, [r7, #32]
 8005df2:	3301      	adds	r3, #1
 8005df4:	623b      	str	r3, [r7, #32]
 8005df6:	6a3a      	ldr	r2, [r7, #32]
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	429a      	cmp	r2, r3
 8005dfc:	d3e6      	bcc.n	8005dcc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005dfe:	8bfb      	ldrh	r3, [r7, #30]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d01e      	beq.n	8005e42 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005e04:	2300      	movs	r3, #0
 8005e06:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005e08:	69bb      	ldr	r3, [r7, #24]
 8005e0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e0e:	461a      	mov	r2, r3
 8005e10:	f107 0310 	add.w	r3, r7, #16
 8005e14:	6812      	ldr	r2, [r2, #0]
 8005e16:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005e18:	693a      	ldr	r2, [r7, #16]
 8005e1a:	6a3b      	ldr	r3, [r7, #32]
 8005e1c:	b2db      	uxtb	r3, r3
 8005e1e:	00db      	lsls	r3, r3, #3
 8005e20:	fa22 f303 	lsr.w	r3, r2, r3
 8005e24:	b2da      	uxtb	r2, r3
 8005e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e28:	701a      	strb	r2, [r3, #0]
      i++;
 8005e2a:	6a3b      	ldr	r3, [r7, #32]
 8005e2c:	3301      	adds	r3, #1
 8005e2e:	623b      	str	r3, [r7, #32]
      pDest++;
 8005e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e32:	3301      	adds	r3, #1
 8005e34:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005e36:	8bfb      	ldrh	r3, [r7, #30]
 8005e38:	3b01      	subs	r3, #1
 8005e3a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005e3c:	8bfb      	ldrh	r3, [r7, #30]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d1ea      	bne.n	8005e18 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	372c      	adds	r7, #44	; 0x2c
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr

08005e50 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b085      	sub	sp, #20
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	781b      	ldrb	r3, [r3, #0]
 8005e62:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	785b      	ldrb	r3, [r3, #1]
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d12c      	bne.n	8005ec6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	015a      	lsls	r2, r3, #5
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	4413      	add	r3, r2
 8005e74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	db12      	blt.n	8005ea4 <USB_EPSetStall+0x54>
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d00f      	beq.n	8005ea4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	015a      	lsls	r2, r3, #5
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	4413      	add	r3, r2
 8005e8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	68ba      	ldr	r2, [r7, #8]
 8005e94:	0151      	lsls	r1, r2, #5
 8005e96:	68fa      	ldr	r2, [r7, #12]
 8005e98:	440a      	add	r2, r1
 8005e9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e9e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005ea2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	015a      	lsls	r2, r3, #5
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	4413      	add	r3, r2
 8005eac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	68ba      	ldr	r2, [r7, #8]
 8005eb4:	0151      	lsls	r1, r2, #5
 8005eb6:	68fa      	ldr	r2, [r7, #12]
 8005eb8:	440a      	add	r2, r1
 8005eba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ebe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005ec2:	6013      	str	r3, [r2, #0]
 8005ec4:	e02b      	b.n	8005f1e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	015a      	lsls	r2, r3, #5
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	4413      	add	r3, r2
 8005ece:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	db12      	blt.n	8005efe <USB_EPSetStall+0xae>
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d00f      	beq.n	8005efe <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	015a      	lsls	r2, r3, #5
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	4413      	add	r3, r2
 8005ee6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	68ba      	ldr	r2, [r7, #8]
 8005eee:	0151      	lsls	r1, r2, #5
 8005ef0:	68fa      	ldr	r2, [r7, #12]
 8005ef2:	440a      	add	r2, r1
 8005ef4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ef8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005efc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	015a      	lsls	r2, r3, #5
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	4413      	add	r3, r2
 8005f06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	68ba      	ldr	r2, [r7, #8]
 8005f0e:	0151      	lsls	r1, r2, #5
 8005f10:	68fa      	ldr	r2, [r7, #12]
 8005f12:	440a      	add	r2, r1
 8005f14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f18:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005f1c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005f1e:	2300      	movs	r3, #0
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3714      	adds	r7, #20
 8005f24:	46bd      	mov	sp, r7
 8005f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2a:	4770      	bx	lr

08005f2c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b085      	sub	sp, #20
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
 8005f34:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	781b      	ldrb	r3, [r3, #0]
 8005f3e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	785b      	ldrb	r3, [r3, #1]
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d128      	bne.n	8005f9a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	015a      	lsls	r2, r3, #5
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	4413      	add	r3, r2
 8005f50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	68ba      	ldr	r2, [r7, #8]
 8005f58:	0151      	lsls	r1, r2, #5
 8005f5a:	68fa      	ldr	r2, [r7, #12]
 8005f5c:	440a      	add	r2, r1
 8005f5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f62:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005f66:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	791b      	ldrb	r3, [r3, #4]
 8005f6c:	2b03      	cmp	r3, #3
 8005f6e:	d003      	beq.n	8005f78 <USB_EPClearStall+0x4c>
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	791b      	ldrb	r3, [r3, #4]
 8005f74:	2b02      	cmp	r3, #2
 8005f76:	d138      	bne.n	8005fea <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	015a      	lsls	r2, r3, #5
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	4413      	add	r3, r2
 8005f80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	68ba      	ldr	r2, [r7, #8]
 8005f88:	0151      	lsls	r1, r2, #5
 8005f8a:	68fa      	ldr	r2, [r7, #12]
 8005f8c:	440a      	add	r2, r1
 8005f8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f96:	6013      	str	r3, [r2, #0]
 8005f98:	e027      	b.n	8005fea <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	015a      	lsls	r2, r3, #5
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	4413      	add	r3, r2
 8005fa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	68ba      	ldr	r2, [r7, #8]
 8005faa:	0151      	lsls	r1, r2, #5
 8005fac:	68fa      	ldr	r2, [r7, #12]
 8005fae:	440a      	add	r2, r1
 8005fb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fb4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005fb8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	791b      	ldrb	r3, [r3, #4]
 8005fbe:	2b03      	cmp	r3, #3
 8005fc0:	d003      	beq.n	8005fca <USB_EPClearStall+0x9e>
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	791b      	ldrb	r3, [r3, #4]
 8005fc6:	2b02      	cmp	r3, #2
 8005fc8:	d10f      	bne.n	8005fea <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	015a      	lsls	r2, r3, #5
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	4413      	add	r3, r2
 8005fd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	68ba      	ldr	r2, [r7, #8]
 8005fda:	0151      	lsls	r1, r2, #5
 8005fdc:	68fa      	ldr	r2, [r7, #12]
 8005fde:	440a      	add	r2, r1
 8005fe0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fe4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fe8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005fea:	2300      	movs	r3, #0
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	3714      	adds	r7, #20
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff6:	4770      	bx	lr

08005ff8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b085      	sub	sp, #20
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
 8006000:	460b      	mov	r3, r1
 8006002:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	68fa      	ldr	r2, [r7, #12]
 8006012:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006016:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800601a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	78fb      	ldrb	r3, [r7, #3]
 8006026:	011b      	lsls	r3, r3, #4
 8006028:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800602c:	68f9      	ldr	r1, [r7, #12]
 800602e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006032:	4313      	orrs	r3, r2
 8006034:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006036:	2300      	movs	r3, #0
}
 8006038:	4618      	mov	r0, r3
 800603a:	3714      	adds	r7, #20
 800603c:	46bd      	mov	sp, r7
 800603e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006042:	4770      	bx	lr

08006044 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006044:	b480      	push	{r7}
 8006046:	b085      	sub	sp, #20
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	68fa      	ldr	r2, [r7, #12]
 800605a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800605e:	f023 0303 	bic.w	r3, r3, #3
 8006062:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	68fa      	ldr	r2, [r7, #12]
 800606e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006072:	f023 0302 	bic.w	r3, r3, #2
 8006076:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006078:	2300      	movs	r3, #0
}
 800607a:	4618      	mov	r0, r3
 800607c:	3714      	adds	r7, #20
 800607e:	46bd      	mov	sp, r7
 8006080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006084:	4770      	bx	lr

08006086 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006086:	b480      	push	{r7}
 8006088:	b085      	sub	sp, #20
 800608a:	af00      	add	r7, sp, #0
 800608c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	68fa      	ldr	r2, [r7, #12]
 800609c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80060a0:	f023 0303 	bic.w	r3, r3, #3
 80060a4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	68fa      	ldr	r2, [r7, #12]
 80060b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060b4:	f043 0302 	orr.w	r3, r3, #2
 80060b8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80060ba:	2300      	movs	r3, #0
}
 80060bc:	4618      	mov	r0, r3
 80060be:	3714      	adds	r7, #20
 80060c0:	46bd      	mov	sp, r7
 80060c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c6:	4770      	bx	lr

080060c8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b085      	sub	sp, #20
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	695b      	ldr	r3, [r3, #20]
 80060d4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	699b      	ldr	r3, [r3, #24]
 80060da:	68fa      	ldr	r2, [r7, #12]
 80060dc:	4013      	ands	r3, r2
 80060de:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80060e0:	68fb      	ldr	r3, [r7, #12]
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3714      	adds	r7, #20
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr

080060ee <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80060ee:	b480      	push	{r7}
 80060f0:	b085      	sub	sp, #20
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006100:	699b      	ldr	r3, [r3, #24]
 8006102:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800610a:	69db      	ldr	r3, [r3, #28]
 800610c:	68ba      	ldr	r2, [r7, #8]
 800610e:	4013      	ands	r3, r2
 8006110:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	0c1b      	lsrs	r3, r3, #16
}
 8006116:	4618      	mov	r0, r3
 8006118:	3714      	adds	r7, #20
 800611a:	46bd      	mov	sp, r7
 800611c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006120:	4770      	bx	lr

08006122 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006122:	b480      	push	{r7}
 8006124:	b085      	sub	sp, #20
 8006126:	af00      	add	r7, sp, #0
 8006128:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006134:	699b      	ldr	r3, [r3, #24]
 8006136:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800613e:	69db      	ldr	r3, [r3, #28]
 8006140:	68ba      	ldr	r2, [r7, #8]
 8006142:	4013      	ands	r3, r2
 8006144:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	b29b      	uxth	r3, r3
}
 800614a:	4618      	mov	r0, r3
 800614c:	3714      	adds	r7, #20
 800614e:	46bd      	mov	sp, r7
 8006150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006154:	4770      	bx	lr

08006156 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006156:	b480      	push	{r7}
 8006158:	b085      	sub	sp, #20
 800615a:	af00      	add	r7, sp, #0
 800615c:	6078      	str	r0, [r7, #4]
 800615e:	460b      	mov	r3, r1
 8006160:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006166:	78fb      	ldrb	r3, [r7, #3]
 8006168:	015a      	lsls	r2, r3, #5
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	4413      	add	r3, r2
 800616e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006172:	689b      	ldr	r3, [r3, #8]
 8006174:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800617c:	695b      	ldr	r3, [r3, #20]
 800617e:	68ba      	ldr	r2, [r7, #8]
 8006180:	4013      	ands	r3, r2
 8006182:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006184:	68bb      	ldr	r3, [r7, #8]
}
 8006186:	4618      	mov	r0, r3
 8006188:	3714      	adds	r7, #20
 800618a:	46bd      	mov	sp, r7
 800618c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006190:	4770      	bx	lr

08006192 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006192:	b480      	push	{r7}
 8006194:	b087      	sub	sp, #28
 8006196:	af00      	add	r7, sp, #0
 8006198:	6078      	str	r0, [r7, #4]
 800619a:	460b      	mov	r3, r1
 800619c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061a8:	691b      	ldr	r3, [r3, #16]
 80061aa:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061b4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80061b6:	78fb      	ldrb	r3, [r7, #3]
 80061b8:	f003 030f 	and.w	r3, r3, #15
 80061bc:	68fa      	ldr	r2, [r7, #12]
 80061be:	fa22 f303 	lsr.w	r3, r2, r3
 80061c2:	01db      	lsls	r3, r3, #7
 80061c4:	b2db      	uxtb	r3, r3
 80061c6:	693a      	ldr	r2, [r7, #16]
 80061c8:	4313      	orrs	r3, r2
 80061ca:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80061cc:	78fb      	ldrb	r3, [r7, #3]
 80061ce:	015a      	lsls	r2, r3, #5
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	4413      	add	r3, r2
 80061d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	693a      	ldr	r2, [r7, #16]
 80061dc:	4013      	ands	r3, r2
 80061de:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80061e0:	68bb      	ldr	r3, [r7, #8]
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	371c      	adds	r7, #28
 80061e6:	46bd      	mov	sp, r7
 80061e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ec:	4770      	bx	lr

080061ee <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80061ee:	b480      	push	{r7}
 80061f0:	b083      	sub	sp, #12
 80061f2:	af00      	add	r7, sp, #0
 80061f4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	695b      	ldr	r3, [r3, #20]
 80061fa:	f003 0301 	and.w	r3, r3, #1
}
 80061fe:	4618      	mov	r0, r3
 8006200:	370c      	adds	r7, #12
 8006202:	46bd      	mov	sp, r7
 8006204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006208:	4770      	bx	lr

0800620a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800620a:	b480      	push	{r7}
 800620c:	b085      	sub	sp, #20
 800620e:	af00      	add	r7, sp, #0
 8006210:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	68fa      	ldr	r2, [r7, #12]
 8006220:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006224:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006228:	f023 0307 	bic.w	r3, r3, #7
 800622c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	68fa      	ldr	r2, [r7, #12]
 8006238:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800623c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006240:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006242:	2300      	movs	r3, #0
}
 8006244:	4618      	mov	r0, r3
 8006246:	3714      	adds	r7, #20
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr

08006250 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006250:	b480      	push	{r7}
 8006252:	b087      	sub	sp, #28
 8006254:	af00      	add	r7, sp, #0
 8006256:	60f8      	str	r0, [r7, #12]
 8006258:	460b      	mov	r3, r1
 800625a:	607a      	str	r2, [r7, #4]
 800625c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	333c      	adds	r3, #60	; 0x3c
 8006266:	3304      	adds	r3, #4
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	4a26      	ldr	r2, [pc, #152]	; (8006308 <USB_EP0_OutStart+0xb8>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d90a      	bls.n	800628a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006280:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006284:	d101      	bne.n	800628a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006286:	2300      	movs	r3, #0
 8006288:	e037      	b.n	80062fa <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006290:	461a      	mov	r2, r3
 8006292:	2300      	movs	r3, #0
 8006294:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800629c:	691b      	ldr	r3, [r3, #16]
 800629e:	697a      	ldr	r2, [r7, #20]
 80062a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80062a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062b0:	691b      	ldr	r3, [r3, #16]
 80062b2:	697a      	ldr	r2, [r7, #20]
 80062b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062b8:	f043 0318 	orr.w	r3, r3, #24
 80062bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062c4:	691b      	ldr	r3, [r3, #16]
 80062c6:	697a      	ldr	r2, [r7, #20]
 80062c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062cc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80062d0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80062d2:	7afb      	ldrb	r3, [r7, #11]
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	d10f      	bne.n	80062f8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062de:	461a      	mov	r2, r3
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	697a      	ldr	r2, [r7, #20]
 80062ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062f2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80062f6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80062f8:	2300      	movs	r3, #0
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	371c      	adds	r7, #28
 80062fe:	46bd      	mov	sp, r7
 8006300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006304:	4770      	bx	lr
 8006306:	bf00      	nop
 8006308:	4f54300a 	.word	0x4f54300a

0800630c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800630c:	b480      	push	{r7}
 800630e:	b085      	sub	sp, #20
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006314:	2300      	movs	r3, #0
 8006316:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	3301      	adds	r3, #1
 800631c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	4a13      	ldr	r2, [pc, #76]	; (8006370 <USB_CoreReset+0x64>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d901      	bls.n	800632a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006326:	2303      	movs	r3, #3
 8006328:	e01b      	b.n	8006362 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	691b      	ldr	r3, [r3, #16]
 800632e:	2b00      	cmp	r3, #0
 8006330:	daf2      	bge.n	8006318 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006332:	2300      	movs	r3, #0
 8006334:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	691b      	ldr	r3, [r3, #16]
 800633a:	f043 0201 	orr.w	r2, r3, #1
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	3301      	adds	r3, #1
 8006346:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	4a09      	ldr	r2, [pc, #36]	; (8006370 <USB_CoreReset+0x64>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d901      	bls.n	8006354 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006350:	2303      	movs	r3, #3
 8006352:	e006      	b.n	8006362 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	691b      	ldr	r3, [r3, #16]
 8006358:	f003 0301 	and.w	r3, r3, #1
 800635c:	2b01      	cmp	r3, #1
 800635e:	d0f0      	beq.n	8006342 <USB_CoreReset+0x36>

  return HAL_OK;
 8006360:	2300      	movs	r3, #0
}
 8006362:	4618      	mov	r0, r3
 8006364:	3714      	adds	r7, #20
 8006366:	46bd      	mov	sp, r7
 8006368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636c:	4770      	bx	lr
 800636e:	bf00      	nop
 8006370:	00030d40 	.word	0x00030d40

08006374 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b084      	sub	sp, #16
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
 800637c:	460b      	mov	r3, r1
 800637e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006380:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006384:	f002 fc1e 	bl	8008bc4 <USBD_static_malloc>
 8006388:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d109      	bne.n	80063a4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	32b0      	adds	r2, #176	; 0xb0
 800639a:	2100      	movs	r1, #0
 800639c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80063a0:	2302      	movs	r3, #2
 80063a2:	e0d4      	b.n	800654e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80063a4:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80063a8:	2100      	movs	r1, #0
 80063aa:	68f8      	ldr	r0, [r7, #12]
 80063ac:	f002 fc72 	bl	8008c94 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	32b0      	adds	r2, #176	; 0xb0
 80063ba:	68f9      	ldr	r1, [r7, #12]
 80063bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	32b0      	adds	r2, #176	; 0xb0
 80063ca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	7c1b      	ldrb	r3, [r3, #16]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d138      	bne.n	800644e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80063dc:	4b5e      	ldr	r3, [pc, #376]	; (8006558 <USBD_CDC_Init+0x1e4>)
 80063de:	7819      	ldrb	r1, [r3, #0]
 80063e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80063e4:	2202      	movs	r2, #2
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f002 fac9 	bl	800897e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80063ec:	4b5a      	ldr	r3, [pc, #360]	; (8006558 <USBD_CDC_Init+0x1e4>)
 80063ee:	781b      	ldrb	r3, [r3, #0]
 80063f0:	f003 020f 	and.w	r2, r3, #15
 80063f4:	6879      	ldr	r1, [r7, #4]
 80063f6:	4613      	mov	r3, r2
 80063f8:	009b      	lsls	r3, r3, #2
 80063fa:	4413      	add	r3, r2
 80063fc:	009b      	lsls	r3, r3, #2
 80063fe:	440b      	add	r3, r1
 8006400:	3324      	adds	r3, #36	; 0x24
 8006402:	2201      	movs	r2, #1
 8006404:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006406:	4b55      	ldr	r3, [pc, #340]	; (800655c <USBD_CDC_Init+0x1e8>)
 8006408:	7819      	ldrb	r1, [r3, #0]
 800640a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800640e:	2202      	movs	r2, #2
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f002 fab4 	bl	800897e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006416:	4b51      	ldr	r3, [pc, #324]	; (800655c <USBD_CDC_Init+0x1e8>)
 8006418:	781b      	ldrb	r3, [r3, #0]
 800641a:	f003 020f 	and.w	r2, r3, #15
 800641e:	6879      	ldr	r1, [r7, #4]
 8006420:	4613      	mov	r3, r2
 8006422:	009b      	lsls	r3, r3, #2
 8006424:	4413      	add	r3, r2
 8006426:	009b      	lsls	r3, r3, #2
 8006428:	440b      	add	r3, r1
 800642a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800642e:	2201      	movs	r2, #1
 8006430:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006432:	4b4b      	ldr	r3, [pc, #300]	; (8006560 <USBD_CDC_Init+0x1ec>)
 8006434:	781b      	ldrb	r3, [r3, #0]
 8006436:	f003 020f 	and.w	r2, r3, #15
 800643a:	6879      	ldr	r1, [r7, #4]
 800643c:	4613      	mov	r3, r2
 800643e:	009b      	lsls	r3, r3, #2
 8006440:	4413      	add	r3, r2
 8006442:	009b      	lsls	r3, r3, #2
 8006444:	440b      	add	r3, r1
 8006446:	3326      	adds	r3, #38	; 0x26
 8006448:	2210      	movs	r2, #16
 800644a:	801a      	strh	r2, [r3, #0]
 800644c:	e035      	b.n	80064ba <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800644e:	4b42      	ldr	r3, [pc, #264]	; (8006558 <USBD_CDC_Init+0x1e4>)
 8006450:	7819      	ldrb	r1, [r3, #0]
 8006452:	2340      	movs	r3, #64	; 0x40
 8006454:	2202      	movs	r2, #2
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f002 fa91 	bl	800897e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800645c:	4b3e      	ldr	r3, [pc, #248]	; (8006558 <USBD_CDC_Init+0x1e4>)
 800645e:	781b      	ldrb	r3, [r3, #0]
 8006460:	f003 020f 	and.w	r2, r3, #15
 8006464:	6879      	ldr	r1, [r7, #4]
 8006466:	4613      	mov	r3, r2
 8006468:	009b      	lsls	r3, r3, #2
 800646a:	4413      	add	r3, r2
 800646c:	009b      	lsls	r3, r3, #2
 800646e:	440b      	add	r3, r1
 8006470:	3324      	adds	r3, #36	; 0x24
 8006472:	2201      	movs	r2, #1
 8006474:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006476:	4b39      	ldr	r3, [pc, #228]	; (800655c <USBD_CDC_Init+0x1e8>)
 8006478:	7819      	ldrb	r1, [r3, #0]
 800647a:	2340      	movs	r3, #64	; 0x40
 800647c:	2202      	movs	r2, #2
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f002 fa7d 	bl	800897e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006484:	4b35      	ldr	r3, [pc, #212]	; (800655c <USBD_CDC_Init+0x1e8>)
 8006486:	781b      	ldrb	r3, [r3, #0]
 8006488:	f003 020f 	and.w	r2, r3, #15
 800648c:	6879      	ldr	r1, [r7, #4]
 800648e:	4613      	mov	r3, r2
 8006490:	009b      	lsls	r3, r3, #2
 8006492:	4413      	add	r3, r2
 8006494:	009b      	lsls	r3, r3, #2
 8006496:	440b      	add	r3, r1
 8006498:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800649c:	2201      	movs	r2, #1
 800649e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80064a0:	4b2f      	ldr	r3, [pc, #188]	; (8006560 <USBD_CDC_Init+0x1ec>)
 80064a2:	781b      	ldrb	r3, [r3, #0]
 80064a4:	f003 020f 	and.w	r2, r3, #15
 80064a8:	6879      	ldr	r1, [r7, #4]
 80064aa:	4613      	mov	r3, r2
 80064ac:	009b      	lsls	r3, r3, #2
 80064ae:	4413      	add	r3, r2
 80064b0:	009b      	lsls	r3, r3, #2
 80064b2:	440b      	add	r3, r1
 80064b4:	3326      	adds	r3, #38	; 0x26
 80064b6:	2210      	movs	r2, #16
 80064b8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80064ba:	4b29      	ldr	r3, [pc, #164]	; (8006560 <USBD_CDC_Init+0x1ec>)
 80064bc:	7819      	ldrb	r1, [r3, #0]
 80064be:	2308      	movs	r3, #8
 80064c0:	2203      	movs	r2, #3
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f002 fa5b 	bl	800897e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80064c8:	4b25      	ldr	r3, [pc, #148]	; (8006560 <USBD_CDC_Init+0x1ec>)
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	f003 020f 	and.w	r2, r3, #15
 80064d0:	6879      	ldr	r1, [r7, #4]
 80064d2:	4613      	mov	r3, r2
 80064d4:	009b      	lsls	r3, r3, #2
 80064d6:	4413      	add	r3, r2
 80064d8:	009b      	lsls	r3, r3, #2
 80064da:	440b      	add	r3, r1
 80064dc:	3324      	adds	r3, #36	; 0x24
 80064de:	2201      	movs	r2, #1
 80064e0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	2200      	movs	r2, #0
 80064e6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80064f0:	687a      	ldr	r2, [r7, #4]
 80064f2:	33b0      	adds	r3, #176	; 0xb0
 80064f4:	009b      	lsls	r3, r3, #2
 80064f6:	4413      	add	r3, r2
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2200      	movs	r2, #0
 8006502:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2200      	movs	r2, #0
 800650a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006514:	2b00      	cmp	r3, #0
 8006516:	d101      	bne.n	800651c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006518:	2302      	movs	r3, #2
 800651a:	e018      	b.n	800654e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	7c1b      	ldrb	r3, [r3, #16]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d10a      	bne.n	800653a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006524:	4b0d      	ldr	r3, [pc, #52]	; (800655c <USBD_CDC_Init+0x1e8>)
 8006526:	7819      	ldrb	r1, [r3, #0]
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800652e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f002 fb12 	bl	8008b5c <USBD_LL_PrepareReceive>
 8006538:	e008      	b.n	800654c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800653a:	4b08      	ldr	r3, [pc, #32]	; (800655c <USBD_CDC_Init+0x1e8>)
 800653c:	7819      	ldrb	r1, [r3, #0]
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006544:	2340      	movs	r3, #64	; 0x40
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f002 fb08 	bl	8008b5c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800654c:	2300      	movs	r3, #0
}
 800654e:	4618      	mov	r0, r3
 8006550:	3710      	adds	r7, #16
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}
 8006556:	bf00      	nop
 8006558:	20000093 	.word	0x20000093
 800655c:	20000094 	.word	0x20000094
 8006560:	20000095 	.word	0x20000095

08006564 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b082      	sub	sp, #8
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	460b      	mov	r3, r1
 800656e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006570:	4b3a      	ldr	r3, [pc, #232]	; (800665c <USBD_CDC_DeInit+0xf8>)
 8006572:	781b      	ldrb	r3, [r3, #0]
 8006574:	4619      	mov	r1, r3
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f002 fa27 	bl	80089ca <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800657c:	4b37      	ldr	r3, [pc, #220]	; (800665c <USBD_CDC_DeInit+0xf8>)
 800657e:	781b      	ldrb	r3, [r3, #0]
 8006580:	f003 020f 	and.w	r2, r3, #15
 8006584:	6879      	ldr	r1, [r7, #4]
 8006586:	4613      	mov	r3, r2
 8006588:	009b      	lsls	r3, r3, #2
 800658a:	4413      	add	r3, r2
 800658c:	009b      	lsls	r3, r3, #2
 800658e:	440b      	add	r3, r1
 8006590:	3324      	adds	r3, #36	; 0x24
 8006592:	2200      	movs	r2, #0
 8006594:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006596:	4b32      	ldr	r3, [pc, #200]	; (8006660 <USBD_CDC_DeInit+0xfc>)
 8006598:	781b      	ldrb	r3, [r3, #0]
 800659a:	4619      	mov	r1, r3
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f002 fa14 	bl	80089ca <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80065a2:	4b2f      	ldr	r3, [pc, #188]	; (8006660 <USBD_CDC_DeInit+0xfc>)
 80065a4:	781b      	ldrb	r3, [r3, #0]
 80065a6:	f003 020f 	and.w	r2, r3, #15
 80065aa:	6879      	ldr	r1, [r7, #4]
 80065ac:	4613      	mov	r3, r2
 80065ae:	009b      	lsls	r3, r3, #2
 80065b0:	4413      	add	r3, r2
 80065b2:	009b      	lsls	r3, r3, #2
 80065b4:	440b      	add	r3, r1
 80065b6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80065ba:	2200      	movs	r2, #0
 80065bc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80065be:	4b29      	ldr	r3, [pc, #164]	; (8006664 <USBD_CDC_DeInit+0x100>)
 80065c0:	781b      	ldrb	r3, [r3, #0]
 80065c2:	4619      	mov	r1, r3
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f002 fa00 	bl	80089ca <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80065ca:	4b26      	ldr	r3, [pc, #152]	; (8006664 <USBD_CDC_DeInit+0x100>)
 80065cc:	781b      	ldrb	r3, [r3, #0]
 80065ce:	f003 020f 	and.w	r2, r3, #15
 80065d2:	6879      	ldr	r1, [r7, #4]
 80065d4:	4613      	mov	r3, r2
 80065d6:	009b      	lsls	r3, r3, #2
 80065d8:	4413      	add	r3, r2
 80065da:	009b      	lsls	r3, r3, #2
 80065dc:	440b      	add	r3, r1
 80065de:	3324      	adds	r3, #36	; 0x24
 80065e0:	2200      	movs	r2, #0
 80065e2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80065e4:	4b1f      	ldr	r3, [pc, #124]	; (8006664 <USBD_CDC_DeInit+0x100>)
 80065e6:	781b      	ldrb	r3, [r3, #0]
 80065e8:	f003 020f 	and.w	r2, r3, #15
 80065ec:	6879      	ldr	r1, [r7, #4]
 80065ee:	4613      	mov	r3, r2
 80065f0:	009b      	lsls	r3, r3, #2
 80065f2:	4413      	add	r3, r2
 80065f4:	009b      	lsls	r3, r3, #2
 80065f6:	440b      	add	r3, r1
 80065f8:	3326      	adds	r3, #38	; 0x26
 80065fa:	2200      	movs	r2, #0
 80065fc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	32b0      	adds	r2, #176	; 0xb0
 8006608:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d01f      	beq.n	8006650 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006616:	687a      	ldr	r2, [r7, #4]
 8006618:	33b0      	adds	r3, #176	; 0xb0
 800661a:	009b      	lsls	r3, r3, #2
 800661c:	4413      	add	r3, r2
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	685b      	ldr	r3, [r3, #4]
 8006622:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	32b0      	adds	r2, #176	; 0xb0
 800662e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006632:	4618      	mov	r0, r3
 8006634:	f002 fad4 	bl	8008be0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	32b0      	adds	r2, #176	; 0xb0
 8006642:	2100      	movs	r1, #0
 8006644:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2200      	movs	r2, #0
 800664c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006650:	2300      	movs	r3, #0
}
 8006652:	4618      	mov	r0, r3
 8006654:	3708      	adds	r7, #8
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}
 800665a:	bf00      	nop
 800665c:	20000093 	.word	0x20000093
 8006660:	20000094 	.word	0x20000094
 8006664:	20000095 	.word	0x20000095

08006668 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b086      	sub	sp, #24
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
 8006670:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	32b0      	adds	r2, #176	; 0xb0
 800667c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006680:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006682:	2300      	movs	r3, #0
 8006684:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006686:	2300      	movs	r3, #0
 8006688:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800668a:	2300      	movs	r3, #0
 800668c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d101      	bne.n	8006698 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006694:	2303      	movs	r3, #3
 8006696:	e0bf      	b.n	8006818 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	781b      	ldrb	r3, [r3, #0]
 800669c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d050      	beq.n	8006746 <USBD_CDC_Setup+0xde>
 80066a4:	2b20      	cmp	r3, #32
 80066a6:	f040 80af 	bne.w	8006808 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	88db      	ldrh	r3, [r3, #6]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d03a      	beq.n	8006728 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	781b      	ldrb	r3, [r3, #0]
 80066b6:	b25b      	sxtb	r3, r3
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	da1b      	bge.n	80066f4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80066c2:	687a      	ldr	r2, [r7, #4]
 80066c4:	33b0      	adds	r3, #176	; 0xb0
 80066c6:	009b      	lsls	r3, r3, #2
 80066c8:	4413      	add	r3, r2
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	689b      	ldr	r3, [r3, #8]
 80066ce:	683a      	ldr	r2, [r7, #0]
 80066d0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80066d2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80066d4:	683a      	ldr	r2, [r7, #0]
 80066d6:	88d2      	ldrh	r2, [r2, #6]
 80066d8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	88db      	ldrh	r3, [r3, #6]
 80066de:	2b07      	cmp	r3, #7
 80066e0:	bf28      	it	cs
 80066e2:	2307      	movcs	r3, #7
 80066e4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	89fa      	ldrh	r2, [r7, #14]
 80066ea:	4619      	mov	r1, r3
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	f001 fd43 	bl	8008178 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80066f2:	e090      	b.n	8006816 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	785a      	ldrb	r2, [r3, #1]
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	88db      	ldrh	r3, [r3, #6]
 8006702:	2b3f      	cmp	r3, #63	; 0x3f
 8006704:	d803      	bhi.n	800670e <USBD_CDC_Setup+0xa6>
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	88db      	ldrh	r3, [r3, #6]
 800670a:	b2da      	uxtb	r2, r3
 800670c:	e000      	b.n	8006710 <USBD_CDC_Setup+0xa8>
 800670e:	2240      	movs	r2, #64	; 0x40
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006716:	6939      	ldr	r1, [r7, #16]
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800671e:	461a      	mov	r2, r3
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f001 fd55 	bl	80081d0 <USBD_CtlPrepareRx>
      break;
 8006726:	e076      	b.n	8006816 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800672e:	687a      	ldr	r2, [r7, #4]
 8006730:	33b0      	adds	r3, #176	; 0xb0
 8006732:	009b      	lsls	r3, r3, #2
 8006734:	4413      	add	r3, r2
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	689b      	ldr	r3, [r3, #8]
 800673a:	683a      	ldr	r2, [r7, #0]
 800673c:	7850      	ldrb	r0, [r2, #1]
 800673e:	2200      	movs	r2, #0
 8006740:	6839      	ldr	r1, [r7, #0]
 8006742:	4798      	blx	r3
      break;
 8006744:	e067      	b.n	8006816 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	785b      	ldrb	r3, [r3, #1]
 800674a:	2b0b      	cmp	r3, #11
 800674c:	d851      	bhi.n	80067f2 <USBD_CDC_Setup+0x18a>
 800674e:	a201      	add	r2, pc, #4	; (adr r2, 8006754 <USBD_CDC_Setup+0xec>)
 8006750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006754:	08006785 	.word	0x08006785
 8006758:	08006801 	.word	0x08006801
 800675c:	080067f3 	.word	0x080067f3
 8006760:	080067f3 	.word	0x080067f3
 8006764:	080067f3 	.word	0x080067f3
 8006768:	080067f3 	.word	0x080067f3
 800676c:	080067f3 	.word	0x080067f3
 8006770:	080067f3 	.word	0x080067f3
 8006774:	080067f3 	.word	0x080067f3
 8006778:	080067f3 	.word	0x080067f3
 800677c:	080067af 	.word	0x080067af
 8006780:	080067d9 	.word	0x080067d9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800678a:	b2db      	uxtb	r3, r3
 800678c:	2b03      	cmp	r3, #3
 800678e:	d107      	bne.n	80067a0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006790:	f107 030a 	add.w	r3, r7, #10
 8006794:	2202      	movs	r2, #2
 8006796:	4619      	mov	r1, r3
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f001 fced 	bl	8008178 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800679e:	e032      	b.n	8006806 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80067a0:	6839      	ldr	r1, [r7, #0]
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f001 fc77 	bl	8008096 <USBD_CtlError>
            ret = USBD_FAIL;
 80067a8:	2303      	movs	r3, #3
 80067aa:	75fb      	strb	r3, [r7, #23]
          break;
 80067ac:	e02b      	b.n	8006806 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067b4:	b2db      	uxtb	r3, r3
 80067b6:	2b03      	cmp	r3, #3
 80067b8:	d107      	bne.n	80067ca <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80067ba:	f107 030d 	add.w	r3, r7, #13
 80067be:	2201      	movs	r2, #1
 80067c0:	4619      	mov	r1, r3
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f001 fcd8 	bl	8008178 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80067c8:	e01d      	b.n	8006806 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80067ca:	6839      	ldr	r1, [r7, #0]
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f001 fc62 	bl	8008096 <USBD_CtlError>
            ret = USBD_FAIL;
 80067d2:	2303      	movs	r3, #3
 80067d4:	75fb      	strb	r3, [r7, #23]
          break;
 80067d6:	e016      	b.n	8006806 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067de:	b2db      	uxtb	r3, r3
 80067e0:	2b03      	cmp	r3, #3
 80067e2:	d00f      	beq.n	8006804 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80067e4:	6839      	ldr	r1, [r7, #0]
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f001 fc55 	bl	8008096 <USBD_CtlError>
            ret = USBD_FAIL;
 80067ec:	2303      	movs	r3, #3
 80067ee:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80067f0:	e008      	b.n	8006804 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80067f2:	6839      	ldr	r1, [r7, #0]
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f001 fc4e 	bl	8008096 <USBD_CtlError>
          ret = USBD_FAIL;
 80067fa:	2303      	movs	r3, #3
 80067fc:	75fb      	strb	r3, [r7, #23]
          break;
 80067fe:	e002      	b.n	8006806 <USBD_CDC_Setup+0x19e>
          break;
 8006800:	bf00      	nop
 8006802:	e008      	b.n	8006816 <USBD_CDC_Setup+0x1ae>
          break;
 8006804:	bf00      	nop
      }
      break;
 8006806:	e006      	b.n	8006816 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006808:	6839      	ldr	r1, [r7, #0]
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f001 fc43 	bl	8008096 <USBD_CtlError>
      ret = USBD_FAIL;
 8006810:	2303      	movs	r3, #3
 8006812:	75fb      	strb	r3, [r7, #23]
      break;
 8006814:	bf00      	nop
  }

  return (uint8_t)ret;
 8006816:	7dfb      	ldrb	r3, [r7, #23]
}
 8006818:	4618      	mov	r0, r3
 800681a:	3718      	adds	r7, #24
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}

08006820 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b084      	sub	sp, #16
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	460b      	mov	r3, r1
 800682a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006832:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	32b0      	adds	r2, #176	; 0xb0
 800683e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d101      	bne.n	800684a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006846:	2303      	movs	r3, #3
 8006848:	e065      	b.n	8006916 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	32b0      	adds	r2, #176	; 0xb0
 8006854:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006858:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800685a:	78fb      	ldrb	r3, [r7, #3]
 800685c:	f003 020f 	and.w	r2, r3, #15
 8006860:	6879      	ldr	r1, [r7, #4]
 8006862:	4613      	mov	r3, r2
 8006864:	009b      	lsls	r3, r3, #2
 8006866:	4413      	add	r3, r2
 8006868:	009b      	lsls	r3, r3, #2
 800686a:	440b      	add	r3, r1
 800686c:	3318      	adds	r3, #24
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d02f      	beq.n	80068d4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006874:	78fb      	ldrb	r3, [r7, #3]
 8006876:	f003 020f 	and.w	r2, r3, #15
 800687a:	6879      	ldr	r1, [r7, #4]
 800687c:	4613      	mov	r3, r2
 800687e:	009b      	lsls	r3, r3, #2
 8006880:	4413      	add	r3, r2
 8006882:	009b      	lsls	r3, r3, #2
 8006884:	440b      	add	r3, r1
 8006886:	3318      	adds	r3, #24
 8006888:	681a      	ldr	r2, [r3, #0]
 800688a:	78fb      	ldrb	r3, [r7, #3]
 800688c:	f003 010f 	and.w	r1, r3, #15
 8006890:	68f8      	ldr	r0, [r7, #12]
 8006892:	460b      	mov	r3, r1
 8006894:	00db      	lsls	r3, r3, #3
 8006896:	440b      	add	r3, r1
 8006898:	009b      	lsls	r3, r3, #2
 800689a:	4403      	add	r3, r0
 800689c:	3348      	adds	r3, #72	; 0x48
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	fbb2 f1f3 	udiv	r1, r2, r3
 80068a4:	fb01 f303 	mul.w	r3, r1, r3
 80068a8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d112      	bne.n	80068d4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80068ae:	78fb      	ldrb	r3, [r7, #3]
 80068b0:	f003 020f 	and.w	r2, r3, #15
 80068b4:	6879      	ldr	r1, [r7, #4]
 80068b6:	4613      	mov	r3, r2
 80068b8:	009b      	lsls	r3, r3, #2
 80068ba:	4413      	add	r3, r2
 80068bc:	009b      	lsls	r3, r3, #2
 80068be:	440b      	add	r3, r1
 80068c0:	3318      	adds	r3, #24
 80068c2:	2200      	movs	r2, #0
 80068c4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80068c6:	78f9      	ldrb	r1, [r7, #3]
 80068c8:	2300      	movs	r3, #0
 80068ca:	2200      	movs	r2, #0
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f002 f924 	bl	8008b1a <USBD_LL_Transmit>
 80068d2:	e01f      	b.n	8006914 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	2200      	movs	r2, #0
 80068d8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80068e2:	687a      	ldr	r2, [r7, #4]
 80068e4:	33b0      	adds	r3, #176	; 0xb0
 80068e6:	009b      	lsls	r3, r3, #2
 80068e8:	4413      	add	r3, r2
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	691b      	ldr	r3, [r3, #16]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d010      	beq.n	8006914 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80068f8:	687a      	ldr	r2, [r7, #4]
 80068fa:	33b0      	adds	r3, #176	; 0xb0
 80068fc:	009b      	lsls	r3, r3, #2
 80068fe:	4413      	add	r3, r2
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	691b      	ldr	r3, [r3, #16]
 8006904:	68ba      	ldr	r2, [r7, #8]
 8006906:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800690a:	68ba      	ldr	r2, [r7, #8]
 800690c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006910:	78fa      	ldrb	r2, [r7, #3]
 8006912:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006914:	2300      	movs	r3, #0
}
 8006916:	4618      	mov	r0, r3
 8006918:	3710      	adds	r7, #16
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}

0800691e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800691e:	b580      	push	{r7, lr}
 8006920:	b084      	sub	sp, #16
 8006922:	af00      	add	r7, sp, #0
 8006924:	6078      	str	r0, [r7, #4]
 8006926:	460b      	mov	r3, r1
 8006928:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	32b0      	adds	r2, #176	; 0xb0
 8006934:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006938:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	32b0      	adds	r2, #176	; 0xb0
 8006944:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d101      	bne.n	8006950 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800694c:	2303      	movs	r3, #3
 800694e:	e01a      	b.n	8006986 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006950:	78fb      	ldrb	r3, [r7, #3]
 8006952:	4619      	mov	r1, r3
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f002 f922 	bl	8008b9e <USBD_LL_GetRxDataSize>
 800695a:	4602      	mov	r2, r0
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006968:	687a      	ldr	r2, [r7, #4]
 800696a:	33b0      	adds	r3, #176	; 0xb0
 800696c:	009b      	lsls	r3, r3, #2
 800696e:	4413      	add	r3, r2
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	68db      	ldr	r3, [r3, #12]
 8006974:	68fa      	ldr	r2, [r7, #12]
 8006976:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800697a:	68fa      	ldr	r2, [r7, #12]
 800697c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006980:	4611      	mov	r1, r2
 8006982:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006984:	2300      	movs	r3, #0
}
 8006986:	4618      	mov	r0, r3
 8006988:	3710      	adds	r7, #16
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}

0800698e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800698e:	b580      	push	{r7, lr}
 8006990:	b084      	sub	sp, #16
 8006992:	af00      	add	r7, sp, #0
 8006994:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	32b0      	adds	r2, #176	; 0xb0
 80069a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069a4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d101      	bne.n	80069b0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80069ac:	2303      	movs	r3, #3
 80069ae:	e025      	b.n	80069fc <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80069b6:	687a      	ldr	r2, [r7, #4]
 80069b8:	33b0      	adds	r3, #176	; 0xb0
 80069ba:	009b      	lsls	r3, r3, #2
 80069bc:	4413      	add	r3, r2
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d01a      	beq.n	80069fa <USBD_CDC_EP0_RxReady+0x6c>
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80069ca:	2bff      	cmp	r3, #255	; 0xff
 80069cc:	d015      	beq.n	80069fa <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80069d4:	687a      	ldr	r2, [r7, #4]
 80069d6:	33b0      	adds	r3, #176	; 0xb0
 80069d8:	009b      	lsls	r3, r3, #2
 80069da:	4413      	add	r3, r2
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	689b      	ldr	r3, [r3, #8]
 80069e0:	68fa      	ldr	r2, [r7, #12]
 80069e2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80069e6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80069e8:	68fa      	ldr	r2, [r7, #12]
 80069ea:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80069ee:	b292      	uxth	r2, r2
 80069f0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	22ff      	movs	r2, #255	; 0xff
 80069f6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80069fa:	2300      	movs	r3, #0
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	3710      	adds	r7, #16
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}

08006a04 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b086      	sub	sp, #24
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006a0c:	2182      	movs	r1, #130	; 0x82
 8006a0e:	4818      	ldr	r0, [pc, #96]	; (8006a70 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006a10:	f000 fd09 	bl	8007426 <USBD_GetEpDesc>
 8006a14:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006a16:	2101      	movs	r1, #1
 8006a18:	4815      	ldr	r0, [pc, #84]	; (8006a70 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006a1a:	f000 fd04 	bl	8007426 <USBD_GetEpDesc>
 8006a1e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006a20:	2181      	movs	r1, #129	; 0x81
 8006a22:	4813      	ldr	r0, [pc, #76]	; (8006a70 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006a24:	f000 fcff 	bl	8007426 <USBD_GetEpDesc>
 8006a28:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d002      	beq.n	8006a36 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	2210      	movs	r2, #16
 8006a34:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d006      	beq.n	8006a4a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a44:	711a      	strb	r2, [r3, #4]
 8006a46:	2200      	movs	r2, #0
 8006a48:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d006      	beq.n	8006a5e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	2200      	movs	r2, #0
 8006a54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a58:	711a      	strb	r2, [r3, #4]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2243      	movs	r2, #67	; 0x43
 8006a62:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006a64:	4b02      	ldr	r3, [pc, #8]	; (8006a70 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006a66:	4618      	mov	r0, r3
 8006a68:	3718      	adds	r7, #24
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd80      	pop	{r7, pc}
 8006a6e:	bf00      	nop
 8006a70:	20000050 	.word	0x20000050

08006a74 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b086      	sub	sp, #24
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006a7c:	2182      	movs	r1, #130	; 0x82
 8006a7e:	4818      	ldr	r0, [pc, #96]	; (8006ae0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006a80:	f000 fcd1 	bl	8007426 <USBD_GetEpDesc>
 8006a84:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006a86:	2101      	movs	r1, #1
 8006a88:	4815      	ldr	r0, [pc, #84]	; (8006ae0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006a8a:	f000 fccc 	bl	8007426 <USBD_GetEpDesc>
 8006a8e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006a90:	2181      	movs	r1, #129	; 0x81
 8006a92:	4813      	ldr	r0, [pc, #76]	; (8006ae0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006a94:	f000 fcc7 	bl	8007426 <USBD_GetEpDesc>
 8006a98:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d002      	beq.n	8006aa6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	2210      	movs	r2, #16
 8006aa4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d006      	beq.n	8006aba <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	711a      	strb	r2, [r3, #4]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	f042 0202 	orr.w	r2, r2, #2
 8006ab8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d006      	beq.n	8006ace <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	711a      	strb	r2, [r3, #4]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	f042 0202 	orr.w	r2, r2, #2
 8006acc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2243      	movs	r2, #67	; 0x43
 8006ad2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006ad4:	4b02      	ldr	r3, [pc, #8]	; (8006ae0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	3718      	adds	r7, #24
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}
 8006ade:	bf00      	nop
 8006ae0:	20000050 	.word	0x20000050

08006ae4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b086      	sub	sp, #24
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006aec:	2182      	movs	r1, #130	; 0x82
 8006aee:	4818      	ldr	r0, [pc, #96]	; (8006b50 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006af0:	f000 fc99 	bl	8007426 <USBD_GetEpDesc>
 8006af4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006af6:	2101      	movs	r1, #1
 8006af8:	4815      	ldr	r0, [pc, #84]	; (8006b50 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006afa:	f000 fc94 	bl	8007426 <USBD_GetEpDesc>
 8006afe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006b00:	2181      	movs	r1, #129	; 0x81
 8006b02:	4813      	ldr	r0, [pc, #76]	; (8006b50 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006b04:	f000 fc8f 	bl	8007426 <USBD_GetEpDesc>
 8006b08:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d002      	beq.n	8006b16 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	2210      	movs	r2, #16
 8006b14:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d006      	beq.n	8006b2a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b24:	711a      	strb	r2, [r3, #4]
 8006b26:	2200      	movs	r2, #0
 8006b28:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d006      	beq.n	8006b3e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	2200      	movs	r2, #0
 8006b34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b38:	711a      	strb	r2, [r3, #4]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2243      	movs	r2, #67	; 0x43
 8006b42:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006b44:	4b02      	ldr	r3, [pc, #8]	; (8006b50 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3718      	adds	r7, #24
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}
 8006b4e:	bf00      	nop
 8006b50:	20000050 	.word	0x20000050

08006b54 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b083      	sub	sp, #12
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	220a      	movs	r2, #10
 8006b60:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006b62:	4b03      	ldr	r3, [pc, #12]	; (8006b70 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	370c      	adds	r7, #12
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6e:	4770      	bx	lr
 8006b70:	2000000c 	.word	0x2000000c

08006b74 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006b74:	b480      	push	{r7}
 8006b76:	b083      	sub	sp, #12
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
 8006b7c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d101      	bne.n	8006b88 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006b84:	2303      	movs	r3, #3
 8006b86:	e009      	b.n	8006b9c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006b8e:	687a      	ldr	r2, [r7, #4]
 8006b90:	33b0      	adds	r3, #176	; 0xb0
 8006b92:	009b      	lsls	r3, r3, #2
 8006b94:	4413      	add	r3, r2
 8006b96:	683a      	ldr	r2, [r7, #0]
 8006b98:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006b9a:	2300      	movs	r3, #0
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	370c      	adds	r7, #12
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba6:	4770      	bx	lr

08006ba8 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b087      	sub	sp, #28
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	60f8      	str	r0, [r7, #12]
 8006bb0:	60b9      	str	r1, [r7, #8]
 8006bb2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	32b0      	adds	r2, #176	; 0xb0
 8006bbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bc2:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d101      	bne.n	8006bce <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006bca:	2303      	movs	r3, #3
 8006bcc:	e008      	b.n	8006be0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	68ba      	ldr	r2, [r7, #8]
 8006bd2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	687a      	ldr	r2, [r7, #4]
 8006bda:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006bde:	2300      	movs	r3, #0
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	371c      	adds	r7, #28
 8006be4:	46bd      	mov	sp, r7
 8006be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bea:	4770      	bx	lr

08006bec <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b085      	sub	sp, #20
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
 8006bf4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	32b0      	adds	r2, #176	; 0xb0
 8006c00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c04:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d101      	bne.n	8006c10 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006c0c:	2303      	movs	r3, #3
 8006c0e:	e004      	b.n	8006c1a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	683a      	ldr	r2, [r7, #0]
 8006c14:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006c18:	2300      	movs	r3, #0
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	3714      	adds	r7, #20
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c24:	4770      	bx	lr
	...

08006c28 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b084      	sub	sp, #16
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	32b0      	adds	r2, #176	; 0xb0
 8006c3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c3e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	32b0      	adds	r2, #176	; 0xb0
 8006c4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d101      	bne.n	8006c56 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006c52:	2303      	movs	r3, #3
 8006c54:	e018      	b.n	8006c88 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	7c1b      	ldrb	r3, [r3, #16]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d10a      	bne.n	8006c74 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006c5e:	4b0c      	ldr	r3, [pc, #48]	; (8006c90 <USBD_CDC_ReceivePacket+0x68>)
 8006c60:	7819      	ldrb	r1, [r3, #0]
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006c68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f001 ff75 	bl	8008b5c <USBD_LL_PrepareReceive>
 8006c72:	e008      	b.n	8006c86 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006c74:	4b06      	ldr	r3, [pc, #24]	; (8006c90 <USBD_CDC_ReceivePacket+0x68>)
 8006c76:	7819      	ldrb	r1, [r3, #0]
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006c7e:	2340      	movs	r3, #64	; 0x40
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f001 ff6b 	bl	8008b5c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006c86:	2300      	movs	r3, #0
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	3710      	adds	r7, #16
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}
 8006c90:	20000094 	.word	0x20000094

08006c94 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b086      	sub	sp, #24
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	60f8      	str	r0, [r7, #12]
 8006c9c:	60b9      	str	r1, [r7, #8]
 8006c9e:	4613      	mov	r3, r2
 8006ca0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d101      	bne.n	8006cac <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006ca8:	2303      	movs	r3, #3
 8006caa:	e01f      	b.n	8006cec <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d003      	beq.n	8006cd2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	68ba      	ldr	r2, [r7, #8]
 8006cce:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	2201      	movs	r2, #1
 8006cd6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	79fa      	ldrb	r2, [r7, #7]
 8006cde:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006ce0:	68f8      	ldr	r0, [r7, #12]
 8006ce2:	f001 fde5 	bl	80088b0 <USBD_LL_Init>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006cea:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3718      	adds	r7, #24
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}

08006cf4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b084      	sub	sp, #16
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
 8006cfc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d101      	bne.n	8006d0c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006d08:	2303      	movs	r3, #3
 8006d0a:	e025      	b.n	8006d58 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	683a      	ldr	r2, [r7, #0]
 8006d10:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	32ae      	adds	r2, #174	; 0xae
 8006d1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d00f      	beq.n	8006d48 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	32ae      	adds	r2, #174	; 0xae
 8006d32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d38:	f107 020e 	add.w	r2, r7, #14
 8006d3c:	4610      	mov	r0, r2
 8006d3e:	4798      	blx	r3
 8006d40:	4602      	mov	r2, r0
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006d4e:	1c5a      	adds	r2, r3, #1
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006d56:	2300      	movs	r3, #0
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3710      	adds	r7, #16
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}

08006d60 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b082      	sub	sp, #8
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f001 fded 	bl	8008948 <USBD_LL_Start>
 8006d6e:	4603      	mov	r3, r0
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	3708      	adds	r7, #8
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}

08006d78 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b083      	sub	sp, #12
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006d80:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	370c      	adds	r7, #12
 8006d86:	46bd      	mov	sp, r7
 8006d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8c:	4770      	bx	lr

08006d8e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d8e:	b580      	push	{r7, lr}
 8006d90:	b084      	sub	sp, #16
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	6078      	str	r0, [r7, #4]
 8006d96:	460b      	mov	r3, r1
 8006d98:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d009      	beq.n	8006dbc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	78fa      	ldrb	r2, [r7, #3]
 8006db2:	4611      	mov	r1, r2
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	4798      	blx	r3
 8006db8:	4603      	mov	r3, r0
 8006dba:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3710      	adds	r7, #16
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}

08006dc6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006dc6:	b580      	push	{r7, lr}
 8006dc8:	b084      	sub	sp, #16
 8006dca:	af00      	add	r7, sp, #0
 8006dcc:	6078      	str	r0, [r7, #4]
 8006dce:	460b      	mov	r3, r1
 8006dd0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	78fa      	ldrb	r2, [r7, #3]
 8006de0:	4611      	mov	r1, r2
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	4798      	blx	r3
 8006de6:	4603      	mov	r3, r0
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d001      	beq.n	8006df0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006dec:	2303      	movs	r3, #3
 8006dee:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3710      	adds	r7, #16
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}

08006dfa <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006dfa:	b580      	push	{r7, lr}
 8006dfc:	b084      	sub	sp, #16
 8006dfe:	af00      	add	r7, sp, #0
 8006e00:	6078      	str	r0, [r7, #4]
 8006e02:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006e0a:	6839      	ldr	r1, [r7, #0]
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	f001 f908 	bl	8008022 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2201      	movs	r2, #1
 8006e16:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006e20:	461a      	mov	r2, r3
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006e2e:	f003 031f 	and.w	r3, r3, #31
 8006e32:	2b02      	cmp	r3, #2
 8006e34:	d01a      	beq.n	8006e6c <USBD_LL_SetupStage+0x72>
 8006e36:	2b02      	cmp	r3, #2
 8006e38:	d822      	bhi.n	8006e80 <USBD_LL_SetupStage+0x86>
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d002      	beq.n	8006e44 <USBD_LL_SetupStage+0x4a>
 8006e3e:	2b01      	cmp	r3, #1
 8006e40:	d00a      	beq.n	8006e58 <USBD_LL_SetupStage+0x5e>
 8006e42:	e01d      	b.n	8006e80 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006e4a:	4619      	mov	r1, r3
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f000 fb5f 	bl	8007510 <USBD_StdDevReq>
 8006e52:	4603      	mov	r3, r0
 8006e54:	73fb      	strb	r3, [r7, #15]
      break;
 8006e56:	e020      	b.n	8006e9a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006e5e:	4619      	mov	r1, r3
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f000 fbc7 	bl	80075f4 <USBD_StdItfReq>
 8006e66:	4603      	mov	r3, r0
 8006e68:	73fb      	strb	r3, [r7, #15]
      break;
 8006e6a:	e016      	b.n	8006e9a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006e72:	4619      	mov	r1, r3
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f000 fc29 	bl	80076cc <USBD_StdEPReq>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	73fb      	strb	r3, [r7, #15]
      break;
 8006e7e:	e00c      	b.n	8006e9a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006e86:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006e8a:	b2db      	uxtb	r3, r3
 8006e8c:	4619      	mov	r1, r3
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f001 fdba 	bl	8008a08 <USBD_LL_StallEP>
 8006e94:	4603      	mov	r3, r0
 8006e96:	73fb      	strb	r3, [r7, #15]
      break;
 8006e98:	bf00      	nop
  }

  return ret;
 8006e9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3710      	adds	r7, #16
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}

08006ea4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b086      	sub	sp, #24
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	60f8      	str	r0, [r7, #12]
 8006eac:	460b      	mov	r3, r1
 8006eae:	607a      	str	r2, [r7, #4]
 8006eb0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006eb6:	7afb      	ldrb	r3, [r7, #11]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d16e      	bne.n	8006f9a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006ec2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006eca:	2b03      	cmp	r3, #3
 8006ecc:	f040 8098 	bne.w	8007000 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	689a      	ldr	r2, [r3, #8]
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	68db      	ldr	r3, [r3, #12]
 8006ed8:	429a      	cmp	r2, r3
 8006eda:	d913      	bls.n	8006f04 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	689a      	ldr	r2, [r3, #8]
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	68db      	ldr	r3, [r3, #12]
 8006ee4:	1ad2      	subs	r2, r2, r3
 8006ee6:	693b      	ldr	r3, [r7, #16]
 8006ee8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	68da      	ldr	r2, [r3, #12]
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	689b      	ldr	r3, [r3, #8]
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	bf28      	it	cs
 8006ef6:	4613      	movcs	r3, r2
 8006ef8:	461a      	mov	r2, r3
 8006efa:	6879      	ldr	r1, [r7, #4]
 8006efc:	68f8      	ldr	r0, [r7, #12]
 8006efe:	f001 f984 	bl	800820a <USBD_CtlContinueRx>
 8006f02:	e07d      	b.n	8007000 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006f0a:	f003 031f 	and.w	r3, r3, #31
 8006f0e:	2b02      	cmp	r3, #2
 8006f10:	d014      	beq.n	8006f3c <USBD_LL_DataOutStage+0x98>
 8006f12:	2b02      	cmp	r3, #2
 8006f14:	d81d      	bhi.n	8006f52 <USBD_LL_DataOutStage+0xae>
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d002      	beq.n	8006f20 <USBD_LL_DataOutStage+0x7c>
 8006f1a:	2b01      	cmp	r3, #1
 8006f1c:	d003      	beq.n	8006f26 <USBD_LL_DataOutStage+0x82>
 8006f1e:	e018      	b.n	8006f52 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006f20:	2300      	movs	r3, #0
 8006f22:	75bb      	strb	r3, [r7, #22]
            break;
 8006f24:	e018      	b.n	8006f58 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006f2c:	b2db      	uxtb	r3, r3
 8006f2e:	4619      	mov	r1, r3
 8006f30:	68f8      	ldr	r0, [r7, #12]
 8006f32:	f000 fa5e 	bl	80073f2 <USBD_CoreFindIF>
 8006f36:	4603      	mov	r3, r0
 8006f38:	75bb      	strb	r3, [r7, #22]
            break;
 8006f3a:	e00d      	b.n	8006f58 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006f42:	b2db      	uxtb	r3, r3
 8006f44:	4619      	mov	r1, r3
 8006f46:	68f8      	ldr	r0, [r7, #12]
 8006f48:	f000 fa60 	bl	800740c <USBD_CoreFindEP>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	75bb      	strb	r3, [r7, #22]
            break;
 8006f50:	e002      	b.n	8006f58 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006f52:	2300      	movs	r3, #0
 8006f54:	75bb      	strb	r3, [r7, #22]
            break;
 8006f56:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006f58:	7dbb      	ldrb	r3, [r7, #22]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d119      	bne.n	8006f92 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f64:	b2db      	uxtb	r3, r3
 8006f66:	2b03      	cmp	r3, #3
 8006f68:	d113      	bne.n	8006f92 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006f6a:	7dba      	ldrb	r2, [r7, #22]
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	32ae      	adds	r2, #174	; 0xae
 8006f70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f74:	691b      	ldr	r3, [r3, #16]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d00b      	beq.n	8006f92 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006f7a:	7dba      	ldrb	r2, [r7, #22]
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006f82:	7dba      	ldrb	r2, [r7, #22]
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	32ae      	adds	r2, #174	; 0xae
 8006f88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f8c:	691b      	ldr	r3, [r3, #16]
 8006f8e:	68f8      	ldr	r0, [r7, #12]
 8006f90:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006f92:	68f8      	ldr	r0, [r7, #12]
 8006f94:	f001 f94a 	bl	800822c <USBD_CtlSendStatus>
 8006f98:	e032      	b.n	8007000 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006f9a:	7afb      	ldrb	r3, [r7, #11]
 8006f9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fa0:	b2db      	uxtb	r3, r3
 8006fa2:	4619      	mov	r1, r3
 8006fa4:	68f8      	ldr	r0, [r7, #12]
 8006fa6:	f000 fa31 	bl	800740c <USBD_CoreFindEP>
 8006faa:	4603      	mov	r3, r0
 8006fac:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006fae:	7dbb      	ldrb	r3, [r7, #22]
 8006fb0:	2bff      	cmp	r3, #255	; 0xff
 8006fb2:	d025      	beq.n	8007000 <USBD_LL_DataOutStage+0x15c>
 8006fb4:	7dbb      	ldrb	r3, [r7, #22]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d122      	bne.n	8007000 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fc0:	b2db      	uxtb	r3, r3
 8006fc2:	2b03      	cmp	r3, #3
 8006fc4:	d117      	bne.n	8006ff6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006fc6:	7dba      	ldrb	r2, [r7, #22]
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	32ae      	adds	r2, #174	; 0xae
 8006fcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fd0:	699b      	ldr	r3, [r3, #24]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d00f      	beq.n	8006ff6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006fd6:	7dba      	ldrb	r2, [r7, #22]
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006fde:	7dba      	ldrb	r2, [r7, #22]
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	32ae      	adds	r2, #174	; 0xae
 8006fe4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fe8:	699b      	ldr	r3, [r3, #24]
 8006fea:	7afa      	ldrb	r2, [r7, #11]
 8006fec:	4611      	mov	r1, r2
 8006fee:	68f8      	ldr	r0, [r7, #12]
 8006ff0:	4798      	blx	r3
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006ff6:	7dfb      	ldrb	r3, [r7, #23]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d001      	beq.n	8007000 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006ffc:	7dfb      	ldrb	r3, [r7, #23]
 8006ffe:	e000      	b.n	8007002 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007000:	2300      	movs	r3, #0
}
 8007002:	4618      	mov	r0, r3
 8007004:	3718      	adds	r7, #24
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}

0800700a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800700a:	b580      	push	{r7, lr}
 800700c:	b086      	sub	sp, #24
 800700e:	af00      	add	r7, sp, #0
 8007010:	60f8      	str	r0, [r7, #12]
 8007012:	460b      	mov	r3, r1
 8007014:	607a      	str	r2, [r7, #4]
 8007016:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007018:	7afb      	ldrb	r3, [r7, #11]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d16f      	bne.n	80070fe <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	3314      	adds	r3, #20
 8007022:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800702a:	2b02      	cmp	r3, #2
 800702c:	d15a      	bne.n	80070e4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	689a      	ldr	r2, [r3, #8]
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	68db      	ldr	r3, [r3, #12]
 8007036:	429a      	cmp	r2, r3
 8007038:	d914      	bls.n	8007064 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800703a:	693b      	ldr	r3, [r7, #16]
 800703c:	689a      	ldr	r2, [r3, #8]
 800703e:	693b      	ldr	r3, [r7, #16]
 8007040:	68db      	ldr	r3, [r3, #12]
 8007042:	1ad2      	subs	r2, r2, r3
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	689b      	ldr	r3, [r3, #8]
 800704c:	461a      	mov	r2, r3
 800704e:	6879      	ldr	r1, [r7, #4]
 8007050:	68f8      	ldr	r0, [r7, #12]
 8007052:	f001 f8ac 	bl	80081ae <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007056:	2300      	movs	r3, #0
 8007058:	2200      	movs	r2, #0
 800705a:	2100      	movs	r1, #0
 800705c:	68f8      	ldr	r0, [r7, #12]
 800705e:	f001 fd7d 	bl	8008b5c <USBD_LL_PrepareReceive>
 8007062:	e03f      	b.n	80070e4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007064:	693b      	ldr	r3, [r7, #16]
 8007066:	68da      	ldr	r2, [r3, #12]
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	689b      	ldr	r3, [r3, #8]
 800706c:	429a      	cmp	r2, r3
 800706e:	d11c      	bne.n	80070aa <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	685a      	ldr	r2, [r3, #4]
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007078:	429a      	cmp	r2, r3
 800707a:	d316      	bcc.n	80070aa <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800707c:	693b      	ldr	r3, [r7, #16]
 800707e:	685a      	ldr	r2, [r3, #4]
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007086:	429a      	cmp	r2, r3
 8007088:	d20f      	bcs.n	80070aa <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800708a:	2200      	movs	r2, #0
 800708c:	2100      	movs	r1, #0
 800708e:	68f8      	ldr	r0, [r7, #12]
 8007090:	f001 f88d 	bl	80081ae <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	2200      	movs	r2, #0
 8007098:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800709c:	2300      	movs	r3, #0
 800709e:	2200      	movs	r2, #0
 80070a0:	2100      	movs	r1, #0
 80070a2:	68f8      	ldr	r0, [r7, #12]
 80070a4:	f001 fd5a 	bl	8008b5c <USBD_LL_PrepareReceive>
 80070a8:	e01c      	b.n	80070e4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070b0:	b2db      	uxtb	r3, r3
 80070b2:	2b03      	cmp	r3, #3
 80070b4:	d10f      	bne.n	80070d6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070bc:	68db      	ldr	r3, [r3, #12]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d009      	beq.n	80070d6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2200      	movs	r2, #0
 80070c6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070d0:	68db      	ldr	r3, [r3, #12]
 80070d2:	68f8      	ldr	r0, [r7, #12]
 80070d4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80070d6:	2180      	movs	r1, #128	; 0x80
 80070d8:	68f8      	ldr	r0, [r7, #12]
 80070da:	f001 fc95 	bl	8008a08 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80070de:	68f8      	ldr	r0, [r7, #12]
 80070e0:	f001 f8b7 	bl	8008252 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d03a      	beq.n	8007164 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80070ee:	68f8      	ldr	r0, [r7, #12]
 80070f0:	f7ff fe42 	bl	8006d78 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2200      	movs	r2, #0
 80070f8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80070fc:	e032      	b.n	8007164 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80070fe:	7afb      	ldrb	r3, [r7, #11]
 8007100:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007104:	b2db      	uxtb	r3, r3
 8007106:	4619      	mov	r1, r3
 8007108:	68f8      	ldr	r0, [r7, #12]
 800710a:	f000 f97f 	bl	800740c <USBD_CoreFindEP>
 800710e:	4603      	mov	r3, r0
 8007110:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007112:	7dfb      	ldrb	r3, [r7, #23]
 8007114:	2bff      	cmp	r3, #255	; 0xff
 8007116:	d025      	beq.n	8007164 <USBD_LL_DataInStage+0x15a>
 8007118:	7dfb      	ldrb	r3, [r7, #23]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d122      	bne.n	8007164 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007124:	b2db      	uxtb	r3, r3
 8007126:	2b03      	cmp	r3, #3
 8007128:	d11c      	bne.n	8007164 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800712a:	7dfa      	ldrb	r2, [r7, #23]
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	32ae      	adds	r2, #174	; 0xae
 8007130:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007134:	695b      	ldr	r3, [r3, #20]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d014      	beq.n	8007164 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800713a:	7dfa      	ldrb	r2, [r7, #23]
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007142:	7dfa      	ldrb	r2, [r7, #23]
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	32ae      	adds	r2, #174	; 0xae
 8007148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800714c:	695b      	ldr	r3, [r3, #20]
 800714e:	7afa      	ldrb	r2, [r7, #11]
 8007150:	4611      	mov	r1, r2
 8007152:	68f8      	ldr	r0, [r7, #12]
 8007154:	4798      	blx	r3
 8007156:	4603      	mov	r3, r0
 8007158:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800715a:	7dbb      	ldrb	r3, [r7, #22]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d001      	beq.n	8007164 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007160:	7dbb      	ldrb	r3, [r7, #22]
 8007162:	e000      	b.n	8007166 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007164:	2300      	movs	r3, #0
}
 8007166:	4618      	mov	r0, r3
 8007168:	3718      	adds	r7, #24
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}

0800716e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800716e:	b580      	push	{r7, lr}
 8007170:	b084      	sub	sp, #16
 8007172:	af00      	add	r7, sp, #0
 8007174:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007176:	2300      	movs	r3, #0
 8007178:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2201      	movs	r2, #1
 800717e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2200      	movs	r2, #0
 8007186:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2200      	movs	r2, #0
 800718e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2200      	movs	r2, #0
 8007194:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2200      	movs	r2, #0
 800719c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d014      	beq.n	80071d4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071b0:	685b      	ldr	r3, [r3, #4]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d00e      	beq.n	80071d4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	687a      	ldr	r2, [r7, #4]
 80071c0:	6852      	ldr	r2, [r2, #4]
 80071c2:	b2d2      	uxtb	r2, r2
 80071c4:	4611      	mov	r1, r2
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	4798      	blx	r3
 80071ca:	4603      	mov	r3, r0
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d001      	beq.n	80071d4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80071d0:	2303      	movs	r3, #3
 80071d2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80071d4:	2340      	movs	r3, #64	; 0x40
 80071d6:	2200      	movs	r2, #0
 80071d8:	2100      	movs	r1, #0
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f001 fbcf 	bl	800897e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2201      	movs	r2, #1
 80071e4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2240      	movs	r2, #64	; 0x40
 80071ec:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80071f0:	2340      	movs	r3, #64	; 0x40
 80071f2:	2200      	movs	r2, #0
 80071f4:	2180      	movs	r1, #128	; 0x80
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f001 fbc1 	bl	800897e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2201      	movs	r2, #1
 8007200:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2240      	movs	r2, #64	; 0x40
 8007206:	621a      	str	r2, [r3, #32]

  return ret;
 8007208:	7bfb      	ldrb	r3, [r7, #15]
}
 800720a:	4618      	mov	r0, r3
 800720c:	3710      	adds	r7, #16
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}

08007212 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007212:	b480      	push	{r7}
 8007214:	b083      	sub	sp, #12
 8007216:	af00      	add	r7, sp, #0
 8007218:	6078      	str	r0, [r7, #4]
 800721a:	460b      	mov	r3, r1
 800721c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	78fa      	ldrb	r2, [r7, #3]
 8007222:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007224:	2300      	movs	r3, #0
}
 8007226:	4618      	mov	r0, r3
 8007228:	370c      	adds	r7, #12
 800722a:	46bd      	mov	sp, r7
 800722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007230:	4770      	bx	lr

08007232 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007232:	b480      	push	{r7}
 8007234:	b083      	sub	sp, #12
 8007236:	af00      	add	r7, sp, #0
 8007238:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007240:	b2da      	uxtb	r2, r3
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2204      	movs	r2, #4
 800724c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007250:	2300      	movs	r3, #0
}
 8007252:	4618      	mov	r0, r3
 8007254:	370c      	adds	r7, #12
 8007256:	46bd      	mov	sp, r7
 8007258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725c:	4770      	bx	lr

0800725e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800725e:	b480      	push	{r7}
 8007260:	b083      	sub	sp, #12
 8007262:	af00      	add	r7, sp, #0
 8007264:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800726c:	b2db      	uxtb	r3, r3
 800726e:	2b04      	cmp	r3, #4
 8007270:	d106      	bne.n	8007280 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007278:	b2da      	uxtb	r2, r3
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007280:	2300      	movs	r3, #0
}
 8007282:	4618      	mov	r0, r3
 8007284:	370c      	adds	r7, #12
 8007286:	46bd      	mov	sp, r7
 8007288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728c:	4770      	bx	lr

0800728e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800728e:	b580      	push	{r7, lr}
 8007290:	b082      	sub	sp, #8
 8007292:	af00      	add	r7, sp, #0
 8007294:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800729c:	b2db      	uxtb	r3, r3
 800729e:	2b03      	cmp	r3, #3
 80072a0:	d110      	bne.n	80072c4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d00b      	beq.n	80072c4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072b2:	69db      	ldr	r3, [r3, #28]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d005      	beq.n	80072c4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072be:	69db      	ldr	r3, [r3, #28]
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80072c4:	2300      	movs	r3, #0
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3708      	adds	r7, #8
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}

080072ce <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80072ce:	b580      	push	{r7, lr}
 80072d0:	b082      	sub	sp, #8
 80072d2:	af00      	add	r7, sp, #0
 80072d4:	6078      	str	r0, [r7, #4]
 80072d6:	460b      	mov	r3, r1
 80072d8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	32ae      	adds	r2, #174	; 0xae
 80072e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d101      	bne.n	80072f0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80072ec:	2303      	movs	r3, #3
 80072ee:	e01c      	b.n	800732a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072f6:	b2db      	uxtb	r3, r3
 80072f8:	2b03      	cmp	r3, #3
 80072fa:	d115      	bne.n	8007328 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	32ae      	adds	r2, #174	; 0xae
 8007306:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800730a:	6a1b      	ldr	r3, [r3, #32]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d00b      	beq.n	8007328 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	32ae      	adds	r2, #174	; 0xae
 800731a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800731e:	6a1b      	ldr	r3, [r3, #32]
 8007320:	78fa      	ldrb	r2, [r7, #3]
 8007322:	4611      	mov	r1, r2
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007328:	2300      	movs	r3, #0
}
 800732a:	4618      	mov	r0, r3
 800732c:	3708      	adds	r7, #8
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}

08007332 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007332:	b580      	push	{r7, lr}
 8007334:	b082      	sub	sp, #8
 8007336:	af00      	add	r7, sp, #0
 8007338:	6078      	str	r0, [r7, #4]
 800733a:	460b      	mov	r3, r1
 800733c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	32ae      	adds	r2, #174	; 0xae
 8007348:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d101      	bne.n	8007354 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007350:	2303      	movs	r3, #3
 8007352:	e01c      	b.n	800738e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800735a:	b2db      	uxtb	r3, r3
 800735c:	2b03      	cmp	r3, #3
 800735e:	d115      	bne.n	800738c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	32ae      	adds	r2, #174	; 0xae
 800736a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800736e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007370:	2b00      	cmp	r3, #0
 8007372:	d00b      	beq.n	800738c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	32ae      	adds	r2, #174	; 0xae
 800737e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007384:	78fa      	ldrb	r2, [r7, #3]
 8007386:	4611      	mov	r1, r2
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800738c:	2300      	movs	r3, #0
}
 800738e:	4618      	mov	r0, r3
 8007390:	3708      	adds	r7, #8
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}

08007396 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007396:	b480      	push	{r7}
 8007398:	b083      	sub	sp, #12
 800739a:	af00      	add	r7, sp, #0
 800739c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800739e:	2300      	movs	r3, #0
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	370c      	adds	r7, #12
 80073a4:	46bd      	mov	sp, r7
 80073a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073aa:	4770      	bx	lr

080073ac <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b084      	sub	sp, #16
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80073b4:	2300      	movs	r3, #0
 80073b6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2201      	movs	r2, #1
 80073bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d00e      	beq.n	80073e8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073d0:	685b      	ldr	r3, [r3, #4]
 80073d2:	687a      	ldr	r2, [r7, #4]
 80073d4:	6852      	ldr	r2, [r2, #4]
 80073d6:	b2d2      	uxtb	r2, r2
 80073d8:	4611      	mov	r1, r2
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	4798      	blx	r3
 80073de:	4603      	mov	r3, r0
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d001      	beq.n	80073e8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80073e4:	2303      	movs	r3, #3
 80073e6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80073e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80073ea:	4618      	mov	r0, r3
 80073ec:	3710      	adds	r7, #16
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bd80      	pop	{r7, pc}

080073f2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80073f2:	b480      	push	{r7}
 80073f4:	b083      	sub	sp, #12
 80073f6:	af00      	add	r7, sp, #0
 80073f8:	6078      	str	r0, [r7, #4]
 80073fa:	460b      	mov	r3, r1
 80073fc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80073fe:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007400:	4618      	mov	r0, r3
 8007402:	370c      	adds	r7, #12
 8007404:	46bd      	mov	sp, r7
 8007406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740a:	4770      	bx	lr

0800740c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800740c:	b480      	push	{r7}
 800740e:	b083      	sub	sp, #12
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
 8007414:	460b      	mov	r3, r1
 8007416:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007418:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800741a:	4618      	mov	r0, r3
 800741c:	370c      	adds	r7, #12
 800741e:	46bd      	mov	sp, r7
 8007420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007424:	4770      	bx	lr

08007426 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007426:	b580      	push	{r7, lr}
 8007428:	b086      	sub	sp, #24
 800742a:	af00      	add	r7, sp, #0
 800742c:	6078      	str	r0, [r7, #4]
 800742e:	460b      	mov	r3, r1
 8007430:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800743a:	2300      	movs	r3, #0
 800743c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	885b      	ldrh	r3, [r3, #2]
 8007442:	b29a      	uxth	r2, r3
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	781b      	ldrb	r3, [r3, #0]
 8007448:	b29b      	uxth	r3, r3
 800744a:	429a      	cmp	r2, r3
 800744c:	d920      	bls.n	8007490 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	781b      	ldrb	r3, [r3, #0]
 8007452:	b29b      	uxth	r3, r3
 8007454:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007456:	e013      	b.n	8007480 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007458:	f107 030a 	add.w	r3, r7, #10
 800745c:	4619      	mov	r1, r3
 800745e:	6978      	ldr	r0, [r7, #20]
 8007460:	f000 f81b 	bl	800749a <USBD_GetNextDesc>
 8007464:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	785b      	ldrb	r3, [r3, #1]
 800746a:	2b05      	cmp	r3, #5
 800746c:	d108      	bne.n	8007480 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	789b      	ldrb	r3, [r3, #2]
 8007476:	78fa      	ldrb	r2, [r7, #3]
 8007478:	429a      	cmp	r2, r3
 800747a:	d008      	beq.n	800748e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800747c:	2300      	movs	r3, #0
 800747e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	885b      	ldrh	r3, [r3, #2]
 8007484:	b29a      	uxth	r2, r3
 8007486:	897b      	ldrh	r3, [r7, #10]
 8007488:	429a      	cmp	r2, r3
 800748a:	d8e5      	bhi.n	8007458 <USBD_GetEpDesc+0x32>
 800748c:	e000      	b.n	8007490 <USBD_GetEpDesc+0x6a>
          break;
 800748e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007490:	693b      	ldr	r3, [r7, #16]
}
 8007492:	4618      	mov	r0, r3
 8007494:	3718      	adds	r7, #24
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}

0800749a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800749a:	b480      	push	{r7}
 800749c:	b085      	sub	sp, #20
 800749e:	af00      	add	r7, sp, #0
 80074a0:	6078      	str	r0, [r7, #4]
 80074a2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	881a      	ldrh	r2, [r3, #0]
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	781b      	ldrb	r3, [r3, #0]
 80074b0:	b29b      	uxth	r3, r3
 80074b2:	4413      	add	r3, r2
 80074b4:	b29a      	uxth	r2, r3
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	781b      	ldrb	r3, [r3, #0]
 80074be:	461a      	mov	r2, r3
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	4413      	add	r3, r2
 80074c4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80074c6:	68fb      	ldr	r3, [r7, #12]
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	3714      	adds	r7, #20
 80074cc:	46bd      	mov	sp, r7
 80074ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d2:	4770      	bx	lr

080074d4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b087      	sub	sp, #28
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80074e0:	697b      	ldr	r3, [r7, #20]
 80074e2:	781b      	ldrb	r3, [r3, #0]
 80074e4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	3301      	adds	r3, #1
 80074ea:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80074ec:	697b      	ldr	r3, [r7, #20]
 80074ee:	781b      	ldrb	r3, [r3, #0]
 80074f0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80074f2:	8a3b      	ldrh	r3, [r7, #16]
 80074f4:	021b      	lsls	r3, r3, #8
 80074f6:	b21a      	sxth	r2, r3
 80074f8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80074fc:	4313      	orrs	r3, r2
 80074fe:	b21b      	sxth	r3, r3
 8007500:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007502:	89fb      	ldrh	r3, [r7, #14]
}
 8007504:	4618      	mov	r0, r3
 8007506:	371c      	adds	r7, #28
 8007508:	46bd      	mov	sp, r7
 800750a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750e:	4770      	bx	lr

08007510 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b084      	sub	sp, #16
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
 8007518:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800751a:	2300      	movs	r3, #0
 800751c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	781b      	ldrb	r3, [r3, #0]
 8007522:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007526:	2b40      	cmp	r3, #64	; 0x40
 8007528:	d005      	beq.n	8007536 <USBD_StdDevReq+0x26>
 800752a:	2b40      	cmp	r3, #64	; 0x40
 800752c:	d857      	bhi.n	80075de <USBD_StdDevReq+0xce>
 800752e:	2b00      	cmp	r3, #0
 8007530:	d00f      	beq.n	8007552 <USBD_StdDevReq+0x42>
 8007532:	2b20      	cmp	r3, #32
 8007534:	d153      	bne.n	80075de <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	32ae      	adds	r2, #174	; 0xae
 8007540:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007544:	689b      	ldr	r3, [r3, #8]
 8007546:	6839      	ldr	r1, [r7, #0]
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	4798      	blx	r3
 800754c:	4603      	mov	r3, r0
 800754e:	73fb      	strb	r3, [r7, #15]
      break;
 8007550:	e04a      	b.n	80075e8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	785b      	ldrb	r3, [r3, #1]
 8007556:	2b09      	cmp	r3, #9
 8007558:	d83b      	bhi.n	80075d2 <USBD_StdDevReq+0xc2>
 800755a:	a201      	add	r2, pc, #4	; (adr r2, 8007560 <USBD_StdDevReq+0x50>)
 800755c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007560:	080075b5 	.word	0x080075b5
 8007564:	080075c9 	.word	0x080075c9
 8007568:	080075d3 	.word	0x080075d3
 800756c:	080075bf 	.word	0x080075bf
 8007570:	080075d3 	.word	0x080075d3
 8007574:	08007593 	.word	0x08007593
 8007578:	08007589 	.word	0x08007589
 800757c:	080075d3 	.word	0x080075d3
 8007580:	080075ab 	.word	0x080075ab
 8007584:	0800759d 	.word	0x0800759d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007588:	6839      	ldr	r1, [r7, #0]
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f000 fa3c 	bl	8007a08 <USBD_GetDescriptor>
          break;
 8007590:	e024      	b.n	80075dc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007592:	6839      	ldr	r1, [r7, #0]
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f000 fba1 	bl	8007cdc <USBD_SetAddress>
          break;
 800759a:	e01f      	b.n	80075dc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800759c:	6839      	ldr	r1, [r7, #0]
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f000 fbe0 	bl	8007d64 <USBD_SetConfig>
 80075a4:	4603      	mov	r3, r0
 80075a6:	73fb      	strb	r3, [r7, #15]
          break;
 80075a8:	e018      	b.n	80075dc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80075aa:	6839      	ldr	r1, [r7, #0]
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f000 fc83 	bl	8007eb8 <USBD_GetConfig>
          break;
 80075b2:	e013      	b.n	80075dc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80075b4:	6839      	ldr	r1, [r7, #0]
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f000 fcb4 	bl	8007f24 <USBD_GetStatus>
          break;
 80075bc:	e00e      	b.n	80075dc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80075be:	6839      	ldr	r1, [r7, #0]
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f000 fce3 	bl	8007f8c <USBD_SetFeature>
          break;
 80075c6:	e009      	b.n	80075dc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80075c8:	6839      	ldr	r1, [r7, #0]
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f000 fd07 	bl	8007fde <USBD_ClrFeature>
          break;
 80075d0:	e004      	b.n	80075dc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80075d2:	6839      	ldr	r1, [r7, #0]
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f000 fd5e 	bl	8008096 <USBD_CtlError>
          break;
 80075da:	bf00      	nop
      }
      break;
 80075dc:	e004      	b.n	80075e8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80075de:	6839      	ldr	r1, [r7, #0]
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f000 fd58 	bl	8008096 <USBD_CtlError>
      break;
 80075e6:	bf00      	nop
  }

  return ret;
 80075e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3710      	adds	r7, #16
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}
 80075f2:	bf00      	nop

080075f4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b084      	sub	sp, #16
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
 80075fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80075fe:	2300      	movs	r3, #0
 8007600:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	781b      	ldrb	r3, [r3, #0]
 8007606:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800760a:	2b40      	cmp	r3, #64	; 0x40
 800760c:	d005      	beq.n	800761a <USBD_StdItfReq+0x26>
 800760e:	2b40      	cmp	r3, #64	; 0x40
 8007610:	d852      	bhi.n	80076b8 <USBD_StdItfReq+0xc4>
 8007612:	2b00      	cmp	r3, #0
 8007614:	d001      	beq.n	800761a <USBD_StdItfReq+0x26>
 8007616:	2b20      	cmp	r3, #32
 8007618:	d14e      	bne.n	80076b8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007620:	b2db      	uxtb	r3, r3
 8007622:	3b01      	subs	r3, #1
 8007624:	2b02      	cmp	r3, #2
 8007626:	d840      	bhi.n	80076aa <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	889b      	ldrh	r3, [r3, #4]
 800762c:	b2db      	uxtb	r3, r3
 800762e:	2b01      	cmp	r3, #1
 8007630:	d836      	bhi.n	80076a0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	889b      	ldrh	r3, [r3, #4]
 8007636:	b2db      	uxtb	r3, r3
 8007638:	4619      	mov	r1, r3
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f7ff fed9 	bl	80073f2 <USBD_CoreFindIF>
 8007640:	4603      	mov	r3, r0
 8007642:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007644:	7bbb      	ldrb	r3, [r7, #14]
 8007646:	2bff      	cmp	r3, #255	; 0xff
 8007648:	d01d      	beq.n	8007686 <USBD_StdItfReq+0x92>
 800764a:	7bbb      	ldrb	r3, [r7, #14]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d11a      	bne.n	8007686 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007650:	7bba      	ldrb	r2, [r7, #14]
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	32ae      	adds	r2, #174	; 0xae
 8007656:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800765a:	689b      	ldr	r3, [r3, #8]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d00f      	beq.n	8007680 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007660:	7bba      	ldrb	r2, [r7, #14]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007668:	7bba      	ldrb	r2, [r7, #14]
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	32ae      	adds	r2, #174	; 0xae
 800766e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007672:	689b      	ldr	r3, [r3, #8]
 8007674:	6839      	ldr	r1, [r7, #0]
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	4798      	blx	r3
 800767a:	4603      	mov	r3, r0
 800767c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800767e:	e004      	b.n	800768a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007680:	2303      	movs	r3, #3
 8007682:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007684:	e001      	b.n	800768a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007686:	2303      	movs	r3, #3
 8007688:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	88db      	ldrh	r3, [r3, #6]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d110      	bne.n	80076b4 <USBD_StdItfReq+0xc0>
 8007692:	7bfb      	ldrb	r3, [r7, #15]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d10d      	bne.n	80076b4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	f000 fdc7 	bl	800822c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800769e:	e009      	b.n	80076b4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80076a0:	6839      	ldr	r1, [r7, #0]
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f000 fcf7 	bl	8008096 <USBD_CtlError>
          break;
 80076a8:	e004      	b.n	80076b4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80076aa:	6839      	ldr	r1, [r7, #0]
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f000 fcf2 	bl	8008096 <USBD_CtlError>
          break;
 80076b2:	e000      	b.n	80076b6 <USBD_StdItfReq+0xc2>
          break;
 80076b4:	bf00      	nop
      }
      break;
 80076b6:	e004      	b.n	80076c2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80076b8:	6839      	ldr	r1, [r7, #0]
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f000 fceb 	bl	8008096 <USBD_CtlError>
      break;
 80076c0:	bf00      	nop
  }

  return ret;
 80076c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80076c4:	4618      	mov	r0, r3
 80076c6:	3710      	adds	r7, #16
 80076c8:	46bd      	mov	sp, r7
 80076ca:	bd80      	pop	{r7, pc}

080076cc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b084      	sub	sp, #16
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
 80076d4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80076d6:	2300      	movs	r3, #0
 80076d8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	889b      	ldrh	r3, [r3, #4]
 80076de:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	781b      	ldrb	r3, [r3, #0]
 80076e4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80076e8:	2b40      	cmp	r3, #64	; 0x40
 80076ea:	d007      	beq.n	80076fc <USBD_StdEPReq+0x30>
 80076ec:	2b40      	cmp	r3, #64	; 0x40
 80076ee:	f200 817f 	bhi.w	80079f0 <USBD_StdEPReq+0x324>
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d02a      	beq.n	800774c <USBD_StdEPReq+0x80>
 80076f6:	2b20      	cmp	r3, #32
 80076f8:	f040 817a 	bne.w	80079f0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80076fc:	7bbb      	ldrb	r3, [r7, #14]
 80076fe:	4619      	mov	r1, r3
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f7ff fe83 	bl	800740c <USBD_CoreFindEP>
 8007706:	4603      	mov	r3, r0
 8007708:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800770a:	7b7b      	ldrb	r3, [r7, #13]
 800770c:	2bff      	cmp	r3, #255	; 0xff
 800770e:	f000 8174 	beq.w	80079fa <USBD_StdEPReq+0x32e>
 8007712:	7b7b      	ldrb	r3, [r7, #13]
 8007714:	2b00      	cmp	r3, #0
 8007716:	f040 8170 	bne.w	80079fa <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800771a:	7b7a      	ldrb	r2, [r7, #13]
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007722:	7b7a      	ldrb	r2, [r7, #13]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	32ae      	adds	r2, #174	; 0xae
 8007728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800772c:	689b      	ldr	r3, [r3, #8]
 800772e:	2b00      	cmp	r3, #0
 8007730:	f000 8163 	beq.w	80079fa <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007734:	7b7a      	ldrb	r2, [r7, #13]
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	32ae      	adds	r2, #174	; 0xae
 800773a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800773e:	689b      	ldr	r3, [r3, #8]
 8007740:	6839      	ldr	r1, [r7, #0]
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	4798      	blx	r3
 8007746:	4603      	mov	r3, r0
 8007748:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800774a:	e156      	b.n	80079fa <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	785b      	ldrb	r3, [r3, #1]
 8007750:	2b03      	cmp	r3, #3
 8007752:	d008      	beq.n	8007766 <USBD_StdEPReq+0x9a>
 8007754:	2b03      	cmp	r3, #3
 8007756:	f300 8145 	bgt.w	80079e4 <USBD_StdEPReq+0x318>
 800775a:	2b00      	cmp	r3, #0
 800775c:	f000 809b 	beq.w	8007896 <USBD_StdEPReq+0x1ca>
 8007760:	2b01      	cmp	r3, #1
 8007762:	d03c      	beq.n	80077de <USBD_StdEPReq+0x112>
 8007764:	e13e      	b.n	80079e4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800776c:	b2db      	uxtb	r3, r3
 800776e:	2b02      	cmp	r3, #2
 8007770:	d002      	beq.n	8007778 <USBD_StdEPReq+0xac>
 8007772:	2b03      	cmp	r3, #3
 8007774:	d016      	beq.n	80077a4 <USBD_StdEPReq+0xd8>
 8007776:	e02c      	b.n	80077d2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007778:	7bbb      	ldrb	r3, [r7, #14]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d00d      	beq.n	800779a <USBD_StdEPReq+0xce>
 800777e:	7bbb      	ldrb	r3, [r7, #14]
 8007780:	2b80      	cmp	r3, #128	; 0x80
 8007782:	d00a      	beq.n	800779a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007784:	7bbb      	ldrb	r3, [r7, #14]
 8007786:	4619      	mov	r1, r3
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f001 f93d 	bl	8008a08 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800778e:	2180      	movs	r1, #128	; 0x80
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f001 f939 	bl	8008a08 <USBD_LL_StallEP>
 8007796:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007798:	e020      	b.n	80077dc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800779a:	6839      	ldr	r1, [r7, #0]
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f000 fc7a 	bl	8008096 <USBD_CtlError>
              break;
 80077a2:	e01b      	b.n	80077dc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	885b      	ldrh	r3, [r3, #2]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d10e      	bne.n	80077ca <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80077ac:	7bbb      	ldrb	r3, [r7, #14]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d00b      	beq.n	80077ca <USBD_StdEPReq+0xfe>
 80077b2:	7bbb      	ldrb	r3, [r7, #14]
 80077b4:	2b80      	cmp	r3, #128	; 0x80
 80077b6:	d008      	beq.n	80077ca <USBD_StdEPReq+0xfe>
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	88db      	ldrh	r3, [r3, #6]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d104      	bne.n	80077ca <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80077c0:	7bbb      	ldrb	r3, [r7, #14]
 80077c2:	4619      	mov	r1, r3
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f001 f91f 	bl	8008a08 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f000 fd2e 	bl	800822c <USBD_CtlSendStatus>

              break;
 80077d0:	e004      	b.n	80077dc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80077d2:	6839      	ldr	r1, [r7, #0]
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f000 fc5e 	bl	8008096 <USBD_CtlError>
              break;
 80077da:	bf00      	nop
          }
          break;
 80077dc:	e107      	b.n	80079ee <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077e4:	b2db      	uxtb	r3, r3
 80077e6:	2b02      	cmp	r3, #2
 80077e8:	d002      	beq.n	80077f0 <USBD_StdEPReq+0x124>
 80077ea:	2b03      	cmp	r3, #3
 80077ec:	d016      	beq.n	800781c <USBD_StdEPReq+0x150>
 80077ee:	e04b      	b.n	8007888 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80077f0:	7bbb      	ldrb	r3, [r7, #14]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d00d      	beq.n	8007812 <USBD_StdEPReq+0x146>
 80077f6:	7bbb      	ldrb	r3, [r7, #14]
 80077f8:	2b80      	cmp	r3, #128	; 0x80
 80077fa:	d00a      	beq.n	8007812 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80077fc:	7bbb      	ldrb	r3, [r7, #14]
 80077fe:	4619      	mov	r1, r3
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f001 f901 	bl	8008a08 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007806:	2180      	movs	r1, #128	; 0x80
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f001 f8fd 	bl	8008a08 <USBD_LL_StallEP>
 800780e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007810:	e040      	b.n	8007894 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007812:	6839      	ldr	r1, [r7, #0]
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f000 fc3e 	bl	8008096 <USBD_CtlError>
              break;
 800781a:	e03b      	b.n	8007894 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	885b      	ldrh	r3, [r3, #2]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d136      	bne.n	8007892 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007824:	7bbb      	ldrb	r3, [r7, #14]
 8007826:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800782a:	2b00      	cmp	r3, #0
 800782c:	d004      	beq.n	8007838 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800782e:	7bbb      	ldrb	r3, [r7, #14]
 8007830:	4619      	mov	r1, r3
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f001 f907 	bl	8008a46 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f000 fcf7 	bl	800822c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800783e:	7bbb      	ldrb	r3, [r7, #14]
 8007840:	4619      	mov	r1, r3
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f7ff fde2 	bl	800740c <USBD_CoreFindEP>
 8007848:	4603      	mov	r3, r0
 800784a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800784c:	7b7b      	ldrb	r3, [r7, #13]
 800784e:	2bff      	cmp	r3, #255	; 0xff
 8007850:	d01f      	beq.n	8007892 <USBD_StdEPReq+0x1c6>
 8007852:	7b7b      	ldrb	r3, [r7, #13]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d11c      	bne.n	8007892 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007858:	7b7a      	ldrb	r2, [r7, #13]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007860:	7b7a      	ldrb	r2, [r7, #13]
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	32ae      	adds	r2, #174	; 0xae
 8007866:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800786a:	689b      	ldr	r3, [r3, #8]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d010      	beq.n	8007892 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007870:	7b7a      	ldrb	r2, [r7, #13]
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	32ae      	adds	r2, #174	; 0xae
 8007876:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800787a:	689b      	ldr	r3, [r3, #8]
 800787c:	6839      	ldr	r1, [r7, #0]
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	4798      	blx	r3
 8007882:	4603      	mov	r3, r0
 8007884:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007886:	e004      	b.n	8007892 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007888:	6839      	ldr	r1, [r7, #0]
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f000 fc03 	bl	8008096 <USBD_CtlError>
              break;
 8007890:	e000      	b.n	8007894 <USBD_StdEPReq+0x1c8>
              break;
 8007892:	bf00      	nop
          }
          break;
 8007894:	e0ab      	b.n	80079ee <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800789c:	b2db      	uxtb	r3, r3
 800789e:	2b02      	cmp	r3, #2
 80078a0:	d002      	beq.n	80078a8 <USBD_StdEPReq+0x1dc>
 80078a2:	2b03      	cmp	r3, #3
 80078a4:	d032      	beq.n	800790c <USBD_StdEPReq+0x240>
 80078a6:	e097      	b.n	80079d8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80078a8:	7bbb      	ldrb	r3, [r7, #14]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d007      	beq.n	80078be <USBD_StdEPReq+0x1f2>
 80078ae:	7bbb      	ldrb	r3, [r7, #14]
 80078b0:	2b80      	cmp	r3, #128	; 0x80
 80078b2:	d004      	beq.n	80078be <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80078b4:	6839      	ldr	r1, [r7, #0]
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f000 fbed 	bl	8008096 <USBD_CtlError>
                break;
 80078bc:	e091      	b.n	80079e2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80078be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	da0b      	bge.n	80078de <USBD_StdEPReq+0x212>
 80078c6:	7bbb      	ldrb	r3, [r7, #14]
 80078c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80078cc:	4613      	mov	r3, r2
 80078ce:	009b      	lsls	r3, r3, #2
 80078d0:	4413      	add	r3, r2
 80078d2:	009b      	lsls	r3, r3, #2
 80078d4:	3310      	adds	r3, #16
 80078d6:	687a      	ldr	r2, [r7, #4]
 80078d8:	4413      	add	r3, r2
 80078da:	3304      	adds	r3, #4
 80078dc:	e00b      	b.n	80078f6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80078de:	7bbb      	ldrb	r3, [r7, #14]
 80078e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80078e4:	4613      	mov	r3, r2
 80078e6:	009b      	lsls	r3, r3, #2
 80078e8:	4413      	add	r3, r2
 80078ea:	009b      	lsls	r3, r3, #2
 80078ec:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80078f0:	687a      	ldr	r2, [r7, #4]
 80078f2:	4413      	add	r3, r2
 80078f4:	3304      	adds	r3, #4
 80078f6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	2200      	movs	r2, #0
 80078fc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	2202      	movs	r2, #2
 8007902:	4619      	mov	r1, r3
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f000 fc37 	bl	8008178 <USBD_CtlSendData>
              break;
 800790a:	e06a      	b.n	80079e2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800790c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007910:	2b00      	cmp	r3, #0
 8007912:	da11      	bge.n	8007938 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007914:	7bbb      	ldrb	r3, [r7, #14]
 8007916:	f003 020f 	and.w	r2, r3, #15
 800791a:	6879      	ldr	r1, [r7, #4]
 800791c:	4613      	mov	r3, r2
 800791e:	009b      	lsls	r3, r3, #2
 8007920:	4413      	add	r3, r2
 8007922:	009b      	lsls	r3, r3, #2
 8007924:	440b      	add	r3, r1
 8007926:	3324      	adds	r3, #36	; 0x24
 8007928:	881b      	ldrh	r3, [r3, #0]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d117      	bne.n	800795e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800792e:	6839      	ldr	r1, [r7, #0]
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f000 fbb0 	bl	8008096 <USBD_CtlError>
                  break;
 8007936:	e054      	b.n	80079e2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007938:	7bbb      	ldrb	r3, [r7, #14]
 800793a:	f003 020f 	and.w	r2, r3, #15
 800793e:	6879      	ldr	r1, [r7, #4]
 8007940:	4613      	mov	r3, r2
 8007942:	009b      	lsls	r3, r3, #2
 8007944:	4413      	add	r3, r2
 8007946:	009b      	lsls	r3, r3, #2
 8007948:	440b      	add	r3, r1
 800794a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800794e:	881b      	ldrh	r3, [r3, #0]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d104      	bne.n	800795e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007954:	6839      	ldr	r1, [r7, #0]
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f000 fb9d 	bl	8008096 <USBD_CtlError>
                  break;
 800795c:	e041      	b.n	80079e2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800795e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007962:	2b00      	cmp	r3, #0
 8007964:	da0b      	bge.n	800797e <USBD_StdEPReq+0x2b2>
 8007966:	7bbb      	ldrb	r3, [r7, #14]
 8007968:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800796c:	4613      	mov	r3, r2
 800796e:	009b      	lsls	r3, r3, #2
 8007970:	4413      	add	r3, r2
 8007972:	009b      	lsls	r3, r3, #2
 8007974:	3310      	adds	r3, #16
 8007976:	687a      	ldr	r2, [r7, #4]
 8007978:	4413      	add	r3, r2
 800797a:	3304      	adds	r3, #4
 800797c:	e00b      	b.n	8007996 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800797e:	7bbb      	ldrb	r3, [r7, #14]
 8007980:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007984:	4613      	mov	r3, r2
 8007986:	009b      	lsls	r3, r3, #2
 8007988:	4413      	add	r3, r2
 800798a:	009b      	lsls	r3, r3, #2
 800798c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007990:	687a      	ldr	r2, [r7, #4]
 8007992:	4413      	add	r3, r2
 8007994:	3304      	adds	r3, #4
 8007996:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007998:	7bbb      	ldrb	r3, [r7, #14]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d002      	beq.n	80079a4 <USBD_StdEPReq+0x2d8>
 800799e:	7bbb      	ldrb	r3, [r7, #14]
 80079a0:	2b80      	cmp	r3, #128	; 0x80
 80079a2:	d103      	bne.n	80079ac <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	2200      	movs	r2, #0
 80079a8:	601a      	str	r2, [r3, #0]
 80079aa:	e00e      	b.n	80079ca <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80079ac:	7bbb      	ldrb	r3, [r7, #14]
 80079ae:	4619      	mov	r1, r3
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f001 f867 	bl	8008a84 <USBD_LL_IsStallEP>
 80079b6:	4603      	mov	r3, r0
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d003      	beq.n	80079c4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	2201      	movs	r2, #1
 80079c0:	601a      	str	r2, [r3, #0]
 80079c2:	e002      	b.n	80079ca <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	2200      	movs	r2, #0
 80079c8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	2202      	movs	r2, #2
 80079ce:	4619      	mov	r1, r3
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f000 fbd1 	bl	8008178 <USBD_CtlSendData>
              break;
 80079d6:	e004      	b.n	80079e2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80079d8:	6839      	ldr	r1, [r7, #0]
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f000 fb5b 	bl	8008096 <USBD_CtlError>
              break;
 80079e0:	bf00      	nop
          }
          break;
 80079e2:	e004      	b.n	80079ee <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80079e4:	6839      	ldr	r1, [r7, #0]
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f000 fb55 	bl	8008096 <USBD_CtlError>
          break;
 80079ec:	bf00      	nop
      }
      break;
 80079ee:	e005      	b.n	80079fc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80079f0:	6839      	ldr	r1, [r7, #0]
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f000 fb4f 	bl	8008096 <USBD_CtlError>
      break;
 80079f8:	e000      	b.n	80079fc <USBD_StdEPReq+0x330>
      break;
 80079fa:	bf00      	nop
  }

  return ret;
 80079fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	3710      	adds	r7, #16
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}
	...

08007a08 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b084      	sub	sp, #16
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
 8007a10:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007a12:	2300      	movs	r3, #0
 8007a14:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007a16:	2300      	movs	r3, #0
 8007a18:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	885b      	ldrh	r3, [r3, #2]
 8007a22:	0a1b      	lsrs	r3, r3, #8
 8007a24:	b29b      	uxth	r3, r3
 8007a26:	3b01      	subs	r3, #1
 8007a28:	2b06      	cmp	r3, #6
 8007a2a:	f200 8128 	bhi.w	8007c7e <USBD_GetDescriptor+0x276>
 8007a2e:	a201      	add	r2, pc, #4	; (adr r2, 8007a34 <USBD_GetDescriptor+0x2c>)
 8007a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a34:	08007a51 	.word	0x08007a51
 8007a38:	08007a69 	.word	0x08007a69
 8007a3c:	08007aa9 	.word	0x08007aa9
 8007a40:	08007c7f 	.word	0x08007c7f
 8007a44:	08007c7f 	.word	0x08007c7f
 8007a48:	08007c1f 	.word	0x08007c1f
 8007a4c:	08007c4b 	.word	0x08007c4b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	687a      	ldr	r2, [r7, #4]
 8007a5a:	7c12      	ldrb	r2, [r2, #16]
 8007a5c:	f107 0108 	add.w	r1, r7, #8
 8007a60:	4610      	mov	r0, r2
 8007a62:	4798      	blx	r3
 8007a64:	60f8      	str	r0, [r7, #12]
      break;
 8007a66:	e112      	b.n	8007c8e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	7c1b      	ldrb	r3, [r3, #16]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d10d      	bne.n	8007a8c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a78:	f107 0208 	add.w	r2, r7, #8
 8007a7c:	4610      	mov	r0, r2
 8007a7e:	4798      	blx	r3
 8007a80:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	3301      	adds	r3, #1
 8007a86:	2202      	movs	r2, #2
 8007a88:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007a8a:	e100      	b.n	8007c8e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a94:	f107 0208 	add.w	r2, r7, #8
 8007a98:	4610      	mov	r0, r2
 8007a9a:	4798      	blx	r3
 8007a9c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	3301      	adds	r3, #1
 8007aa2:	2202      	movs	r2, #2
 8007aa4:	701a      	strb	r2, [r3, #0]
      break;
 8007aa6:	e0f2      	b.n	8007c8e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	885b      	ldrh	r3, [r3, #2]
 8007aac:	b2db      	uxtb	r3, r3
 8007aae:	2b05      	cmp	r3, #5
 8007ab0:	f200 80ac 	bhi.w	8007c0c <USBD_GetDescriptor+0x204>
 8007ab4:	a201      	add	r2, pc, #4	; (adr r2, 8007abc <USBD_GetDescriptor+0xb4>)
 8007ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aba:	bf00      	nop
 8007abc:	08007ad5 	.word	0x08007ad5
 8007ac0:	08007b09 	.word	0x08007b09
 8007ac4:	08007b3d 	.word	0x08007b3d
 8007ac8:	08007b71 	.word	0x08007b71
 8007acc:	08007ba5 	.word	0x08007ba5
 8007ad0:	08007bd9 	.word	0x08007bd9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ada:	685b      	ldr	r3, [r3, #4]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d00b      	beq.n	8007af8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ae6:	685b      	ldr	r3, [r3, #4]
 8007ae8:	687a      	ldr	r2, [r7, #4]
 8007aea:	7c12      	ldrb	r2, [r2, #16]
 8007aec:	f107 0108 	add.w	r1, r7, #8
 8007af0:	4610      	mov	r0, r2
 8007af2:	4798      	blx	r3
 8007af4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007af6:	e091      	b.n	8007c1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007af8:	6839      	ldr	r1, [r7, #0]
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f000 facb 	bl	8008096 <USBD_CtlError>
            err++;
 8007b00:	7afb      	ldrb	r3, [r7, #11]
 8007b02:	3301      	adds	r3, #1
 8007b04:	72fb      	strb	r3, [r7, #11]
          break;
 8007b06:	e089      	b.n	8007c1c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b0e:	689b      	ldr	r3, [r3, #8]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d00b      	beq.n	8007b2c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b1a:	689b      	ldr	r3, [r3, #8]
 8007b1c:	687a      	ldr	r2, [r7, #4]
 8007b1e:	7c12      	ldrb	r2, [r2, #16]
 8007b20:	f107 0108 	add.w	r1, r7, #8
 8007b24:	4610      	mov	r0, r2
 8007b26:	4798      	blx	r3
 8007b28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b2a:	e077      	b.n	8007c1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b2c:	6839      	ldr	r1, [r7, #0]
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f000 fab1 	bl	8008096 <USBD_CtlError>
            err++;
 8007b34:	7afb      	ldrb	r3, [r7, #11]
 8007b36:	3301      	adds	r3, #1
 8007b38:	72fb      	strb	r3, [r7, #11]
          break;
 8007b3a:	e06f      	b.n	8007c1c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b42:	68db      	ldr	r3, [r3, #12]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d00b      	beq.n	8007b60 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b4e:	68db      	ldr	r3, [r3, #12]
 8007b50:	687a      	ldr	r2, [r7, #4]
 8007b52:	7c12      	ldrb	r2, [r2, #16]
 8007b54:	f107 0108 	add.w	r1, r7, #8
 8007b58:	4610      	mov	r0, r2
 8007b5a:	4798      	blx	r3
 8007b5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b5e:	e05d      	b.n	8007c1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b60:	6839      	ldr	r1, [r7, #0]
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f000 fa97 	bl	8008096 <USBD_CtlError>
            err++;
 8007b68:	7afb      	ldrb	r3, [r7, #11]
 8007b6a:	3301      	adds	r3, #1
 8007b6c:	72fb      	strb	r3, [r7, #11]
          break;
 8007b6e:	e055      	b.n	8007c1c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b76:	691b      	ldr	r3, [r3, #16]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d00b      	beq.n	8007b94 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b82:	691b      	ldr	r3, [r3, #16]
 8007b84:	687a      	ldr	r2, [r7, #4]
 8007b86:	7c12      	ldrb	r2, [r2, #16]
 8007b88:	f107 0108 	add.w	r1, r7, #8
 8007b8c:	4610      	mov	r0, r2
 8007b8e:	4798      	blx	r3
 8007b90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b92:	e043      	b.n	8007c1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b94:	6839      	ldr	r1, [r7, #0]
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f000 fa7d 	bl	8008096 <USBD_CtlError>
            err++;
 8007b9c:	7afb      	ldrb	r3, [r7, #11]
 8007b9e:	3301      	adds	r3, #1
 8007ba0:	72fb      	strb	r3, [r7, #11]
          break;
 8007ba2:	e03b      	b.n	8007c1c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007baa:	695b      	ldr	r3, [r3, #20]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d00b      	beq.n	8007bc8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bb6:	695b      	ldr	r3, [r3, #20]
 8007bb8:	687a      	ldr	r2, [r7, #4]
 8007bba:	7c12      	ldrb	r2, [r2, #16]
 8007bbc:	f107 0108 	add.w	r1, r7, #8
 8007bc0:	4610      	mov	r0, r2
 8007bc2:	4798      	blx	r3
 8007bc4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007bc6:	e029      	b.n	8007c1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007bc8:	6839      	ldr	r1, [r7, #0]
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f000 fa63 	bl	8008096 <USBD_CtlError>
            err++;
 8007bd0:	7afb      	ldrb	r3, [r7, #11]
 8007bd2:	3301      	adds	r3, #1
 8007bd4:	72fb      	strb	r3, [r7, #11]
          break;
 8007bd6:	e021      	b.n	8007c1c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bde:	699b      	ldr	r3, [r3, #24]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d00b      	beq.n	8007bfc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bea:	699b      	ldr	r3, [r3, #24]
 8007bec:	687a      	ldr	r2, [r7, #4]
 8007bee:	7c12      	ldrb	r2, [r2, #16]
 8007bf0:	f107 0108 	add.w	r1, r7, #8
 8007bf4:	4610      	mov	r0, r2
 8007bf6:	4798      	blx	r3
 8007bf8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007bfa:	e00f      	b.n	8007c1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007bfc:	6839      	ldr	r1, [r7, #0]
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f000 fa49 	bl	8008096 <USBD_CtlError>
            err++;
 8007c04:	7afb      	ldrb	r3, [r7, #11]
 8007c06:	3301      	adds	r3, #1
 8007c08:	72fb      	strb	r3, [r7, #11]
          break;
 8007c0a:	e007      	b.n	8007c1c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007c0c:	6839      	ldr	r1, [r7, #0]
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f000 fa41 	bl	8008096 <USBD_CtlError>
          err++;
 8007c14:	7afb      	ldrb	r3, [r7, #11]
 8007c16:	3301      	adds	r3, #1
 8007c18:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007c1a:	bf00      	nop
      }
      break;
 8007c1c:	e037      	b.n	8007c8e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	7c1b      	ldrb	r3, [r3, #16]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d109      	bne.n	8007c3a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c2e:	f107 0208 	add.w	r2, r7, #8
 8007c32:	4610      	mov	r0, r2
 8007c34:	4798      	blx	r3
 8007c36:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007c38:	e029      	b.n	8007c8e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007c3a:	6839      	ldr	r1, [r7, #0]
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f000 fa2a 	bl	8008096 <USBD_CtlError>
        err++;
 8007c42:	7afb      	ldrb	r3, [r7, #11]
 8007c44:	3301      	adds	r3, #1
 8007c46:	72fb      	strb	r3, [r7, #11]
      break;
 8007c48:	e021      	b.n	8007c8e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	7c1b      	ldrb	r3, [r3, #16]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d10d      	bne.n	8007c6e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c5a:	f107 0208 	add.w	r2, r7, #8
 8007c5e:	4610      	mov	r0, r2
 8007c60:	4798      	blx	r3
 8007c62:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	3301      	adds	r3, #1
 8007c68:	2207      	movs	r2, #7
 8007c6a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007c6c:	e00f      	b.n	8007c8e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007c6e:	6839      	ldr	r1, [r7, #0]
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f000 fa10 	bl	8008096 <USBD_CtlError>
        err++;
 8007c76:	7afb      	ldrb	r3, [r7, #11]
 8007c78:	3301      	adds	r3, #1
 8007c7a:	72fb      	strb	r3, [r7, #11]
      break;
 8007c7c:	e007      	b.n	8007c8e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007c7e:	6839      	ldr	r1, [r7, #0]
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f000 fa08 	bl	8008096 <USBD_CtlError>
      err++;
 8007c86:	7afb      	ldrb	r3, [r7, #11]
 8007c88:	3301      	adds	r3, #1
 8007c8a:	72fb      	strb	r3, [r7, #11]
      break;
 8007c8c:	bf00      	nop
  }

  if (err != 0U)
 8007c8e:	7afb      	ldrb	r3, [r7, #11]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d11e      	bne.n	8007cd2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	88db      	ldrh	r3, [r3, #6]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d016      	beq.n	8007cca <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007c9c:	893b      	ldrh	r3, [r7, #8]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d00e      	beq.n	8007cc0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	88da      	ldrh	r2, [r3, #6]
 8007ca6:	893b      	ldrh	r3, [r7, #8]
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	bf28      	it	cs
 8007cac:	4613      	movcs	r3, r2
 8007cae:	b29b      	uxth	r3, r3
 8007cb0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007cb2:	893b      	ldrh	r3, [r7, #8]
 8007cb4:	461a      	mov	r2, r3
 8007cb6:	68f9      	ldr	r1, [r7, #12]
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f000 fa5d 	bl	8008178 <USBD_CtlSendData>
 8007cbe:	e009      	b.n	8007cd4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007cc0:	6839      	ldr	r1, [r7, #0]
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f000 f9e7 	bl	8008096 <USBD_CtlError>
 8007cc8:	e004      	b.n	8007cd4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f000 faae 	bl	800822c <USBD_CtlSendStatus>
 8007cd0:	e000      	b.n	8007cd4 <USBD_GetDescriptor+0x2cc>
    return;
 8007cd2:	bf00      	nop
  }
}
 8007cd4:	3710      	adds	r7, #16
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}
 8007cda:	bf00      	nop

08007cdc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b084      	sub	sp, #16
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
 8007ce4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	889b      	ldrh	r3, [r3, #4]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d131      	bne.n	8007d52 <USBD_SetAddress+0x76>
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	88db      	ldrh	r3, [r3, #6]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d12d      	bne.n	8007d52 <USBD_SetAddress+0x76>
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	885b      	ldrh	r3, [r3, #2]
 8007cfa:	2b7f      	cmp	r3, #127	; 0x7f
 8007cfc:	d829      	bhi.n	8007d52 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	885b      	ldrh	r3, [r3, #2]
 8007d02:	b2db      	uxtb	r3, r3
 8007d04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d08:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d10:	b2db      	uxtb	r3, r3
 8007d12:	2b03      	cmp	r3, #3
 8007d14:	d104      	bne.n	8007d20 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007d16:	6839      	ldr	r1, [r7, #0]
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f000 f9bc 	bl	8008096 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d1e:	e01d      	b.n	8007d5c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	7bfa      	ldrb	r2, [r7, #15]
 8007d24:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007d28:	7bfb      	ldrb	r3, [r7, #15]
 8007d2a:	4619      	mov	r1, r3
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f000 fed5 	bl	8008adc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f000 fa7a 	bl	800822c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007d38:	7bfb      	ldrb	r3, [r7, #15]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d004      	beq.n	8007d48 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2202      	movs	r2, #2
 8007d42:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d46:	e009      	b.n	8007d5c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2201      	movs	r2, #1
 8007d4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d50:	e004      	b.n	8007d5c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007d52:	6839      	ldr	r1, [r7, #0]
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f000 f99e 	bl	8008096 <USBD_CtlError>
  }
}
 8007d5a:	bf00      	nop
 8007d5c:	bf00      	nop
 8007d5e:	3710      	adds	r7, #16
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}

08007d64 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b084      	sub	sp, #16
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
 8007d6c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d6e:	2300      	movs	r3, #0
 8007d70:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	885b      	ldrh	r3, [r3, #2]
 8007d76:	b2da      	uxtb	r2, r3
 8007d78:	4b4e      	ldr	r3, [pc, #312]	; (8007eb4 <USBD_SetConfig+0x150>)
 8007d7a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007d7c:	4b4d      	ldr	r3, [pc, #308]	; (8007eb4 <USBD_SetConfig+0x150>)
 8007d7e:	781b      	ldrb	r3, [r3, #0]
 8007d80:	2b01      	cmp	r3, #1
 8007d82:	d905      	bls.n	8007d90 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007d84:	6839      	ldr	r1, [r7, #0]
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f000 f985 	bl	8008096 <USBD_CtlError>
    return USBD_FAIL;
 8007d8c:	2303      	movs	r3, #3
 8007d8e:	e08c      	b.n	8007eaa <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d96:	b2db      	uxtb	r3, r3
 8007d98:	2b02      	cmp	r3, #2
 8007d9a:	d002      	beq.n	8007da2 <USBD_SetConfig+0x3e>
 8007d9c:	2b03      	cmp	r3, #3
 8007d9e:	d029      	beq.n	8007df4 <USBD_SetConfig+0x90>
 8007da0:	e075      	b.n	8007e8e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007da2:	4b44      	ldr	r3, [pc, #272]	; (8007eb4 <USBD_SetConfig+0x150>)
 8007da4:	781b      	ldrb	r3, [r3, #0]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d020      	beq.n	8007dec <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007daa:	4b42      	ldr	r3, [pc, #264]	; (8007eb4 <USBD_SetConfig+0x150>)
 8007dac:	781b      	ldrb	r3, [r3, #0]
 8007dae:	461a      	mov	r2, r3
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007db4:	4b3f      	ldr	r3, [pc, #252]	; (8007eb4 <USBD_SetConfig+0x150>)
 8007db6:	781b      	ldrb	r3, [r3, #0]
 8007db8:	4619      	mov	r1, r3
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f7fe ffe7 	bl	8006d8e <USBD_SetClassConfig>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007dc4:	7bfb      	ldrb	r3, [r7, #15]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d008      	beq.n	8007ddc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007dca:	6839      	ldr	r1, [r7, #0]
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f000 f962 	bl	8008096 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2202      	movs	r2, #2
 8007dd6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007dda:	e065      	b.n	8007ea8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	f000 fa25 	bl	800822c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2203      	movs	r2, #3
 8007de6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007dea:	e05d      	b.n	8007ea8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f000 fa1d 	bl	800822c <USBD_CtlSendStatus>
      break;
 8007df2:	e059      	b.n	8007ea8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007df4:	4b2f      	ldr	r3, [pc, #188]	; (8007eb4 <USBD_SetConfig+0x150>)
 8007df6:	781b      	ldrb	r3, [r3, #0]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d112      	bne.n	8007e22 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2202      	movs	r2, #2
 8007e00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007e04:	4b2b      	ldr	r3, [pc, #172]	; (8007eb4 <USBD_SetConfig+0x150>)
 8007e06:	781b      	ldrb	r3, [r3, #0]
 8007e08:	461a      	mov	r2, r3
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007e0e:	4b29      	ldr	r3, [pc, #164]	; (8007eb4 <USBD_SetConfig+0x150>)
 8007e10:	781b      	ldrb	r3, [r3, #0]
 8007e12:	4619      	mov	r1, r3
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f7fe ffd6 	bl	8006dc6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f000 fa06 	bl	800822c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007e20:	e042      	b.n	8007ea8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007e22:	4b24      	ldr	r3, [pc, #144]	; (8007eb4 <USBD_SetConfig+0x150>)
 8007e24:	781b      	ldrb	r3, [r3, #0]
 8007e26:	461a      	mov	r2, r3
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	685b      	ldr	r3, [r3, #4]
 8007e2c:	429a      	cmp	r2, r3
 8007e2e:	d02a      	beq.n	8007e86 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	685b      	ldr	r3, [r3, #4]
 8007e34:	b2db      	uxtb	r3, r3
 8007e36:	4619      	mov	r1, r3
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f7fe ffc4 	bl	8006dc6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007e3e:	4b1d      	ldr	r3, [pc, #116]	; (8007eb4 <USBD_SetConfig+0x150>)
 8007e40:	781b      	ldrb	r3, [r3, #0]
 8007e42:	461a      	mov	r2, r3
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007e48:	4b1a      	ldr	r3, [pc, #104]	; (8007eb4 <USBD_SetConfig+0x150>)
 8007e4a:	781b      	ldrb	r3, [r3, #0]
 8007e4c:	4619      	mov	r1, r3
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f7fe ff9d 	bl	8006d8e <USBD_SetClassConfig>
 8007e54:	4603      	mov	r3, r0
 8007e56:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007e58:	7bfb      	ldrb	r3, [r7, #15]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d00f      	beq.n	8007e7e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007e5e:	6839      	ldr	r1, [r7, #0]
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	f000 f918 	bl	8008096 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	685b      	ldr	r3, [r3, #4]
 8007e6a:	b2db      	uxtb	r3, r3
 8007e6c:	4619      	mov	r1, r3
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f7fe ffa9 	bl	8006dc6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2202      	movs	r2, #2
 8007e78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007e7c:	e014      	b.n	8007ea8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f000 f9d4 	bl	800822c <USBD_CtlSendStatus>
      break;
 8007e84:	e010      	b.n	8007ea8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f000 f9d0 	bl	800822c <USBD_CtlSendStatus>
      break;
 8007e8c:	e00c      	b.n	8007ea8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007e8e:	6839      	ldr	r1, [r7, #0]
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f000 f900 	bl	8008096 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007e96:	4b07      	ldr	r3, [pc, #28]	; (8007eb4 <USBD_SetConfig+0x150>)
 8007e98:	781b      	ldrb	r3, [r3, #0]
 8007e9a:	4619      	mov	r1, r3
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f7fe ff92 	bl	8006dc6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007ea2:	2303      	movs	r3, #3
 8007ea4:	73fb      	strb	r3, [r7, #15]
      break;
 8007ea6:	bf00      	nop
  }

  return ret;
 8007ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	3710      	adds	r7, #16
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}
 8007eb2:	bf00      	nop
 8007eb4:	200001c4 	.word	0x200001c4

08007eb8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b082      	sub	sp, #8
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
 8007ec0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	88db      	ldrh	r3, [r3, #6]
 8007ec6:	2b01      	cmp	r3, #1
 8007ec8:	d004      	beq.n	8007ed4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007eca:	6839      	ldr	r1, [r7, #0]
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f000 f8e2 	bl	8008096 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007ed2:	e023      	b.n	8007f1c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007eda:	b2db      	uxtb	r3, r3
 8007edc:	2b02      	cmp	r3, #2
 8007ede:	dc02      	bgt.n	8007ee6 <USBD_GetConfig+0x2e>
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	dc03      	bgt.n	8007eec <USBD_GetConfig+0x34>
 8007ee4:	e015      	b.n	8007f12 <USBD_GetConfig+0x5a>
 8007ee6:	2b03      	cmp	r3, #3
 8007ee8:	d00b      	beq.n	8007f02 <USBD_GetConfig+0x4a>
 8007eea:	e012      	b.n	8007f12 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	3308      	adds	r3, #8
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	4619      	mov	r1, r3
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f000 f93c 	bl	8008178 <USBD_CtlSendData>
        break;
 8007f00:	e00c      	b.n	8007f1c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	3304      	adds	r3, #4
 8007f06:	2201      	movs	r2, #1
 8007f08:	4619      	mov	r1, r3
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f000 f934 	bl	8008178 <USBD_CtlSendData>
        break;
 8007f10:	e004      	b.n	8007f1c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007f12:	6839      	ldr	r1, [r7, #0]
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	f000 f8be 	bl	8008096 <USBD_CtlError>
        break;
 8007f1a:	bf00      	nop
}
 8007f1c:	bf00      	nop
 8007f1e:	3708      	adds	r7, #8
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bd80      	pop	{r7, pc}

08007f24 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b082      	sub	sp, #8
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
 8007f2c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f34:	b2db      	uxtb	r3, r3
 8007f36:	3b01      	subs	r3, #1
 8007f38:	2b02      	cmp	r3, #2
 8007f3a:	d81e      	bhi.n	8007f7a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	88db      	ldrh	r3, [r3, #6]
 8007f40:	2b02      	cmp	r3, #2
 8007f42:	d004      	beq.n	8007f4e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007f44:	6839      	ldr	r1, [r7, #0]
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f000 f8a5 	bl	8008096 <USBD_CtlError>
        break;
 8007f4c:	e01a      	b.n	8007f84 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2201      	movs	r2, #1
 8007f52:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d005      	beq.n	8007f6a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	68db      	ldr	r3, [r3, #12]
 8007f62:	f043 0202 	orr.w	r2, r3, #2
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	330c      	adds	r3, #12
 8007f6e:	2202      	movs	r2, #2
 8007f70:	4619      	mov	r1, r3
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f000 f900 	bl	8008178 <USBD_CtlSendData>
      break;
 8007f78:	e004      	b.n	8007f84 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007f7a:	6839      	ldr	r1, [r7, #0]
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f000 f88a 	bl	8008096 <USBD_CtlError>
      break;
 8007f82:	bf00      	nop
  }
}
 8007f84:	bf00      	nop
 8007f86:	3708      	adds	r7, #8
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bd80      	pop	{r7, pc}

08007f8c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b082      	sub	sp, #8
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
 8007f94:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	885b      	ldrh	r3, [r3, #2]
 8007f9a:	2b01      	cmp	r3, #1
 8007f9c:	d107      	bne.n	8007fae <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2201      	movs	r2, #1
 8007fa2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f000 f940 	bl	800822c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007fac:	e013      	b.n	8007fd6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	885b      	ldrh	r3, [r3, #2]
 8007fb2:	2b02      	cmp	r3, #2
 8007fb4:	d10b      	bne.n	8007fce <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	889b      	ldrh	r3, [r3, #4]
 8007fba:	0a1b      	lsrs	r3, r3, #8
 8007fbc:	b29b      	uxth	r3, r3
 8007fbe:	b2da      	uxtb	r2, r3
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f000 f930 	bl	800822c <USBD_CtlSendStatus>
}
 8007fcc:	e003      	b.n	8007fd6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007fce:	6839      	ldr	r1, [r7, #0]
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	f000 f860 	bl	8008096 <USBD_CtlError>
}
 8007fd6:	bf00      	nop
 8007fd8:	3708      	adds	r7, #8
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}

08007fde <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fde:	b580      	push	{r7, lr}
 8007fe0:	b082      	sub	sp, #8
 8007fe2:	af00      	add	r7, sp, #0
 8007fe4:	6078      	str	r0, [r7, #4]
 8007fe6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fee:	b2db      	uxtb	r3, r3
 8007ff0:	3b01      	subs	r3, #1
 8007ff2:	2b02      	cmp	r3, #2
 8007ff4:	d80b      	bhi.n	800800e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	885b      	ldrh	r3, [r3, #2]
 8007ffa:	2b01      	cmp	r3, #1
 8007ffc:	d10c      	bne.n	8008018 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2200      	movs	r2, #0
 8008002:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f000 f910 	bl	800822c <USBD_CtlSendStatus>
      }
      break;
 800800c:	e004      	b.n	8008018 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800800e:	6839      	ldr	r1, [r7, #0]
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f000 f840 	bl	8008096 <USBD_CtlError>
      break;
 8008016:	e000      	b.n	800801a <USBD_ClrFeature+0x3c>
      break;
 8008018:	bf00      	nop
  }
}
 800801a:	bf00      	nop
 800801c:	3708      	adds	r7, #8
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}

08008022 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008022:	b580      	push	{r7, lr}
 8008024:	b084      	sub	sp, #16
 8008026:	af00      	add	r7, sp, #0
 8008028:	6078      	str	r0, [r7, #4]
 800802a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	781a      	ldrb	r2, [r3, #0]
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	3301      	adds	r3, #1
 800803c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	781a      	ldrb	r2, [r3, #0]
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	3301      	adds	r3, #1
 800804a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800804c:	68f8      	ldr	r0, [r7, #12]
 800804e:	f7ff fa41 	bl	80074d4 <SWAPBYTE>
 8008052:	4603      	mov	r3, r0
 8008054:	461a      	mov	r2, r3
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	3301      	adds	r3, #1
 800805e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	3301      	adds	r3, #1
 8008064:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008066:	68f8      	ldr	r0, [r7, #12]
 8008068:	f7ff fa34 	bl	80074d4 <SWAPBYTE>
 800806c:	4603      	mov	r3, r0
 800806e:	461a      	mov	r2, r3
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	3301      	adds	r3, #1
 8008078:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	3301      	adds	r3, #1
 800807e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008080:	68f8      	ldr	r0, [r7, #12]
 8008082:	f7ff fa27 	bl	80074d4 <SWAPBYTE>
 8008086:	4603      	mov	r3, r0
 8008088:	461a      	mov	r2, r3
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	80da      	strh	r2, [r3, #6]
}
 800808e:	bf00      	nop
 8008090:	3710      	adds	r7, #16
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}

08008096 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008096:	b580      	push	{r7, lr}
 8008098:	b082      	sub	sp, #8
 800809a:	af00      	add	r7, sp, #0
 800809c:	6078      	str	r0, [r7, #4]
 800809e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80080a0:	2180      	movs	r1, #128	; 0x80
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f000 fcb0 	bl	8008a08 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80080a8:	2100      	movs	r1, #0
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f000 fcac 	bl	8008a08 <USBD_LL_StallEP>
}
 80080b0:	bf00      	nop
 80080b2:	3708      	adds	r7, #8
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}

080080b8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b086      	sub	sp, #24
 80080bc:	af00      	add	r7, sp, #0
 80080be:	60f8      	str	r0, [r7, #12]
 80080c0:	60b9      	str	r1, [r7, #8]
 80080c2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80080c4:	2300      	movs	r3, #0
 80080c6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d036      	beq.n	800813c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80080d2:	6938      	ldr	r0, [r7, #16]
 80080d4:	f000 f836 	bl	8008144 <USBD_GetLen>
 80080d8:	4603      	mov	r3, r0
 80080da:	3301      	adds	r3, #1
 80080dc:	b29b      	uxth	r3, r3
 80080de:	005b      	lsls	r3, r3, #1
 80080e0:	b29a      	uxth	r2, r3
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80080e6:	7dfb      	ldrb	r3, [r7, #23]
 80080e8:	68ba      	ldr	r2, [r7, #8]
 80080ea:	4413      	add	r3, r2
 80080ec:	687a      	ldr	r2, [r7, #4]
 80080ee:	7812      	ldrb	r2, [r2, #0]
 80080f0:	701a      	strb	r2, [r3, #0]
  idx++;
 80080f2:	7dfb      	ldrb	r3, [r7, #23]
 80080f4:	3301      	adds	r3, #1
 80080f6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80080f8:	7dfb      	ldrb	r3, [r7, #23]
 80080fa:	68ba      	ldr	r2, [r7, #8]
 80080fc:	4413      	add	r3, r2
 80080fe:	2203      	movs	r2, #3
 8008100:	701a      	strb	r2, [r3, #0]
  idx++;
 8008102:	7dfb      	ldrb	r3, [r7, #23]
 8008104:	3301      	adds	r3, #1
 8008106:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008108:	e013      	b.n	8008132 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800810a:	7dfb      	ldrb	r3, [r7, #23]
 800810c:	68ba      	ldr	r2, [r7, #8]
 800810e:	4413      	add	r3, r2
 8008110:	693a      	ldr	r2, [r7, #16]
 8008112:	7812      	ldrb	r2, [r2, #0]
 8008114:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008116:	693b      	ldr	r3, [r7, #16]
 8008118:	3301      	adds	r3, #1
 800811a:	613b      	str	r3, [r7, #16]
    idx++;
 800811c:	7dfb      	ldrb	r3, [r7, #23]
 800811e:	3301      	adds	r3, #1
 8008120:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008122:	7dfb      	ldrb	r3, [r7, #23]
 8008124:	68ba      	ldr	r2, [r7, #8]
 8008126:	4413      	add	r3, r2
 8008128:	2200      	movs	r2, #0
 800812a:	701a      	strb	r2, [r3, #0]
    idx++;
 800812c:	7dfb      	ldrb	r3, [r7, #23]
 800812e:	3301      	adds	r3, #1
 8008130:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008132:	693b      	ldr	r3, [r7, #16]
 8008134:	781b      	ldrb	r3, [r3, #0]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d1e7      	bne.n	800810a <USBD_GetString+0x52>
 800813a:	e000      	b.n	800813e <USBD_GetString+0x86>
    return;
 800813c:	bf00      	nop
  }
}
 800813e:	3718      	adds	r7, #24
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}

08008144 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008144:	b480      	push	{r7}
 8008146:	b085      	sub	sp, #20
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800814c:	2300      	movs	r3, #0
 800814e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008154:	e005      	b.n	8008162 <USBD_GetLen+0x1e>
  {
    len++;
 8008156:	7bfb      	ldrb	r3, [r7, #15]
 8008158:	3301      	adds	r3, #1
 800815a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	3301      	adds	r3, #1
 8008160:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	781b      	ldrb	r3, [r3, #0]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d1f5      	bne.n	8008156 <USBD_GetLen+0x12>
  }

  return len;
 800816a:	7bfb      	ldrb	r3, [r7, #15]
}
 800816c:	4618      	mov	r0, r3
 800816e:	3714      	adds	r7, #20
 8008170:	46bd      	mov	sp, r7
 8008172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008176:	4770      	bx	lr

08008178 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b084      	sub	sp, #16
 800817c:	af00      	add	r7, sp, #0
 800817e:	60f8      	str	r0, [r7, #12]
 8008180:	60b9      	str	r1, [r7, #8]
 8008182:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	2202      	movs	r2, #2
 8008188:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	687a      	ldr	r2, [r7, #4]
 8008190:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	687a      	ldr	r2, [r7, #4]
 8008196:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	68ba      	ldr	r2, [r7, #8]
 800819c:	2100      	movs	r1, #0
 800819e:	68f8      	ldr	r0, [r7, #12]
 80081a0:	f000 fcbb 	bl	8008b1a <USBD_LL_Transmit>

  return USBD_OK;
 80081a4:	2300      	movs	r3, #0
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	3710      	adds	r7, #16
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}

080081ae <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80081ae:	b580      	push	{r7, lr}
 80081b0:	b084      	sub	sp, #16
 80081b2:	af00      	add	r7, sp, #0
 80081b4:	60f8      	str	r0, [r7, #12]
 80081b6:	60b9      	str	r1, [r7, #8]
 80081b8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	68ba      	ldr	r2, [r7, #8]
 80081be:	2100      	movs	r1, #0
 80081c0:	68f8      	ldr	r0, [r7, #12]
 80081c2:	f000 fcaa 	bl	8008b1a <USBD_LL_Transmit>

  return USBD_OK;
 80081c6:	2300      	movs	r3, #0
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	3710      	adds	r7, #16
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}

080081d0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b084      	sub	sp, #16
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	60f8      	str	r0, [r7, #12]
 80081d8:	60b9      	str	r1, [r7, #8]
 80081da:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	2203      	movs	r2, #3
 80081e0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	687a      	ldr	r2, [r7, #4]
 80081e8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	687a      	ldr	r2, [r7, #4]
 80081f0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	68ba      	ldr	r2, [r7, #8]
 80081f8:	2100      	movs	r1, #0
 80081fa:	68f8      	ldr	r0, [r7, #12]
 80081fc:	f000 fcae 	bl	8008b5c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008200:	2300      	movs	r3, #0
}
 8008202:	4618      	mov	r0, r3
 8008204:	3710      	adds	r7, #16
 8008206:	46bd      	mov	sp, r7
 8008208:	bd80      	pop	{r7, pc}

0800820a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800820a:	b580      	push	{r7, lr}
 800820c:	b084      	sub	sp, #16
 800820e:	af00      	add	r7, sp, #0
 8008210:	60f8      	str	r0, [r7, #12]
 8008212:	60b9      	str	r1, [r7, #8]
 8008214:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	68ba      	ldr	r2, [r7, #8]
 800821a:	2100      	movs	r1, #0
 800821c:	68f8      	ldr	r0, [r7, #12]
 800821e:	f000 fc9d 	bl	8008b5c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008222:	2300      	movs	r3, #0
}
 8008224:	4618      	mov	r0, r3
 8008226:	3710      	adds	r7, #16
 8008228:	46bd      	mov	sp, r7
 800822a:	bd80      	pop	{r7, pc}

0800822c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b082      	sub	sp, #8
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2204      	movs	r2, #4
 8008238:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800823c:	2300      	movs	r3, #0
 800823e:	2200      	movs	r2, #0
 8008240:	2100      	movs	r1, #0
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f000 fc69 	bl	8008b1a <USBD_LL_Transmit>

  return USBD_OK;
 8008248:	2300      	movs	r3, #0
}
 800824a:	4618      	mov	r0, r3
 800824c:	3708      	adds	r7, #8
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}

08008252 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008252:	b580      	push	{r7, lr}
 8008254:	b082      	sub	sp, #8
 8008256:	af00      	add	r7, sp, #0
 8008258:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2205      	movs	r2, #5
 800825e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008262:	2300      	movs	r3, #0
 8008264:	2200      	movs	r2, #0
 8008266:	2100      	movs	r1, #0
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f000 fc77 	bl	8008b5c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800826e:	2300      	movs	r3, #0
}
 8008270:	4618      	mov	r0, r3
 8008272:	3708      	adds	r7, #8
 8008274:	46bd      	mov	sp, r7
 8008276:	bd80      	pop	{r7, pc}

08008278 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800827c:	2200      	movs	r2, #0
 800827e:	4912      	ldr	r1, [pc, #72]	; (80082c8 <MX_USB_DEVICE_Init+0x50>)
 8008280:	4812      	ldr	r0, [pc, #72]	; (80082cc <MX_USB_DEVICE_Init+0x54>)
 8008282:	f7fe fd07 	bl	8006c94 <USBD_Init>
 8008286:	4603      	mov	r3, r0
 8008288:	2b00      	cmp	r3, #0
 800828a:	d001      	beq.n	8008290 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800828c:	f7f8 fa66 	bl	800075c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008290:	490f      	ldr	r1, [pc, #60]	; (80082d0 <MX_USB_DEVICE_Init+0x58>)
 8008292:	480e      	ldr	r0, [pc, #56]	; (80082cc <MX_USB_DEVICE_Init+0x54>)
 8008294:	f7fe fd2e 	bl	8006cf4 <USBD_RegisterClass>
 8008298:	4603      	mov	r3, r0
 800829a:	2b00      	cmp	r3, #0
 800829c:	d001      	beq.n	80082a2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800829e:	f7f8 fa5d 	bl	800075c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80082a2:	490c      	ldr	r1, [pc, #48]	; (80082d4 <MX_USB_DEVICE_Init+0x5c>)
 80082a4:	4809      	ldr	r0, [pc, #36]	; (80082cc <MX_USB_DEVICE_Init+0x54>)
 80082a6:	f7fe fc65 	bl	8006b74 <USBD_CDC_RegisterInterface>
 80082aa:	4603      	mov	r3, r0
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d001      	beq.n	80082b4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80082b0:	f7f8 fa54 	bl	800075c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80082b4:	4805      	ldr	r0, [pc, #20]	; (80082cc <MX_USB_DEVICE_Init+0x54>)
 80082b6:	f7fe fd53 	bl	8006d60 <USBD_Start>
 80082ba:	4603      	mov	r3, r0
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d001      	beq.n	80082c4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80082c0:	f7f8 fa4c 	bl	800075c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80082c4:	bf00      	nop
 80082c6:	bd80      	pop	{r7, pc}
 80082c8:	200000ac 	.word	0x200000ac
 80082cc:	200001c8 	.word	0x200001c8
 80082d0:	20000018 	.word	0x20000018
 80082d4:	20000098 	.word	0x20000098

080082d8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80082dc:	2200      	movs	r2, #0
 80082de:	4905      	ldr	r1, [pc, #20]	; (80082f4 <CDC_Init_FS+0x1c>)
 80082e0:	4805      	ldr	r0, [pc, #20]	; (80082f8 <CDC_Init_FS+0x20>)
 80082e2:	f7fe fc61 	bl	8006ba8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80082e6:	4905      	ldr	r1, [pc, #20]	; (80082fc <CDC_Init_FS+0x24>)
 80082e8:	4803      	ldr	r0, [pc, #12]	; (80082f8 <CDC_Init_FS+0x20>)
 80082ea:	f7fe fc7f 	bl	8006bec <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80082ee:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80082f0:	4618      	mov	r0, r3
 80082f2:	bd80      	pop	{r7, pc}
 80082f4:	200008a4 	.word	0x200008a4
 80082f8:	200001c8 	.word	0x200001c8
 80082fc:	200004a4 	.word	0x200004a4

08008300 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008300:	b480      	push	{r7}
 8008302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008304:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008306:	4618      	mov	r0, r3
 8008308:	46bd      	mov	sp, r7
 800830a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830e:	4770      	bx	lr

08008310 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008310:	b480      	push	{r7}
 8008312:	b083      	sub	sp, #12
 8008314:	af00      	add	r7, sp, #0
 8008316:	4603      	mov	r3, r0
 8008318:	6039      	str	r1, [r7, #0]
 800831a:	71fb      	strb	r3, [r7, #7]
 800831c:	4613      	mov	r3, r2
 800831e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008320:	79fb      	ldrb	r3, [r7, #7]
 8008322:	2b23      	cmp	r3, #35	; 0x23
 8008324:	d84a      	bhi.n	80083bc <CDC_Control_FS+0xac>
 8008326:	a201      	add	r2, pc, #4	; (adr r2, 800832c <CDC_Control_FS+0x1c>)
 8008328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800832c:	080083bd 	.word	0x080083bd
 8008330:	080083bd 	.word	0x080083bd
 8008334:	080083bd 	.word	0x080083bd
 8008338:	080083bd 	.word	0x080083bd
 800833c:	080083bd 	.word	0x080083bd
 8008340:	080083bd 	.word	0x080083bd
 8008344:	080083bd 	.word	0x080083bd
 8008348:	080083bd 	.word	0x080083bd
 800834c:	080083bd 	.word	0x080083bd
 8008350:	080083bd 	.word	0x080083bd
 8008354:	080083bd 	.word	0x080083bd
 8008358:	080083bd 	.word	0x080083bd
 800835c:	080083bd 	.word	0x080083bd
 8008360:	080083bd 	.word	0x080083bd
 8008364:	080083bd 	.word	0x080083bd
 8008368:	080083bd 	.word	0x080083bd
 800836c:	080083bd 	.word	0x080083bd
 8008370:	080083bd 	.word	0x080083bd
 8008374:	080083bd 	.word	0x080083bd
 8008378:	080083bd 	.word	0x080083bd
 800837c:	080083bd 	.word	0x080083bd
 8008380:	080083bd 	.word	0x080083bd
 8008384:	080083bd 	.word	0x080083bd
 8008388:	080083bd 	.word	0x080083bd
 800838c:	080083bd 	.word	0x080083bd
 8008390:	080083bd 	.word	0x080083bd
 8008394:	080083bd 	.word	0x080083bd
 8008398:	080083bd 	.word	0x080083bd
 800839c:	080083bd 	.word	0x080083bd
 80083a0:	080083bd 	.word	0x080083bd
 80083a4:	080083bd 	.word	0x080083bd
 80083a8:	080083bd 	.word	0x080083bd
 80083ac:	080083bd 	.word	0x080083bd
 80083b0:	080083bd 	.word	0x080083bd
 80083b4:	080083bd 	.word	0x080083bd
 80083b8:	080083bd 	.word	0x080083bd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80083bc:	bf00      	nop
  }

  return (USBD_OK);
 80083be:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	370c      	adds	r7, #12
 80083c4:	46bd      	mov	sp, r7
 80083c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ca:	4770      	bx	lr

080083cc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b082      	sub	sp, #8
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
 80083d4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80083d6:	6879      	ldr	r1, [r7, #4]
 80083d8:	4805      	ldr	r0, [pc, #20]	; (80083f0 <CDC_Receive_FS+0x24>)
 80083da:	f7fe fc07 	bl	8006bec <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80083de:	4804      	ldr	r0, [pc, #16]	; (80083f0 <CDC_Receive_FS+0x24>)
 80083e0:	f7fe fc22 	bl	8006c28 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80083e4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	3708      	adds	r7, #8
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bd80      	pop	{r7, pc}
 80083ee:	bf00      	nop
 80083f0:	200001c8 	.word	0x200001c8

080083f4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80083f4:	b480      	push	{r7}
 80083f6:	b087      	sub	sp, #28
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	60f8      	str	r0, [r7, #12]
 80083fc:	60b9      	str	r1, [r7, #8]
 80083fe:	4613      	mov	r3, r2
 8008400:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008402:	2300      	movs	r3, #0
 8008404:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008406:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800840a:	4618      	mov	r0, r3
 800840c:	371c      	adds	r7, #28
 800840e:	46bd      	mov	sp, r7
 8008410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008414:	4770      	bx	lr
	...

08008418 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008418:	b480      	push	{r7}
 800841a:	b083      	sub	sp, #12
 800841c:	af00      	add	r7, sp, #0
 800841e:	4603      	mov	r3, r0
 8008420:	6039      	str	r1, [r7, #0]
 8008422:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	2212      	movs	r2, #18
 8008428:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800842a:	4b03      	ldr	r3, [pc, #12]	; (8008438 <USBD_FS_DeviceDescriptor+0x20>)
}
 800842c:	4618      	mov	r0, r3
 800842e:	370c      	adds	r7, #12
 8008430:	46bd      	mov	sp, r7
 8008432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008436:	4770      	bx	lr
 8008438:	200000c8 	.word	0x200000c8

0800843c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800843c:	b480      	push	{r7}
 800843e:	b083      	sub	sp, #12
 8008440:	af00      	add	r7, sp, #0
 8008442:	4603      	mov	r3, r0
 8008444:	6039      	str	r1, [r7, #0]
 8008446:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	2204      	movs	r2, #4
 800844c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800844e:	4b03      	ldr	r3, [pc, #12]	; (800845c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008450:	4618      	mov	r0, r3
 8008452:	370c      	adds	r7, #12
 8008454:	46bd      	mov	sp, r7
 8008456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845a:	4770      	bx	lr
 800845c:	200000dc 	.word	0x200000dc

08008460 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b082      	sub	sp, #8
 8008464:	af00      	add	r7, sp, #0
 8008466:	4603      	mov	r3, r0
 8008468:	6039      	str	r1, [r7, #0]
 800846a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800846c:	79fb      	ldrb	r3, [r7, #7]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d105      	bne.n	800847e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008472:	683a      	ldr	r2, [r7, #0]
 8008474:	4907      	ldr	r1, [pc, #28]	; (8008494 <USBD_FS_ProductStrDescriptor+0x34>)
 8008476:	4808      	ldr	r0, [pc, #32]	; (8008498 <USBD_FS_ProductStrDescriptor+0x38>)
 8008478:	f7ff fe1e 	bl	80080b8 <USBD_GetString>
 800847c:	e004      	b.n	8008488 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800847e:	683a      	ldr	r2, [r7, #0]
 8008480:	4904      	ldr	r1, [pc, #16]	; (8008494 <USBD_FS_ProductStrDescriptor+0x34>)
 8008482:	4805      	ldr	r0, [pc, #20]	; (8008498 <USBD_FS_ProductStrDescriptor+0x38>)
 8008484:	f7ff fe18 	bl	80080b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008488:	4b02      	ldr	r3, [pc, #8]	; (8008494 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800848a:	4618      	mov	r0, r3
 800848c:	3708      	adds	r7, #8
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}
 8008492:	bf00      	nop
 8008494:	20000ca4 	.word	0x20000ca4
 8008498:	08008cbc 	.word	0x08008cbc

0800849c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b082      	sub	sp, #8
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	4603      	mov	r3, r0
 80084a4:	6039      	str	r1, [r7, #0]
 80084a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80084a8:	683a      	ldr	r2, [r7, #0]
 80084aa:	4904      	ldr	r1, [pc, #16]	; (80084bc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80084ac:	4804      	ldr	r0, [pc, #16]	; (80084c0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80084ae:	f7ff fe03 	bl	80080b8 <USBD_GetString>
  return USBD_StrDesc;
 80084b2:	4b02      	ldr	r3, [pc, #8]	; (80084bc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	3708      	adds	r7, #8
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}
 80084bc:	20000ca4 	.word	0x20000ca4
 80084c0:	08008cd0 	.word	0x08008cd0

080084c4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b082      	sub	sp, #8
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	4603      	mov	r3, r0
 80084cc:	6039      	str	r1, [r7, #0]
 80084ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	221a      	movs	r2, #26
 80084d4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80084d6:	f000 f843 	bl	8008560 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80084da:	4b02      	ldr	r3, [pc, #8]	; (80084e4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80084dc:	4618      	mov	r0, r3
 80084de:	3708      	adds	r7, #8
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}
 80084e4:	200000e0 	.word	0x200000e0

080084e8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b082      	sub	sp, #8
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	4603      	mov	r3, r0
 80084f0:	6039      	str	r1, [r7, #0]
 80084f2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80084f4:	79fb      	ldrb	r3, [r7, #7]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d105      	bne.n	8008506 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80084fa:	683a      	ldr	r2, [r7, #0]
 80084fc:	4907      	ldr	r1, [pc, #28]	; (800851c <USBD_FS_ConfigStrDescriptor+0x34>)
 80084fe:	4808      	ldr	r0, [pc, #32]	; (8008520 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008500:	f7ff fdda 	bl	80080b8 <USBD_GetString>
 8008504:	e004      	b.n	8008510 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008506:	683a      	ldr	r2, [r7, #0]
 8008508:	4904      	ldr	r1, [pc, #16]	; (800851c <USBD_FS_ConfigStrDescriptor+0x34>)
 800850a:	4805      	ldr	r0, [pc, #20]	; (8008520 <USBD_FS_ConfigStrDescriptor+0x38>)
 800850c:	f7ff fdd4 	bl	80080b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008510:	4b02      	ldr	r3, [pc, #8]	; (800851c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008512:	4618      	mov	r0, r3
 8008514:	3708      	adds	r7, #8
 8008516:	46bd      	mov	sp, r7
 8008518:	bd80      	pop	{r7, pc}
 800851a:	bf00      	nop
 800851c:	20000ca4 	.word	0x20000ca4
 8008520:	08008ce4 	.word	0x08008ce4

08008524 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b082      	sub	sp, #8
 8008528:	af00      	add	r7, sp, #0
 800852a:	4603      	mov	r3, r0
 800852c:	6039      	str	r1, [r7, #0]
 800852e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008530:	79fb      	ldrb	r3, [r7, #7]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d105      	bne.n	8008542 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008536:	683a      	ldr	r2, [r7, #0]
 8008538:	4907      	ldr	r1, [pc, #28]	; (8008558 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800853a:	4808      	ldr	r0, [pc, #32]	; (800855c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800853c:	f7ff fdbc 	bl	80080b8 <USBD_GetString>
 8008540:	e004      	b.n	800854c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008542:	683a      	ldr	r2, [r7, #0]
 8008544:	4904      	ldr	r1, [pc, #16]	; (8008558 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008546:	4805      	ldr	r0, [pc, #20]	; (800855c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008548:	f7ff fdb6 	bl	80080b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800854c:	4b02      	ldr	r3, [pc, #8]	; (8008558 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800854e:	4618      	mov	r0, r3
 8008550:	3708      	adds	r7, #8
 8008552:	46bd      	mov	sp, r7
 8008554:	bd80      	pop	{r7, pc}
 8008556:	bf00      	nop
 8008558:	20000ca4 	.word	0x20000ca4
 800855c:	08008cf0 	.word	0x08008cf0

08008560 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b084      	sub	sp, #16
 8008564:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008566:	4b0f      	ldr	r3, [pc, #60]	; (80085a4 <Get_SerialNum+0x44>)
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800856c:	4b0e      	ldr	r3, [pc, #56]	; (80085a8 <Get_SerialNum+0x48>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008572:	4b0e      	ldr	r3, [pc, #56]	; (80085ac <Get_SerialNum+0x4c>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008578:	68fa      	ldr	r2, [r7, #12]
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	4413      	add	r3, r2
 800857e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d009      	beq.n	800859a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008586:	2208      	movs	r2, #8
 8008588:	4909      	ldr	r1, [pc, #36]	; (80085b0 <Get_SerialNum+0x50>)
 800858a:	68f8      	ldr	r0, [r7, #12]
 800858c:	f000 f814 	bl	80085b8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008590:	2204      	movs	r2, #4
 8008592:	4908      	ldr	r1, [pc, #32]	; (80085b4 <Get_SerialNum+0x54>)
 8008594:	68b8      	ldr	r0, [r7, #8]
 8008596:	f000 f80f 	bl	80085b8 <IntToUnicode>
  }
}
 800859a:	bf00      	nop
 800859c:	3710      	adds	r7, #16
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}
 80085a2:	bf00      	nop
 80085a4:	1fff7a10 	.word	0x1fff7a10
 80085a8:	1fff7a14 	.word	0x1fff7a14
 80085ac:	1fff7a18 	.word	0x1fff7a18
 80085b0:	200000e2 	.word	0x200000e2
 80085b4:	200000f2 	.word	0x200000f2

080085b8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80085b8:	b480      	push	{r7}
 80085ba:	b087      	sub	sp, #28
 80085bc:	af00      	add	r7, sp, #0
 80085be:	60f8      	str	r0, [r7, #12]
 80085c0:	60b9      	str	r1, [r7, #8]
 80085c2:	4613      	mov	r3, r2
 80085c4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80085c6:	2300      	movs	r3, #0
 80085c8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80085ca:	2300      	movs	r3, #0
 80085cc:	75fb      	strb	r3, [r7, #23]
 80085ce:	e027      	b.n	8008620 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	0f1b      	lsrs	r3, r3, #28
 80085d4:	2b09      	cmp	r3, #9
 80085d6:	d80b      	bhi.n	80085f0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	0f1b      	lsrs	r3, r3, #28
 80085dc:	b2da      	uxtb	r2, r3
 80085de:	7dfb      	ldrb	r3, [r7, #23]
 80085e0:	005b      	lsls	r3, r3, #1
 80085e2:	4619      	mov	r1, r3
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	440b      	add	r3, r1
 80085e8:	3230      	adds	r2, #48	; 0x30
 80085ea:	b2d2      	uxtb	r2, r2
 80085ec:	701a      	strb	r2, [r3, #0]
 80085ee:	e00a      	b.n	8008606 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	0f1b      	lsrs	r3, r3, #28
 80085f4:	b2da      	uxtb	r2, r3
 80085f6:	7dfb      	ldrb	r3, [r7, #23]
 80085f8:	005b      	lsls	r3, r3, #1
 80085fa:	4619      	mov	r1, r3
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	440b      	add	r3, r1
 8008600:	3237      	adds	r2, #55	; 0x37
 8008602:	b2d2      	uxtb	r2, r2
 8008604:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	011b      	lsls	r3, r3, #4
 800860a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800860c:	7dfb      	ldrb	r3, [r7, #23]
 800860e:	005b      	lsls	r3, r3, #1
 8008610:	3301      	adds	r3, #1
 8008612:	68ba      	ldr	r2, [r7, #8]
 8008614:	4413      	add	r3, r2
 8008616:	2200      	movs	r2, #0
 8008618:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800861a:	7dfb      	ldrb	r3, [r7, #23]
 800861c:	3301      	adds	r3, #1
 800861e:	75fb      	strb	r3, [r7, #23]
 8008620:	7dfa      	ldrb	r2, [r7, #23]
 8008622:	79fb      	ldrb	r3, [r7, #7]
 8008624:	429a      	cmp	r2, r3
 8008626:	d3d3      	bcc.n	80085d0 <IntToUnicode+0x18>
  }
}
 8008628:	bf00      	nop
 800862a:	bf00      	nop
 800862c:	371c      	adds	r7, #28
 800862e:	46bd      	mov	sp, r7
 8008630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008634:	4770      	bx	lr
	...

08008638 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b08a      	sub	sp, #40	; 0x28
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008640:	f107 0314 	add.w	r3, r7, #20
 8008644:	2200      	movs	r2, #0
 8008646:	601a      	str	r2, [r3, #0]
 8008648:	605a      	str	r2, [r3, #4]
 800864a:	609a      	str	r2, [r3, #8]
 800864c:	60da      	str	r2, [r3, #12]
 800864e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008658:	d13a      	bne.n	80086d0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800865a:	2300      	movs	r3, #0
 800865c:	613b      	str	r3, [r7, #16]
 800865e:	4b1e      	ldr	r3, [pc, #120]	; (80086d8 <HAL_PCD_MspInit+0xa0>)
 8008660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008662:	4a1d      	ldr	r2, [pc, #116]	; (80086d8 <HAL_PCD_MspInit+0xa0>)
 8008664:	f043 0301 	orr.w	r3, r3, #1
 8008668:	6313      	str	r3, [r2, #48]	; 0x30
 800866a:	4b1b      	ldr	r3, [pc, #108]	; (80086d8 <HAL_PCD_MspInit+0xa0>)
 800866c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800866e:	f003 0301 	and.w	r3, r3, #1
 8008672:	613b      	str	r3, [r7, #16]
 8008674:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008676:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800867a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800867c:	2302      	movs	r3, #2
 800867e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008680:	2300      	movs	r3, #0
 8008682:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008684:	2303      	movs	r3, #3
 8008686:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008688:	230a      	movs	r3, #10
 800868a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800868c:	f107 0314 	add.w	r3, r7, #20
 8008690:	4619      	mov	r1, r3
 8008692:	4812      	ldr	r0, [pc, #72]	; (80086dc <HAL_PCD_MspInit+0xa4>)
 8008694:	f7f8 fb88 	bl	8000da8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008698:	4b0f      	ldr	r3, [pc, #60]	; (80086d8 <HAL_PCD_MspInit+0xa0>)
 800869a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800869c:	4a0e      	ldr	r2, [pc, #56]	; (80086d8 <HAL_PCD_MspInit+0xa0>)
 800869e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086a2:	6353      	str	r3, [r2, #52]	; 0x34
 80086a4:	2300      	movs	r3, #0
 80086a6:	60fb      	str	r3, [r7, #12]
 80086a8:	4b0b      	ldr	r3, [pc, #44]	; (80086d8 <HAL_PCD_MspInit+0xa0>)
 80086aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086ac:	4a0a      	ldr	r2, [pc, #40]	; (80086d8 <HAL_PCD_MspInit+0xa0>)
 80086ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80086b2:	6453      	str	r3, [r2, #68]	; 0x44
 80086b4:	4b08      	ldr	r3, [pc, #32]	; (80086d8 <HAL_PCD_MspInit+0xa0>)
 80086b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80086bc:	60fb      	str	r3, [r7, #12]
 80086be:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80086c0:	2200      	movs	r2, #0
 80086c2:	2100      	movs	r1, #0
 80086c4:	2043      	movs	r0, #67	; 0x43
 80086c6:	f7f8 fb08 	bl	8000cda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80086ca:	2043      	movs	r0, #67	; 0x43
 80086cc:	f7f8 fb21 	bl	8000d12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80086d0:	bf00      	nop
 80086d2:	3728      	adds	r7, #40	; 0x28
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bd80      	pop	{r7, pc}
 80086d8:	40023800 	.word	0x40023800
 80086dc:	40020000 	.word	0x40020000

080086e0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b082      	sub	sp, #8
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80086f4:	4619      	mov	r1, r3
 80086f6:	4610      	mov	r0, r2
 80086f8:	f7fe fb7f 	bl	8006dfa <USBD_LL_SetupStage>
}
 80086fc:	bf00      	nop
 80086fe:	3708      	adds	r7, #8
 8008700:	46bd      	mov	sp, r7
 8008702:	bd80      	pop	{r7, pc}

08008704 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b082      	sub	sp, #8
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
 800870c:	460b      	mov	r3, r1
 800870e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008716:	78fa      	ldrb	r2, [r7, #3]
 8008718:	6879      	ldr	r1, [r7, #4]
 800871a:	4613      	mov	r3, r2
 800871c:	00db      	lsls	r3, r3, #3
 800871e:	4413      	add	r3, r2
 8008720:	009b      	lsls	r3, r3, #2
 8008722:	440b      	add	r3, r1
 8008724:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008728:	681a      	ldr	r2, [r3, #0]
 800872a:	78fb      	ldrb	r3, [r7, #3]
 800872c:	4619      	mov	r1, r3
 800872e:	f7fe fbb9 	bl	8006ea4 <USBD_LL_DataOutStage>
}
 8008732:	bf00      	nop
 8008734:	3708      	adds	r7, #8
 8008736:	46bd      	mov	sp, r7
 8008738:	bd80      	pop	{r7, pc}

0800873a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800873a:	b580      	push	{r7, lr}
 800873c:	b082      	sub	sp, #8
 800873e:	af00      	add	r7, sp, #0
 8008740:	6078      	str	r0, [r7, #4]
 8008742:	460b      	mov	r3, r1
 8008744:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800874c:	78fa      	ldrb	r2, [r7, #3]
 800874e:	6879      	ldr	r1, [r7, #4]
 8008750:	4613      	mov	r3, r2
 8008752:	00db      	lsls	r3, r3, #3
 8008754:	4413      	add	r3, r2
 8008756:	009b      	lsls	r3, r3, #2
 8008758:	440b      	add	r3, r1
 800875a:	334c      	adds	r3, #76	; 0x4c
 800875c:	681a      	ldr	r2, [r3, #0]
 800875e:	78fb      	ldrb	r3, [r7, #3]
 8008760:	4619      	mov	r1, r3
 8008762:	f7fe fc52 	bl	800700a <USBD_LL_DataInStage>
}
 8008766:	bf00      	nop
 8008768:	3708      	adds	r7, #8
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}

0800876e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800876e:	b580      	push	{r7, lr}
 8008770:	b082      	sub	sp, #8
 8008772:	af00      	add	r7, sp, #0
 8008774:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800877c:	4618      	mov	r0, r3
 800877e:	f7fe fd86 	bl	800728e <USBD_LL_SOF>
}
 8008782:	bf00      	nop
 8008784:	3708      	adds	r7, #8
 8008786:	46bd      	mov	sp, r7
 8008788:	bd80      	pop	{r7, pc}

0800878a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800878a:	b580      	push	{r7, lr}
 800878c:	b084      	sub	sp, #16
 800878e:	af00      	add	r7, sp, #0
 8008790:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008792:	2301      	movs	r3, #1
 8008794:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	68db      	ldr	r3, [r3, #12]
 800879a:	2b02      	cmp	r3, #2
 800879c:	d001      	beq.n	80087a2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800879e:	f7f7 ffdd 	bl	800075c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80087a8:	7bfa      	ldrb	r2, [r7, #15]
 80087aa:	4611      	mov	r1, r2
 80087ac:	4618      	mov	r0, r3
 80087ae:	f7fe fd30 	bl	8007212 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80087b8:	4618      	mov	r0, r3
 80087ba:	f7fe fcd8 	bl	800716e <USBD_LL_Reset>
}
 80087be:	bf00      	nop
 80087c0:	3710      	adds	r7, #16
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}
	...

080087c8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b082      	sub	sp, #8
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80087d6:	4618      	mov	r0, r3
 80087d8:	f7fe fd2b 	bl	8007232 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	687a      	ldr	r2, [r7, #4]
 80087e8:	6812      	ldr	r2, [r2, #0]
 80087ea:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80087ee:	f043 0301 	orr.w	r3, r3, #1
 80087f2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6a1b      	ldr	r3, [r3, #32]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d005      	beq.n	8008808 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80087fc:	4b04      	ldr	r3, [pc, #16]	; (8008810 <HAL_PCD_SuspendCallback+0x48>)
 80087fe:	691b      	ldr	r3, [r3, #16]
 8008800:	4a03      	ldr	r2, [pc, #12]	; (8008810 <HAL_PCD_SuspendCallback+0x48>)
 8008802:	f043 0306 	orr.w	r3, r3, #6
 8008806:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008808:	bf00      	nop
 800880a:	3708      	adds	r7, #8
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}
 8008810:	e000ed00 	.word	0xe000ed00

08008814 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b082      	sub	sp, #8
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008822:	4618      	mov	r0, r3
 8008824:	f7fe fd1b 	bl	800725e <USBD_LL_Resume>
}
 8008828:	bf00      	nop
 800882a:	3708      	adds	r7, #8
 800882c:	46bd      	mov	sp, r7
 800882e:	bd80      	pop	{r7, pc}

08008830 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b082      	sub	sp, #8
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
 8008838:	460b      	mov	r3, r1
 800883a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008842:	78fa      	ldrb	r2, [r7, #3]
 8008844:	4611      	mov	r1, r2
 8008846:	4618      	mov	r0, r3
 8008848:	f7fe fd73 	bl	8007332 <USBD_LL_IsoOUTIncomplete>
}
 800884c:	bf00      	nop
 800884e:	3708      	adds	r7, #8
 8008850:	46bd      	mov	sp, r7
 8008852:	bd80      	pop	{r7, pc}

08008854 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b082      	sub	sp, #8
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
 800885c:	460b      	mov	r3, r1
 800885e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008866:	78fa      	ldrb	r2, [r7, #3]
 8008868:	4611      	mov	r1, r2
 800886a:	4618      	mov	r0, r3
 800886c:	f7fe fd2f 	bl	80072ce <USBD_LL_IsoINIncomplete>
}
 8008870:	bf00      	nop
 8008872:	3708      	adds	r7, #8
 8008874:	46bd      	mov	sp, r7
 8008876:	bd80      	pop	{r7, pc}

08008878 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b082      	sub	sp, #8
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008886:	4618      	mov	r0, r3
 8008888:	f7fe fd85 	bl	8007396 <USBD_LL_DevConnected>
}
 800888c:	bf00      	nop
 800888e:	3708      	adds	r7, #8
 8008890:	46bd      	mov	sp, r7
 8008892:	bd80      	pop	{r7, pc}

08008894 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b082      	sub	sp, #8
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80088a2:	4618      	mov	r0, r3
 80088a4:	f7fe fd82 	bl	80073ac <USBD_LL_DevDisconnected>
}
 80088a8:	bf00      	nop
 80088aa:	3708      	adds	r7, #8
 80088ac:	46bd      	mov	sp, r7
 80088ae:	bd80      	pop	{r7, pc}

080088b0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b082      	sub	sp, #8
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	781b      	ldrb	r3, [r3, #0]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d13c      	bne.n	800893a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80088c0:	4a20      	ldr	r2, [pc, #128]	; (8008944 <USBD_LL_Init+0x94>)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	4a1e      	ldr	r2, [pc, #120]	; (8008944 <USBD_LL_Init+0x94>)
 80088cc:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80088d0:	4b1c      	ldr	r3, [pc, #112]	; (8008944 <USBD_LL_Init+0x94>)
 80088d2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80088d6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80088d8:	4b1a      	ldr	r3, [pc, #104]	; (8008944 <USBD_LL_Init+0x94>)
 80088da:	2204      	movs	r2, #4
 80088dc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80088de:	4b19      	ldr	r3, [pc, #100]	; (8008944 <USBD_LL_Init+0x94>)
 80088e0:	2202      	movs	r2, #2
 80088e2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80088e4:	4b17      	ldr	r3, [pc, #92]	; (8008944 <USBD_LL_Init+0x94>)
 80088e6:	2200      	movs	r2, #0
 80088e8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80088ea:	4b16      	ldr	r3, [pc, #88]	; (8008944 <USBD_LL_Init+0x94>)
 80088ec:	2202      	movs	r2, #2
 80088ee:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80088f0:	4b14      	ldr	r3, [pc, #80]	; (8008944 <USBD_LL_Init+0x94>)
 80088f2:	2200      	movs	r2, #0
 80088f4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80088f6:	4b13      	ldr	r3, [pc, #76]	; (8008944 <USBD_LL_Init+0x94>)
 80088f8:	2200      	movs	r2, #0
 80088fa:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80088fc:	4b11      	ldr	r3, [pc, #68]	; (8008944 <USBD_LL_Init+0x94>)
 80088fe:	2200      	movs	r2, #0
 8008900:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008902:	4b10      	ldr	r3, [pc, #64]	; (8008944 <USBD_LL_Init+0x94>)
 8008904:	2200      	movs	r2, #0
 8008906:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008908:	4b0e      	ldr	r3, [pc, #56]	; (8008944 <USBD_LL_Init+0x94>)
 800890a:	2200      	movs	r2, #0
 800890c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800890e:	480d      	ldr	r0, [pc, #52]	; (8008944 <USBD_LL_Init+0x94>)
 8008910:	f7fa fa21 	bl	8002d56 <HAL_PCD_Init>
 8008914:	4603      	mov	r3, r0
 8008916:	2b00      	cmp	r3, #0
 8008918:	d001      	beq.n	800891e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800891a:	f7f7 ff1f 	bl	800075c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800891e:	2180      	movs	r1, #128	; 0x80
 8008920:	4808      	ldr	r0, [pc, #32]	; (8008944 <USBD_LL_Init+0x94>)
 8008922:	f7fb fc78 	bl	8004216 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008926:	2240      	movs	r2, #64	; 0x40
 8008928:	2100      	movs	r1, #0
 800892a:	4806      	ldr	r0, [pc, #24]	; (8008944 <USBD_LL_Init+0x94>)
 800892c:	f7fb fc2c 	bl	8004188 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008930:	2280      	movs	r2, #128	; 0x80
 8008932:	2101      	movs	r1, #1
 8008934:	4803      	ldr	r0, [pc, #12]	; (8008944 <USBD_LL_Init+0x94>)
 8008936:	f7fb fc27 	bl	8004188 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800893a:	2300      	movs	r3, #0
}
 800893c:	4618      	mov	r0, r3
 800893e:	3708      	adds	r7, #8
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}
 8008944:	20000ea4 	.word	0x20000ea4

08008948 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b084      	sub	sp, #16
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008950:	2300      	movs	r3, #0
 8008952:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008954:	2300      	movs	r3, #0
 8008956:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800895e:	4618      	mov	r0, r3
 8008960:	f7fa fb16 	bl	8002f90 <HAL_PCD_Start>
 8008964:	4603      	mov	r3, r0
 8008966:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008968:	7bfb      	ldrb	r3, [r7, #15]
 800896a:	4618      	mov	r0, r3
 800896c:	f000 f942 	bl	8008bf4 <USBD_Get_USB_Status>
 8008970:	4603      	mov	r3, r0
 8008972:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008974:	7bbb      	ldrb	r3, [r7, #14]
}
 8008976:	4618      	mov	r0, r3
 8008978:	3710      	adds	r7, #16
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}

0800897e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800897e:	b580      	push	{r7, lr}
 8008980:	b084      	sub	sp, #16
 8008982:	af00      	add	r7, sp, #0
 8008984:	6078      	str	r0, [r7, #4]
 8008986:	4608      	mov	r0, r1
 8008988:	4611      	mov	r1, r2
 800898a:	461a      	mov	r2, r3
 800898c:	4603      	mov	r3, r0
 800898e:	70fb      	strb	r3, [r7, #3]
 8008990:	460b      	mov	r3, r1
 8008992:	70bb      	strb	r3, [r7, #2]
 8008994:	4613      	mov	r3, r2
 8008996:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008998:	2300      	movs	r3, #0
 800899a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800899c:	2300      	movs	r3, #0
 800899e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80089a6:	78bb      	ldrb	r3, [r7, #2]
 80089a8:	883a      	ldrh	r2, [r7, #0]
 80089aa:	78f9      	ldrb	r1, [r7, #3]
 80089ac:	f7fa ffe7 	bl	800397e <HAL_PCD_EP_Open>
 80089b0:	4603      	mov	r3, r0
 80089b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089b4:	7bfb      	ldrb	r3, [r7, #15]
 80089b6:	4618      	mov	r0, r3
 80089b8:	f000 f91c 	bl	8008bf4 <USBD_Get_USB_Status>
 80089bc:	4603      	mov	r3, r0
 80089be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80089c2:	4618      	mov	r0, r3
 80089c4:	3710      	adds	r7, #16
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}

080089ca <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80089ca:	b580      	push	{r7, lr}
 80089cc:	b084      	sub	sp, #16
 80089ce:	af00      	add	r7, sp, #0
 80089d0:	6078      	str	r0, [r7, #4]
 80089d2:	460b      	mov	r3, r1
 80089d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089d6:	2300      	movs	r3, #0
 80089d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089da:	2300      	movs	r3, #0
 80089dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80089e4:	78fa      	ldrb	r2, [r7, #3]
 80089e6:	4611      	mov	r1, r2
 80089e8:	4618      	mov	r0, r3
 80089ea:	f7fb f830 	bl	8003a4e <HAL_PCD_EP_Close>
 80089ee:	4603      	mov	r3, r0
 80089f0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089f2:	7bfb      	ldrb	r3, [r7, #15]
 80089f4:	4618      	mov	r0, r3
 80089f6:	f000 f8fd 	bl	8008bf4 <USBD_Get_USB_Status>
 80089fa:	4603      	mov	r3, r0
 80089fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a00:	4618      	mov	r0, r3
 8008a02:	3710      	adds	r7, #16
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}

08008a08 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b084      	sub	sp, #16
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
 8008a10:	460b      	mov	r3, r1
 8008a12:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a14:	2300      	movs	r3, #0
 8008a16:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a18:	2300      	movs	r3, #0
 8008a1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008a22:	78fa      	ldrb	r2, [r7, #3]
 8008a24:	4611      	mov	r1, r2
 8008a26:	4618      	mov	r0, r3
 8008a28:	f7fb f908 	bl	8003c3c <HAL_PCD_EP_SetStall>
 8008a2c:	4603      	mov	r3, r0
 8008a2e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a30:	7bfb      	ldrb	r3, [r7, #15]
 8008a32:	4618      	mov	r0, r3
 8008a34:	f000 f8de 	bl	8008bf4 <USBD_Get_USB_Status>
 8008a38:	4603      	mov	r3, r0
 8008a3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a3c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	3710      	adds	r7, #16
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd80      	pop	{r7, pc}

08008a46 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a46:	b580      	push	{r7, lr}
 8008a48:	b084      	sub	sp, #16
 8008a4a:	af00      	add	r7, sp, #0
 8008a4c:	6078      	str	r0, [r7, #4]
 8008a4e:	460b      	mov	r3, r1
 8008a50:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a52:	2300      	movs	r3, #0
 8008a54:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a56:	2300      	movs	r3, #0
 8008a58:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008a60:	78fa      	ldrb	r2, [r7, #3]
 8008a62:	4611      	mov	r1, r2
 8008a64:	4618      	mov	r0, r3
 8008a66:	f7fb f94d 	bl	8003d04 <HAL_PCD_EP_ClrStall>
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a6e:	7bfb      	ldrb	r3, [r7, #15]
 8008a70:	4618      	mov	r0, r3
 8008a72:	f000 f8bf 	bl	8008bf4 <USBD_Get_USB_Status>
 8008a76:	4603      	mov	r3, r0
 8008a78:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a7a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	3710      	adds	r7, #16
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bd80      	pop	{r7, pc}

08008a84 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a84:	b480      	push	{r7}
 8008a86:	b085      	sub	sp, #20
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
 8008a8c:	460b      	mov	r3, r1
 8008a8e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008a96:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008a98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	da0b      	bge.n	8008ab8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008aa0:	78fb      	ldrb	r3, [r7, #3]
 8008aa2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008aa6:	68f9      	ldr	r1, [r7, #12]
 8008aa8:	4613      	mov	r3, r2
 8008aaa:	00db      	lsls	r3, r3, #3
 8008aac:	4413      	add	r3, r2
 8008aae:	009b      	lsls	r3, r3, #2
 8008ab0:	440b      	add	r3, r1
 8008ab2:	333e      	adds	r3, #62	; 0x3e
 8008ab4:	781b      	ldrb	r3, [r3, #0]
 8008ab6:	e00b      	b.n	8008ad0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008ab8:	78fb      	ldrb	r3, [r7, #3]
 8008aba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008abe:	68f9      	ldr	r1, [r7, #12]
 8008ac0:	4613      	mov	r3, r2
 8008ac2:	00db      	lsls	r3, r3, #3
 8008ac4:	4413      	add	r3, r2
 8008ac6:	009b      	lsls	r3, r3, #2
 8008ac8:	440b      	add	r3, r1
 8008aca:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8008ace:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	3714      	adds	r7, #20
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ada:	4770      	bx	lr

08008adc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b084      	sub	sp, #16
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
 8008ae4:	460b      	mov	r3, r1
 8008ae6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ae8:	2300      	movs	r3, #0
 8008aea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008aec:	2300      	movs	r3, #0
 8008aee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008af6:	78fa      	ldrb	r2, [r7, #3]
 8008af8:	4611      	mov	r1, r2
 8008afa:	4618      	mov	r0, r3
 8008afc:	f7fa ff1a 	bl	8003934 <HAL_PCD_SetAddress>
 8008b00:	4603      	mov	r3, r0
 8008b02:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b04:	7bfb      	ldrb	r3, [r7, #15]
 8008b06:	4618      	mov	r0, r3
 8008b08:	f000 f874 	bl	8008bf4 <USBD_Get_USB_Status>
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b10:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b12:	4618      	mov	r0, r3
 8008b14:	3710      	adds	r7, #16
 8008b16:	46bd      	mov	sp, r7
 8008b18:	bd80      	pop	{r7, pc}

08008b1a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008b1a:	b580      	push	{r7, lr}
 8008b1c:	b086      	sub	sp, #24
 8008b1e:	af00      	add	r7, sp, #0
 8008b20:	60f8      	str	r0, [r7, #12]
 8008b22:	607a      	str	r2, [r7, #4]
 8008b24:	603b      	str	r3, [r7, #0]
 8008b26:	460b      	mov	r3, r1
 8008b28:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b2e:	2300      	movs	r3, #0
 8008b30:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008b38:	7af9      	ldrb	r1, [r7, #11]
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	687a      	ldr	r2, [r7, #4]
 8008b3e:	f7fb f833 	bl	8003ba8 <HAL_PCD_EP_Transmit>
 8008b42:	4603      	mov	r3, r0
 8008b44:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b46:	7dfb      	ldrb	r3, [r7, #23]
 8008b48:	4618      	mov	r0, r3
 8008b4a:	f000 f853 	bl	8008bf4 <USBD_Get_USB_Status>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008b52:	7dbb      	ldrb	r3, [r7, #22]
}
 8008b54:	4618      	mov	r0, r3
 8008b56:	3718      	adds	r7, #24
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bd80      	pop	{r7, pc}

08008b5c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b086      	sub	sp, #24
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	60f8      	str	r0, [r7, #12]
 8008b64:	607a      	str	r2, [r7, #4]
 8008b66:	603b      	str	r3, [r7, #0]
 8008b68:	460b      	mov	r3, r1
 8008b6a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b70:	2300      	movs	r3, #0
 8008b72:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008b7a:	7af9      	ldrb	r1, [r7, #11]
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	687a      	ldr	r2, [r7, #4]
 8008b80:	f7fa ffaf 	bl	8003ae2 <HAL_PCD_EP_Receive>
 8008b84:	4603      	mov	r3, r0
 8008b86:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b88:	7dfb      	ldrb	r3, [r7, #23]
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f000 f832 	bl	8008bf4 <USBD_Get_USB_Status>
 8008b90:	4603      	mov	r3, r0
 8008b92:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008b94:	7dbb      	ldrb	r3, [r7, #22]
}
 8008b96:	4618      	mov	r0, r3
 8008b98:	3718      	adds	r7, #24
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bd80      	pop	{r7, pc}

08008b9e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b9e:	b580      	push	{r7, lr}
 8008ba0:	b082      	sub	sp, #8
 8008ba2:	af00      	add	r7, sp, #0
 8008ba4:	6078      	str	r0, [r7, #4]
 8008ba6:	460b      	mov	r3, r1
 8008ba8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008bb0:	78fa      	ldrb	r2, [r7, #3]
 8008bb2:	4611      	mov	r1, r2
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	f7fa ffdf 	bl	8003b78 <HAL_PCD_EP_GetRxCount>
 8008bba:	4603      	mov	r3, r0
}
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	3708      	adds	r7, #8
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	bd80      	pop	{r7, pc}

08008bc4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	b083      	sub	sp, #12
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008bcc:	4b03      	ldr	r3, [pc, #12]	; (8008bdc <USBD_static_malloc+0x18>)
}
 8008bce:	4618      	mov	r0, r3
 8008bd0:	370c      	adds	r7, #12
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd8:	4770      	bx	lr
 8008bda:	bf00      	nop
 8008bdc:	200013b0 	.word	0x200013b0

08008be0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008be0:	b480      	push	{r7}
 8008be2:	b083      	sub	sp, #12
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]

}
 8008be8:	bf00      	nop
 8008bea:	370c      	adds	r7, #12
 8008bec:	46bd      	mov	sp, r7
 8008bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf2:	4770      	bx	lr

08008bf4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008bf4:	b480      	push	{r7}
 8008bf6:	b085      	sub	sp, #20
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bfe:	2300      	movs	r3, #0
 8008c00:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008c02:	79fb      	ldrb	r3, [r7, #7]
 8008c04:	2b03      	cmp	r3, #3
 8008c06:	d817      	bhi.n	8008c38 <USBD_Get_USB_Status+0x44>
 8008c08:	a201      	add	r2, pc, #4	; (adr r2, 8008c10 <USBD_Get_USB_Status+0x1c>)
 8008c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c0e:	bf00      	nop
 8008c10:	08008c21 	.word	0x08008c21
 8008c14:	08008c27 	.word	0x08008c27
 8008c18:	08008c2d 	.word	0x08008c2d
 8008c1c:	08008c33 	.word	0x08008c33
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008c20:	2300      	movs	r3, #0
 8008c22:	73fb      	strb	r3, [r7, #15]
    break;
 8008c24:	e00b      	b.n	8008c3e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008c26:	2303      	movs	r3, #3
 8008c28:	73fb      	strb	r3, [r7, #15]
    break;
 8008c2a:	e008      	b.n	8008c3e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	73fb      	strb	r3, [r7, #15]
    break;
 8008c30:	e005      	b.n	8008c3e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008c32:	2303      	movs	r3, #3
 8008c34:	73fb      	strb	r3, [r7, #15]
    break;
 8008c36:	e002      	b.n	8008c3e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008c38:	2303      	movs	r3, #3
 8008c3a:	73fb      	strb	r3, [r7, #15]
    break;
 8008c3c:	bf00      	nop
  }
  return usb_status;
 8008c3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	3714      	adds	r7, #20
 8008c44:	46bd      	mov	sp, r7
 8008c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4a:	4770      	bx	lr

08008c4c <__libc_init_array>:
 8008c4c:	b570      	push	{r4, r5, r6, lr}
 8008c4e:	4d0d      	ldr	r5, [pc, #52]	; (8008c84 <__libc_init_array+0x38>)
 8008c50:	4c0d      	ldr	r4, [pc, #52]	; (8008c88 <__libc_init_array+0x3c>)
 8008c52:	1b64      	subs	r4, r4, r5
 8008c54:	10a4      	asrs	r4, r4, #2
 8008c56:	2600      	movs	r6, #0
 8008c58:	42a6      	cmp	r6, r4
 8008c5a:	d109      	bne.n	8008c70 <__libc_init_array+0x24>
 8008c5c:	4d0b      	ldr	r5, [pc, #44]	; (8008c8c <__libc_init_array+0x40>)
 8008c5e:	4c0c      	ldr	r4, [pc, #48]	; (8008c90 <__libc_init_array+0x44>)
 8008c60:	f000 f820 	bl	8008ca4 <_init>
 8008c64:	1b64      	subs	r4, r4, r5
 8008c66:	10a4      	asrs	r4, r4, #2
 8008c68:	2600      	movs	r6, #0
 8008c6a:	42a6      	cmp	r6, r4
 8008c6c:	d105      	bne.n	8008c7a <__libc_init_array+0x2e>
 8008c6e:	bd70      	pop	{r4, r5, r6, pc}
 8008c70:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c74:	4798      	blx	r3
 8008c76:	3601      	adds	r6, #1
 8008c78:	e7ee      	b.n	8008c58 <__libc_init_array+0xc>
 8008c7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c7e:	4798      	blx	r3
 8008c80:	3601      	adds	r6, #1
 8008c82:	e7f2      	b.n	8008c6a <__libc_init_array+0x1e>
 8008c84:	08008d20 	.word	0x08008d20
 8008c88:	08008d20 	.word	0x08008d20
 8008c8c:	08008d20 	.word	0x08008d20
 8008c90:	08008d24 	.word	0x08008d24

08008c94 <memset>:
 8008c94:	4402      	add	r2, r0
 8008c96:	4603      	mov	r3, r0
 8008c98:	4293      	cmp	r3, r2
 8008c9a:	d100      	bne.n	8008c9e <memset+0xa>
 8008c9c:	4770      	bx	lr
 8008c9e:	f803 1b01 	strb.w	r1, [r3], #1
 8008ca2:	e7f9      	b.n	8008c98 <memset+0x4>

08008ca4 <_init>:
 8008ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ca6:	bf00      	nop
 8008ca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008caa:	bc08      	pop	{r3}
 8008cac:	469e      	mov	lr, r3
 8008cae:	4770      	bx	lr

08008cb0 <_fini>:
 8008cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cb2:	bf00      	nop
 8008cb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cb6:	bc08      	pop	{r3}
 8008cb8:	469e      	mov	lr, r3
 8008cba:	4770      	bx	lr
