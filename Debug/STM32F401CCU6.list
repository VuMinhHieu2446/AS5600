
STM32F401CCU6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dd78  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  0800df18  0800df18  0001df18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e084  0800e084  00020164  2**0
                  CONTENTS
  4 .ARM          00000008  0800e084  0800e084  0001e084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e08c  0800e08c  00020164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e08c  0800e08c  0001e08c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e090  0800e090  0001e090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000164  20000000  0800e094  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000559c  20000164  0800e1f8  00020164  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005700  0800e1f8  00025700  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024209  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004eb4  00000000  00000000  0004439d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c98  00000000  00000000  00049258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ab8  00000000  00000000  0004aef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c6ae  00000000  00000000  0004c9a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025e49  00000000  00000000  00069056  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d71c  00000000  00000000  0008ee9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012c5bb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007dbc  00000000  00000000  0012c60c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000164 	.word	0x20000164
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800df00 	.word	0x0800df00

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000168 	.word	0x20000168
 80001dc:	0800df00 	.word	0x0800df00

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000594:	b480      	push	{r7}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0
 800059a:	60f8      	str	r0, [r7, #12]
 800059c:	60b9      	str	r1, [r7, #8]
 800059e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	4a07      	ldr	r2, [pc, #28]	; (80005c0 <vApplicationGetIdleTaskMemory+0x2c>)
 80005a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005a6:	68bb      	ldr	r3, [r7, #8]
 80005a8:	4a06      	ldr	r2, [pc, #24]	; (80005c4 <vApplicationGetIdleTaskMemory+0x30>)
 80005aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	2280      	movs	r2, #128	; 0x80
 80005b0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005b2:	bf00      	nop
 80005b4:	3714      	adds	r7, #20
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	20000180 	.word	0x20000180
 80005c4:	20000234 	.word	0x20000234

080005c8 <send_CDC>:
void send_CDC_text(char *text) {
    // Gửi chuỗi qua USB CDC
    CDC_Transmit_FS((uint8_t*)text, strlen(text));
}

void send_CDC(uint16_t angle_AS1, uint16_t angle_AS2, char *text1, char *text2, uint32_t time_print_data) {
 80005c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80005cc:	b08c      	sub	sp, #48	; 0x30
 80005ce:	af00      	add	r7, sp, #0
 80005d0:	60ba      	str	r2, [r7, #8]
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	4603      	mov	r3, r0
 80005d6:	81fb      	strh	r3, [r7, #14]
 80005d8:	460b      	mov	r3, r1
 80005da:	81bb      	strh	r3, [r7, #12]
 80005dc:	466b      	mov	r3, sp
 80005de:	469a      	mov	sl, r3
    // Chuyển số thành chuỗi
    char angle_AS1_str[2];  // �?ảm bảo đủ lớn để chứa chuỗi số
    sprintf(angle_AS1_str, "%d", angle_AS1);
 80005e0:	89fa      	ldrh	r2, [r7, #14]
 80005e2:	f107 0320 	add.w	r3, r7, #32
 80005e6:	4945      	ldr	r1, [pc, #276]	; (80006fc <send_CDC+0x134>)
 80005e8:	4618      	mov	r0, r3
 80005ea:	f00d f8b7 	bl	800d75c <siprintf>

    char angle_AS2_str[2];  // �?ảm bảo đủ lớn để chứa chuỗi số
    sprintf(angle_AS2_str, "%d", angle_AS2);
 80005ee:	89ba      	ldrh	r2, [r7, #12]
 80005f0:	f107 031c 	add.w	r3, r7, #28
 80005f4:	4941      	ldr	r1, [pc, #260]	; (80006fc <send_CDC+0x134>)
 80005f6:	4618      	mov	r0, r3
 80005f8:	f00d f8b0 	bl	800d75c <siprintf>

    char time_print_data_str[10];  // �?ảm bảo đủ lớn để chứa chuỗi số
    sprintf(time_print_data_str, "%lu", time_print_data);
 80005fc:	f107 0310 	add.w	r3, r7, #16
 8000600:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000602:	493f      	ldr	r1, [pc, #252]	; (8000700 <send_CDC+0x138>)
 8000604:	4618      	mov	r0, r3
 8000606:	f00d f8a9 	bl	800d75c <siprintf>

    // Tính tổng độ dài của chuỗi số và chuỗi văn bản
    int total_length = strlen(angle_AS1_str) + strlen(angle_AS2_str) + strlen(time_print_data_str) + strlen(text1) + strlen(text2) +2;
 800060a:	f107 0320 	add.w	r3, r7, #32
 800060e:	4618      	mov	r0, r3
 8000610:	f7ff fde6 	bl	80001e0 <strlen>
 8000614:	4606      	mov	r6, r0
 8000616:	f107 031c 	add.w	r3, r7, #28
 800061a:	4618      	mov	r0, r3
 800061c:	f7ff fde0 	bl	80001e0 <strlen>
 8000620:	4603      	mov	r3, r0
 8000622:	441e      	add	r6, r3
 8000624:	f107 0310 	add.w	r3, r7, #16
 8000628:	4618      	mov	r0, r3
 800062a:	f7ff fdd9 	bl	80001e0 <strlen>
 800062e:	4603      	mov	r3, r0
 8000630:	441e      	add	r6, r3
 8000632:	68b8      	ldr	r0, [r7, #8]
 8000634:	f7ff fdd4 	bl	80001e0 <strlen>
 8000638:	4603      	mov	r3, r0
 800063a:	441e      	add	r6, r3
 800063c:	6878      	ldr	r0, [r7, #4]
 800063e:	f7ff fdcf 	bl	80001e0 <strlen>
 8000642:	4603      	mov	r3, r0
 8000644:	4433      	add	r3, r6
 8000646:	3302      	adds	r3, #2
 8000648:	62fb      	str	r3, [r7, #44]	; 0x2c

    // Tạo một buffer để chứa cả hai chuỗi
    char buffer[total_length + 1];  // +1 cho ký tự kết thúc chuỗi '\0'
 800064a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800064c:	1c59      	adds	r1, r3, #1
 800064e:	1e4b      	subs	r3, r1, #1
 8000650:	62bb      	str	r3, [r7, #40]	; 0x28
 8000652:	460a      	mov	r2, r1
 8000654:	2300      	movs	r3, #0
 8000656:	4690      	mov	r8, r2
 8000658:	4699      	mov	r9, r3
 800065a:	f04f 0200 	mov.w	r2, #0
 800065e:	f04f 0300 	mov.w	r3, #0
 8000662:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000666:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800066a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800066e:	460a      	mov	r2, r1
 8000670:	2300      	movs	r3, #0
 8000672:	4614      	mov	r4, r2
 8000674:	461d      	mov	r5, r3
 8000676:	f04f 0200 	mov.w	r2, #0
 800067a:	f04f 0300 	mov.w	r3, #0
 800067e:	00eb      	lsls	r3, r5, #3
 8000680:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000684:	00e2      	lsls	r2, r4, #3
 8000686:	460b      	mov	r3, r1
 8000688:	3307      	adds	r3, #7
 800068a:	08db      	lsrs	r3, r3, #3
 800068c:	00db      	lsls	r3, r3, #3
 800068e:	ebad 0d03 	sub.w	sp, sp, r3
 8000692:	466b      	mov	r3, sp
 8000694:	3300      	adds	r3, #0
 8000696:	627b      	str	r3, [r7, #36]	; 0x24

//    // Sao chép chuỗi số vào buffer
    strcpy(buffer, time_print_data_str);
 8000698:	f107 0310 	add.w	r3, r7, #16
 800069c:	4619      	mov	r1, r3
 800069e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80006a0:	f00d f88b 	bl	800d7ba <strcpy>

    // Nối chuỗi văn bản vào buffer
    strcat(buffer, text1);
 80006a4:	68b9      	ldr	r1, [r7, #8]
 80006a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80006a8:	f00d f878 	bl	800d79c <strcat>

    // Nối chuỗi văn bản vào buffer
    strcat(buffer, angle_AS1_str);
 80006ac:	f107 0320 	add.w	r3, r7, #32
 80006b0:	4619      	mov	r1, r3
 80006b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80006b4:	f00d f872 	bl	800d79c <strcat>
    // Nối chuỗi văn bản vào buffer
	strcat(buffer, text2);
 80006b8:	6879      	ldr	r1, [r7, #4]
 80006ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80006bc:	f00d f86e 	bl	800d79c <strcat>
	// Nối chuỗi văn bản vào buffer
	strcat(buffer, angle_AS2_str);
 80006c0:	f107 031c 	add.w	r3, r7, #28
 80006c4:	4619      	mov	r1, r3
 80006c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80006c8:	f00d f868 	bl	800d79c <strcat>

//	strcat(buffer, time_print_data_str);

	// Nối chuỗi văn bản vào buffer
	strcat(buffer, "\n");
 80006cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80006ce:	f7ff fd87 	bl	80001e0 <strlen>
 80006d2:	4603      	mov	r3, r0
 80006d4:	461a      	mov	r2, r3
 80006d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006d8:	4413      	add	r3, r2
 80006da:	490a      	ldr	r1, [pc, #40]	; (8000704 <send_CDC+0x13c>)
 80006dc:	461a      	mov	r2, r3
 80006de:	460b      	mov	r3, r1
 80006e0:	881b      	ldrh	r3, [r3, #0]
 80006e2:	8013      	strh	r3, [r2, #0]

    // Gửi buffer qua USB CDC
    CDC_Transmit_FS((uint8_t*)buffer, total_length);
 80006e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006e6:	b29b      	uxth	r3, r3
 80006e8:	4619      	mov	r1, r3
 80006ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80006ec:	f00c fa24 	bl	800cb38 <CDC_Transmit_FS>
 80006f0:	46d5      	mov	sp, sl
}
 80006f2:	bf00      	nop
 80006f4:	3730      	adds	r7, #48	; 0x30
 80006f6:	46bd      	mov	sp, r7
 80006f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006fc:	0800df24 	.word	0x0800df24
 8000700:	0800df28 	.word	0x0800df28
 8000704:	0800df2c 	.word	0x0800df2c

08000708 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000708:	b5b0      	push	{r4, r5, r7, lr}
 800070a:	b090      	sub	sp, #64	; 0x40
 800070c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800070e:	f000 fcc9 	bl	80010a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000712:	f000 f86b 	bl	80007ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000716:	f000 f95b 	bl	80009d0 <MX_GPIO_Init>
  MX_I2C1_Init();
 800071a:	f000 f8d3 	bl	80008c4 <MX_I2C1_Init>
  MX_I2C2_Init();
 800071e:	f000 f8ff 	bl	8000920 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8000722:	f000 f92b 	bl	800097c <MX_USART1_UART_Init>
//AS5600_Init(hi2c2);
  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of myMutex01 */
  osMutexDef(myMutex01);
 8000726:	2300      	movs	r3, #0
 8000728:	633b      	str	r3, [r7, #48]	; 0x30
 800072a:	2300      	movs	r3, #0
 800072c:	637b      	str	r3, [r7, #52]	; 0x34
  myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 800072e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000732:	4618      	mov	r0, r3
 8000734:	f009 fb87 	bl	8009e46 <osMutexCreate>
 8000738:	4603      	mov	r3, r0
 800073a:	4a20      	ldr	r2, [pc, #128]	; (80007bc <main+0xb4>)
 800073c:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of myQueue01 */
  osMessageQDef(myQueue01, 16, uint32_t);
 800073e:	4b20      	ldr	r3, [pc, #128]	; (80007c0 <main+0xb8>)
 8000740:	f107 0420 	add.w	r4, r7, #32
 8000744:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000746:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 800074a:	f107 0320 	add.w	r3, r7, #32
 800074e:	2100      	movs	r1, #0
 8000750:	4618      	mov	r0, r3
 8000752:	f009 fc15 	bl	8009f80 <osMessageCreate>
 8000756:	4603      	mov	r3, r0
 8000758:	4a1a      	ldr	r2, [pc, #104]	; (80007c4 <main+0xbc>)
 800075a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  myQueue02Handle = xQueueCreate(16, sizeof(uint16_t));
 800075c:	2200      	movs	r2, #0
 800075e:	2102      	movs	r1, #2
 8000760:	2010      	movs	r0, #16
 8000762:	f009 fe7d 	bl	800a460 <xQueueGenericCreate>
 8000766:	4603      	mov	r3, r0
 8000768:	4a17      	ldr	r2, [pc, #92]	; (80007c8 <main+0xc0>)
 800076a:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800076c:	4b17      	ldr	r3, [pc, #92]	; (80007cc <main+0xc4>)
 800076e:	1d3c      	adds	r4, r7, #4
 8000770:	461d      	mov	r5, r3
 8000772:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000774:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000776:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800077a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800077e:	1d3b      	adds	r3, r7, #4
 8000780:	2100      	movs	r1, #0
 8000782:	4618      	mov	r0, r3
 8000784:	f009 faff 	bl	8009d86 <osThreadCreate>
 8000788:	4603      	mov	r3, r0
 800078a:	4a11      	ldr	r2, [pc, #68]	; (80007d0 <main+0xc8>)
 800078c:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  xTaskCreate(AS1_AboveNormalTask, "Task AS5600_1", 128, NULL, osPriorityAboveNormal, &AS1_AboveNormalHandle);
 800078e:	4b11      	ldr	r3, [pc, #68]	; (80007d4 <main+0xcc>)
 8000790:	9301      	str	r3, [sp, #4]
 8000792:	2301      	movs	r3, #1
 8000794:	9300      	str	r3, [sp, #0]
 8000796:	2300      	movs	r3, #0
 8000798:	2280      	movs	r2, #128	; 0x80
 800079a:	490f      	ldr	r1, [pc, #60]	; (80007d8 <main+0xd0>)
 800079c:	480f      	ldr	r0, [pc, #60]	; (80007dc <main+0xd4>)
 800079e:	f00a fd1c 	bl	800b1da <xTaskCreate>
  xTaskCreate(AS2_AboveNormalTask, "Task AS5600_2", 128, NULL, osPriorityAboveNormal, &AS2_AboveNormalHandle);
 80007a2:	4b0f      	ldr	r3, [pc, #60]	; (80007e0 <main+0xd8>)
 80007a4:	9301      	str	r3, [sp, #4]
 80007a6:	2301      	movs	r3, #1
 80007a8:	9300      	str	r3, [sp, #0]
 80007aa:	2300      	movs	r3, #0
 80007ac:	2280      	movs	r2, #128	; 0x80
 80007ae:	490d      	ldr	r1, [pc, #52]	; (80007e4 <main+0xdc>)
 80007b0:	480d      	ldr	r0, [pc, #52]	; (80007e8 <main+0xe0>)
 80007b2:	f00a fd12 	bl	800b1da <xTaskCreate>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80007b6:	f009 fadf 	bl	8009d78 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007ba:	e7fe      	b.n	80007ba <main+0xb2>
 80007bc:	20000528 	.word	0x20000528
 80007c0:	0800df50 	.word	0x0800df50
 80007c4:	20000524 	.word	0x20000524
 80007c8:	20000534 	.word	0x20000534
 80007cc:	0800df60 	.word	0x0800df60
 80007d0:	20000520 	.word	0x20000520
 80007d4:	2000052c 	.word	0x2000052c
 80007d8:	0800df30 	.word	0x0800df30
 80007dc:	08000a91 	.word	0x08000a91
 80007e0:	20000530 	.word	0x20000530
 80007e4:	0800df40 	.word	0x0800df40
 80007e8:	08000afd 	.word	0x08000afd

080007ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b094      	sub	sp, #80	; 0x50
 80007f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007f2:	f107 0320 	add.w	r3, r7, #32
 80007f6:	2230      	movs	r2, #48	; 0x30
 80007f8:	2100      	movs	r1, #0
 80007fa:	4618      	mov	r0, r3
 80007fc:	f00c fe98 	bl	800d530 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000800:	f107 030c 	add.w	r3, r7, #12
 8000804:	2200      	movs	r2, #0
 8000806:	601a      	str	r2, [r3, #0]
 8000808:	605a      	str	r2, [r3, #4]
 800080a:	609a      	str	r2, [r3, #8]
 800080c:	60da      	str	r2, [r3, #12]
 800080e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000810:	2300      	movs	r3, #0
 8000812:	60bb      	str	r3, [r7, #8]
 8000814:	4b29      	ldr	r3, [pc, #164]	; (80008bc <SystemClock_Config+0xd0>)
 8000816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000818:	4a28      	ldr	r2, [pc, #160]	; (80008bc <SystemClock_Config+0xd0>)
 800081a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800081e:	6413      	str	r3, [r2, #64]	; 0x40
 8000820:	4b26      	ldr	r3, [pc, #152]	; (80008bc <SystemClock_Config+0xd0>)
 8000822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000824:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000828:	60bb      	str	r3, [r7, #8]
 800082a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800082c:	2300      	movs	r3, #0
 800082e:	607b      	str	r3, [r7, #4]
 8000830:	4b23      	ldr	r3, [pc, #140]	; (80008c0 <SystemClock_Config+0xd4>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000838:	4a21      	ldr	r2, [pc, #132]	; (80008c0 <SystemClock_Config+0xd4>)
 800083a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800083e:	6013      	str	r3, [r2, #0]
 8000840:	4b1f      	ldr	r3, [pc, #124]	; (80008c0 <SystemClock_Config+0xd4>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000848:	607b      	str	r3, [r7, #4]
 800084a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800084c:	2301      	movs	r3, #1
 800084e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000850:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000854:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000856:	2302      	movs	r3, #2
 8000858:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800085a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800085e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000860:	2319      	movs	r3, #25
 8000862:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000864:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000868:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800086a:	2304      	movs	r3, #4
 800086c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800086e:	2307      	movs	r3, #7
 8000870:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000872:	f107 0320 	add.w	r3, r7, #32
 8000876:	4618      	mov	r0, r3
 8000878:	f004 fc72 	bl	8005160 <HAL_RCC_OscConfig>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000882:	f000 f9cd 	bl	8000c20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000886:	230f      	movs	r3, #15
 8000888:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800088a:	2302      	movs	r3, #2
 800088c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800088e:	2300      	movs	r3, #0
 8000890:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000892:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000896:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000898:	2300      	movs	r3, #0
 800089a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800089c:	f107 030c 	add.w	r3, r7, #12
 80008a0:	2102      	movs	r1, #2
 80008a2:	4618      	mov	r0, r3
 80008a4:	f004 fed4 	bl	8005650 <HAL_RCC_ClockConfig>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80008ae:	f000 f9b7 	bl	8000c20 <Error_Handler>
  }
}
 80008b2:	bf00      	nop
 80008b4:	3750      	adds	r7, #80	; 0x50
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	40023800 	.word	0x40023800
 80008c0:	40007000 	.word	0x40007000

080008c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008c8:	4b12      	ldr	r3, [pc, #72]	; (8000914 <MX_I2C1_Init+0x50>)
 80008ca:	4a13      	ldr	r2, [pc, #76]	; (8000918 <MX_I2C1_Init+0x54>)
 80008cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80008ce:	4b11      	ldr	r3, [pc, #68]	; (8000914 <MX_I2C1_Init+0x50>)
 80008d0:	4a12      	ldr	r2, [pc, #72]	; (800091c <MX_I2C1_Init+0x58>)
 80008d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008d4:	4b0f      	ldr	r3, [pc, #60]	; (8000914 <MX_I2C1_Init+0x50>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80008da:	4b0e      	ldr	r3, [pc, #56]	; (8000914 <MX_I2C1_Init+0x50>)
 80008dc:	2200      	movs	r2, #0
 80008de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008e0:	4b0c      	ldr	r3, [pc, #48]	; (8000914 <MX_I2C1_Init+0x50>)
 80008e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008e6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008e8:	4b0a      	ldr	r3, [pc, #40]	; (8000914 <MX_I2C1_Init+0x50>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008ee:	4b09      	ldr	r3, [pc, #36]	; (8000914 <MX_I2C1_Init+0x50>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008f4:	4b07      	ldr	r3, [pc, #28]	; (8000914 <MX_I2C1_Init+0x50>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008fa:	4b06      	ldr	r3, [pc, #24]	; (8000914 <MX_I2C1_Init+0x50>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000900:	4804      	ldr	r0, [pc, #16]	; (8000914 <MX_I2C1_Init+0x50>)
 8000902:	f000 fee5 	bl	80016d0 <HAL_I2C_Init>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800090c:	f000 f988 	bl	8000c20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000910:	bf00      	nop
 8000912:	bd80      	pop	{r7, pc}
 8000914:	20000434 	.word	0x20000434
 8000918:	40005400 	.word	0x40005400
 800091c:	000186a0 	.word	0x000186a0

08000920 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000924:	4b12      	ldr	r3, [pc, #72]	; (8000970 <MX_I2C2_Init+0x50>)
 8000926:	4a13      	ldr	r2, [pc, #76]	; (8000974 <MX_I2C2_Init+0x54>)
 8000928:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800092a:	4b11      	ldr	r3, [pc, #68]	; (8000970 <MX_I2C2_Init+0x50>)
 800092c:	4a12      	ldr	r2, [pc, #72]	; (8000978 <MX_I2C2_Init+0x58>)
 800092e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000930:	4b0f      	ldr	r3, [pc, #60]	; (8000970 <MX_I2C2_Init+0x50>)
 8000932:	2200      	movs	r2, #0
 8000934:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000936:	4b0e      	ldr	r3, [pc, #56]	; (8000970 <MX_I2C2_Init+0x50>)
 8000938:	2200      	movs	r2, #0
 800093a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800093c:	4b0c      	ldr	r3, [pc, #48]	; (8000970 <MX_I2C2_Init+0x50>)
 800093e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000942:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000944:	4b0a      	ldr	r3, [pc, #40]	; (8000970 <MX_I2C2_Init+0x50>)
 8000946:	2200      	movs	r2, #0
 8000948:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800094a:	4b09      	ldr	r3, [pc, #36]	; (8000970 <MX_I2C2_Init+0x50>)
 800094c:	2200      	movs	r2, #0
 800094e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000950:	4b07      	ldr	r3, [pc, #28]	; (8000970 <MX_I2C2_Init+0x50>)
 8000952:	2200      	movs	r2, #0
 8000954:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000956:	4b06      	ldr	r3, [pc, #24]	; (8000970 <MX_I2C2_Init+0x50>)
 8000958:	2200      	movs	r2, #0
 800095a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800095c:	4804      	ldr	r0, [pc, #16]	; (8000970 <MX_I2C2_Init+0x50>)
 800095e:	f000 feb7 	bl	80016d0 <HAL_I2C_Init>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000968:	f000 f95a 	bl	8000c20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800096c:	bf00      	nop
 800096e:	bd80      	pop	{r7, pc}
 8000970:	20000488 	.word	0x20000488
 8000974:	40005800 	.word	0x40005800
 8000978:	000186a0 	.word	0x000186a0

0800097c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000980:	4b11      	ldr	r3, [pc, #68]	; (80009c8 <MX_USART1_UART_Init+0x4c>)
 8000982:	4a12      	ldr	r2, [pc, #72]	; (80009cc <MX_USART1_UART_Init+0x50>)
 8000984:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000986:	4b10      	ldr	r3, [pc, #64]	; (80009c8 <MX_USART1_UART_Init+0x4c>)
 8000988:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800098c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800098e:	4b0e      	ldr	r3, [pc, #56]	; (80009c8 <MX_USART1_UART_Init+0x4c>)
 8000990:	2200      	movs	r2, #0
 8000992:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000994:	4b0c      	ldr	r3, [pc, #48]	; (80009c8 <MX_USART1_UART_Init+0x4c>)
 8000996:	2200      	movs	r2, #0
 8000998:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800099a:	4b0b      	ldr	r3, [pc, #44]	; (80009c8 <MX_USART1_UART_Init+0x4c>)
 800099c:	2200      	movs	r2, #0
 800099e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009a0:	4b09      	ldr	r3, [pc, #36]	; (80009c8 <MX_USART1_UART_Init+0x4c>)
 80009a2:	220c      	movs	r2, #12
 80009a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009a6:	4b08      	ldr	r3, [pc, #32]	; (80009c8 <MX_USART1_UART_Init+0x4c>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009ac:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <MX_USART1_UART_Init+0x4c>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009b2:	4805      	ldr	r0, [pc, #20]	; (80009c8 <MX_USART1_UART_Init+0x4c>)
 80009b4:	f005 fade 	bl	8005f74 <HAL_UART_Init>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80009be:	f000 f92f 	bl	8000c20 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	200004dc 	.word	0x200004dc
 80009cc:	40011000 	.word	0x40011000

080009d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b08a      	sub	sp, #40	; 0x28
 80009d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d6:	f107 0314 	add.w	r3, r7, #20
 80009da:	2200      	movs	r2, #0
 80009dc:	601a      	str	r2, [r3, #0]
 80009de:	605a      	str	r2, [r3, #4]
 80009e0:	609a      	str	r2, [r3, #8]
 80009e2:	60da      	str	r2, [r3, #12]
 80009e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	613b      	str	r3, [r7, #16]
 80009ea:	4b27      	ldr	r3, [pc, #156]	; (8000a88 <MX_GPIO_Init+0xb8>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	4a26      	ldr	r2, [pc, #152]	; (8000a88 <MX_GPIO_Init+0xb8>)
 80009f0:	f043 0304 	orr.w	r3, r3, #4
 80009f4:	6313      	str	r3, [r2, #48]	; 0x30
 80009f6:	4b24      	ldr	r3, [pc, #144]	; (8000a88 <MX_GPIO_Init+0xb8>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	f003 0304 	and.w	r3, r3, #4
 80009fe:	613b      	str	r3, [r7, #16]
 8000a00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	60fb      	str	r3, [r7, #12]
 8000a06:	4b20      	ldr	r3, [pc, #128]	; (8000a88 <MX_GPIO_Init+0xb8>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	4a1f      	ldr	r2, [pc, #124]	; (8000a88 <MX_GPIO_Init+0xb8>)
 8000a0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a10:	6313      	str	r3, [r2, #48]	; 0x30
 8000a12:	4b1d      	ldr	r3, [pc, #116]	; (8000a88 <MX_GPIO_Init+0xb8>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a1a:	60fb      	str	r3, [r7, #12]
 8000a1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	60bb      	str	r3, [r7, #8]
 8000a22:	4b19      	ldr	r3, [pc, #100]	; (8000a88 <MX_GPIO_Init+0xb8>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	4a18      	ldr	r2, [pc, #96]	; (8000a88 <MX_GPIO_Init+0xb8>)
 8000a28:	f043 0302 	orr.w	r3, r3, #2
 8000a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2e:	4b16      	ldr	r3, [pc, #88]	; (8000a88 <MX_GPIO_Init+0xb8>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	f003 0302 	and.w	r3, r3, #2
 8000a36:	60bb      	str	r3, [r7, #8]
 8000a38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	607b      	str	r3, [r7, #4]
 8000a3e:	4b12      	ldr	r3, [pc, #72]	; (8000a88 <MX_GPIO_Init+0xb8>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	4a11      	ldr	r2, [pc, #68]	; (8000a88 <MX_GPIO_Init+0xb8>)
 8000a44:	f043 0301 	orr.w	r3, r3, #1
 8000a48:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4a:	4b0f      	ldr	r3, [pc, #60]	; (8000a88 <MX_GPIO_Init+0xb8>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	f003 0301 	and.w	r3, r3, #1
 8000a52:	607b      	str	r3, [r7, #4]
 8000a54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000a56:	2200      	movs	r2, #0
 8000a58:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a5c:	480b      	ldr	r0, [pc, #44]	; (8000a8c <MX_GPIO_Init+0xbc>)
 8000a5e:	f000 fe1d 	bl	800169c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a70:	2300      	movs	r3, #0
 8000a72:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a74:	f107 0314 	add.w	r3, r7, #20
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4804      	ldr	r0, [pc, #16]	; (8000a8c <MX_GPIO_Init+0xbc>)
 8000a7c:	f000 fc8a 	bl	8001394 <HAL_GPIO_Init>

}
 8000a80:	bf00      	nop
 8000a82:	3728      	adds	r7, #40	; 0x28
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	40023800 	.word	0x40023800
 8000a8c:	40020800 	.word	0x40020800

08000a90 <AS1_AboveNormalTask>:

/* USER CODE BEGIN 4 */
void AS1_AboveNormalTask(void *parameter)
{
 8000a90:	b590      	push	{r4, r7, lr}
 8000a92:	b095      	sub	sp, #84	; 0x54
 8000a94:	af12      	add	r7, sp, #72	; 0x48
 8000a96:	6078      	str	r0, [r7, #4]
	while(1)
	{
		osMutexWait(myMutex01Handle, osWaitForever);
 8000a98:	4b14      	ldr	r3, [pc, #80]	; (8000aec <AS1_AboveNormalTask+0x5c>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f009 f9e9 	bl	8009e78 <osMutexWait>
		angle_1 	= AS5600_GetAngle(hi2c1);
 8000aa6:	4c12      	ldr	r4, [pc, #72]	; (8000af0 <AS1_AboveNormalTask+0x60>)
 8000aa8:	4668      	mov	r0, sp
 8000aaa:	f104 0310 	add.w	r3, r4, #16
 8000aae:	2244      	movs	r2, #68	; 0x44
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	f00c fd2f 	bl	800d514 <memcpy>
 8000ab6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000aba:	f00c fcbb 	bl	800d434 <AS5600_GetAngle>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <AS1_AboveNormalTask+0x64>)
 8000ac4:	801a      	strh	r2, [r3, #0]
		osMessagePut(myQueue01Handle, angle_1, 1);
 8000ac6:	4b0c      	ldr	r3, [pc, #48]	; (8000af8 <AS1_AboveNormalTask+0x68>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	4a0a      	ldr	r2, [pc, #40]	; (8000af4 <AS1_AboveNormalTask+0x64>)
 8000acc:	8812      	ldrh	r2, [r2, #0]
 8000ace:	4611      	mov	r1, r2
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f009 fa7c 	bl	8009fd0 <osMessagePut>
		osMutexRelease(myMutex01Handle);
 8000ad8:	4b04      	ldr	r3, [pc, #16]	; (8000aec <AS1_AboveNormalTask+0x5c>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4618      	mov	r0, r3
 8000ade:	f009 fa19 	bl	8009f14 <osMutexRelease>
		osDelay(1);
 8000ae2:	2001      	movs	r0, #1
 8000ae4:	f009 f99b 	bl	8009e1e <osDelay>
		osMutexWait(myMutex01Handle, osWaitForever);
 8000ae8:	e7d6      	b.n	8000a98 <AS1_AboveNormalTask+0x8>
 8000aea:	bf00      	nop
 8000aec:	20000528 	.word	0x20000528
 8000af0:	20000434 	.word	0x20000434
 8000af4:	20000538 	.word	0x20000538
 8000af8:	20000524 	.word	0x20000524

08000afc <AS2_AboveNormalTask>:
	}
}
void AS2_AboveNormalTask(void *parameter)
{
 8000afc:	b590      	push	{r4, r7, lr}
 8000afe:	b095      	sub	sp, #84	; 0x54
 8000b00:	af12      	add	r7, sp, #72	; 0x48
 8000b02:	6078      	str	r0, [r7, #4]
	while(1)
	{
		osMutexWait(myMutex01Handle, osWaitForever);
 8000b04:	4b14      	ldr	r3, [pc, #80]	; (8000b58 <AS2_AboveNormalTask+0x5c>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	f04f 31ff 	mov.w	r1, #4294967295
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f009 f9b3 	bl	8009e78 <osMutexWait>
		angle_2 	= AS5600_GetAngle(hi2c2);
 8000b12:	4c12      	ldr	r4, [pc, #72]	; (8000b5c <AS2_AboveNormalTask+0x60>)
 8000b14:	4668      	mov	r0, sp
 8000b16:	f104 0310 	add.w	r3, r4, #16
 8000b1a:	2244      	movs	r2, #68	; 0x44
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	f00c fcf9 	bl	800d514 <memcpy>
 8000b22:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000b26:	f00c fc85 	bl	800d434 <AS5600_GetAngle>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	461a      	mov	r2, r3
 8000b2e:	4b0c      	ldr	r3, [pc, #48]	; (8000b60 <AS2_AboveNormalTask+0x64>)
 8000b30:	801a      	strh	r2, [r3, #0]
		osMessagePut(myQueue02Handle, angle_2, 1);
 8000b32:	4b0c      	ldr	r3, [pc, #48]	; (8000b64 <AS2_AboveNormalTask+0x68>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4a0a      	ldr	r2, [pc, #40]	; (8000b60 <AS2_AboveNormalTask+0x64>)
 8000b38:	8812      	ldrh	r2, [r2, #0]
 8000b3a:	4611      	mov	r1, r2
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f009 fa46 	bl	8009fd0 <osMessagePut>
		osMutexRelease(myMutex01Handle);
 8000b44:	4b04      	ldr	r3, [pc, #16]	; (8000b58 <AS2_AboveNormalTask+0x5c>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f009 f9e3 	bl	8009f14 <osMutexRelease>
		osDelay(1);
 8000b4e:	2001      	movs	r0, #1
 8000b50:	f009 f965 	bl	8009e1e <osDelay>
		osMutexWait(myMutex01Handle, osWaitForever);
 8000b54:	e7d6      	b.n	8000b04 <AS2_AboveNormalTask+0x8>
 8000b56:	bf00      	nop
 8000b58:	20000528 	.word	0x20000528
 8000b5c:	20000488 	.word	0x20000488
 8000b60:	2000053a 	.word	0x2000053a
 8000b64:	20000534 	.word	0x20000534

08000b68 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b08c      	sub	sp, #48	; 0x30
 8000b6c:	af02      	add	r7, sp, #8
 8000b6e:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000b70:	f00b ff24 	bl	800c9bc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  MX_USART1_UART_Init();
 8000b74:	f7ff ff02 	bl	800097c <MX_USART1_UART_Init>
  osEvent Recv_Task_data_angle_1;
  osEvent Recv_Task_data_angle_2;
  uint32_t time_print_data = 0;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	627b      	str	r3, [r7, #36]	; 0x24
  /* Infinite loop */
  for(;;)
  {
	if(HAL_GetTick() - time_print_data >1)
 8000b7c:	f000 fac8 	bl	8001110 <HAL_GetTick>
 8000b80:	4602      	mov	r2, r0
 8000b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b84:	1ad3      	subs	r3, r2, r3
 8000b86:	2b01      	cmp	r3, #1
 8000b88:	d9f8      	bls.n	8000b7c <StartDefaultTask+0x14>
	{
	  count ++;
 8000b8a:	4b17      	ldr	r3, [pc, #92]	; (8000be8 <StartDefaultTask+0x80>)
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	3301      	adds	r3, #1
 8000b90:	b2da      	uxtb	r2, r3
 8000b92:	4b15      	ldr	r3, [pc, #84]	; (8000be8 <StartDefaultTask+0x80>)
 8000b94:	701a      	strb	r2, [r3, #0]
	  Recv_Task_data_angle_1 = osMessageGet(myQueue01Handle, osWaitForever);
 8000b96:	4b15      	ldr	r3, [pc, #84]	; (8000bec <StartDefaultTask+0x84>)
 8000b98:	6819      	ldr	r1, [r3, #0]
 8000b9a:	f107 0318 	add.w	r3, r7, #24
 8000b9e:	f04f 32ff 	mov.w	r2, #4294967295
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f009 fa54 	bl	800a050 <osMessageGet>
	  Recv_Task_data_angle_2 = osMessageGet(myQueue02Handle, osWaitForever);
 8000ba8:	4b11      	ldr	r3, [pc, #68]	; (8000bf0 <StartDefaultTask+0x88>)
 8000baa:	6819      	ldr	r1, [r3, #0]
 8000bac:	f107 030c 	add.w	r3, r7, #12
 8000bb0:	f04f 32ff 	mov.w	r2, #4294967295
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f009 fa4b 	bl	800a050 <osMessageGet>
	  if(count == 30)
 8000bba:	4b0b      	ldr	r3, [pc, #44]	; (8000be8 <StartDefaultTask+0x80>)
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	2b1e      	cmp	r3, #30
 8000bc0:	d10e      	bne.n	8000be0 <StartDefaultTask+0x78>
	  {
		  count = 0;
 8000bc2:	4b09      	ldr	r3, [pc, #36]	; (8000be8 <StartDefaultTask+0x80>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	701a      	strb	r2, [r3, #0]
		  if((Recv_Task_data_angle_1.value.v == 0) || (Recv_Task_data_angle_2.value.v == 0))
 8000bc8:	69fb      	ldr	r3, [r7, #28]
 8000bca:	2b00      	cmp	r3, #0
		  {
	//				  send_CDC_text("fault +(((((((( \n");

		  }
		  send_CDC(Recv_Task_data_angle_1.value.v, Recv_Task_data_angle_2.value.v, " AS1: ", " AS2: ", time_print_data);
 8000bcc:	69fb      	ldr	r3, [r7, #28]
 8000bce:	b298      	uxth	r0, r3
 8000bd0:	693b      	ldr	r3, [r7, #16]
 8000bd2:	b299      	uxth	r1, r3
 8000bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bd6:	9300      	str	r3, [sp, #0]
 8000bd8:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <StartDefaultTask+0x8c>)
 8000bda:	4a07      	ldr	r2, [pc, #28]	; (8000bf8 <StartDefaultTask+0x90>)
 8000bdc:	f7ff fcf4 	bl	80005c8 <send_CDC>
	  }
	  time_print_data = HAL_GetTick();
 8000be0:	f000 fa96 	bl	8001110 <HAL_GetTick>
 8000be4:	6278      	str	r0, [r7, #36]	; 0x24
	if(HAL_GetTick() - time_print_data >1)
 8000be6:	e7c9      	b.n	8000b7c <StartDefaultTask+0x14>
 8000be8:	2000053c 	.word	0x2000053c
 8000bec:	20000524 	.word	0x20000524
 8000bf0:	20000534 	.word	0x20000534
 8000bf4:	0800df7c 	.word	0x0800df7c
 8000bf8:	0800df84 	.word	0x0800df84

08000bfc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a04      	ldr	r2, [pc, #16]	; (8000c1c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d101      	bne.n	8000c12 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c0e:	f000 fa6b 	bl	80010e8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c12:	bf00      	nop
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40000c00 	.word	0x40000c00

08000c20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c24:	b672      	cpsid	i
}
 8000c26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c28:	e7fe      	b.n	8000c28 <Error_Handler+0x8>
	...

08000c2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	607b      	str	r3, [r7, #4]
 8000c36:	4b12      	ldr	r3, [pc, #72]	; (8000c80 <HAL_MspInit+0x54>)
 8000c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c3a:	4a11      	ldr	r2, [pc, #68]	; (8000c80 <HAL_MspInit+0x54>)
 8000c3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c40:	6453      	str	r3, [r2, #68]	; 0x44
 8000c42:	4b0f      	ldr	r3, [pc, #60]	; (8000c80 <HAL_MspInit+0x54>)
 8000c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c4a:	607b      	str	r3, [r7, #4]
 8000c4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	603b      	str	r3, [r7, #0]
 8000c52:	4b0b      	ldr	r3, [pc, #44]	; (8000c80 <HAL_MspInit+0x54>)
 8000c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c56:	4a0a      	ldr	r2, [pc, #40]	; (8000c80 <HAL_MspInit+0x54>)
 8000c58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c5e:	4b08      	ldr	r3, [pc, #32]	; (8000c80 <HAL_MspInit+0x54>)
 8000c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c66:	603b      	str	r3, [r7, #0]
 8000c68:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	210f      	movs	r1, #15
 8000c6e:	f06f 0001 	mvn.w	r0, #1
 8000c72:	f000 fb35 	bl	80012e0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c76:	bf00      	nop
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	40023800 	.word	0x40023800

08000c84 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b08c      	sub	sp, #48	; 0x30
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8c:	f107 031c 	add.w	r3, r7, #28
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	605a      	str	r2, [r3, #4]
 8000c96:	609a      	str	r2, [r3, #8]
 8000c98:	60da      	str	r2, [r3, #12]
 8000c9a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a42      	ldr	r2, [pc, #264]	; (8000dac <HAL_I2C_MspInit+0x128>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d13c      	bne.n	8000d20 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	61bb      	str	r3, [r7, #24]
 8000caa:	4b41      	ldr	r3, [pc, #260]	; (8000db0 <HAL_I2C_MspInit+0x12c>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	4a40      	ldr	r2, [pc, #256]	; (8000db0 <HAL_I2C_MspInit+0x12c>)
 8000cb0:	f043 0302 	orr.w	r3, r3, #2
 8000cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb6:	4b3e      	ldr	r3, [pc, #248]	; (8000db0 <HAL_I2C_MspInit+0x12c>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	f003 0302 	and.w	r3, r3, #2
 8000cbe:	61bb      	str	r3, [r7, #24]
 8000cc0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000cc2:	23c0      	movs	r3, #192	; 0xc0
 8000cc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cc6:	2312      	movs	r3, #18
 8000cc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cce:	2303      	movs	r3, #3
 8000cd0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cd2:	2304      	movs	r3, #4
 8000cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cd6:	f107 031c 	add.w	r3, r7, #28
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4835      	ldr	r0, [pc, #212]	; (8000db4 <HAL_I2C_MspInit+0x130>)
 8000cde:	f000 fb59 	bl	8001394 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	617b      	str	r3, [r7, #20]
 8000ce6:	4b32      	ldr	r3, [pc, #200]	; (8000db0 <HAL_I2C_MspInit+0x12c>)
 8000ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cea:	4a31      	ldr	r2, [pc, #196]	; (8000db0 <HAL_I2C_MspInit+0x12c>)
 8000cec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cf0:	6413      	str	r3, [r2, #64]	; 0x40
 8000cf2:	4b2f      	ldr	r3, [pc, #188]	; (8000db0 <HAL_I2C_MspInit+0x12c>)
 8000cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cfa:	617b      	str	r3, [r7, #20]
 8000cfc:	697b      	ldr	r3, [r7, #20]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	2105      	movs	r1, #5
 8000d02:	201f      	movs	r0, #31
 8000d04:	f000 faec 	bl	80012e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000d08:	201f      	movs	r0, #31
 8000d0a:	f000 fb05 	bl	8001318 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	2105      	movs	r1, #5
 8000d12:	2020      	movs	r0, #32
 8000d14:	f000 fae4 	bl	80012e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000d18:	2020      	movs	r0, #32
 8000d1a:	f000 fafd 	bl	8001318 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000d1e:	e041      	b.n	8000da4 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C2)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a24      	ldr	r2, [pc, #144]	; (8000db8 <HAL_I2C_MspInit+0x134>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d13c      	bne.n	8000da4 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	613b      	str	r3, [r7, #16]
 8000d2e:	4b20      	ldr	r3, [pc, #128]	; (8000db0 <HAL_I2C_MspInit+0x12c>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	4a1f      	ldr	r2, [pc, #124]	; (8000db0 <HAL_I2C_MspInit+0x12c>)
 8000d34:	f043 0302 	orr.w	r3, r3, #2
 8000d38:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3a:	4b1d      	ldr	r3, [pc, #116]	; (8000db0 <HAL_I2C_MspInit+0x12c>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	f003 0302 	and.w	r3, r3, #2
 8000d42:	613b      	str	r3, [r7, #16]
 8000d44:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d4c:	2312      	movs	r3, #18
 8000d4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d50:	2300      	movs	r3, #0
 8000d52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d54:	2303      	movs	r3, #3
 8000d56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000d58:	2304      	movs	r3, #4
 8000d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d5c:	f107 031c 	add.w	r3, r7, #28
 8000d60:	4619      	mov	r1, r3
 8000d62:	4814      	ldr	r0, [pc, #80]	; (8000db4 <HAL_I2C_MspInit+0x130>)
 8000d64:	f000 fb16 	bl	8001394 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d68:	2308      	movs	r3, #8
 8000d6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d6c:	2312      	movs	r3, #18
 8000d6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d70:	2300      	movs	r3, #0
 8000d72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d74:	2303      	movs	r3, #3
 8000d76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8000d78:	2309      	movs	r3, #9
 8000d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d7c:	f107 031c 	add.w	r3, r7, #28
 8000d80:	4619      	mov	r1, r3
 8000d82:	480c      	ldr	r0, [pc, #48]	; (8000db4 <HAL_I2C_MspInit+0x130>)
 8000d84:	f000 fb06 	bl	8001394 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000d88:	2300      	movs	r3, #0
 8000d8a:	60fb      	str	r3, [r7, #12]
 8000d8c:	4b08      	ldr	r3, [pc, #32]	; (8000db0 <HAL_I2C_MspInit+0x12c>)
 8000d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d90:	4a07      	ldr	r2, [pc, #28]	; (8000db0 <HAL_I2C_MspInit+0x12c>)
 8000d92:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d96:	6413      	str	r3, [r2, #64]	; 0x40
 8000d98:	4b05      	ldr	r3, [pc, #20]	; (8000db0 <HAL_I2C_MspInit+0x12c>)
 8000d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000da0:	60fb      	str	r3, [r7, #12]
 8000da2:	68fb      	ldr	r3, [r7, #12]
}
 8000da4:	bf00      	nop
 8000da6:	3730      	adds	r7, #48	; 0x30
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	40005400 	.word	0x40005400
 8000db0:	40023800 	.word	0x40023800
 8000db4:	40020400 	.word	0x40020400
 8000db8:	40005800 	.word	0x40005800

08000dbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b08a      	sub	sp, #40	; 0x28
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc4:	f107 0314 	add.w	r3, r7, #20
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	605a      	str	r2, [r3, #4]
 8000dce:	609a      	str	r2, [r3, #8]
 8000dd0:	60da      	str	r2, [r3, #12]
 8000dd2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a19      	ldr	r2, [pc, #100]	; (8000e40 <HAL_UART_MspInit+0x84>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d12c      	bne.n	8000e38 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000dde:	2300      	movs	r3, #0
 8000de0:	613b      	str	r3, [r7, #16]
 8000de2:	4b18      	ldr	r3, [pc, #96]	; (8000e44 <HAL_UART_MspInit+0x88>)
 8000de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de6:	4a17      	ldr	r2, [pc, #92]	; (8000e44 <HAL_UART_MspInit+0x88>)
 8000de8:	f043 0310 	orr.w	r3, r3, #16
 8000dec:	6453      	str	r3, [r2, #68]	; 0x44
 8000dee:	4b15      	ldr	r3, [pc, #84]	; (8000e44 <HAL_UART_MspInit+0x88>)
 8000df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df2:	f003 0310 	and.w	r3, r3, #16
 8000df6:	613b      	str	r3, [r7, #16]
 8000df8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	60fb      	str	r3, [r7, #12]
 8000dfe:	4b11      	ldr	r3, [pc, #68]	; (8000e44 <HAL_UART_MspInit+0x88>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e02:	4a10      	ldr	r2, [pc, #64]	; (8000e44 <HAL_UART_MspInit+0x88>)
 8000e04:	f043 0301 	orr.w	r3, r3, #1
 8000e08:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0a:	4b0e      	ldr	r3, [pc, #56]	; (8000e44 <HAL_UART_MspInit+0x88>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	f003 0301 	and.w	r3, r3, #1
 8000e12:	60fb      	str	r3, [r7, #12]
 8000e14:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000e16:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000e1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e20:	2300      	movs	r3, #0
 8000e22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e24:	2303      	movs	r3, #3
 8000e26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e28:	2307      	movs	r3, #7
 8000e2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e2c:	f107 0314 	add.w	r3, r7, #20
 8000e30:	4619      	mov	r1, r3
 8000e32:	4805      	ldr	r0, [pc, #20]	; (8000e48 <HAL_UART_MspInit+0x8c>)
 8000e34:	f000 faae 	bl	8001394 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000e38:	bf00      	nop
 8000e3a:	3728      	adds	r7, #40	; 0x28
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	40011000 	.word	0x40011000
 8000e44:	40023800 	.word	0x40023800
 8000e48:	40020000 	.word	0x40020000

08000e4c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b08e      	sub	sp, #56	; 0x38
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000e54:	2300      	movs	r3, #0
 8000e56:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	60fb      	str	r3, [r7, #12]
 8000e60:	4b33      	ldr	r3, [pc, #204]	; (8000f30 <HAL_InitTick+0xe4>)
 8000e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e64:	4a32      	ldr	r2, [pc, #200]	; (8000f30 <HAL_InitTick+0xe4>)
 8000e66:	f043 0308 	orr.w	r3, r3, #8
 8000e6a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e6c:	4b30      	ldr	r3, [pc, #192]	; (8000f30 <HAL_InitTick+0xe4>)
 8000e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e70:	f003 0308 	and.w	r3, r3, #8
 8000e74:	60fb      	str	r3, [r7, #12]
 8000e76:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e78:	f107 0210 	add.w	r2, r7, #16
 8000e7c:	f107 0314 	add.w	r3, r7, #20
 8000e80:	4611      	mov	r1, r2
 8000e82:	4618      	mov	r0, r3
 8000e84:	f004 fdc4 	bl	8005a10 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000e88:	6a3b      	ldr	r3, [r7, #32]
 8000e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d103      	bne.n	8000e9a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e92:	f004 fd95 	bl	80059c0 <HAL_RCC_GetPCLK1Freq>
 8000e96:	6378      	str	r0, [r7, #52]	; 0x34
 8000e98:	e004      	b.n	8000ea4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000e9a:	f004 fd91 	bl	80059c0 <HAL_RCC_GetPCLK1Freq>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ea6:	4a23      	ldr	r2, [pc, #140]	; (8000f34 <HAL_InitTick+0xe8>)
 8000ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8000eac:	0c9b      	lsrs	r3, r3, #18
 8000eae:	3b01      	subs	r3, #1
 8000eb0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000eb2:	4b21      	ldr	r3, [pc, #132]	; (8000f38 <HAL_InitTick+0xec>)
 8000eb4:	4a21      	ldr	r2, [pc, #132]	; (8000f3c <HAL_InitTick+0xf0>)
 8000eb6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8000eb8:	4b1f      	ldr	r3, [pc, #124]	; (8000f38 <HAL_InitTick+0xec>)
 8000eba:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ebe:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000ec0:	4a1d      	ldr	r2, [pc, #116]	; (8000f38 <HAL_InitTick+0xec>)
 8000ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ec4:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000ec6:	4b1c      	ldr	r3, [pc, #112]	; (8000f38 <HAL_InitTick+0xec>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ecc:	4b1a      	ldr	r3, [pc, #104]	; (8000f38 <HAL_InitTick+0xec>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ed2:	4b19      	ldr	r3, [pc, #100]	; (8000f38 <HAL_InitTick+0xec>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8000ed8:	4817      	ldr	r0, [pc, #92]	; (8000f38 <HAL_InitTick+0xec>)
 8000eda:	f004 fdcb 	bl	8005a74 <HAL_TIM_Base_Init>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000ee4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d11b      	bne.n	8000f24 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8000eec:	4812      	ldr	r0, [pc, #72]	; (8000f38 <HAL_InitTick+0xec>)
 8000eee:	f004 fe1b 	bl	8005b28 <HAL_TIM_Base_Start_IT>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000ef8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d111      	bne.n	8000f24 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000f00:	2032      	movs	r0, #50	; 0x32
 8000f02:	f000 fa09 	bl	8001318 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2b0f      	cmp	r3, #15
 8000f0a:	d808      	bhi.n	8000f1e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	6879      	ldr	r1, [r7, #4]
 8000f10:	2032      	movs	r0, #50	; 0x32
 8000f12:	f000 f9e5 	bl	80012e0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f16:	4a0a      	ldr	r2, [pc, #40]	; (8000f40 <HAL_InitTick+0xf4>)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6013      	str	r3, [r2, #0]
 8000f1c:	e002      	b.n	8000f24 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000f24:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	3738      	adds	r7, #56	; 0x38
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	40023800 	.word	0x40023800
 8000f34:	431bde83 	.word	0x431bde83
 8000f38:	20000540 	.word	0x20000540
 8000f3c:	40000c00 	.word	0x40000c00
 8000f40:	20000004 	.word	0x20000004

08000f44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f48:	e7fe      	b.n	8000f48 <NMI_Handler+0x4>

08000f4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f4e:	e7fe      	b.n	8000f4e <HardFault_Handler+0x4>

08000f50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f54:	e7fe      	b.n	8000f54 <MemManage_Handler+0x4>

08000f56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f56:	b480      	push	{r7}
 8000f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f5a:	e7fe      	b.n	8000f5a <BusFault_Handler+0x4>

08000f5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f60:	e7fe      	b.n	8000f60 <UsageFault_Handler+0x4>

08000f62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f62:	b480      	push	{r7}
 8000f64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000f74:	4802      	ldr	r0, [pc, #8]	; (8000f80 <I2C1_EV_IRQHandler+0x10>)
 8000f76:	f000 ff15 	bl	8001da4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	20000434 	.word	0x20000434

08000f84 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000f88:	4802      	ldr	r0, [pc, #8]	; (8000f94 <I2C1_ER_IRQHandler+0x10>)
 8000f8a:	f001 f87c 	bl	8002086 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000f8e:	bf00      	nop
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	20000434 	.word	0x20000434

08000f98 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000f9c:	4802      	ldr	r0, [pc, #8]	; (8000fa8 <TIM5_IRQHandler+0x10>)
 8000f9e:	f004 fe25 	bl	8005bec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	20000540 	.word	0x20000540

08000fac <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000fb0:	4802      	ldr	r0, [pc, #8]	; (8000fbc <OTG_FS_IRQHandler+0x10>)
 8000fb2:	f002 ffa7 	bl	8003f04 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	20004fc4 	.word	0x20004fc4

08000fc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b086      	sub	sp, #24
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fc8:	4a14      	ldr	r2, [pc, #80]	; (800101c <_sbrk+0x5c>)
 8000fca:	4b15      	ldr	r3, [pc, #84]	; (8001020 <_sbrk+0x60>)
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fd4:	4b13      	ldr	r3, [pc, #76]	; (8001024 <_sbrk+0x64>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d102      	bne.n	8000fe2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fdc:	4b11      	ldr	r3, [pc, #68]	; (8001024 <_sbrk+0x64>)
 8000fde:	4a12      	ldr	r2, [pc, #72]	; (8001028 <_sbrk+0x68>)
 8000fe0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fe2:	4b10      	ldr	r3, [pc, #64]	; (8001024 <_sbrk+0x64>)
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4413      	add	r3, r2
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	429a      	cmp	r2, r3
 8000fee:	d207      	bcs.n	8001000 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ff0:	f00c fa64 	bl	800d4bc <__errno>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	220c      	movs	r2, #12
 8000ff8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8000ffe:	e009      	b.n	8001014 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001000:	4b08      	ldr	r3, [pc, #32]	; (8001024 <_sbrk+0x64>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001006:	4b07      	ldr	r3, [pc, #28]	; (8001024 <_sbrk+0x64>)
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4413      	add	r3, r2
 800100e:	4a05      	ldr	r2, [pc, #20]	; (8001024 <_sbrk+0x64>)
 8001010:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001012:	68fb      	ldr	r3, [r7, #12]
}
 8001014:	4618      	mov	r0, r3
 8001016:	3718      	adds	r7, #24
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	20010000 	.word	0x20010000
 8001020:	00000400 	.word	0x00000400
 8001024:	20000588 	.word	0x20000588
 8001028:	20005700 	.word	0x20005700

0800102c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001030:	4b06      	ldr	r3, [pc, #24]	; (800104c <SystemInit+0x20>)
 8001032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001036:	4a05      	ldr	r2, [pc, #20]	; (800104c <SystemInit+0x20>)
 8001038:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800103c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001040:	bf00      	nop
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	e000ed00 	.word	0xe000ed00

08001050 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001050:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001088 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001054:	480d      	ldr	r0, [pc, #52]	; (800108c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001056:	490e      	ldr	r1, [pc, #56]	; (8001090 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001058:	4a0e      	ldr	r2, [pc, #56]	; (8001094 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800105a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800105c:	e002      	b.n	8001064 <LoopCopyDataInit>

0800105e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800105e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001060:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001062:	3304      	adds	r3, #4

08001064 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001064:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001066:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001068:	d3f9      	bcc.n	800105e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800106a:	4a0b      	ldr	r2, [pc, #44]	; (8001098 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800106c:	4c0b      	ldr	r4, [pc, #44]	; (800109c <LoopFillZerobss+0x26>)
  movs r3, #0
 800106e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001070:	e001      	b.n	8001076 <LoopFillZerobss>

08001072 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001072:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001074:	3204      	adds	r2, #4

08001076 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001076:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001078:	d3fb      	bcc.n	8001072 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800107a:	f7ff ffd7 	bl	800102c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800107e:	f00c fa23 	bl	800d4c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001082:	f7ff fb41 	bl	8000708 <main>
  bx  lr    
 8001086:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001088:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800108c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001090:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 8001094:	0800e094 	.word	0x0800e094
  ldr r2, =_sbss
 8001098:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 800109c:	20005700 	.word	0x20005700

080010a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010a0:	e7fe      	b.n	80010a0 <ADC_IRQHandler>
	...

080010a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010a8:	4b0e      	ldr	r3, [pc, #56]	; (80010e4 <HAL_Init+0x40>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a0d      	ldr	r2, [pc, #52]	; (80010e4 <HAL_Init+0x40>)
 80010ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010b4:	4b0b      	ldr	r3, [pc, #44]	; (80010e4 <HAL_Init+0x40>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a0a      	ldr	r2, [pc, #40]	; (80010e4 <HAL_Init+0x40>)
 80010ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010c0:	4b08      	ldr	r3, [pc, #32]	; (80010e4 <HAL_Init+0x40>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a07      	ldr	r2, [pc, #28]	; (80010e4 <HAL_Init+0x40>)
 80010c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010cc:	2003      	movs	r0, #3
 80010ce:	f000 f8fc 	bl	80012ca <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010d2:	200f      	movs	r0, #15
 80010d4:	f7ff feba 	bl	8000e4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010d8:	f7ff fda8 	bl	8000c2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010dc:	2300      	movs	r3, #0
}
 80010de:	4618      	mov	r0, r3
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	40023c00 	.word	0x40023c00

080010e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010ec:	4b06      	ldr	r3, [pc, #24]	; (8001108 <HAL_IncTick+0x20>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	461a      	mov	r2, r3
 80010f2:	4b06      	ldr	r3, [pc, #24]	; (800110c <HAL_IncTick+0x24>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4413      	add	r3, r2
 80010f8:	4a04      	ldr	r2, [pc, #16]	; (800110c <HAL_IncTick+0x24>)
 80010fa:	6013      	str	r3, [r2, #0]
}
 80010fc:	bf00      	nop
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	20000008 	.word	0x20000008
 800110c:	2000058c 	.word	0x2000058c

08001110 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  return uwTick;
 8001114:	4b03      	ldr	r3, [pc, #12]	; (8001124 <HAL_GetTick+0x14>)
 8001116:	681b      	ldr	r3, [r3, #0]
}
 8001118:	4618      	mov	r0, r3
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	2000058c 	.word	0x2000058c

08001128 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001130:	f7ff ffee 	bl	8001110 <HAL_GetTick>
 8001134:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001140:	d005      	beq.n	800114e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001142:	4b0a      	ldr	r3, [pc, #40]	; (800116c <HAL_Delay+0x44>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	461a      	mov	r2, r3
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	4413      	add	r3, r2
 800114c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800114e:	bf00      	nop
 8001150:	f7ff ffde 	bl	8001110 <HAL_GetTick>
 8001154:	4602      	mov	r2, r0
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	68fa      	ldr	r2, [r7, #12]
 800115c:	429a      	cmp	r2, r3
 800115e:	d8f7      	bhi.n	8001150 <HAL_Delay+0x28>
  {
  }
}
 8001160:	bf00      	nop
 8001162:	bf00      	nop
 8001164:	3710      	adds	r7, #16
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20000008 	.word	0x20000008

08001170 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001170:	b480      	push	{r7}
 8001172:	b085      	sub	sp, #20
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	f003 0307 	and.w	r3, r3, #7
 800117e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001180:	4b0c      	ldr	r3, [pc, #48]	; (80011b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001186:	68ba      	ldr	r2, [r7, #8]
 8001188:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800118c:	4013      	ands	r3, r2
 800118e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001198:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800119c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011a2:	4a04      	ldr	r2, [pc, #16]	; (80011b4 <__NVIC_SetPriorityGrouping+0x44>)
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	60d3      	str	r3, [r2, #12]
}
 80011a8:	bf00      	nop
 80011aa:	3714      	adds	r7, #20
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr
 80011b4:	e000ed00 	.word	0xe000ed00

080011b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011bc:	4b04      	ldr	r3, [pc, #16]	; (80011d0 <__NVIC_GetPriorityGrouping+0x18>)
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	0a1b      	lsrs	r3, r3, #8
 80011c2:	f003 0307 	and.w	r3, r3, #7
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr
 80011d0:	e000ed00 	.word	0xe000ed00

080011d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	4603      	mov	r3, r0
 80011dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	db0b      	blt.n	80011fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	f003 021f 	and.w	r2, r3, #31
 80011ec:	4907      	ldr	r1, [pc, #28]	; (800120c <__NVIC_EnableIRQ+0x38>)
 80011ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f2:	095b      	lsrs	r3, r3, #5
 80011f4:	2001      	movs	r0, #1
 80011f6:	fa00 f202 	lsl.w	r2, r0, r2
 80011fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011fe:	bf00      	nop
 8001200:	370c      	adds	r7, #12
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	e000e100 	.word	0xe000e100

08001210 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	4603      	mov	r3, r0
 8001218:	6039      	str	r1, [r7, #0]
 800121a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800121c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001220:	2b00      	cmp	r3, #0
 8001222:	db0a      	blt.n	800123a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	b2da      	uxtb	r2, r3
 8001228:	490c      	ldr	r1, [pc, #48]	; (800125c <__NVIC_SetPriority+0x4c>)
 800122a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122e:	0112      	lsls	r2, r2, #4
 8001230:	b2d2      	uxtb	r2, r2
 8001232:	440b      	add	r3, r1
 8001234:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001238:	e00a      	b.n	8001250 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	b2da      	uxtb	r2, r3
 800123e:	4908      	ldr	r1, [pc, #32]	; (8001260 <__NVIC_SetPriority+0x50>)
 8001240:	79fb      	ldrb	r3, [r7, #7]
 8001242:	f003 030f 	and.w	r3, r3, #15
 8001246:	3b04      	subs	r3, #4
 8001248:	0112      	lsls	r2, r2, #4
 800124a:	b2d2      	uxtb	r2, r2
 800124c:	440b      	add	r3, r1
 800124e:	761a      	strb	r2, [r3, #24]
}
 8001250:	bf00      	nop
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	e000e100 	.word	0xe000e100
 8001260:	e000ed00 	.word	0xe000ed00

08001264 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001264:	b480      	push	{r7}
 8001266:	b089      	sub	sp, #36	; 0x24
 8001268:	af00      	add	r7, sp, #0
 800126a:	60f8      	str	r0, [r7, #12]
 800126c:	60b9      	str	r1, [r7, #8]
 800126e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	f003 0307 	and.w	r3, r3, #7
 8001276:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	f1c3 0307 	rsb	r3, r3, #7
 800127e:	2b04      	cmp	r3, #4
 8001280:	bf28      	it	cs
 8001282:	2304      	movcs	r3, #4
 8001284:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	3304      	adds	r3, #4
 800128a:	2b06      	cmp	r3, #6
 800128c:	d902      	bls.n	8001294 <NVIC_EncodePriority+0x30>
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	3b03      	subs	r3, #3
 8001292:	e000      	b.n	8001296 <NVIC_EncodePriority+0x32>
 8001294:	2300      	movs	r3, #0
 8001296:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001298:	f04f 32ff 	mov.w	r2, #4294967295
 800129c:	69bb      	ldr	r3, [r7, #24]
 800129e:	fa02 f303 	lsl.w	r3, r2, r3
 80012a2:	43da      	mvns	r2, r3
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	401a      	ands	r2, r3
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012ac:	f04f 31ff 	mov.w	r1, #4294967295
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	fa01 f303 	lsl.w	r3, r1, r3
 80012b6:	43d9      	mvns	r1, r3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012bc:	4313      	orrs	r3, r2
         );
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3724      	adds	r7, #36	; 0x24
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr

080012ca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b082      	sub	sp, #8
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f7ff ff4c 	bl	8001170 <__NVIC_SetPriorityGrouping>
}
 80012d8:	bf00      	nop
 80012da:	3708      	adds	r7, #8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}

080012e0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	60b9      	str	r1, [r7, #8]
 80012ea:	607a      	str	r2, [r7, #4]
 80012ec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012ee:	2300      	movs	r3, #0
 80012f0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012f2:	f7ff ff61 	bl	80011b8 <__NVIC_GetPriorityGrouping>
 80012f6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012f8:	687a      	ldr	r2, [r7, #4]
 80012fa:	68b9      	ldr	r1, [r7, #8]
 80012fc:	6978      	ldr	r0, [r7, #20]
 80012fe:	f7ff ffb1 	bl	8001264 <NVIC_EncodePriority>
 8001302:	4602      	mov	r2, r0
 8001304:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001308:	4611      	mov	r1, r2
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff ff80 	bl	8001210 <__NVIC_SetPriority>
}
 8001310:	bf00      	nop
 8001312:	3718      	adds	r7, #24
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}

08001318 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	4603      	mov	r3, r0
 8001320:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff ff54 	bl	80011d4 <__NVIC_EnableIRQ>
}
 800132c:	bf00      	nop
 800132e:	3708      	adds	r7, #8
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}

08001334 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001342:	b2db      	uxtb	r3, r3
 8001344:	2b02      	cmp	r3, #2
 8001346:	d004      	beq.n	8001352 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2280      	movs	r2, #128	; 0x80
 800134c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e00c      	b.n	800136c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2205      	movs	r2, #5
 8001356:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f022 0201 	bic.w	r2, r2, #1
 8001368:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800136a:	2300      	movs	r3, #0
}
 800136c:	4618      	mov	r0, r3
 800136e:	370c      	adds	r7, #12
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr

08001378 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001386:	b2db      	uxtb	r3, r3
}
 8001388:	4618      	mov	r0, r3
 800138a:	370c      	adds	r7, #12
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr

08001394 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001394:	b480      	push	{r7}
 8001396:	b089      	sub	sp, #36	; 0x24
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800139e:	2300      	movs	r3, #0
 80013a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013a2:	2300      	movs	r3, #0
 80013a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013a6:	2300      	movs	r3, #0
 80013a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013aa:	2300      	movs	r3, #0
 80013ac:	61fb      	str	r3, [r7, #28]
 80013ae:	e159      	b.n	8001664 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013b0:	2201      	movs	r2, #1
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	697a      	ldr	r2, [r7, #20]
 80013c0:	4013      	ands	r3, r2
 80013c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013c4:	693a      	ldr	r2, [r7, #16]
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	f040 8148 	bne.w	800165e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f003 0303 	and.w	r3, r3, #3
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d005      	beq.n	80013e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	d130      	bne.n	8001448 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	2203      	movs	r2, #3
 80013f2:	fa02 f303 	lsl.w	r3, r2, r3
 80013f6:	43db      	mvns	r3, r3
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	4013      	ands	r3, r2
 80013fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	68da      	ldr	r2, [r3, #12]
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	fa02 f303 	lsl.w	r3, r2, r3
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	4313      	orrs	r3, r2
 800140e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	69ba      	ldr	r2, [r7, #24]
 8001414:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800141c:	2201      	movs	r2, #1
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	fa02 f303 	lsl.w	r3, r2, r3
 8001424:	43db      	mvns	r3, r3
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	4013      	ands	r3, r2
 800142a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	091b      	lsrs	r3, r3, #4
 8001432:	f003 0201 	and.w	r2, r3, #1
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	4313      	orrs	r3, r2
 8001440:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f003 0303 	and.w	r3, r3, #3
 8001450:	2b03      	cmp	r3, #3
 8001452:	d017      	beq.n	8001484 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	005b      	lsls	r3, r3, #1
 800145e:	2203      	movs	r2, #3
 8001460:	fa02 f303 	lsl.w	r3, r2, r3
 8001464:	43db      	mvns	r3, r3
 8001466:	69ba      	ldr	r2, [r7, #24]
 8001468:	4013      	ands	r3, r2
 800146a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	689a      	ldr	r2, [r3, #8]
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	4313      	orrs	r3, r2
 800147c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f003 0303 	and.w	r3, r3, #3
 800148c:	2b02      	cmp	r3, #2
 800148e:	d123      	bne.n	80014d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	08da      	lsrs	r2, r3, #3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	3208      	adds	r2, #8
 8001498:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800149c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	f003 0307 	and.w	r3, r3, #7
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	220f      	movs	r2, #15
 80014a8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ac:	43db      	mvns	r3, r3
 80014ae:	69ba      	ldr	r2, [r7, #24]
 80014b0:	4013      	ands	r3, r2
 80014b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	691a      	ldr	r2, [r3, #16]
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	f003 0307 	and.w	r3, r3, #7
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	fa02 f303 	lsl.w	r3, r2, r3
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	08da      	lsrs	r2, r3, #3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	3208      	adds	r2, #8
 80014d2:	69b9      	ldr	r1, [r7, #24]
 80014d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	005b      	lsls	r3, r3, #1
 80014e2:	2203      	movs	r2, #3
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	43db      	mvns	r3, r3
 80014ea:	69ba      	ldr	r2, [r7, #24]
 80014ec:	4013      	ands	r3, r2
 80014ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	f003 0203 	and.w	r2, r3, #3
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001500:	69ba      	ldr	r2, [r7, #24]
 8001502:	4313      	orrs	r3, r2
 8001504:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001514:	2b00      	cmp	r3, #0
 8001516:	f000 80a2 	beq.w	800165e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	60fb      	str	r3, [r7, #12]
 800151e:	4b57      	ldr	r3, [pc, #348]	; (800167c <HAL_GPIO_Init+0x2e8>)
 8001520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001522:	4a56      	ldr	r2, [pc, #344]	; (800167c <HAL_GPIO_Init+0x2e8>)
 8001524:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001528:	6453      	str	r3, [r2, #68]	; 0x44
 800152a:	4b54      	ldr	r3, [pc, #336]	; (800167c <HAL_GPIO_Init+0x2e8>)
 800152c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800152e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001532:	60fb      	str	r3, [r7, #12]
 8001534:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001536:	4a52      	ldr	r2, [pc, #328]	; (8001680 <HAL_GPIO_Init+0x2ec>)
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	089b      	lsrs	r3, r3, #2
 800153c:	3302      	adds	r3, #2
 800153e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001542:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	f003 0303 	and.w	r3, r3, #3
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	220f      	movs	r2, #15
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	43db      	mvns	r3, r3
 8001554:	69ba      	ldr	r2, [r7, #24]
 8001556:	4013      	ands	r3, r2
 8001558:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4a49      	ldr	r2, [pc, #292]	; (8001684 <HAL_GPIO_Init+0x2f0>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d019      	beq.n	8001596 <HAL_GPIO_Init+0x202>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4a48      	ldr	r2, [pc, #288]	; (8001688 <HAL_GPIO_Init+0x2f4>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d013      	beq.n	8001592 <HAL_GPIO_Init+0x1fe>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4a47      	ldr	r2, [pc, #284]	; (800168c <HAL_GPIO_Init+0x2f8>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d00d      	beq.n	800158e <HAL_GPIO_Init+0x1fa>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4a46      	ldr	r2, [pc, #280]	; (8001690 <HAL_GPIO_Init+0x2fc>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d007      	beq.n	800158a <HAL_GPIO_Init+0x1f6>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4a45      	ldr	r2, [pc, #276]	; (8001694 <HAL_GPIO_Init+0x300>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d101      	bne.n	8001586 <HAL_GPIO_Init+0x1f2>
 8001582:	2304      	movs	r3, #4
 8001584:	e008      	b.n	8001598 <HAL_GPIO_Init+0x204>
 8001586:	2307      	movs	r3, #7
 8001588:	e006      	b.n	8001598 <HAL_GPIO_Init+0x204>
 800158a:	2303      	movs	r3, #3
 800158c:	e004      	b.n	8001598 <HAL_GPIO_Init+0x204>
 800158e:	2302      	movs	r3, #2
 8001590:	e002      	b.n	8001598 <HAL_GPIO_Init+0x204>
 8001592:	2301      	movs	r3, #1
 8001594:	e000      	b.n	8001598 <HAL_GPIO_Init+0x204>
 8001596:	2300      	movs	r3, #0
 8001598:	69fa      	ldr	r2, [r7, #28]
 800159a:	f002 0203 	and.w	r2, r2, #3
 800159e:	0092      	lsls	r2, r2, #2
 80015a0:	4093      	lsls	r3, r2
 80015a2:	69ba      	ldr	r2, [r7, #24]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015a8:	4935      	ldr	r1, [pc, #212]	; (8001680 <HAL_GPIO_Init+0x2ec>)
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	089b      	lsrs	r3, r3, #2
 80015ae:	3302      	adds	r3, #2
 80015b0:	69ba      	ldr	r2, [r7, #24]
 80015b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015b6:	4b38      	ldr	r3, [pc, #224]	; (8001698 <HAL_GPIO_Init+0x304>)
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	43db      	mvns	r3, r3
 80015c0:	69ba      	ldr	r2, [r7, #24]
 80015c2:	4013      	ands	r3, r2
 80015c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d003      	beq.n	80015da <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80015d2:	69ba      	ldr	r2, [r7, #24]
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	4313      	orrs	r3, r2
 80015d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015da:	4a2f      	ldr	r2, [pc, #188]	; (8001698 <HAL_GPIO_Init+0x304>)
 80015dc:	69bb      	ldr	r3, [r7, #24]
 80015de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015e0:	4b2d      	ldr	r3, [pc, #180]	; (8001698 <HAL_GPIO_Init+0x304>)
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	43db      	mvns	r3, r3
 80015ea:	69ba      	ldr	r2, [r7, #24]
 80015ec:	4013      	ands	r3, r2
 80015ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d003      	beq.n	8001604 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80015fc:	69ba      	ldr	r2, [r7, #24]
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	4313      	orrs	r3, r2
 8001602:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001604:	4a24      	ldr	r2, [pc, #144]	; (8001698 <HAL_GPIO_Init+0x304>)
 8001606:	69bb      	ldr	r3, [r7, #24]
 8001608:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800160a:	4b23      	ldr	r3, [pc, #140]	; (8001698 <HAL_GPIO_Init+0x304>)
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	43db      	mvns	r3, r3
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	4013      	ands	r3, r2
 8001618:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d003      	beq.n	800162e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001626:	69ba      	ldr	r2, [r7, #24]
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	4313      	orrs	r3, r2
 800162c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800162e:	4a1a      	ldr	r2, [pc, #104]	; (8001698 <HAL_GPIO_Init+0x304>)
 8001630:	69bb      	ldr	r3, [r7, #24]
 8001632:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001634:	4b18      	ldr	r3, [pc, #96]	; (8001698 <HAL_GPIO_Init+0x304>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	43db      	mvns	r3, r3
 800163e:	69ba      	ldr	r2, [r7, #24]
 8001640:	4013      	ands	r3, r2
 8001642:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800164c:	2b00      	cmp	r3, #0
 800164e:	d003      	beq.n	8001658 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	4313      	orrs	r3, r2
 8001656:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001658:	4a0f      	ldr	r2, [pc, #60]	; (8001698 <HAL_GPIO_Init+0x304>)
 800165a:	69bb      	ldr	r3, [r7, #24]
 800165c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	3301      	adds	r3, #1
 8001662:	61fb      	str	r3, [r7, #28]
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	2b0f      	cmp	r3, #15
 8001668:	f67f aea2 	bls.w	80013b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800166c:	bf00      	nop
 800166e:	bf00      	nop
 8001670:	3724      	adds	r7, #36	; 0x24
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	40023800 	.word	0x40023800
 8001680:	40013800 	.word	0x40013800
 8001684:	40020000 	.word	0x40020000
 8001688:	40020400 	.word	0x40020400
 800168c:	40020800 	.word	0x40020800
 8001690:	40020c00 	.word	0x40020c00
 8001694:	40021000 	.word	0x40021000
 8001698:	40013c00 	.word	0x40013c00

0800169c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	460b      	mov	r3, r1
 80016a6:	807b      	strh	r3, [r7, #2]
 80016a8:	4613      	mov	r3, r2
 80016aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016ac:	787b      	ldrb	r3, [r7, #1]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d003      	beq.n	80016ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016b2:	887a      	ldrh	r2, [r7, #2]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016b8:	e003      	b.n	80016c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016ba:	887b      	ldrh	r3, [r7, #2]
 80016bc:	041a      	lsls	r2, r3, #16
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	619a      	str	r2, [r3, #24]
}
 80016c2:	bf00      	nop
 80016c4:	370c      	adds	r7, #12
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
	...

080016d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d101      	bne.n	80016e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e12b      	b.n	800193a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d106      	bne.n	80016fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2200      	movs	r2, #0
 80016f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f7ff fac4 	bl	8000c84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2224      	movs	r2, #36	; 0x24
 8001700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f022 0201 	bic.w	r2, r2, #1
 8001712:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001722:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001732:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001734:	f004 f944 	bl	80059c0 <HAL_RCC_GetPCLK1Freq>
 8001738:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	4a81      	ldr	r2, [pc, #516]	; (8001944 <HAL_I2C_Init+0x274>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d807      	bhi.n	8001754 <HAL_I2C_Init+0x84>
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	4a80      	ldr	r2, [pc, #512]	; (8001948 <HAL_I2C_Init+0x278>)
 8001748:	4293      	cmp	r3, r2
 800174a:	bf94      	ite	ls
 800174c:	2301      	movls	r3, #1
 800174e:	2300      	movhi	r3, #0
 8001750:	b2db      	uxtb	r3, r3
 8001752:	e006      	b.n	8001762 <HAL_I2C_Init+0x92>
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	4a7d      	ldr	r2, [pc, #500]	; (800194c <HAL_I2C_Init+0x27c>)
 8001758:	4293      	cmp	r3, r2
 800175a:	bf94      	ite	ls
 800175c:	2301      	movls	r3, #1
 800175e:	2300      	movhi	r3, #0
 8001760:	b2db      	uxtb	r3, r3
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e0e7      	b.n	800193a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	4a78      	ldr	r2, [pc, #480]	; (8001950 <HAL_I2C_Init+0x280>)
 800176e:	fba2 2303 	umull	r2, r3, r2, r3
 8001772:	0c9b      	lsrs	r3, r3, #18
 8001774:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	68ba      	ldr	r2, [r7, #8]
 8001786:	430a      	orrs	r2, r1
 8001788:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	6a1b      	ldr	r3, [r3, #32]
 8001790:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	4a6a      	ldr	r2, [pc, #424]	; (8001944 <HAL_I2C_Init+0x274>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d802      	bhi.n	80017a4 <HAL_I2C_Init+0xd4>
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	3301      	adds	r3, #1
 80017a2:	e009      	b.n	80017b8 <HAL_I2C_Init+0xe8>
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80017aa:	fb02 f303 	mul.w	r3, r2, r3
 80017ae:	4a69      	ldr	r2, [pc, #420]	; (8001954 <HAL_I2C_Init+0x284>)
 80017b0:	fba2 2303 	umull	r2, r3, r2, r3
 80017b4:	099b      	lsrs	r3, r3, #6
 80017b6:	3301      	adds	r3, #1
 80017b8:	687a      	ldr	r2, [r7, #4]
 80017ba:	6812      	ldr	r2, [r2, #0]
 80017bc:	430b      	orrs	r3, r1
 80017be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	69db      	ldr	r3, [r3, #28]
 80017c6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80017ca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	495c      	ldr	r1, [pc, #368]	; (8001944 <HAL_I2C_Init+0x274>)
 80017d4:	428b      	cmp	r3, r1
 80017d6:	d819      	bhi.n	800180c <HAL_I2C_Init+0x13c>
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	1e59      	subs	r1, r3, #1
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80017e6:	1c59      	adds	r1, r3, #1
 80017e8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80017ec:	400b      	ands	r3, r1
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d00a      	beq.n	8001808 <HAL_I2C_Init+0x138>
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	1e59      	subs	r1, r3, #1
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	005b      	lsls	r3, r3, #1
 80017fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8001800:	3301      	adds	r3, #1
 8001802:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001806:	e051      	b.n	80018ac <HAL_I2C_Init+0x1dc>
 8001808:	2304      	movs	r3, #4
 800180a:	e04f      	b.n	80018ac <HAL_I2C_Init+0x1dc>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d111      	bne.n	8001838 <HAL_I2C_Init+0x168>
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	1e58      	subs	r0, r3, #1
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6859      	ldr	r1, [r3, #4]
 800181c:	460b      	mov	r3, r1
 800181e:	005b      	lsls	r3, r3, #1
 8001820:	440b      	add	r3, r1
 8001822:	fbb0 f3f3 	udiv	r3, r0, r3
 8001826:	3301      	adds	r3, #1
 8001828:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800182c:	2b00      	cmp	r3, #0
 800182e:	bf0c      	ite	eq
 8001830:	2301      	moveq	r3, #1
 8001832:	2300      	movne	r3, #0
 8001834:	b2db      	uxtb	r3, r3
 8001836:	e012      	b.n	800185e <HAL_I2C_Init+0x18e>
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	1e58      	subs	r0, r3, #1
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6859      	ldr	r1, [r3, #4]
 8001840:	460b      	mov	r3, r1
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	440b      	add	r3, r1
 8001846:	0099      	lsls	r1, r3, #2
 8001848:	440b      	add	r3, r1
 800184a:	fbb0 f3f3 	udiv	r3, r0, r3
 800184e:	3301      	adds	r3, #1
 8001850:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001854:	2b00      	cmp	r3, #0
 8001856:	bf0c      	ite	eq
 8001858:	2301      	moveq	r3, #1
 800185a:	2300      	movne	r3, #0
 800185c:	b2db      	uxtb	r3, r3
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <HAL_I2C_Init+0x196>
 8001862:	2301      	movs	r3, #1
 8001864:	e022      	b.n	80018ac <HAL_I2C_Init+0x1dc>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d10e      	bne.n	800188c <HAL_I2C_Init+0x1bc>
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	1e58      	subs	r0, r3, #1
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6859      	ldr	r1, [r3, #4]
 8001876:	460b      	mov	r3, r1
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	440b      	add	r3, r1
 800187c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001880:	3301      	adds	r3, #1
 8001882:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001886:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800188a:	e00f      	b.n	80018ac <HAL_I2C_Init+0x1dc>
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	1e58      	subs	r0, r3, #1
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6859      	ldr	r1, [r3, #4]
 8001894:	460b      	mov	r3, r1
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	440b      	add	r3, r1
 800189a:	0099      	lsls	r1, r3, #2
 800189c:	440b      	add	r3, r1
 800189e:	fbb0 f3f3 	udiv	r3, r0, r3
 80018a2:	3301      	adds	r3, #1
 80018a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80018ac:	6879      	ldr	r1, [r7, #4]
 80018ae:	6809      	ldr	r1, [r1, #0]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	69da      	ldr	r2, [r3, #28]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6a1b      	ldr	r3, [r3, #32]
 80018c6:	431a      	orrs	r2, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	430a      	orrs	r2, r1
 80018ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80018da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	6911      	ldr	r1, [r2, #16]
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	68d2      	ldr	r2, [r2, #12]
 80018e6:	4311      	orrs	r1, r2
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	6812      	ldr	r2, [r2, #0]
 80018ec:	430b      	orrs	r3, r1
 80018ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	68db      	ldr	r3, [r3, #12]
 80018f6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	695a      	ldr	r2, [r3, #20]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	699b      	ldr	r3, [r3, #24]
 8001902:	431a      	orrs	r2, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	430a      	orrs	r2, r1
 800190a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f042 0201 	orr.w	r2, r2, #1
 800191a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2200      	movs	r2, #0
 8001920:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2220      	movs	r2, #32
 8001926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2200      	movs	r2, #0
 800192e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2200      	movs	r2, #0
 8001934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001938:	2300      	movs	r3, #0
}
 800193a:	4618      	mov	r0, r3
 800193c:	3710      	adds	r7, #16
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	000186a0 	.word	0x000186a0
 8001948:	001e847f 	.word	0x001e847f
 800194c:	003d08ff 	.word	0x003d08ff
 8001950:	431bde83 	.word	0x431bde83
 8001954:	10624dd3 	.word	0x10624dd3

08001958 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b08c      	sub	sp, #48	; 0x30
 800195c:	af02      	add	r7, sp, #8
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	4608      	mov	r0, r1
 8001962:	4611      	mov	r1, r2
 8001964:	461a      	mov	r2, r3
 8001966:	4603      	mov	r3, r0
 8001968:	817b      	strh	r3, [r7, #10]
 800196a:	460b      	mov	r3, r1
 800196c:	813b      	strh	r3, [r7, #8]
 800196e:	4613      	mov	r3, r2
 8001970:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001972:	f7ff fbcd 	bl	8001110 <HAL_GetTick>
 8001976:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800197e:	b2db      	uxtb	r3, r3
 8001980:	2b20      	cmp	r3, #32
 8001982:	f040 8208 	bne.w	8001d96 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001988:	9300      	str	r3, [sp, #0]
 800198a:	2319      	movs	r3, #25
 800198c:	2201      	movs	r2, #1
 800198e:	497b      	ldr	r1, [pc, #492]	; (8001b7c <HAL_I2C_Mem_Read+0x224>)
 8001990:	68f8      	ldr	r0, [r7, #12]
 8001992:	f001 ff7d 	bl	8003890 <I2C_WaitOnFlagUntilTimeout>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800199c:	2302      	movs	r3, #2
 800199e:	e1fb      	b.n	8001d98 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d101      	bne.n	80019ae <HAL_I2C_Mem_Read+0x56>
 80019aa:	2302      	movs	r3, #2
 80019ac:	e1f4      	b.n	8001d98 <HAL_I2C_Mem_Read+0x440>
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	2201      	movs	r2, #1
 80019b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0301 	and.w	r3, r3, #1
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d007      	beq.n	80019d4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f042 0201 	orr.w	r2, r2, #1
 80019d2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019e2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	2222      	movs	r2, #34	; 0x22
 80019e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	2240      	movs	r2, #64	; 0x40
 80019f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	2200      	movs	r2, #0
 80019f8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80019fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001a04:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a0a:	b29a      	uxth	r2, r3
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	4a5b      	ldr	r2, [pc, #364]	; (8001b80 <HAL_I2C_Mem_Read+0x228>)
 8001a14:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001a16:	88f8      	ldrh	r0, [r7, #6]
 8001a18:	893a      	ldrh	r2, [r7, #8]
 8001a1a:	8979      	ldrh	r1, [r7, #10]
 8001a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1e:	9301      	str	r3, [sp, #4]
 8001a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a22:	9300      	str	r3, [sp, #0]
 8001a24:	4603      	mov	r3, r0
 8001a26:	68f8      	ldr	r0, [r7, #12]
 8001a28:	f001 fda2 	bl	8003570 <I2C_RequestMemoryRead>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e1b0      	b.n	8001d98 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d113      	bne.n	8001a66 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a3e:	2300      	movs	r3, #0
 8001a40:	623b      	str	r3, [r7, #32]
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	695b      	ldr	r3, [r3, #20]
 8001a48:	623b      	str	r3, [r7, #32]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	699b      	ldr	r3, [r3, #24]
 8001a50:	623b      	str	r3, [r7, #32]
 8001a52:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a62:	601a      	str	r2, [r3, #0]
 8001a64:	e184      	b.n	8001d70 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d11b      	bne.n	8001aa6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a7c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a7e:	2300      	movs	r3, #0
 8001a80:	61fb      	str	r3, [r7, #28]
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	695b      	ldr	r3, [r3, #20]
 8001a88:	61fb      	str	r3, [r7, #28]
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	699b      	ldr	r3, [r3, #24]
 8001a90:	61fb      	str	r3, [r7, #28]
 8001a92:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001aa2:	601a      	str	r2, [r3, #0]
 8001aa4:	e164      	b.n	8001d70 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d11b      	bne.n	8001ae6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001abc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001acc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ace:	2300      	movs	r3, #0
 8001ad0:	61bb      	str	r3, [r7, #24]
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	695b      	ldr	r3, [r3, #20]
 8001ad8:	61bb      	str	r3, [r7, #24]
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	699b      	ldr	r3, [r3, #24]
 8001ae0:	61bb      	str	r3, [r7, #24]
 8001ae2:	69bb      	ldr	r3, [r7, #24]
 8001ae4:	e144      	b.n	8001d70 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	617b      	str	r3, [r7, #20]
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	695b      	ldr	r3, [r3, #20]
 8001af0:	617b      	str	r3, [r7, #20]
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	699b      	ldr	r3, [r3, #24]
 8001af8:	617b      	str	r3, [r7, #20]
 8001afa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001afc:	e138      	b.n	8001d70 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b02:	2b03      	cmp	r3, #3
 8001b04:	f200 80f1 	bhi.w	8001cea <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d123      	bne.n	8001b58 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b12:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001b14:	68f8      	ldr	r0, [r7, #12]
 8001b16:	f002 f805 	bl	8003b24 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e139      	b.n	8001d98 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	691a      	ldr	r2, [r3, #16]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2e:	b2d2      	uxtb	r2, r2
 8001b30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b36:	1c5a      	adds	r2, r3, #1
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b40:	3b01      	subs	r3, #1
 8001b42:	b29a      	uxth	r2, r3
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b4c:	b29b      	uxth	r3, r3
 8001b4e:	3b01      	subs	r3, #1
 8001b50:	b29a      	uxth	r2, r3
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001b56:	e10b      	b.n	8001d70 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	d14e      	bne.n	8001bfe <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b62:	9300      	str	r3, [sp, #0]
 8001b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b66:	2200      	movs	r2, #0
 8001b68:	4906      	ldr	r1, [pc, #24]	; (8001b84 <HAL_I2C_Mem_Read+0x22c>)
 8001b6a:	68f8      	ldr	r0, [r7, #12]
 8001b6c:	f001 fe90 	bl	8003890 <I2C_WaitOnFlagUntilTimeout>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d008      	beq.n	8001b88 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e10e      	b.n	8001d98 <HAL_I2C_Mem_Read+0x440>
 8001b7a:	bf00      	nop
 8001b7c:	00100002 	.word	0x00100002
 8001b80:	ffff0000 	.word	0xffff0000
 8001b84:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b96:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	691a      	ldr	r2, [r3, #16]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba2:	b2d2      	uxtb	r2, r2
 8001ba4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001baa:	1c5a      	adds	r2, r3, #1
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bb4:	3b01      	subs	r3, #1
 8001bb6:	b29a      	uxth	r2, r3
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	3b01      	subs	r3, #1
 8001bc4:	b29a      	uxth	r2, r3
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	691a      	ldr	r2, [r3, #16]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd4:	b2d2      	uxtb	r2, r2
 8001bd6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bdc:	1c5a      	adds	r2, r3, #1
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001be6:	3b01      	subs	r3, #1
 8001be8:	b29a      	uxth	r2, r3
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	3b01      	subs	r3, #1
 8001bf6:	b29a      	uxth	r2, r3
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001bfc:	e0b8      	b.n	8001d70 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c00:	9300      	str	r3, [sp, #0]
 8001c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c04:	2200      	movs	r2, #0
 8001c06:	4966      	ldr	r1, [pc, #408]	; (8001da0 <HAL_I2C_Mem_Read+0x448>)
 8001c08:	68f8      	ldr	r0, [r7, #12]
 8001c0a:	f001 fe41 	bl	8003890 <I2C_WaitOnFlagUntilTimeout>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e0bf      	b.n	8001d98 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c26:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	691a      	ldr	r2, [r3, #16]
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c32:	b2d2      	uxtb	r2, r2
 8001c34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3a:	1c5a      	adds	r2, r3, #1
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c44:	3b01      	subs	r3, #1
 8001c46:	b29a      	uxth	r2, r3
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	3b01      	subs	r3, #1
 8001c54:	b29a      	uxth	r2, r3
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5c:	9300      	str	r3, [sp, #0]
 8001c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c60:	2200      	movs	r2, #0
 8001c62:	494f      	ldr	r1, [pc, #316]	; (8001da0 <HAL_I2C_Mem_Read+0x448>)
 8001c64:	68f8      	ldr	r0, [r7, #12]
 8001c66:	f001 fe13 	bl	8003890 <I2C_WaitOnFlagUntilTimeout>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e091      	b.n	8001d98 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c82:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	691a      	ldr	r2, [r3, #16]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c8e:	b2d2      	uxtb	r2, r2
 8001c90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c96:	1c5a      	adds	r2, r3, #1
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ca0:	3b01      	subs	r3, #1
 8001ca2:	b29a      	uxth	r2, r3
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cac:	b29b      	uxth	r3, r3
 8001cae:	3b01      	subs	r3, #1
 8001cb0:	b29a      	uxth	r2, r3
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	691a      	ldr	r2, [r3, #16]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc0:	b2d2      	uxtb	r2, r2
 8001cc2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc8:	1c5a      	adds	r2, r3, #1
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cd2:	3b01      	subs	r3, #1
 8001cd4:	b29a      	uxth	r2, r3
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	3b01      	subs	r3, #1
 8001ce2:	b29a      	uxth	r2, r3
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001ce8:	e042      	b.n	8001d70 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001cee:	68f8      	ldr	r0, [r7, #12]
 8001cf0:	f001 ff18 	bl	8003b24 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e04c      	b.n	8001d98 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	691a      	ldr	r2, [r3, #16]
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d08:	b2d2      	uxtb	r2, r2
 8001d0a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d10:	1c5a      	adds	r2, r3, #1
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d1a:	3b01      	subs	r3, #1
 8001d1c:	b29a      	uxth	r2, r3
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	3b01      	subs	r3, #1
 8001d2a:	b29a      	uxth	r2, r3
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	695b      	ldr	r3, [r3, #20]
 8001d36:	f003 0304 	and.w	r3, r3, #4
 8001d3a:	2b04      	cmp	r3, #4
 8001d3c:	d118      	bne.n	8001d70 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	691a      	ldr	r2, [r3, #16]
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d48:	b2d2      	uxtb	r2, r2
 8001d4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d50:	1c5a      	adds	r2, r3, #1
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d5a:	3b01      	subs	r3, #1
 8001d5c:	b29a      	uxth	r2, r3
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	3b01      	subs	r3, #1
 8001d6a:	b29a      	uxth	r2, r3
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	f47f aec2 	bne.w	8001afe <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2220      	movs	r2, #32
 8001d7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2200      	movs	r2, #0
 8001d86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001d92:	2300      	movs	r3, #0
 8001d94:	e000      	b.n	8001d98 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001d96:	2302      	movs	r3, #2
  }
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3728      	adds	r7, #40	; 0x28
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	00010004 	.word	0x00010004

08001da4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b088      	sub	sp, #32
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001dac:	2300      	movs	r3, #0
 8001dae:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dbc:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001dc4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dcc:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001dce:	7bfb      	ldrb	r3, [r7, #15]
 8001dd0:	2b10      	cmp	r3, #16
 8001dd2:	d003      	beq.n	8001ddc <HAL_I2C_EV_IRQHandler+0x38>
 8001dd4:	7bfb      	ldrb	r3, [r7, #15]
 8001dd6:	2b40      	cmp	r3, #64	; 0x40
 8001dd8:	f040 80c1 	bne.w	8001f5e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	699b      	ldr	r3, [r3, #24]
 8001de2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	695b      	ldr	r3, [r3, #20]
 8001dea:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	f003 0301 	and.w	r3, r3, #1
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d10d      	bne.n	8001e12 <HAL_I2C_EV_IRQHandler+0x6e>
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8001dfc:	d003      	beq.n	8001e06 <HAL_I2C_EV_IRQHandler+0x62>
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001e04:	d101      	bne.n	8001e0a <HAL_I2C_EV_IRQHandler+0x66>
 8001e06:	2301      	movs	r3, #1
 8001e08:	e000      	b.n	8001e0c <HAL_I2C_EV_IRQHandler+0x68>
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	f000 8132 	beq.w	8002076 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	f003 0301 	and.w	r3, r3, #1
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d00c      	beq.n	8001e36 <HAL_I2C_EV_IRQHandler+0x92>
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	0a5b      	lsrs	r3, r3, #9
 8001e20:	f003 0301 	and.w	r3, r3, #1
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d006      	beq.n	8001e36 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f001 ff00 	bl	8003c2e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f000 fd83 	bl	800293a <I2C_Master_SB>
 8001e34:	e092      	b.n	8001f5c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	08db      	lsrs	r3, r3, #3
 8001e3a:	f003 0301 	and.w	r3, r3, #1
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d009      	beq.n	8001e56 <HAL_I2C_EV_IRQHandler+0xb2>
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	0a5b      	lsrs	r3, r3, #9
 8001e46:	f003 0301 	and.w	r3, r3, #1
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d003      	beq.n	8001e56 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f000 fdf9 	bl	8002a46 <I2C_Master_ADD10>
 8001e54:	e082      	b.n	8001f5c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	085b      	lsrs	r3, r3, #1
 8001e5a:	f003 0301 	and.w	r3, r3, #1
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d009      	beq.n	8001e76 <HAL_I2C_EV_IRQHandler+0xd2>
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	0a5b      	lsrs	r3, r3, #9
 8001e66:	f003 0301 	and.w	r3, r3, #1
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d003      	beq.n	8001e76 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f000 fe13 	bl	8002a9a <I2C_Master_ADDR>
 8001e74:	e072      	b.n	8001f5c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	089b      	lsrs	r3, r3, #2
 8001e7a:	f003 0301 	and.w	r3, r3, #1
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d03b      	beq.n	8001efa <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e90:	f000 80f3 	beq.w	800207a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	09db      	lsrs	r3, r3, #7
 8001e98:	f003 0301 	and.w	r3, r3, #1
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d00f      	beq.n	8001ec0 <HAL_I2C_EV_IRQHandler+0x11c>
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	0a9b      	lsrs	r3, r3, #10
 8001ea4:	f003 0301 	and.w	r3, r3, #1
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d009      	beq.n	8001ec0 <HAL_I2C_EV_IRQHandler+0x11c>
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	089b      	lsrs	r3, r3, #2
 8001eb0:	f003 0301 	and.w	r3, r3, #1
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d103      	bne.n	8001ec0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f000 f9f3 	bl	80022a4 <I2C_MasterTransmit_TXE>
 8001ebe:	e04d      	b.n	8001f5c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	089b      	lsrs	r3, r3, #2
 8001ec4:	f003 0301 	and.w	r3, r3, #1
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	f000 80d6 	beq.w	800207a <HAL_I2C_EV_IRQHandler+0x2d6>
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	0a5b      	lsrs	r3, r3, #9
 8001ed2:	f003 0301 	and.w	r3, r3, #1
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	f000 80cf 	beq.w	800207a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001edc:	7bbb      	ldrb	r3, [r7, #14]
 8001ede:	2b21      	cmp	r3, #33	; 0x21
 8001ee0:	d103      	bne.n	8001eea <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f000 fa7a 	bl	80023dc <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ee8:	e0c7      	b.n	800207a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8001eea:	7bfb      	ldrb	r3, [r7, #15]
 8001eec:	2b40      	cmp	r3, #64	; 0x40
 8001eee:	f040 80c4 	bne.w	800207a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f000 fae8 	bl	80024c8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ef8:	e0bf      	b.n	800207a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f08:	f000 80b7 	beq.w	800207a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	099b      	lsrs	r3, r3, #6
 8001f10:	f003 0301 	and.w	r3, r3, #1
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d00f      	beq.n	8001f38 <HAL_I2C_EV_IRQHandler+0x194>
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	0a9b      	lsrs	r3, r3, #10
 8001f1c:	f003 0301 	and.w	r3, r3, #1
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d009      	beq.n	8001f38 <HAL_I2C_EV_IRQHandler+0x194>
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	089b      	lsrs	r3, r3, #2
 8001f28:	f003 0301 	and.w	r3, r3, #1
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d103      	bne.n	8001f38 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f000 fb5d 	bl	80025f0 <I2C_MasterReceive_RXNE>
 8001f36:	e011      	b.n	8001f5c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	089b      	lsrs	r3, r3, #2
 8001f3c:	f003 0301 	and.w	r3, r3, #1
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	f000 809a 	beq.w	800207a <HAL_I2C_EV_IRQHandler+0x2d6>
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	0a5b      	lsrs	r3, r3, #9
 8001f4a:	f003 0301 	and.w	r3, r3, #1
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	f000 8093 	beq.w	800207a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f000 fc06 	bl	8002766 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f5a:	e08e      	b.n	800207a <HAL_I2C_EV_IRQHandler+0x2d6>
 8001f5c:	e08d      	b.n	800207a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d004      	beq.n	8001f70 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	695b      	ldr	r3, [r3, #20]
 8001f6c:	61fb      	str	r3, [r7, #28]
 8001f6e:	e007      	b.n	8001f80 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	699b      	ldr	r3, [r3, #24]
 8001f76:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	695b      	ldr	r3, [r3, #20]
 8001f7e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	085b      	lsrs	r3, r3, #1
 8001f84:	f003 0301 	and.w	r3, r3, #1
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d012      	beq.n	8001fb2 <HAL_I2C_EV_IRQHandler+0x20e>
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	0a5b      	lsrs	r3, r3, #9
 8001f90:	f003 0301 	and.w	r3, r3, #1
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d00c      	beq.n	8001fb2 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d003      	beq.n	8001fa8 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	699b      	ldr	r3, [r3, #24]
 8001fa6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001fa8:	69b9      	ldr	r1, [r7, #24]
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f000 ffc4 	bl	8002f38 <I2C_Slave_ADDR>
 8001fb0:	e066      	b.n	8002080 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	091b      	lsrs	r3, r3, #4
 8001fb6:	f003 0301 	and.w	r3, r3, #1
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d009      	beq.n	8001fd2 <HAL_I2C_EV_IRQHandler+0x22e>
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	0a5b      	lsrs	r3, r3, #9
 8001fc2:	f003 0301 	and.w	r3, r3, #1
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d003      	beq.n	8001fd2 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f000 fffe 	bl	8002fcc <I2C_Slave_STOPF>
 8001fd0:	e056      	b.n	8002080 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001fd2:	7bbb      	ldrb	r3, [r7, #14]
 8001fd4:	2b21      	cmp	r3, #33	; 0x21
 8001fd6:	d002      	beq.n	8001fde <HAL_I2C_EV_IRQHandler+0x23a>
 8001fd8:	7bbb      	ldrb	r3, [r7, #14]
 8001fda:	2b29      	cmp	r3, #41	; 0x29
 8001fdc:	d125      	bne.n	800202a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	09db      	lsrs	r3, r3, #7
 8001fe2:	f003 0301 	and.w	r3, r3, #1
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d00f      	beq.n	800200a <HAL_I2C_EV_IRQHandler+0x266>
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	0a9b      	lsrs	r3, r3, #10
 8001fee:	f003 0301 	and.w	r3, r3, #1
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d009      	beq.n	800200a <HAL_I2C_EV_IRQHandler+0x266>
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	089b      	lsrs	r3, r3, #2
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d103      	bne.n	800200a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f000 feda 	bl	8002dbc <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002008:	e039      	b.n	800207e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	089b      	lsrs	r3, r3, #2
 800200e:	f003 0301 	and.w	r3, r3, #1
 8002012:	2b00      	cmp	r3, #0
 8002014:	d033      	beq.n	800207e <HAL_I2C_EV_IRQHandler+0x2da>
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	0a5b      	lsrs	r3, r3, #9
 800201a:	f003 0301 	and.w	r3, r3, #1
 800201e:	2b00      	cmp	r3, #0
 8002020:	d02d      	beq.n	800207e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f000 ff07 	bl	8002e36 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002028:	e029      	b.n	800207e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	099b      	lsrs	r3, r3, #6
 800202e:	f003 0301 	and.w	r3, r3, #1
 8002032:	2b00      	cmp	r3, #0
 8002034:	d00f      	beq.n	8002056 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	0a9b      	lsrs	r3, r3, #10
 800203a:	f003 0301 	and.w	r3, r3, #1
 800203e:	2b00      	cmp	r3, #0
 8002040:	d009      	beq.n	8002056 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	089b      	lsrs	r3, r3, #2
 8002046:	f003 0301 	and.w	r3, r3, #1
 800204a:	2b00      	cmp	r3, #0
 800204c:	d103      	bne.n	8002056 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f000 ff12 	bl	8002e78 <I2C_SlaveReceive_RXNE>
 8002054:	e014      	b.n	8002080 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	089b      	lsrs	r3, r3, #2
 800205a:	f003 0301 	and.w	r3, r3, #1
 800205e:	2b00      	cmp	r3, #0
 8002060:	d00e      	beq.n	8002080 <HAL_I2C_EV_IRQHandler+0x2dc>
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	0a5b      	lsrs	r3, r3, #9
 8002066:	f003 0301 	and.w	r3, r3, #1
 800206a:	2b00      	cmp	r3, #0
 800206c:	d008      	beq.n	8002080 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f000 ff40 	bl	8002ef4 <I2C_SlaveReceive_BTF>
 8002074:	e004      	b.n	8002080 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8002076:	bf00      	nop
 8002078:	e002      	b.n	8002080 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800207a:	bf00      	nop
 800207c:	e000      	b.n	8002080 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800207e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002080:	3720      	adds	r7, #32
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}

08002086 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002086:	b580      	push	{r7, lr}
 8002088:	b08a      	sub	sp, #40	; 0x28
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	695b      	ldr	r3, [r3, #20]
 8002094:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800209e:	2300      	movs	r3, #0
 80020a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80020a8:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80020aa:	6a3b      	ldr	r3, [r7, #32]
 80020ac:	0a1b      	lsrs	r3, r3, #8
 80020ae:	f003 0301 	and.w	r3, r3, #1
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d00e      	beq.n	80020d4 <HAL_I2C_ER_IRQHandler+0x4e>
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	0a1b      	lsrs	r3, r3, #8
 80020ba:	f003 0301 	and.w	r3, r3, #1
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d008      	beq.n	80020d4 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80020c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c4:	f043 0301 	orr.w	r3, r3, #1
 80020c8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80020d2:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80020d4:	6a3b      	ldr	r3, [r7, #32]
 80020d6:	0a5b      	lsrs	r3, r3, #9
 80020d8:	f003 0301 	and.w	r3, r3, #1
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d00e      	beq.n	80020fe <HAL_I2C_ER_IRQHandler+0x78>
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	0a1b      	lsrs	r3, r3, #8
 80020e4:	f003 0301 	and.w	r3, r3, #1
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d008      	beq.n	80020fe <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80020ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ee:	f043 0302 	orr.w	r3, r3, #2
 80020f2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80020fc:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80020fe:	6a3b      	ldr	r3, [r7, #32]
 8002100:	0a9b      	lsrs	r3, r3, #10
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	2b00      	cmp	r3, #0
 8002108:	d03f      	beq.n	800218a <HAL_I2C_ER_IRQHandler+0x104>
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	0a1b      	lsrs	r3, r3, #8
 800210e:	f003 0301 	and.w	r3, r3, #1
 8002112:	2b00      	cmp	r3, #0
 8002114:	d039      	beq.n	800218a <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8002116:	7efb      	ldrb	r3, [r7, #27]
 8002118:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800211e:	b29b      	uxth	r3, r3
 8002120:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002128:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002130:	7ebb      	ldrb	r3, [r7, #26]
 8002132:	2b20      	cmp	r3, #32
 8002134:	d112      	bne.n	800215c <HAL_I2C_ER_IRQHandler+0xd6>
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d10f      	bne.n	800215c <HAL_I2C_ER_IRQHandler+0xd6>
 800213c:	7cfb      	ldrb	r3, [r7, #19]
 800213e:	2b21      	cmp	r3, #33	; 0x21
 8002140:	d008      	beq.n	8002154 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002142:	7cfb      	ldrb	r3, [r7, #19]
 8002144:	2b29      	cmp	r3, #41	; 0x29
 8002146:	d005      	beq.n	8002154 <HAL_I2C_ER_IRQHandler+0xce>
 8002148:	7cfb      	ldrb	r3, [r7, #19]
 800214a:	2b28      	cmp	r3, #40	; 0x28
 800214c:	d106      	bne.n	800215c <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2b21      	cmp	r3, #33	; 0x21
 8002152:	d103      	bne.n	800215c <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f001 f869 	bl	800322c <I2C_Slave_AF>
 800215a:	e016      	b.n	800218a <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002164:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002168:	f043 0304 	orr.w	r3, r3, #4
 800216c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800216e:	7efb      	ldrb	r3, [r7, #27]
 8002170:	2b10      	cmp	r3, #16
 8002172:	d002      	beq.n	800217a <HAL_I2C_ER_IRQHandler+0xf4>
 8002174:	7efb      	ldrb	r3, [r7, #27]
 8002176:	2b40      	cmp	r3, #64	; 0x40
 8002178:	d107      	bne.n	800218a <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002188:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800218a:	6a3b      	ldr	r3, [r7, #32]
 800218c:	0adb      	lsrs	r3, r3, #11
 800218e:	f003 0301 	and.w	r3, r3, #1
 8002192:	2b00      	cmp	r3, #0
 8002194:	d00e      	beq.n	80021b4 <HAL_I2C_ER_IRQHandler+0x12e>
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	0a1b      	lsrs	r3, r3, #8
 800219a:	f003 0301 	and.w	r3, r3, #1
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d008      	beq.n	80021b4 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80021a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a4:	f043 0308 	orr.w	r3, r3, #8
 80021a8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80021b2:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80021b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d008      	beq.n	80021cc <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c0:	431a      	orrs	r2, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f001 f8a0 	bl	800330c <I2C_ITError>
  }
}
 80021cc:	bf00      	nop
 80021ce:	3728      	adds	r7, #40	; 0x28
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80021dc:	bf00      	nop
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80021f0:	bf00      	nop
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr

080021fc <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002204:	bf00      	nop
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002218:	bf00      	nop
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	460b      	mov	r3, r1
 800222e:	70fb      	strb	r3, [r7, #3]
 8002230:	4613      	mov	r3, r2
 8002232:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002234:	bf00      	nop
 8002236:	370c      	adds	r7, #12
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr

08002240 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002248:	bf00      	nop
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002270:	bf00      	nop
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002284:	bf00      	nop
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002298:	bf00      	nop
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022b2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80022ba:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c0:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d150      	bne.n	800236c <I2C_MasterTransmit_TXE+0xc8>
 80022ca:	7bfb      	ldrb	r3, [r7, #15]
 80022cc:	2b21      	cmp	r3, #33	; 0x21
 80022ce:	d14d      	bne.n	800236c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	2b08      	cmp	r3, #8
 80022d4:	d01d      	beq.n	8002312 <I2C_MasterTransmit_TXE+0x6e>
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	2b20      	cmp	r3, #32
 80022da:	d01a      	beq.n	8002312 <I2C_MasterTransmit_TXE+0x6e>
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80022e2:	d016      	beq.n	8002312 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	685a      	ldr	r2, [r3, #4]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80022f2:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2211      	movs	r2, #17
 80022f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2200      	movs	r2, #0
 80022fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2220      	movs	r2, #32
 8002306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f7ff ff62 	bl	80021d4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002310:	e060      	b.n	80023d4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	685a      	ldr	r2, [r3, #4]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002320:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002330:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2200      	movs	r2, #0
 8002336:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2220      	movs	r2, #32
 800233c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002346:	b2db      	uxtb	r3, r3
 8002348:	2b40      	cmp	r3, #64	; 0x40
 800234a:	d107      	bne.n	800235c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2200      	movs	r2, #0
 8002350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f7ff ff7d 	bl	8002254 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800235a:	e03b      	b.n	80023d4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2200      	movs	r2, #0
 8002360:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f7ff ff35 	bl	80021d4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800236a:	e033      	b.n	80023d4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800236c:	7bfb      	ldrb	r3, [r7, #15]
 800236e:	2b21      	cmp	r3, #33	; 0x21
 8002370:	d005      	beq.n	800237e <I2C_MasterTransmit_TXE+0xda>
 8002372:	7bbb      	ldrb	r3, [r7, #14]
 8002374:	2b40      	cmp	r3, #64	; 0x40
 8002376:	d12d      	bne.n	80023d4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002378:	7bfb      	ldrb	r3, [r7, #15]
 800237a:	2b22      	cmp	r3, #34	; 0x22
 800237c:	d12a      	bne.n	80023d4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002382:	b29b      	uxth	r3, r3
 8002384:	2b00      	cmp	r3, #0
 8002386:	d108      	bne.n	800239a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	685a      	ldr	r2, [r3, #4]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002396:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002398:	e01c      	b.n	80023d4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	2b40      	cmp	r3, #64	; 0x40
 80023a4:	d103      	bne.n	80023ae <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f000 f88e 	bl	80024c8 <I2C_MemoryTransmit_TXE_BTF>
}
 80023ac:	e012      	b.n	80023d4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b2:	781a      	ldrb	r2, [r3, #0]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023be:	1c5a      	adds	r2, r3, #1
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	3b01      	subs	r3, #1
 80023cc:	b29a      	uxth	r2, r3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80023d2:	e7ff      	b.n	80023d4 <I2C_MasterTransmit_TXE+0x130>
 80023d4:	bf00      	nop
 80023d6:	3710      	adds	r7, #16
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}

080023dc <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	2b21      	cmp	r3, #33	; 0x21
 80023f4:	d164      	bne.n	80024c0 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023fa:	b29b      	uxth	r3, r3
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d012      	beq.n	8002426 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002404:	781a      	ldrb	r2, [r3, #0]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002410:	1c5a      	adds	r2, r3, #1
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800241a:	b29b      	uxth	r3, r3
 800241c:	3b01      	subs	r3, #1
 800241e:	b29a      	uxth	r2, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002424:	e04c      	b.n	80024c0 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2b08      	cmp	r3, #8
 800242a:	d01d      	beq.n	8002468 <I2C_MasterTransmit_BTF+0x8c>
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2b20      	cmp	r3, #32
 8002430:	d01a      	beq.n	8002468 <I2C_MasterTransmit_BTF+0x8c>
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002438:	d016      	beq.n	8002468 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	685a      	ldr	r2, [r3, #4]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002448:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2211      	movs	r2, #17
 800244e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2220      	movs	r2, #32
 800245c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f7ff feb7 	bl	80021d4 <HAL_I2C_MasterTxCpltCallback>
}
 8002466:	e02b      	b.n	80024c0 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	685a      	ldr	r2, [r3, #4]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002476:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002486:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2220      	movs	r2, #32
 8002492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800249c:	b2db      	uxtb	r3, r3
 800249e:	2b40      	cmp	r3, #64	; 0x40
 80024a0:	d107      	bne.n	80024b2 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f7ff fed2 	bl	8002254 <HAL_I2C_MemTxCpltCallback>
}
 80024b0:	e006      	b.n	80024c0 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f7ff fe8a 	bl	80021d4 <HAL_I2C_MasterTxCpltCallback>
}
 80024c0:	bf00      	nop
 80024c2:	3710      	adds	r7, #16
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024d6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d11d      	bne.n	800251c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d10b      	bne.n	8002500 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024ec:	b2da      	uxtb	r2, r3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024f8:	1c9a      	adds	r2, r3, #2
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80024fe:	e073      	b.n	80025e8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002504:	b29b      	uxth	r3, r3
 8002506:	121b      	asrs	r3, r3, #8
 8002508:	b2da      	uxtb	r2, r3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002514:	1c5a      	adds	r2, r3, #1
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	651a      	str	r2, [r3, #80]	; 0x50
}
 800251a:	e065      	b.n	80025e8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002520:	2b01      	cmp	r3, #1
 8002522:	d10b      	bne.n	800253c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002528:	b2da      	uxtb	r2, r3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002534:	1c5a      	adds	r2, r3, #1
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	651a      	str	r2, [r3, #80]	; 0x50
}
 800253a:	e055      	b.n	80025e8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002540:	2b02      	cmp	r3, #2
 8002542:	d151      	bne.n	80025e8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002544:	7bfb      	ldrb	r3, [r7, #15]
 8002546:	2b22      	cmp	r3, #34	; 0x22
 8002548:	d10d      	bne.n	8002566 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002558:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800255e:	1c5a      	adds	r2, r3, #1
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002564:	e040      	b.n	80025e8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800256a:	b29b      	uxth	r3, r3
 800256c:	2b00      	cmp	r3, #0
 800256e:	d015      	beq.n	800259c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002570:	7bfb      	ldrb	r3, [r7, #15]
 8002572:	2b21      	cmp	r3, #33	; 0x21
 8002574:	d112      	bne.n	800259c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257a:	781a      	ldrb	r2, [r3, #0]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002586:	1c5a      	adds	r2, r3, #1
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002590:	b29b      	uxth	r3, r3
 8002592:	3b01      	subs	r3, #1
 8002594:	b29a      	uxth	r2, r3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800259a:	e025      	b.n	80025e8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d120      	bne.n	80025e8 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80025a6:	7bfb      	ldrb	r3, [r7, #15]
 80025a8:	2b21      	cmp	r3, #33	; 0x21
 80025aa:	d11d      	bne.n	80025e8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	685a      	ldr	r2, [r3, #4]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80025ba:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025ca:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2200      	movs	r2, #0
 80025d0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2220      	movs	r2, #32
 80025d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f7ff fe36 	bl	8002254 <HAL_I2C_MemTxCpltCallback>
}
 80025e8:	bf00      	nop
 80025ea:	3710      	adds	r7, #16
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	2b22      	cmp	r3, #34	; 0x22
 8002602:	f040 80ac 	bne.w	800275e <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800260a:	b29b      	uxth	r3, r3
 800260c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2b03      	cmp	r3, #3
 8002612:	d921      	bls.n	8002658 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	691a      	ldr	r2, [r3, #16]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261e:	b2d2      	uxtb	r2, r2
 8002620:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002626:	1c5a      	adds	r2, r3, #1
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002630:	b29b      	uxth	r3, r3
 8002632:	3b01      	subs	r3, #1
 8002634:	b29a      	uxth	r2, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800263e:	b29b      	uxth	r3, r3
 8002640:	2b03      	cmp	r3, #3
 8002642:	f040 808c 	bne.w	800275e <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	685a      	ldr	r2, [r3, #4]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002654:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8002656:	e082      	b.n	800275e <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800265c:	2b02      	cmp	r3, #2
 800265e:	d075      	beq.n	800274c <I2C_MasterReceive_RXNE+0x15c>
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2b01      	cmp	r3, #1
 8002664:	d002      	beq.n	800266c <I2C_MasterReceive_RXNE+0x7c>
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d16f      	bne.n	800274c <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f001 fa27 	bl	8003ac0 <I2C_WaitOnSTOPRequestThroughIT>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d142      	bne.n	80026fe <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002686:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	685a      	ldr	r2, [r3, #4]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002696:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	691a      	ldr	r2, [r3, #16]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a2:	b2d2      	uxtb	r2, r2
 80026a4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026aa:	1c5a      	adds	r2, r3, #1
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	3b01      	subs	r3, #1
 80026b8:	b29a      	uxth	r2, r3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2220      	movs	r2, #32
 80026c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	2b40      	cmp	r3, #64	; 0x40
 80026d0:	d10a      	bne.n	80026e8 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f7ff fdc1 	bl	8002268 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80026e6:	e03a      	b.n	800275e <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2200      	movs	r2, #0
 80026ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2212      	movs	r2, #18
 80026f4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f7ff fd76 	bl	80021e8 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80026fc:	e02f      	b.n	800275e <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	685a      	ldr	r2, [r3, #4]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800270c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	691a      	ldr	r2, [r3, #16]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002718:	b2d2      	uxtb	r2, r2
 800271a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002720:	1c5a      	adds	r2, r3, #1
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800272a:	b29b      	uxth	r3, r3
 800272c:	3b01      	subs	r3, #1
 800272e:	b29a      	uxth	r2, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2220      	movs	r2, #32
 8002738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2200      	movs	r2, #0
 8002740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f7ff fd99 	bl	800227c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800274a:	e008      	b.n	800275e <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	685a      	ldr	r2, [r3, #4]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800275a:	605a      	str	r2, [r3, #4]
}
 800275c:	e7ff      	b.n	800275e <I2C_MasterReceive_RXNE+0x16e>
 800275e:	bf00      	nop
 8002760:	3710      	adds	r7, #16
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}

08002766 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002766:	b580      	push	{r7, lr}
 8002768:	b084      	sub	sp, #16
 800276a:	af00      	add	r7, sp, #0
 800276c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002772:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002778:	b29b      	uxth	r3, r3
 800277a:	2b04      	cmp	r3, #4
 800277c:	d11b      	bne.n	80027b6 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	685a      	ldr	r2, [r3, #4]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800278c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	691a      	ldr	r2, [r3, #16]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002798:	b2d2      	uxtb	r2, r2
 800279a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a0:	1c5a      	adds	r2, r3, #1
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	3b01      	subs	r3, #1
 80027ae:	b29a      	uxth	r2, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80027b4:	e0bd      	b.n	8002932 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	2b03      	cmp	r3, #3
 80027be:	d129      	bne.n	8002814 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	685a      	ldr	r2, [r3, #4]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027ce:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2b04      	cmp	r3, #4
 80027d4:	d00a      	beq.n	80027ec <I2C_MasterReceive_BTF+0x86>
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d007      	beq.n	80027ec <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027ea:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	691a      	ldr	r2, [r3, #16]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f6:	b2d2      	uxtb	r2, r2
 80027f8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fe:	1c5a      	adds	r2, r3, #1
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002808:	b29b      	uxth	r3, r3
 800280a:	3b01      	subs	r3, #1
 800280c:	b29a      	uxth	r2, r3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002812:	e08e      	b.n	8002932 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002818:	b29b      	uxth	r3, r3
 800281a:	2b02      	cmp	r3, #2
 800281c:	d176      	bne.n	800290c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2b01      	cmp	r3, #1
 8002822:	d002      	beq.n	800282a <I2C_MasterReceive_BTF+0xc4>
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2b10      	cmp	r3, #16
 8002828:	d108      	bne.n	800283c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002838:	601a      	str	r2, [r3, #0]
 800283a:	e019      	b.n	8002870 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2b04      	cmp	r3, #4
 8002840:	d002      	beq.n	8002848 <I2C_MasterReceive_BTF+0xe2>
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2b02      	cmp	r3, #2
 8002846:	d108      	bne.n	800285a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002856:	601a      	str	r2, [r3, #0]
 8002858:	e00a      	b.n	8002870 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2b10      	cmp	r3, #16
 800285e:	d007      	beq.n	8002870 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800286e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	691a      	ldr	r2, [r3, #16]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287a:	b2d2      	uxtb	r2, r2
 800287c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002882:	1c5a      	adds	r2, r3, #1
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800288c:	b29b      	uxth	r3, r3
 800288e:	3b01      	subs	r3, #1
 8002890:	b29a      	uxth	r2, r3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	691a      	ldr	r2, [r3, #16]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a0:	b2d2      	uxtb	r2, r2
 80028a2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a8:	1c5a      	adds	r2, r3, #1
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	3b01      	subs	r3, #1
 80028b6:	b29a      	uxth	r2, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	685a      	ldr	r2, [r3, #4]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80028ca:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2220      	movs	r2, #32
 80028d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	2b40      	cmp	r3, #64	; 0x40
 80028de:	d10a      	bne.n	80028f6 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2200      	movs	r2, #0
 80028e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2200      	movs	r2, #0
 80028ec:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f7ff fcba 	bl	8002268 <HAL_I2C_MemRxCpltCallback>
}
 80028f4:	e01d      	b.n	8002932 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2212      	movs	r2, #18
 8002902:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f7ff fc6f 	bl	80021e8 <HAL_I2C_MasterRxCpltCallback>
}
 800290a:	e012      	b.n	8002932 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	691a      	ldr	r2, [r3, #16]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002916:	b2d2      	uxtb	r2, r2
 8002918:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291e:	1c5a      	adds	r2, r3, #1
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002928:	b29b      	uxth	r3, r3
 800292a:	3b01      	subs	r3, #1
 800292c:	b29a      	uxth	r2, r3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002932:	bf00      	nop
 8002934:	3710      	adds	r7, #16
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}

0800293a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800293a:	b480      	push	{r7}
 800293c:	b083      	sub	sp, #12
 800293e:	af00      	add	r7, sp, #0
 8002940:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002948:	b2db      	uxtb	r3, r3
 800294a:	2b40      	cmp	r3, #64	; 0x40
 800294c:	d117      	bne.n	800297e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002952:	2b00      	cmp	r3, #0
 8002954:	d109      	bne.n	800296a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800295a:	b2db      	uxtb	r3, r3
 800295c:	461a      	mov	r2, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002966:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002968:	e067      	b.n	8002a3a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800296e:	b2db      	uxtb	r3, r3
 8002970:	f043 0301 	orr.w	r3, r3, #1
 8002974:	b2da      	uxtb	r2, r3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	611a      	str	r2, [r3, #16]
}
 800297c:	e05d      	b.n	8002a3a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	691b      	ldr	r3, [r3, #16]
 8002982:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002986:	d133      	bne.n	80029f0 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800298e:	b2db      	uxtb	r3, r3
 8002990:	2b21      	cmp	r3, #33	; 0x21
 8002992:	d109      	bne.n	80029a8 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002998:	b2db      	uxtb	r3, r3
 800299a:	461a      	mov	r2, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80029a4:	611a      	str	r2, [r3, #16]
 80029a6:	e008      	b.n	80029ba <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	f043 0301 	orr.w	r3, r3, #1
 80029b2:	b2da      	uxtb	r2, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d004      	beq.n	80029cc <I2C_Master_SB+0x92>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d108      	bne.n	80029de <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d032      	beq.n	8002a3a <I2C_Master_SB+0x100>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d02d      	beq.n	8002a3a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	685a      	ldr	r2, [r3, #4]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029ec:	605a      	str	r2, [r3, #4]
}
 80029ee:	e024      	b.n	8002a3a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d10e      	bne.n	8002a16 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	11db      	asrs	r3, r3, #7
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	f003 0306 	and.w	r3, r3, #6
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	f063 030f 	orn	r3, r3, #15
 8002a0c:	b2da      	uxtb	r2, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	611a      	str	r2, [r3, #16]
}
 8002a14:	e011      	b.n	8002a3a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d10d      	bne.n	8002a3a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	11db      	asrs	r3, r3, #7
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	f003 0306 	and.w	r3, r3, #6
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	f063 030e 	orn	r3, r3, #14
 8002a32:	b2da      	uxtb	r2, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	611a      	str	r2, [r3, #16]
}
 8002a3a:	bf00      	nop
 8002a3c:	370c      	adds	r7, #12
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr

08002a46 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002a46:	b480      	push	{r7}
 8002a48:	b083      	sub	sp, #12
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a52:	b2da      	uxtb	r2, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d004      	beq.n	8002a6c <I2C_Master_ADD10+0x26>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d108      	bne.n	8002a7e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d00c      	beq.n	8002a8e <I2C_Master_ADD10+0x48>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d007      	beq.n	8002a8e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	685a      	ldr	r2, [r3, #4]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a8c:	605a      	str	r2, [r3, #4]
  }
}
 8002a8e:	bf00      	nop
 8002a90:	370c      	adds	r7, #12
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr

08002a9a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002a9a:	b480      	push	{r7}
 8002a9c:	b091      	sub	sp, #68	; 0x44
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002aa8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab0:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab6:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	2b22      	cmp	r3, #34	; 0x22
 8002ac2:	f040 8169 	bne.w	8002d98 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d10f      	bne.n	8002aee <I2C_Master_ADDR+0x54>
 8002ace:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002ad2:	2b40      	cmp	r3, #64	; 0x40
 8002ad4:	d10b      	bne.n	8002aee <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	633b      	str	r3, [r7, #48]	; 0x30
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	695b      	ldr	r3, [r3, #20]
 8002ae0:	633b      	str	r3, [r7, #48]	; 0x30
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	699b      	ldr	r3, [r3, #24]
 8002ae8:	633b      	str	r3, [r7, #48]	; 0x30
 8002aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aec:	e160      	b.n	8002db0 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d11d      	bne.n	8002b32 <I2C_Master_ADDR+0x98>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	691b      	ldr	r3, [r3, #16]
 8002afa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002afe:	d118      	bne.n	8002b32 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b00:	2300      	movs	r3, #0
 8002b02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	695b      	ldr	r3, [r3, #20]
 8002b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	699b      	ldr	r3, [r3, #24]
 8002b12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b24:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b2a:	1c5a      	adds	r2, r3, #1
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	651a      	str	r2, [r3, #80]	; 0x50
 8002b30:	e13e      	b.n	8002db0 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d113      	bne.n	8002b64 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	695b      	ldr	r3, [r3, #20]
 8002b46:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	699b      	ldr	r3, [r3, #24]
 8002b4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b50:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b60:	601a      	str	r2, [r3, #0]
 8002b62:	e115      	b.n	8002d90 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	f040 808a 	bne.w	8002c84 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b72:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002b76:	d137      	bne.n	8002be8 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b86:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b96:	d113      	bne.n	8002bc0 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ba6:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ba8:	2300      	movs	r3, #0
 8002baa:	627b      	str	r3, [r7, #36]	; 0x24
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	695b      	ldr	r3, [r3, #20]
 8002bb2:	627b      	str	r3, [r7, #36]	; 0x24
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	699b      	ldr	r3, [r3, #24]
 8002bba:	627b      	str	r3, [r7, #36]	; 0x24
 8002bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bbe:	e0e7      	b.n	8002d90 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	623b      	str	r3, [r7, #32]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	695b      	ldr	r3, [r3, #20]
 8002bca:	623b      	str	r3, [r7, #32]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	699b      	ldr	r3, [r3, #24]
 8002bd2:	623b      	str	r3, [r7, #32]
 8002bd4:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002be4:	601a      	str	r2, [r3, #0]
 8002be6:	e0d3      	b.n	8002d90 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bea:	2b08      	cmp	r3, #8
 8002bec:	d02e      	beq.n	8002c4c <I2C_Master_ADDR+0x1b2>
 8002bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bf0:	2b20      	cmp	r3, #32
 8002bf2:	d02b      	beq.n	8002c4c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002bf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bf6:	2b12      	cmp	r3, #18
 8002bf8:	d102      	bne.n	8002c00 <I2C_Master_ADDR+0x166>
 8002bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d125      	bne.n	8002c4c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c02:	2b04      	cmp	r3, #4
 8002c04:	d00e      	beq.n	8002c24 <I2C_Master_ADDR+0x18a>
 8002c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d00b      	beq.n	8002c24 <I2C_Master_ADDR+0x18a>
 8002c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c0e:	2b10      	cmp	r3, #16
 8002c10:	d008      	beq.n	8002c24 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c20:	601a      	str	r2, [r3, #0]
 8002c22:	e007      	b.n	8002c34 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c32:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c34:	2300      	movs	r3, #0
 8002c36:	61fb      	str	r3, [r7, #28]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	695b      	ldr	r3, [r3, #20]
 8002c3e:	61fb      	str	r3, [r7, #28]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	699b      	ldr	r3, [r3, #24]
 8002c46:	61fb      	str	r3, [r7, #28]
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	e0a1      	b.n	8002d90 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c5a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	61bb      	str	r3, [r7, #24]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	695b      	ldr	r3, [r3, #20]
 8002c66:	61bb      	str	r3, [r7, #24]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	699b      	ldr	r3, [r3, #24]
 8002c6e:	61bb      	str	r3, [r7, #24]
 8002c70:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c80:	601a      	str	r2, [r3, #0]
 8002c82:	e085      	b.n	8002d90 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d14d      	bne.n	8002d2a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c90:	2b04      	cmp	r3, #4
 8002c92:	d016      	beq.n	8002cc2 <I2C_Master_ADDR+0x228>
 8002c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d013      	beq.n	8002cc2 <I2C_Master_ADDR+0x228>
 8002c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c9c:	2b10      	cmp	r3, #16
 8002c9e:	d010      	beq.n	8002cc2 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cae:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cbe:	601a      	str	r2, [r3, #0]
 8002cc0:	e007      	b.n	8002cd2 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002cd0:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cdc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ce0:	d117      	bne.n	8002d12 <I2C_Master_ADDR+0x278>
 8002ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ce4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002ce8:	d00b      	beq.n	8002d02 <I2C_Master_ADDR+0x268>
 8002cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d008      	beq.n	8002d02 <I2C_Master_ADDR+0x268>
 8002cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cf2:	2b08      	cmp	r3, #8
 8002cf4:	d005      	beq.n	8002d02 <I2C_Master_ADDR+0x268>
 8002cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cf8:	2b10      	cmp	r3, #16
 8002cfa:	d002      	beq.n	8002d02 <I2C_Master_ADDR+0x268>
 8002cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cfe:	2b20      	cmp	r3, #32
 8002d00:	d107      	bne.n	8002d12 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	685a      	ldr	r2, [r3, #4]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002d10:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d12:	2300      	movs	r3, #0
 8002d14:	617b      	str	r3, [r7, #20]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	695b      	ldr	r3, [r3, #20]
 8002d1c:	617b      	str	r3, [r7, #20]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	699b      	ldr	r3, [r3, #24]
 8002d24:	617b      	str	r3, [r7, #20]
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	e032      	b.n	8002d90 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002d38:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d48:	d117      	bne.n	8002d7a <I2C_Master_ADDR+0x2e0>
 8002d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d4c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002d50:	d00b      	beq.n	8002d6a <I2C_Master_ADDR+0x2d0>
 8002d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d008      	beq.n	8002d6a <I2C_Master_ADDR+0x2d0>
 8002d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d5a:	2b08      	cmp	r3, #8
 8002d5c:	d005      	beq.n	8002d6a <I2C_Master_ADDR+0x2d0>
 8002d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d60:	2b10      	cmp	r3, #16
 8002d62:	d002      	beq.n	8002d6a <I2C_Master_ADDR+0x2d0>
 8002d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d66:	2b20      	cmp	r3, #32
 8002d68:	d107      	bne.n	8002d7a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	685a      	ldr	r2, [r3, #4]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002d78:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	613b      	str	r3, [r7, #16]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	695b      	ldr	r3, [r3, #20]
 8002d84:	613b      	str	r3, [r7, #16]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	699b      	ldr	r3, [r3, #24]
 8002d8c:	613b      	str	r3, [r7, #16]
 8002d8e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002d96:	e00b      	b.n	8002db0 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d98:	2300      	movs	r3, #0
 8002d9a:	60fb      	str	r3, [r7, #12]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	695b      	ldr	r3, [r3, #20]
 8002da2:	60fb      	str	r3, [r7, #12]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	699b      	ldr	r3, [r3, #24]
 8002daa:	60fb      	str	r3, [r7, #12]
 8002dac:	68fb      	ldr	r3, [r7, #12]
}
 8002dae:	e7ff      	b.n	8002db0 <I2C_Master_ADDR+0x316>
 8002db0:	bf00      	nop
 8002db2:	3744      	adds	r7, #68	; 0x44
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b084      	sub	sp, #16
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dca:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d02b      	beq.n	8002e2e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dda:	781a      	ldrb	r2, [r3, #0]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de6:	1c5a      	adds	r2, r3, #1
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	3b01      	subs	r3, #1
 8002df4:	b29a      	uxth	r2, r3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d114      	bne.n	8002e2e <I2C_SlaveTransmit_TXE+0x72>
 8002e04:	7bfb      	ldrb	r3, [r7, #15]
 8002e06:	2b29      	cmp	r3, #41	; 0x29
 8002e08:	d111      	bne.n	8002e2e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	685a      	ldr	r2, [r3, #4]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e18:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2221      	movs	r2, #33	; 0x21
 8002e1e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2228      	movs	r2, #40	; 0x28
 8002e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f7ff f9e7 	bl	80021fc <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002e2e:	bf00      	nop
 8002e30:	3710      	adds	r7, #16
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}

08002e36 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002e36:	b480      	push	{r7}
 8002e38:	b083      	sub	sp, #12
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d011      	beq.n	8002e6c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4c:	781a      	ldrb	r2, [r3, #0]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e58:	1c5a      	adds	r2, r3, #1
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	3b01      	subs	r3, #1
 8002e66:	b29a      	uxth	r2, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002e6c:	bf00      	nop
 8002e6e:	370c      	adds	r7, #12
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr

08002e78 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e86:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d02c      	beq.n	8002eec <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	691a      	ldr	r2, [r3, #16]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9c:	b2d2      	uxtb	r2, r2
 8002e9e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea4:	1c5a      	adds	r2, r3, #1
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	3b01      	subs	r3, #1
 8002eb2:	b29a      	uxth	r2, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d114      	bne.n	8002eec <I2C_SlaveReceive_RXNE+0x74>
 8002ec2:	7bfb      	ldrb	r3, [r7, #15]
 8002ec4:	2b2a      	cmp	r3, #42	; 0x2a
 8002ec6:	d111      	bne.n	8002eec <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	685a      	ldr	r2, [r3, #4]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ed6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2222      	movs	r2, #34	; 0x22
 8002edc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2228      	movs	r2, #40	; 0x28
 8002ee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f7ff f992 	bl	8002210 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002eec:	bf00      	nop
 8002eee:	3710      	adds	r7, #16
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}

08002ef4 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d012      	beq.n	8002f2c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	691a      	ldr	r2, [r3, #16]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f10:	b2d2      	uxtb	r2, r2
 8002f12:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f18:	1c5a      	adds	r2, r3, #1
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	3b01      	subs	r3, #1
 8002f26:	b29a      	uxth	r2, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002f2c:	bf00      	nop
 8002f2e:	370c      	adds	r7, #12
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr

08002f38 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002f42:	2300      	movs	r3, #0
 8002f44:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002f52:	2b28      	cmp	r3, #40	; 0x28
 8002f54:	d127      	bne.n	8002fa6 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	685a      	ldr	r2, [r3, #4]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f64:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	089b      	lsrs	r3, r3, #2
 8002f6a:	f003 0301 	and.w	r3, r3, #1
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d101      	bne.n	8002f76 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002f72:	2301      	movs	r3, #1
 8002f74:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	09db      	lsrs	r3, r3, #7
 8002f7a:	f003 0301 	and.w	r3, r3, #1
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d103      	bne.n	8002f8a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	81bb      	strh	r3, [r7, #12]
 8002f88:	e002      	b.n	8002f90 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002f98:	89ba      	ldrh	r2, [r7, #12]
 8002f9a:	7bfb      	ldrb	r3, [r7, #15]
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f7ff f940 	bl	8002224 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002fa4:	e00e      	b.n	8002fc4 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	60bb      	str	r3, [r7, #8]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	695b      	ldr	r3, [r3, #20]
 8002fb0:	60bb      	str	r3, [r7, #8]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	699b      	ldr	r3, [r3, #24]
 8002fb8:	60bb      	str	r3, [r7, #8]
 8002fba:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8002fc4:	bf00      	nop
 8002fc6:	3710      	adds	r7, #16
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b084      	sub	sp, #16
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fda:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	685a      	ldr	r2, [r3, #4]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002fea:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002fec:	2300      	movs	r3, #0
 8002fee:	60bb      	str	r3, [r7, #8]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	695b      	ldr	r3, [r3, #20]
 8002ff6:	60bb      	str	r3, [r7, #8]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f042 0201 	orr.w	r2, r2, #1
 8003006:	601a      	str	r2, [r3, #0]
 8003008:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003018:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003024:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003028:	d172      	bne.n	8003110 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800302a:	7bfb      	ldrb	r3, [r7, #15]
 800302c:	2b22      	cmp	r3, #34	; 0x22
 800302e:	d002      	beq.n	8003036 <I2C_Slave_STOPF+0x6a>
 8003030:	7bfb      	ldrb	r3, [r7, #15]
 8003032:	2b2a      	cmp	r3, #42	; 0x2a
 8003034:	d135      	bne.n	80030a2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	b29a      	uxth	r2, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003048:	b29b      	uxth	r3, r3
 800304a:	2b00      	cmp	r3, #0
 800304c:	d005      	beq.n	800305a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003052:	f043 0204 	orr.w	r2, r3, #4
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	685a      	ldr	r2, [r3, #4]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003068:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800306e:	4618      	mov	r0, r3
 8003070:	f7fe f982 	bl	8001378 <HAL_DMA_GetState>
 8003074:	4603      	mov	r3, r0
 8003076:	2b01      	cmp	r3, #1
 8003078:	d049      	beq.n	800310e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800307e:	4a69      	ldr	r2, [pc, #420]	; (8003224 <I2C_Slave_STOPF+0x258>)
 8003080:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003086:	4618      	mov	r0, r3
 8003088:	f7fe f954 	bl	8001334 <HAL_DMA_Abort_IT>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d03d      	beq.n	800310e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003096:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800309c:	4610      	mov	r0, r2
 800309e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80030a0:	e035      	b.n	800310e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	b29a      	uxth	r2, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d005      	beq.n	80030c6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030be:	f043 0204 	orr.w	r2, r3, #4
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	685a      	ldr	r2, [r3, #4]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030d4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030da:	4618      	mov	r0, r3
 80030dc:	f7fe f94c 	bl	8001378 <HAL_DMA_GetState>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d014      	beq.n	8003110 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ea:	4a4e      	ldr	r2, [pc, #312]	; (8003224 <I2C_Slave_STOPF+0x258>)
 80030ec:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030f2:	4618      	mov	r0, r3
 80030f4:	f7fe f91e 	bl	8001334 <HAL_DMA_Abort_IT>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d008      	beq.n	8003110 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003102:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003104:	687a      	ldr	r2, [r7, #4]
 8003106:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003108:	4610      	mov	r0, r2
 800310a:	4798      	blx	r3
 800310c:	e000      	b.n	8003110 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800310e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003114:	b29b      	uxth	r3, r3
 8003116:	2b00      	cmp	r3, #0
 8003118:	d03e      	beq.n	8003198 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	695b      	ldr	r3, [r3, #20]
 8003120:	f003 0304 	and.w	r3, r3, #4
 8003124:	2b04      	cmp	r3, #4
 8003126:	d112      	bne.n	800314e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	691a      	ldr	r2, [r3, #16]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003132:	b2d2      	uxtb	r2, r2
 8003134:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313a:	1c5a      	adds	r2, r3, #1
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003144:	b29b      	uxth	r3, r3
 8003146:	3b01      	subs	r3, #1
 8003148:	b29a      	uxth	r2, r3
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	695b      	ldr	r3, [r3, #20]
 8003154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003158:	2b40      	cmp	r3, #64	; 0x40
 800315a:	d112      	bne.n	8003182 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	691a      	ldr	r2, [r3, #16]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003166:	b2d2      	uxtb	r2, r2
 8003168:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316e:	1c5a      	adds	r2, r3, #1
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003178:	b29b      	uxth	r3, r3
 800317a:	3b01      	subs	r3, #1
 800317c:	b29a      	uxth	r2, r3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003186:	b29b      	uxth	r3, r3
 8003188:	2b00      	cmp	r3, #0
 800318a:	d005      	beq.n	8003198 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003190:	f043 0204 	orr.w	r2, r3, #4
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319c:	2b00      	cmp	r3, #0
 800319e:	d003      	beq.n	80031a8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f000 f8b3 	bl	800330c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80031a6:	e039      	b.n	800321c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80031a8:	7bfb      	ldrb	r3, [r7, #15]
 80031aa:	2b2a      	cmp	r3, #42	; 0x2a
 80031ac:	d109      	bne.n	80031c2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2228      	movs	r2, #40	; 0x28
 80031b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f7ff f827 	bl	8002210 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	2b28      	cmp	r3, #40	; 0x28
 80031cc:	d111      	bne.n	80031f2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a15      	ldr	r2, [pc, #84]	; (8003228 <I2C_Slave_STOPF+0x25c>)
 80031d2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2200      	movs	r2, #0
 80031d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2220      	movs	r2, #32
 80031de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f7ff f828 	bl	8002240 <HAL_I2C_ListenCpltCallback>
}
 80031f0:	e014      	b.n	800321c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f6:	2b22      	cmp	r3, #34	; 0x22
 80031f8:	d002      	beq.n	8003200 <I2C_Slave_STOPF+0x234>
 80031fa:	7bfb      	ldrb	r3, [r7, #15]
 80031fc:	2b22      	cmp	r3, #34	; 0x22
 80031fe:	d10d      	bne.n	800321c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2220      	movs	r2, #32
 800320a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f7fe fffa 	bl	8002210 <HAL_I2C_SlaveRxCpltCallback>
}
 800321c:	bf00      	nop
 800321e:	3710      	adds	r7, #16
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}
 8003224:	08003741 	.word	0x08003741
 8003228:	ffff0000 	.word	0xffff0000

0800322c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b084      	sub	sp, #16
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800323a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003240:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	2b08      	cmp	r3, #8
 8003246:	d002      	beq.n	800324e <I2C_Slave_AF+0x22>
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	2b20      	cmp	r3, #32
 800324c:	d129      	bne.n	80032a2 <I2C_Slave_AF+0x76>
 800324e:	7bfb      	ldrb	r3, [r7, #15]
 8003250:	2b28      	cmp	r3, #40	; 0x28
 8003252:	d126      	bne.n	80032a2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	4a2c      	ldr	r2, [pc, #176]	; (8003308 <I2C_Slave_AF+0xdc>)
 8003258:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	685a      	ldr	r2, [r3, #4]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003268:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003272:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003282:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2220      	movs	r2, #32
 800328e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f7fe ffd0 	bl	8002240 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80032a0:	e02e      	b.n	8003300 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80032a2:	7bfb      	ldrb	r3, [r7, #15]
 80032a4:	2b21      	cmp	r3, #33	; 0x21
 80032a6:	d126      	bne.n	80032f6 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	4a17      	ldr	r2, [pc, #92]	; (8003308 <I2C_Slave_AF+0xdc>)
 80032ac:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2221      	movs	r2, #33	; 0x21
 80032b2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2220      	movs	r2, #32
 80032b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	685a      	ldr	r2, [r3, #4]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80032d2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80032dc:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032ec:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f7fe ff84 	bl	80021fc <HAL_I2C_SlaveTxCpltCallback>
}
 80032f4:	e004      	b.n	8003300 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80032fe:	615a      	str	r2, [r3, #20]
}
 8003300:	bf00      	nop
 8003302:	3710      	adds	r7, #16
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}
 8003308:	ffff0000 	.word	0xffff0000

0800330c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800331a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003322:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003324:	7bbb      	ldrb	r3, [r7, #14]
 8003326:	2b10      	cmp	r3, #16
 8003328:	d002      	beq.n	8003330 <I2C_ITError+0x24>
 800332a:	7bbb      	ldrb	r3, [r7, #14]
 800332c:	2b40      	cmp	r3, #64	; 0x40
 800332e:	d10a      	bne.n	8003346 <I2C_ITError+0x3a>
 8003330:	7bfb      	ldrb	r3, [r7, #15]
 8003332:	2b22      	cmp	r3, #34	; 0x22
 8003334:	d107      	bne.n	8003346 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003344:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003346:	7bfb      	ldrb	r3, [r7, #15]
 8003348:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800334c:	2b28      	cmp	r3, #40	; 0x28
 800334e:	d107      	bne.n	8003360 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2228      	movs	r2, #40	; 0x28
 800335a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800335e:	e015      	b.n	800338c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800336a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800336e:	d00a      	beq.n	8003386 <I2C_ITError+0x7a>
 8003370:	7bfb      	ldrb	r3, [r7, #15]
 8003372:	2b60      	cmp	r3, #96	; 0x60
 8003374:	d007      	beq.n	8003386 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2220      	movs	r2, #32
 800337a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003396:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800339a:	d162      	bne.n	8003462 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	685a      	ldr	r2, [r3, #4]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033aa:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d020      	beq.n	80033fc <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033be:	4a6a      	ldr	r2, [pc, #424]	; (8003568 <I2C_ITError+0x25c>)
 80033c0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033c6:	4618      	mov	r0, r3
 80033c8:	f7fd ffb4 	bl	8001334 <HAL_DMA_Abort_IT>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	f000 8089 	beq.w	80034e6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f022 0201 	bic.w	r2, r2, #1
 80033e2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2220      	movs	r2, #32
 80033e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80033f6:	4610      	mov	r0, r2
 80033f8:	4798      	blx	r3
 80033fa:	e074      	b.n	80034e6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003400:	4a59      	ldr	r2, [pc, #356]	; (8003568 <I2C_ITError+0x25c>)
 8003402:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003408:	4618      	mov	r0, r3
 800340a:	f7fd ff93 	bl	8001334 <HAL_DMA_Abort_IT>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d068      	beq.n	80034e6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	695b      	ldr	r3, [r3, #20]
 800341a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800341e:	2b40      	cmp	r3, #64	; 0x40
 8003420:	d10b      	bne.n	800343a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	691a      	ldr	r2, [r3, #16]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342c:	b2d2      	uxtb	r2, r2
 800342e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003434:	1c5a      	adds	r2, r3, #1
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f022 0201 	bic.w	r2, r2, #1
 8003448:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2220      	movs	r2, #32
 800344e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003456:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800345c:	4610      	mov	r0, r2
 800345e:	4798      	blx	r3
 8003460:	e041      	b.n	80034e6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003468:	b2db      	uxtb	r3, r3
 800346a:	2b60      	cmp	r3, #96	; 0x60
 800346c:	d125      	bne.n	80034ba <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2220      	movs	r2, #32
 8003472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	695b      	ldr	r3, [r3, #20]
 8003482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003486:	2b40      	cmp	r3, #64	; 0x40
 8003488:	d10b      	bne.n	80034a2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	691a      	ldr	r2, [r3, #16]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003494:	b2d2      	uxtb	r2, r2
 8003496:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349c:	1c5a      	adds	r2, r3, #1
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f022 0201 	bic.w	r2, r2, #1
 80034b0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f7fe feec 	bl	8002290 <HAL_I2C_AbortCpltCallback>
 80034b8:	e015      	b.n	80034e6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	695b      	ldr	r3, [r3, #20]
 80034c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034c4:	2b40      	cmp	r3, #64	; 0x40
 80034c6:	d10b      	bne.n	80034e0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	691a      	ldr	r2, [r3, #16]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d2:	b2d2      	uxtb	r2, r2
 80034d4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034da:	1c5a      	adds	r2, r3, #1
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f7fe fecb 	bl	800227c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ea:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	f003 0301 	and.w	r3, r3, #1
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d10e      	bne.n	8003514 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d109      	bne.n	8003514 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003506:	2b00      	cmp	r3, #0
 8003508:	d104      	bne.n	8003514 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003510:	2b00      	cmp	r3, #0
 8003512:	d007      	beq.n	8003524 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	685a      	ldr	r2, [r3, #4]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003522:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800352a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003530:	f003 0304 	and.w	r3, r3, #4
 8003534:	2b04      	cmp	r3, #4
 8003536:	d113      	bne.n	8003560 <I2C_ITError+0x254>
 8003538:	7bfb      	ldrb	r3, [r7, #15]
 800353a:	2b28      	cmp	r3, #40	; 0x28
 800353c:	d110      	bne.n	8003560 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a0a      	ldr	r2, [pc, #40]	; (800356c <I2C_ITError+0x260>)
 8003542:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2220      	movs	r2, #32
 800354e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f7fe fe70 	bl	8002240 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003560:	bf00      	nop
 8003562:	3710      	adds	r7, #16
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}
 8003568:	08003741 	.word	0x08003741
 800356c:	ffff0000 	.word	0xffff0000

08003570 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b088      	sub	sp, #32
 8003574:	af02      	add	r7, sp, #8
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	4608      	mov	r0, r1
 800357a:	4611      	mov	r1, r2
 800357c:	461a      	mov	r2, r3
 800357e:	4603      	mov	r3, r0
 8003580:	817b      	strh	r3, [r7, #10]
 8003582:	460b      	mov	r3, r1
 8003584:	813b      	strh	r3, [r7, #8]
 8003586:	4613      	mov	r3, r2
 8003588:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003598:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035a8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80035aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ac:	9300      	str	r3, [sp, #0]
 80035ae:	6a3b      	ldr	r3, [r7, #32]
 80035b0:	2200      	movs	r2, #0
 80035b2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80035b6:	68f8      	ldr	r0, [r7, #12]
 80035b8:	f000 f96a 	bl	8003890 <I2C_WaitOnFlagUntilTimeout>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d00d      	beq.n	80035de <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035d0:	d103      	bne.n	80035da <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035d8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e0aa      	b.n	8003734 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80035de:	897b      	ldrh	r3, [r7, #10]
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	461a      	mov	r2, r3
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80035ec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f0:	6a3a      	ldr	r2, [r7, #32]
 80035f2:	4952      	ldr	r1, [pc, #328]	; (800373c <I2C_RequestMemoryRead+0x1cc>)
 80035f4:	68f8      	ldr	r0, [r7, #12]
 80035f6:	f000 f9a2 	bl	800393e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d001      	beq.n	8003604 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e097      	b.n	8003734 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003604:	2300      	movs	r3, #0
 8003606:	617b      	str	r3, [r7, #20]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	695b      	ldr	r3, [r3, #20]
 800360e:	617b      	str	r3, [r7, #20]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	699b      	ldr	r3, [r3, #24]
 8003616:	617b      	str	r3, [r7, #20]
 8003618:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800361a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800361c:	6a39      	ldr	r1, [r7, #32]
 800361e:	68f8      	ldr	r0, [r7, #12]
 8003620:	f000 fa0c 	bl	8003a3c <I2C_WaitOnTXEFlagUntilTimeout>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d00d      	beq.n	8003646 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362e:	2b04      	cmp	r3, #4
 8003630:	d107      	bne.n	8003642 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003640:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e076      	b.n	8003734 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003646:	88fb      	ldrh	r3, [r7, #6]
 8003648:	2b01      	cmp	r3, #1
 800364a:	d105      	bne.n	8003658 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800364c:	893b      	ldrh	r3, [r7, #8]
 800364e:	b2da      	uxtb	r2, r3
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	611a      	str	r2, [r3, #16]
 8003656:	e021      	b.n	800369c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003658:	893b      	ldrh	r3, [r7, #8]
 800365a:	0a1b      	lsrs	r3, r3, #8
 800365c:	b29b      	uxth	r3, r3
 800365e:	b2da      	uxtb	r2, r3
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003666:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003668:	6a39      	ldr	r1, [r7, #32]
 800366a:	68f8      	ldr	r0, [r7, #12]
 800366c:	f000 f9e6 	bl	8003a3c <I2C_WaitOnTXEFlagUntilTimeout>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d00d      	beq.n	8003692 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367a:	2b04      	cmp	r3, #4
 800367c:	d107      	bne.n	800368e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800368c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e050      	b.n	8003734 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003692:	893b      	ldrh	r3, [r7, #8]
 8003694:	b2da      	uxtb	r2, r3
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800369c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800369e:	6a39      	ldr	r1, [r7, #32]
 80036a0:	68f8      	ldr	r0, [r7, #12]
 80036a2:	f000 f9cb 	bl	8003a3c <I2C_WaitOnTXEFlagUntilTimeout>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d00d      	beq.n	80036c8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b0:	2b04      	cmp	r3, #4
 80036b2:	d107      	bne.n	80036c4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036c2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e035      	b.n	8003734 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036d6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80036d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036da:	9300      	str	r3, [sp, #0]
 80036dc:	6a3b      	ldr	r3, [r7, #32]
 80036de:	2200      	movs	r2, #0
 80036e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80036e4:	68f8      	ldr	r0, [r7, #12]
 80036e6:	f000 f8d3 	bl	8003890 <I2C_WaitOnFlagUntilTimeout>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d00d      	beq.n	800370c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036fe:	d103      	bne.n	8003708 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003706:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	e013      	b.n	8003734 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800370c:	897b      	ldrh	r3, [r7, #10]
 800370e:	b2db      	uxtb	r3, r3
 8003710:	f043 0301 	orr.w	r3, r3, #1
 8003714:	b2da      	uxtb	r2, r3
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800371c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371e:	6a3a      	ldr	r2, [r7, #32]
 8003720:	4906      	ldr	r1, [pc, #24]	; (800373c <I2C_RequestMemoryRead+0x1cc>)
 8003722:	68f8      	ldr	r0, [r7, #12]
 8003724:	f000 f90b 	bl	800393e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003728:	4603      	mov	r3, r0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d001      	beq.n	8003732 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e000      	b.n	8003734 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003732:	2300      	movs	r3, #0
}
 8003734:	4618      	mov	r0, r3
 8003736:	3718      	adds	r7, #24
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}
 800373c:	00010002 	.word	0x00010002

08003740 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b086      	sub	sp, #24
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003748:	2300      	movs	r3, #0
 800374a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003750:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003758:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800375a:	4b4b      	ldr	r3, [pc, #300]	; (8003888 <I2C_DMAAbort+0x148>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	08db      	lsrs	r3, r3, #3
 8003760:	4a4a      	ldr	r2, [pc, #296]	; (800388c <I2C_DMAAbort+0x14c>)
 8003762:	fba2 2303 	umull	r2, r3, r2, r3
 8003766:	0a1a      	lsrs	r2, r3, #8
 8003768:	4613      	mov	r3, r2
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	4413      	add	r3, r2
 800376e:	00da      	lsls	r2, r3, #3
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d106      	bne.n	8003788 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377e:	f043 0220 	orr.w	r2, r3, #32
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8003786:	e00a      	b.n	800379e <I2C_DMAAbort+0x5e>
    }
    count--;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	3b01      	subs	r3, #1
 800378c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003798:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800379c:	d0ea      	beq.n	8003774 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d003      	beq.n	80037ae <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037aa:	2200      	movs	r2, #0
 80037ac:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d003      	beq.n	80037be <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ba:	2200      	movs	r2, #0
 80037bc:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037cc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	2200      	movs	r2, #0
 80037d2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d003      	beq.n	80037e4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037e0:	2200      	movs	r2, #0
 80037e2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d003      	beq.n	80037f4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f0:	2200      	movs	r2, #0
 80037f2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f022 0201 	bic.w	r2, r2, #1
 8003802:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800380a:	b2db      	uxtb	r3, r3
 800380c:	2b60      	cmp	r3, #96	; 0x60
 800380e:	d10e      	bne.n	800382e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	2220      	movs	r2, #32
 8003814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	2200      	movs	r2, #0
 800381c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	2200      	movs	r2, #0
 8003824:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003826:	6978      	ldr	r0, [r7, #20]
 8003828:	f7fe fd32 	bl	8002290 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800382c:	e027      	b.n	800387e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800382e:	7cfb      	ldrb	r3, [r7, #19]
 8003830:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003834:	2b28      	cmp	r3, #40	; 0x28
 8003836:	d117      	bne.n	8003868 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f042 0201 	orr.w	r2, r2, #1
 8003846:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003856:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	2200      	movs	r2, #0
 800385c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	2228      	movs	r2, #40	; 0x28
 8003862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003866:	e007      	b.n	8003878 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	2220      	movs	r2, #32
 800386c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	2200      	movs	r2, #0
 8003874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003878:	6978      	ldr	r0, [r7, #20]
 800387a:	f7fe fcff 	bl	800227c <HAL_I2C_ErrorCallback>
}
 800387e:	bf00      	nop
 8003880:	3718      	adds	r7, #24
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	20000000 	.word	0x20000000
 800388c:	14f8b589 	.word	0x14f8b589

08003890 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	60f8      	str	r0, [r7, #12]
 8003898:	60b9      	str	r1, [r7, #8]
 800389a:	603b      	str	r3, [r7, #0]
 800389c:	4613      	mov	r3, r2
 800389e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038a0:	e025      	b.n	80038ee <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038a8:	d021      	beq.n	80038ee <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038aa:	f7fd fc31 	bl	8001110 <HAL_GetTick>
 80038ae:	4602      	mov	r2, r0
 80038b0:	69bb      	ldr	r3, [r7, #24]
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	683a      	ldr	r2, [r7, #0]
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d302      	bcc.n	80038c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d116      	bne.n	80038ee <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2200      	movs	r2, #0
 80038c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2220      	movs	r2, #32
 80038ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2200      	movs	r2, #0
 80038d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038da:	f043 0220 	orr.w	r2, r3, #32
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e023      	b.n	8003936 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	0c1b      	lsrs	r3, r3, #16
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d10d      	bne.n	8003914 <I2C_WaitOnFlagUntilTimeout+0x84>
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	695b      	ldr	r3, [r3, #20]
 80038fe:	43da      	mvns	r2, r3
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	4013      	ands	r3, r2
 8003904:	b29b      	uxth	r3, r3
 8003906:	2b00      	cmp	r3, #0
 8003908:	bf0c      	ite	eq
 800390a:	2301      	moveq	r3, #1
 800390c:	2300      	movne	r3, #0
 800390e:	b2db      	uxtb	r3, r3
 8003910:	461a      	mov	r2, r3
 8003912:	e00c      	b.n	800392e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	699b      	ldr	r3, [r3, #24]
 800391a:	43da      	mvns	r2, r3
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	4013      	ands	r3, r2
 8003920:	b29b      	uxth	r3, r3
 8003922:	2b00      	cmp	r3, #0
 8003924:	bf0c      	ite	eq
 8003926:	2301      	moveq	r3, #1
 8003928:	2300      	movne	r3, #0
 800392a:	b2db      	uxtb	r3, r3
 800392c:	461a      	mov	r2, r3
 800392e:	79fb      	ldrb	r3, [r7, #7]
 8003930:	429a      	cmp	r2, r3
 8003932:	d0b6      	beq.n	80038a2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003934:	2300      	movs	r3, #0
}
 8003936:	4618      	mov	r0, r3
 8003938:	3710      	adds	r7, #16
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}

0800393e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800393e:	b580      	push	{r7, lr}
 8003940:	b084      	sub	sp, #16
 8003942:	af00      	add	r7, sp, #0
 8003944:	60f8      	str	r0, [r7, #12]
 8003946:	60b9      	str	r1, [r7, #8]
 8003948:	607a      	str	r2, [r7, #4]
 800394a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800394c:	e051      	b.n	80039f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	695b      	ldr	r3, [r3, #20]
 8003954:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003958:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800395c:	d123      	bne.n	80039a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800396c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003976:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2200      	movs	r2, #0
 800397c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2220      	movs	r2, #32
 8003982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2200      	movs	r2, #0
 800398a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003992:	f043 0204 	orr.w	r2, r3, #4
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2200      	movs	r2, #0
 800399e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e046      	b.n	8003a34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ac:	d021      	beq.n	80039f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039ae:	f7fd fbaf 	bl	8001110 <HAL_GetTick>
 80039b2:	4602      	mov	r2, r0
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d302      	bcc.n	80039c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d116      	bne.n	80039f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2200      	movs	r2, #0
 80039c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2220      	movs	r2, #32
 80039ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2200      	movs	r2, #0
 80039d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039de:	f043 0220 	orr.w	r2, r3, #32
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2200      	movs	r2, #0
 80039ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e020      	b.n	8003a34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	0c1b      	lsrs	r3, r3, #16
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d10c      	bne.n	8003a16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	695b      	ldr	r3, [r3, #20]
 8003a02:	43da      	mvns	r2, r3
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	4013      	ands	r3, r2
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	bf14      	ite	ne
 8003a0e:	2301      	movne	r3, #1
 8003a10:	2300      	moveq	r3, #0
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	e00b      	b.n	8003a2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	699b      	ldr	r3, [r3, #24]
 8003a1c:	43da      	mvns	r2, r3
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	4013      	ands	r3, r2
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	bf14      	ite	ne
 8003a28:	2301      	movne	r3, #1
 8003a2a:	2300      	moveq	r3, #0
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d18d      	bne.n	800394e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003a32:	2300      	movs	r3, #0
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3710      	adds	r7, #16
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}

08003a3c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b084      	sub	sp, #16
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	60f8      	str	r0, [r7, #12]
 8003a44:	60b9      	str	r1, [r7, #8]
 8003a46:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a48:	e02d      	b.n	8003aa6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a4a:	68f8      	ldr	r0, [r7, #12]
 8003a4c:	f000 f8c0 	bl	8003bd0 <I2C_IsAcknowledgeFailed>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d001      	beq.n	8003a5a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e02d      	b.n	8003ab6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a60:	d021      	beq.n	8003aa6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a62:	f7fd fb55 	bl	8001110 <HAL_GetTick>
 8003a66:	4602      	mov	r2, r0
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	1ad3      	subs	r3, r2, r3
 8003a6c:	68ba      	ldr	r2, [r7, #8]
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d302      	bcc.n	8003a78 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d116      	bne.n	8003aa6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2220      	movs	r2, #32
 8003a82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a92:	f043 0220 	orr.w	r2, r3, #32
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e007      	b.n	8003ab6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	695b      	ldr	r3, [r3, #20]
 8003aac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ab0:	2b80      	cmp	r3, #128	; 0x80
 8003ab2:	d1ca      	bne.n	8003a4a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ab4:	2300      	movs	r3, #0
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3710      	adds	r7, #16
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
	...

08003ac0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b085      	sub	sp, #20
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003acc:	4b13      	ldr	r3, [pc, #76]	; (8003b1c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	08db      	lsrs	r3, r3, #3
 8003ad2:	4a13      	ldr	r2, [pc, #76]	; (8003b20 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003ad4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad8:	0a1a      	lsrs	r2, r3, #8
 8003ada:	4613      	mov	r3, r2
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	4413      	add	r3, r2
 8003ae0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	3b01      	subs	r3, #1
 8003ae6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d107      	bne.n	8003afe <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af2:	f043 0220 	orr.w	r2, r3, #32
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e008      	b.n	8003b10 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b0c:	d0e9      	beq.n	8003ae2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8003b0e:	2300      	movs	r3, #0
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3714      	adds	r7, #20
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr
 8003b1c:	20000000 	.word	0x20000000
 8003b20:	14f8b589 	.word	0x14f8b589

08003b24 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b084      	sub	sp, #16
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	60b9      	str	r1, [r7, #8]
 8003b2e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003b30:	e042      	b.n	8003bb8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	695b      	ldr	r3, [r3, #20]
 8003b38:	f003 0310 	and.w	r3, r3, #16
 8003b3c:	2b10      	cmp	r3, #16
 8003b3e:	d119      	bne.n	8003b74 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f06f 0210 	mvn.w	r2, #16
 8003b48:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2220      	movs	r2, #32
 8003b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e029      	b.n	8003bc8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b74:	f7fd facc 	bl	8001110 <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	68ba      	ldr	r2, [r7, #8]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d302      	bcc.n	8003b8a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d116      	bne.n	8003bb8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2220      	movs	r2, #32
 8003b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba4:	f043 0220 	orr.w	r2, r3, #32
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e007      	b.n	8003bc8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	695b      	ldr	r3, [r3, #20]
 8003bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bc2:	2b40      	cmp	r3, #64	; 0x40
 8003bc4:	d1b5      	bne.n	8003b32 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003bc6:	2300      	movs	r3, #0
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3710      	adds	r7, #16
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}

08003bd0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	695b      	ldr	r3, [r3, #20]
 8003bde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003be2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003be6:	d11b      	bne.n	8003c20 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003bf0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2220      	movs	r2, #32
 8003bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0c:	f043 0204 	orr.w	r2, r3, #4
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e000      	b.n	8003c22 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003c20:	2300      	movs	r3, #0
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	370c      	adds	r7, #12
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr

08003c2e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003c2e:	b480      	push	{r7}
 8003c30:	b083      	sub	sp, #12
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c3a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003c3e:	d103      	bne.n	8003c48 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003c46:	e007      	b.n	8003c58 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c4c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003c50:	d102      	bne.n	8003c58 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2208      	movs	r2, #8
 8003c56:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003c58:	bf00      	nop
 8003c5a:	370c      	adds	r7, #12
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr

08003c64 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003c64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c66:	b08f      	sub	sp, #60	; 0x3c
 8003c68:	af0a      	add	r7, sp, #40	; 0x28
 8003c6a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d101      	bne.n	8003c76 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e10f      	b.n	8003e96 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d106      	bne.n	8003c96 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f009 f899 	bl	800cdc8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2203      	movs	r2, #3
 8003c9a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d102      	bne.n	8003cb0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2200      	movs	r2, #0
 8003cae:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f002 fd34 	bl	8006722 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	603b      	str	r3, [r7, #0]
 8003cc0:	687e      	ldr	r6, [r7, #4]
 8003cc2:	466d      	mov	r5, sp
 8003cc4:	f106 0410 	add.w	r4, r6, #16
 8003cc8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ccc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cd0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003cd4:	e885 0003 	stmia.w	r5, {r0, r1}
 8003cd8:	1d33      	adds	r3, r6, #4
 8003cda:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003cdc:	6838      	ldr	r0, [r7, #0]
 8003cde:	f002 fc0b 	bl	80064f8 <USB_CoreInit>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d005      	beq.n	8003cf4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2202      	movs	r2, #2
 8003cec:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e0d0      	b.n	8003e96 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	2100      	movs	r1, #0
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f002 fd22 	bl	8006744 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d00:	2300      	movs	r3, #0
 8003d02:	73fb      	strb	r3, [r7, #15]
 8003d04:	e04a      	b.n	8003d9c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003d06:	7bfa      	ldrb	r2, [r7, #15]
 8003d08:	6879      	ldr	r1, [r7, #4]
 8003d0a:	4613      	mov	r3, r2
 8003d0c:	00db      	lsls	r3, r3, #3
 8003d0e:	4413      	add	r3, r2
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	440b      	add	r3, r1
 8003d14:	333d      	adds	r3, #61	; 0x3d
 8003d16:	2201      	movs	r2, #1
 8003d18:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003d1a:	7bfa      	ldrb	r2, [r7, #15]
 8003d1c:	6879      	ldr	r1, [r7, #4]
 8003d1e:	4613      	mov	r3, r2
 8003d20:	00db      	lsls	r3, r3, #3
 8003d22:	4413      	add	r3, r2
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	440b      	add	r3, r1
 8003d28:	333c      	adds	r3, #60	; 0x3c
 8003d2a:	7bfa      	ldrb	r2, [r7, #15]
 8003d2c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003d2e:	7bfa      	ldrb	r2, [r7, #15]
 8003d30:	7bfb      	ldrb	r3, [r7, #15]
 8003d32:	b298      	uxth	r0, r3
 8003d34:	6879      	ldr	r1, [r7, #4]
 8003d36:	4613      	mov	r3, r2
 8003d38:	00db      	lsls	r3, r3, #3
 8003d3a:	4413      	add	r3, r2
 8003d3c:	009b      	lsls	r3, r3, #2
 8003d3e:	440b      	add	r3, r1
 8003d40:	3344      	adds	r3, #68	; 0x44
 8003d42:	4602      	mov	r2, r0
 8003d44:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003d46:	7bfa      	ldrb	r2, [r7, #15]
 8003d48:	6879      	ldr	r1, [r7, #4]
 8003d4a:	4613      	mov	r3, r2
 8003d4c:	00db      	lsls	r3, r3, #3
 8003d4e:	4413      	add	r3, r2
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	440b      	add	r3, r1
 8003d54:	3340      	adds	r3, #64	; 0x40
 8003d56:	2200      	movs	r2, #0
 8003d58:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003d5a:	7bfa      	ldrb	r2, [r7, #15]
 8003d5c:	6879      	ldr	r1, [r7, #4]
 8003d5e:	4613      	mov	r3, r2
 8003d60:	00db      	lsls	r3, r3, #3
 8003d62:	4413      	add	r3, r2
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	440b      	add	r3, r1
 8003d68:	3348      	adds	r3, #72	; 0x48
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003d6e:	7bfa      	ldrb	r2, [r7, #15]
 8003d70:	6879      	ldr	r1, [r7, #4]
 8003d72:	4613      	mov	r3, r2
 8003d74:	00db      	lsls	r3, r3, #3
 8003d76:	4413      	add	r3, r2
 8003d78:	009b      	lsls	r3, r3, #2
 8003d7a:	440b      	add	r3, r1
 8003d7c:	334c      	adds	r3, #76	; 0x4c
 8003d7e:	2200      	movs	r2, #0
 8003d80:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003d82:	7bfa      	ldrb	r2, [r7, #15]
 8003d84:	6879      	ldr	r1, [r7, #4]
 8003d86:	4613      	mov	r3, r2
 8003d88:	00db      	lsls	r3, r3, #3
 8003d8a:	4413      	add	r3, r2
 8003d8c:	009b      	lsls	r3, r3, #2
 8003d8e:	440b      	add	r3, r1
 8003d90:	3354      	adds	r3, #84	; 0x54
 8003d92:	2200      	movs	r2, #0
 8003d94:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d96:	7bfb      	ldrb	r3, [r7, #15]
 8003d98:	3301      	adds	r3, #1
 8003d9a:	73fb      	strb	r3, [r7, #15]
 8003d9c:	7bfa      	ldrb	r2, [r7, #15]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d3af      	bcc.n	8003d06 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003da6:	2300      	movs	r3, #0
 8003da8:	73fb      	strb	r3, [r7, #15]
 8003daa:	e044      	b.n	8003e36 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003dac:	7bfa      	ldrb	r2, [r7, #15]
 8003dae:	6879      	ldr	r1, [r7, #4]
 8003db0:	4613      	mov	r3, r2
 8003db2:	00db      	lsls	r3, r3, #3
 8003db4:	4413      	add	r3, r2
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	440b      	add	r3, r1
 8003dba:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003dc2:	7bfa      	ldrb	r2, [r7, #15]
 8003dc4:	6879      	ldr	r1, [r7, #4]
 8003dc6:	4613      	mov	r3, r2
 8003dc8:	00db      	lsls	r3, r3, #3
 8003dca:	4413      	add	r3, r2
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	440b      	add	r3, r1
 8003dd0:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003dd4:	7bfa      	ldrb	r2, [r7, #15]
 8003dd6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003dd8:	7bfa      	ldrb	r2, [r7, #15]
 8003dda:	6879      	ldr	r1, [r7, #4]
 8003ddc:	4613      	mov	r3, r2
 8003dde:	00db      	lsls	r3, r3, #3
 8003de0:	4413      	add	r3, r2
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	440b      	add	r3, r1
 8003de6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003dea:	2200      	movs	r2, #0
 8003dec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003dee:	7bfa      	ldrb	r2, [r7, #15]
 8003df0:	6879      	ldr	r1, [r7, #4]
 8003df2:	4613      	mov	r3, r2
 8003df4:	00db      	lsls	r3, r3, #3
 8003df6:	4413      	add	r3, r2
 8003df8:	009b      	lsls	r3, r3, #2
 8003dfa:	440b      	add	r3, r1
 8003dfc:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003e00:	2200      	movs	r2, #0
 8003e02:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003e04:	7bfa      	ldrb	r2, [r7, #15]
 8003e06:	6879      	ldr	r1, [r7, #4]
 8003e08:	4613      	mov	r3, r2
 8003e0a:	00db      	lsls	r3, r3, #3
 8003e0c:	4413      	add	r3, r2
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	440b      	add	r3, r1
 8003e12:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003e16:	2200      	movs	r2, #0
 8003e18:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003e1a:	7bfa      	ldrb	r2, [r7, #15]
 8003e1c:	6879      	ldr	r1, [r7, #4]
 8003e1e:	4613      	mov	r3, r2
 8003e20:	00db      	lsls	r3, r3, #3
 8003e22:	4413      	add	r3, r2
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	440b      	add	r3, r1
 8003e28:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e30:	7bfb      	ldrb	r3, [r7, #15]
 8003e32:	3301      	adds	r3, #1
 8003e34:	73fb      	strb	r3, [r7, #15]
 8003e36:	7bfa      	ldrb	r2, [r7, #15]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d3b5      	bcc.n	8003dac <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	603b      	str	r3, [r7, #0]
 8003e46:	687e      	ldr	r6, [r7, #4]
 8003e48:	466d      	mov	r5, sp
 8003e4a:	f106 0410 	add.w	r4, r6, #16
 8003e4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e56:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003e5a:	e885 0003 	stmia.w	r5, {r0, r1}
 8003e5e:	1d33      	adds	r3, r6, #4
 8003e60:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e62:	6838      	ldr	r0, [r7, #0]
 8003e64:	f002 fcba 	bl	80067dc <USB_DevInit>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d005      	beq.n	8003e7a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2202      	movs	r2, #2
 8003e72:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e00d      	b.n	8003e96 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2201      	movs	r2, #1
 8003e86:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f003 fe09 	bl	8007aa6 <USB_DevDisconnect>

  return HAL_OK;
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3714      	adds	r7, #20
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003e9e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003e9e:	b580      	push	{r7, lr}
 8003ea0:	b084      	sub	sp, #16
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d101      	bne.n	8003eba <HAL_PCD_Start+0x1c>
 8003eb6:	2302      	movs	r3, #2
 8003eb8:	e020      	b.n	8003efc <HAL_PCD_Start+0x5e>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d109      	bne.n	8003ede <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d005      	beq.n	8003ede <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f002 fc0c 	bl	8006700 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4618      	mov	r0, r3
 8003eee:	f003 fdb9 	bl	8007a64 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003efa:	2300      	movs	r3, #0
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3710      	adds	r7, #16
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003f04:	b590      	push	{r4, r7, lr}
 8003f06:	b08d      	sub	sp, #52	; 0x34
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f12:	6a3b      	ldr	r3, [r7, #32]
 8003f14:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f003 fe77 	bl	8007c0e <USB_GetMode>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	f040 848a 	bne.w	800483c <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f003 fddb 	bl	8007ae8 <USB_ReadInterrupts>
 8003f32:	4603      	mov	r3, r0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	f000 8480 	beq.w	800483a <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	0a1b      	lsrs	r3, r3, #8
 8003f44:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4618      	mov	r0, r3
 8003f54:	f003 fdc8 	bl	8007ae8 <USB_ReadInterrupts>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	f003 0302 	and.w	r3, r3, #2
 8003f5e:	2b02      	cmp	r3, #2
 8003f60:	d107      	bne.n	8003f72 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	695a      	ldr	r2, [r3, #20]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f002 0202 	and.w	r2, r2, #2
 8003f70:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4618      	mov	r0, r3
 8003f78:	f003 fdb6 	bl	8007ae8 <USB_ReadInterrupts>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	f003 0310 	and.w	r3, r3, #16
 8003f82:	2b10      	cmp	r3, #16
 8003f84:	d161      	bne.n	800404a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	699a      	ldr	r2, [r3, #24]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f022 0210 	bic.w	r2, r2, #16
 8003f94:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003f96:	6a3b      	ldr	r3, [r7, #32]
 8003f98:	6a1b      	ldr	r3, [r3, #32]
 8003f9a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003f9c:	69bb      	ldr	r3, [r7, #24]
 8003f9e:	f003 020f 	and.w	r2, r3, #15
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	00db      	lsls	r3, r3, #3
 8003fa6:	4413      	add	r3, r2
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	4413      	add	r3, r2
 8003fb2:	3304      	adds	r3, #4
 8003fb4:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003fb6:	69bb      	ldr	r3, [r7, #24]
 8003fb8:	0c5b      	lsrs	r3, r3, #17
 8003fba:	f003 030f 	and.w	r3, r3, #15
 8003fbe:	2b02      	cmp	r3, #2
 8003fc0:	d124      	bne.n	800400c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003fc2:	69ba      	ldr	r2, [r7, #24]
 8003fc4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003fc8:	4013      	ands	r3, r2
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d035      	beq.n	800403a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003fd2:	69bb      	ldr	r3, [r7, #24]
 8003fd4:	091b      	lsrs	r3, r3, #4
 8003fd6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003fd8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	461a      	mov	r2, r3
 8003fe0:	6a38      	ldr	r0, [r7, #32]
 8003fe2:	f003 fbed 	bl	80077c0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	691a      	ldr	r2, [r3, #16]
 8003fea:	69bb      	ldr	r3, [r7, #24]
 8003fec:	091b      	lsrs	r3, r3, #4
 8003fee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ff2:	441a      	add	r2, r3
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	6a1a      	ldr	r2, [r3, #32]
 8003ffc:	69bb      	ldr	r3, [r7, #24]
 8003ffe:	091b      	lsrs	r3, r3, #4
 8004000:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004004:	441a      	add	r2, r3
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	621a      	str	r2, [r3, #32]
 800400a:	e016      	b.n	800403a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800400c:	69bb      	ldr	r3, [r7, #24]
 800400e:	0c5b      	lsrs	r3, r3, #17
 8004010:	f003 030f 	and.w	r3, r3, #15
 8004014:	2b06      	cmp	r3, #6
 8004016:	d110      	bne.n	800403a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800401e:	2208      	movs	r2, #8
 8004020:	4619      	mov	r1, r3
 8004022:	6a38      	ldr	r0, [r7, #32]
 8004024:	f003 fbcc 	bl	80077c0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	6a1a      	ldr	r2, [r3, #32]
 800402c:	69bb      	ldr	r3, [r7, #24]
 800402e:	091b      	lsrs	r3, r3, #4
 8004030:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004034:	441a      	add	r2, r3
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	699a      	ldr	r2, [r3, #24]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f042 0210 	orr.w	r2, r2, #16
 8004048:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4618      	mov	r0, r3
 8004050:	f003 fd4a 	bl	8007ae8 <USB_ReadInterrupts>
 8004054:	4603      	mov	r3, r0
 8004056:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800405a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800405e:	f040 80a7 	bne.w	80041b0 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004062:	2300      	movs	r3, #0
 8004064:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4618      	mov	r0, r3
 800406c:	f003 fd4f 	bl	8007b0e <USB_ReadDevAllOutEpInterrupt>
 8004070:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004072:	e099      	b.n	80041a8 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004076:	f003 0301 	and.w	r3, r3, #1
 800407a:	2b00      	cmp	r3, #0
 800407c:	f000 808e 	beq.w	800419c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004086:	b2d2      	uxtb	r2, r2
 8004088:	4611      	mov	r1, r2
 800408a:	4618      	mov	r0, r3
 800408c:	f003 fd73 	bl	8007b76 <USB_ReadDevOutEPInterrupt>
 8004090:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	f003 0301 	and.w	r3, r3, #1
 8004098:	2b00      	cmp	r3, #0
 800409a:	d00c      	beq.n	80040b6 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800409c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409e:	015a      	lsls	r2, r3, #5
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	4413      	add	r3, r2
 80040a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040a8:	461a      	mov	r2, r3
 80040aa:	2301      	movs	r3, #1
 80040ac:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80040ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f000 fec3 	bl	8004e3c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	f003 0308 	and.w	r3, r3, #8
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d00c      	beq.n	80040da <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80040c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c2:	015a      	lsls	r2, r3, #5
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	4413      	add	r3, r2
 80040c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040cc:	461a      	mov	r2, r3
 80040ce:	2308      	movs	r3, #8
 80040d0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80040d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f000 ff99 	bl	800500c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	f003 0310 	and.w	r3, r3, #16
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d008      	beq.n	80040f6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80040e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e6:	015a      	lsls	r2, r3, #5
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	4413      	add	r3, r2
 80040ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040f0:	461a      	mov	r2, r3
 80040f2:	2310      	movs	r3, #16
 80040f4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	f003 0302 	and.w	r3, r3, #2
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d030      	beq.n	8004162 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004100:	6a3b      	ldr	r3, [r7, #32]
 8004102:	695b      	ldr	r3, [r3, #20]
 8004104:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004108:	2b80      	cmp	r3, #128	; 0x80
 800410a:	d109      	bne.n	8004120 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	69fa      	ldr	r2, [r7, #28]
 8004116:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800411a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800411e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004120:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004122:	4613      	mov	r3, r2
 8004124:	00db      	lsls	r3, r3, #3
 8004126:	4413      	add	r3, r2
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	4413      	add	r3, r2
 8004132:	3304      	adds	r3, #4
 8004134:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	78db      	ldrb	r3, [r3, #3]
 800413a:	2b01      	cmp	r3, #1
 800413c:	d108      	bne.n	8004150 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	2200      	movs	r2, #0
 8004142:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004146:	b2db      	uxtb	r3, r3
 8004148:	4619      	mov	r1, r3
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f008 ff38 	bl	800cfc0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004152:	015a      	lsls	r2, r3, #5
 8004154:	69fb      	ldr	r3, [r7, #28]
 8004156:	4413      	add	r3, r2
 8004158:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800415c:	461a      	mov	r2, r3
 800415e:	2302      	movs	r3, #2
 8004160:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	f003 0320 	and.w	r3, r3, #32
 8004168:	2b00      	cmp	r3, #0
 800416a:	d008      	beq.n	800417e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800416c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416e:	015a      	lsls	r2, r3, #5
 8004170:	69fb      	ldr	r3, [r7, #28]
 8004172:	4413      	add	r3, r2
 8004174:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004178:	461a      	mov	r2, r3
 800417a:	2320      	movs	r3, #32
 800417c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004184:	2b00      	cmp	r3, #0
 8004186:	d009      	beq.n	800419c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418a:	015a      	lsls	r2, r3, #5
 800418c:	69fb      	ldr	r3, [r7, #28]
 800418e:	4413      	add	r3, r2
 8004190:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004194:	461a      	mov	r2, r3
 8004196:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800419a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800419c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419e:	3301      	adds	r3, #1
 80041a0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80041a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a4:	085b      	lsrs	r3, r3, #1
 80041a6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80041a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	f47f af62 	bne.w	8004074 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4618      	mov	r0, r3
 80041b6:	f003 fc97 	bl	8007ae8 <USB_ReadInterrupts>
 80041ba:	4603      	mov	r3, r0
 80041bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041c0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80041c4:	f040 80db 	bne.w	800437e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4618      	mov	r0, r3
 80041ce:	f003 fcb8 	bl	8007b42 <USB_ReadDevAllInEpInterrupt>
 80041d2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80041d4:	2300      	movs	r3, #0
 80041d6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80041d8:	e0cd      	b.n	8004376 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80041da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041dc:	f003 0301 	and.w	r3, r3, #1
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	f000 80c2 	beq.w	800436a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041ec:	b2d2      	uxtb	r2, r2
 80041ee:	4611      	mov	r1, r2
 80041f0:	4618      	mov	r0, r3
 80041f2:	f003 fcde 	bl	8007bb2 <USB_ReadDevInEPInterrupt>
 80041f6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	f003 0301 	and.w	r3, r3, #1
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d057      	beq.n	80042b2 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004204:	f003 030f 	and.w	r3, r3, #15
 8004208:	2201      	movs	r2, #1
 800420a:	fa02 f303 	lsl.w	r3, r2, r3
 800420e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004210:	69fb      	ldr	r3, [r7, #28]
 8004212:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004216:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	43db      	mvns	r3, r3
 800421c:	69f9      	ldr	r1, [r7, #28]
 800421e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004222:	4013      	ands	r3, r2
 8004224:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004228:	015a      	lsls	r2, r3, #5
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	4413      	add	r3, r2
 800422e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004232:	461a      	mov	r2, r3
 8004234:	2301      	movs	r3, #1
 8004236:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	691b      	ldr	r3, [r3, #16]
 800423c:	2b01      	cmp	r3, #1
 800423e:	d132      	bne.n	80042a6 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004240:	6879      	ldr	r1, [r7, #4]
 8004242:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004244:	4613      	mov	r3, r2
 8004246:	00db      	lsls	r3, r3, #3
 8004248:	4413      	add	r3, r2
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	440b      	add	r3, r1
 800424e:	334c      	adds	r3, #76	; 0x4c
 8004250:	6819      	ldr	r1, [r3, #0]
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004256:	4613      	mov	r3, r2
 8004258:	00db      	lsls	r3, r3, #3
 800425a:	4413      	add	r3, r2
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	4403      	add	r3, r0
 8004260:	3348      	adds	r3, #72	; 0x48
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4419      	add	r1, r3
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800426a:	4613      	mov	r3, r2
 800426c:	00db      	lsls	r3, r3, #3
 800426e:	4413      	add	r3, r2
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	4403      	add	r3, r0
 8004274:	334c      	adds	r3, #76	; 0x4c
 8004276:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427a:	2b00      	cmp	r3, #0
 800427c:	d113      	bne.n	80042a6 <HAL_PCD_IRQHandler+0x3a2>
 800427e:	6879      	ldr	r1, [r7, #4]
 8004280:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004282:	4613      	mov	r3, r2
 8004284:	00db      	lsls	r3, r3, #3
 8004286:	4413      	add	r3, r2
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	440b      	add	r3, r1
 800428c:	3354      	adds	r3, #84	; 0x54
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d108      	bne.n	80042a6 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6818      	ldr	r0, [r3, #0]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800429e:	461a      	mov	r2, r3
 80042a0:	2101      	movs	r1, #1
 80042a2:	f003 fce5 	bl	8007c70 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80042a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	4619      	mov	r1, r3
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f008 fe0c 	bl	800ceca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	f003 0308 	and.w	r3, r3, #8
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d008      	beq.n	80042ce <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80042bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042be:	015a      	lsls	r2, r3, #5
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	4413      	add	r3, r2
 80042c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042c8:	461a      	mov	r2, r3
 80042ca:	2308      	movs	r3, #8
 80042cc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	f003 0310 	and.w	r3, r3, #16
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d008      	beq.n	80042ea <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80042d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042da:	015a      	lsls	r2, r3, #5
 80042dc:	69fb      	ldr	r3, [r7, #28]
 80042de:	4413      	add	r3, r2
 80042e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042e4:	461a      	mov	r2, r3
 80042e6:	2310      	movs	r3, #16
 80042e8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d008      	beq.n	8004306 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80042f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f6:	015a      	lsls	r2, r3, #5
 80042f8:	69fb      	ldr	r3, [r7, #28]
 80042fa:	4413      	add	r3, r2
 80042fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004300:	461a      	mov	r2, r3
 8004302:	2340      	movs	r3, #64	; 0x40
 8004304:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	f003 0302 	and.w	r3, r3, #2
 800430c:	2b00      	cmp	r3, #0
 800430e:	d023      	beq.n	8004358 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004310:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004312:	6a38      	ldr	r0, [r7, #32]
 8004314:	f002 fbc6 	bl	8006aa4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004318:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800431a:	4613      	mov	r3, r2
 800431c:	00db      	lsls	r3, r3, #3
 800431e:	4413      	add	r3, r2
 8004320:	009b      	lsls	r3, r3, #2
 8004322:	3338      	adds	r3, #56	; 0x38
 8004324:	687a      	ldr	r2, [r7, #4]
 8004326:	4413      	add	r3, r2
 8004328:	3304      	adds	r3, #4
 800432a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	78db      	ldrb	r3, [r3, #3]
 8004330:	2b01      	cmp	r3, #1
 8004332:	d108      	bne.n	8004346 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	2200      	movs	r2, #0
 8004338:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800433a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433c:	b2db      	uxtb	r3, r3
 800433e:	4619      	mov	r1, r3
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	f008 fe4f 	bl	800cfe4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004348:	015a      	lsls	r2, r3, #5
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	4413      	add	r3, r2
 800434e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004352:	461a      	mov	r2, r3
 8004354:	2302      	movs	r3, #2
 8004356:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800435e:	2b00      	cmp	r3, #0
 8004360:	d003      	beq.n	800436a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004362:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f000 fcdb 	bl	8004d20 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800436a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436c:	3301      	adds	r3, #1
 800436e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004372:	085b      	lsrs	r3, r3, #1
 8004374:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004378:	2b00      	cmp	r3, #0
 800437a:	f47f af2e 	bne.w	80041da <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4618      	mov	r0, r3
 8004384:	f003 fbb0 	bl	8007ae8 <USB_ReadInterrupts>
 8004388:	4603      	mov	r3, r0
 800438a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800438e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004392:	d122      	bne.n	80043da <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004394:	69fb      	ldr	r3, [r7, #28]
 8004396:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	69fa      	ldr	r2, [r7, #28]
 800439e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043a2:	f023 0301 	bic.w	r3, r3, #1
 80043a6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d108      	bne.n	80043c4 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2200      	movs	r2, #0
 80043b6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80043ba:	2100      	movs	r1, #0
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f000 fec3 	bl	8005148 <HAL_PCDEx_LPM_Callback>
 80043c2:	e002      	b.n	80043ca <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f008 fded 	bl	800cfa4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	695a      	ldr	r2, [r3, #20]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80043d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4618      	mov	r0, r3
 80043e0:	f003 fb82 	bl	8007ae8 <USB_ReadInterrupts>
 80043e4:	4603      	mov	r3, r0
 80043e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043ee:	d112      	bne.n	8004416 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	f003 0301 	and.w	r3, r3, #1
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d102      	bne.n	8004406 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f008 fda9 	bl	800cf58 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	695a      	ldr	r2, [r3, #20]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004414:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4618      	mov	r0, r3
 800441c:	f003 fb64 	bl	8007ae8 <USB_ReadInterrupts>
 8004420:	4603      	mov	r3, r0
 8004422:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004426:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800442a:	f040 80b7 	bne.w	800459c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	69fa      	ldr	r2, [r7, #28]
 8004438:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800443c:	f023 0301 	bic.w	r3, r3, #1
 8004440:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	2110      	movs	r1, #16
 8004448:	4618      	mov	r0, r3
 800444a:	f002 fb2b 	bl	8006aa4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800444e:	2300      	movs	r3, #0
 8004450:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004452:	e046      	b.n	80044e2 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004456:	015a      	lsls	r2, r3, #5
 8004458:	69fb      	ldr	r3, [r7, #28]
 800445a:	4413      	add	r3, r2
 800445c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004460:	461a      	mov	r2, r3
 8004462:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004466:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800446a:	015a      	lsls	r2, r3, #5
 800446c:	69fb      	ldr	r3, [r7, #28]
 800446e:	4413      	add	r3, r2
 8004470:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004478:	0151      	lsls	r1, r2, #5
 800447a:	69fa      	ldr	r2, [r7, #28]
 800447c:	440a      	add	r2, r1
 800447e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004482:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004486:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800448a:	015a      	lsls	r2, r3, #5
 800448c:	69fb      	ldr	r3, [r7, #28]
 800448e:	4413      	add	r3, r2
 8004490:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004494:	461a      	mov	r2, r3
 8004496:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800449a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800449c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800449e:	015a      	lsls	r2, r3, #5
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	4413      	add	r3, r2
 80044a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044ac:	0151      	lsls	r1, r2, #5
 80044ae:	69fa      	ldr	r2, [r7, #28]
 80044b0:	440a      	add	r2, r1
 80044b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044b6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80044ba:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80044bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044be:	015a      	lsls	r2, r3, #5
 80044c0:	69fb      	ldr	r3, [r7, #28]
 80044c2:	4413      	add	r3, r2
 80044c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044cc:	0151      	lsls	r1, r2, #5
 80044ce:	69fa      	ldr	r2, [r7, #28]
 80044d0:	440a      	add	r2, r1
 80044d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044d6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80044da:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80044dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044de:	3301      	adds	r3, #1
 80044e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d3b3      	bcc.n	8004454 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80044ec:	69fb      	ldr	r3, [r7, #28]
 80044ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044f2:	69db      	ldr	r3, [r3, #28]
 80044f4:	69fa      	ldr	r2, [r7, #28]
 80044f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044fa:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80044fe:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004504:	2b00      	cmp	r3, #0
 8004506:	d016      	beq.n	8004536 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800450e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004512:	69fa      	ldr	r2, [r7, #28]
 8004514:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004518:	f043 030b 	orr.w	r3, r3, #11
 800451c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004520:	69fb      	ldr	r3, [r7, #28]
 8004522:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004528:	69fa      	ldr	r2, [r7, #28]
 800452a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800452e:	f043 030b 	orr.w	r3, r3, #11
 8004532:	6453      	str	r3, [r2, #68]	; 0x44
 8004534:	e015      	b.n	8004562 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004536:	69fb      	ldr	r3, [r7, #28]
 8004538:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800453c:	695b      	ldr	r3, [r3, #20]
 800453e:	69fa      	ldr	r2, [r7, #28]
 8004540:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004544:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004548:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800454c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004554:	691b      	ldr	r3, [r3, #16]
 8004556:	69fa      	ldr	r2, [r7, #28]
 8004558:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800455c:	f043 030b 	orr.w	r3, r3, #11
 8004560:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004562:	69fb      	ldr	r3, [r7, #28]
 8004564:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	69fa      	ldr	r2, [r7, #28]
 800456c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004570:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004574:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6818      	ldr	r0, [r3, #0]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	691b      	ldr	r3, [r3, #16]
 800457e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004586:	461a      	mov	r2, r3
 8004588:	f003 fb72 	bl	8007c70 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	695a      	ldr	r2, [r3, #20]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800459a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4618      	mov	r0, r3
 80045a2:	f003 faa1 	bl	8007ae8 <USB_ReadInterrupts>
 80045a6:	4603      	mov	r3, r0
 80045a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80045ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045b0:	d124      	bne.n	80045fc <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4618      	mov	r0, r3
 80045b8:	f003 fb37 	bl	8007c2a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4618      	mov	r0, r3
 80045c2:	f002 faec 	bl	8006b9e <USB_GetDevSpeed>
 80045c6:	4603      	mov	r3, r0
 80045c8:	461a      	mov	r2, r3
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681c      	ldr	r4, [r3, #0]
 80045d2:	f001 f9e9 	bl	80059a8 <HAL_RCC_GetHCLKFreq>
 80045d6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	461a      	mov	r2, r3
 80045e0:	4620      	mov	r0, r4
 80045e2:	f001 ffeb 	bl	80065bc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f008 fc97 	bl	800cf1a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	695a      	ldr	r2, [r3, #20]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80045fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4618      	mov	r0, r3
 8004602:	f003 fa71 	bl	8007ae8 <USB_ReadInterrupts>
 8004606:	4603      	mov	r3, r0
 8004608:	f003 0308 	and.w	r3, r3, #8
 800460c:	2b08      	cmp	r3, #8
 800460e:	d10a      	bne.n	8004626 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f008 fc74 	bl	800cefe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	695a      	ldr	r2, [r3, #20]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f002 0208 	and.w	r2, r2, #8
 8004624:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4618      	mov	r0, r3
 800462c:	f003 fa5c 	bl	8007ae8 <USB_ReadInterrupts>
 8004630:	4603      	mov	r3, r0
 8004632:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004636:	2b80      	cmp	r3, #128	; 0x80
 8004638:	d122      	bne.n	8004680 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800463a:	6a3b      	ldr	r3, [r7, #32]
 800463c:	699b      	ldr	r3, [r3, #24]
 800463e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004642:	6a3b      	ldr	r3, [r7, #32]
 8004644:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004646:	2301      	movs	r3, #1
 8004648:	627b      	str	r3, [r7, #36]	; 0x24
 800464a:	e014      	b.n	8004676 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800464c:	6879      	ldr	r1, [r7, #4]
 800464e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004650:	4613      	mov	r3, r2
 8004652:	00db      	lsls	r3, r3, #3
 8004654:	4413      	add	r3, r2
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	440b      	add	r3, r1
 800465a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800465e:	781b      	ldrb	r3, [r3, #0]
 8004660:	2b01      	cmp	r3, #1
 8004662:	d105      	bne.n	8004670 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004666:	b2db      	uxtb	r3, r3
 8004668:	4619      	mov	r1, r3
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f000 fb27 	bl	8004cbe <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004672:	3301      	adds	r3, #1
 8004674:	627b      	str	r3, [r7, #36]	; 0x24
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800467c:	429a      	cmp	r2, r3
 800467e:	d3e5      	bcc.n	800464c <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4618      	mov	r0, r3
 8004686:	f003 fa2f 	bl	8007ae8 <USB_ReadInterrupts>
 800468a:	4603      	mov	r3, r0
 800468c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004690:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004694:	d13b      	bne.n	800470e <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004696:	2301      	movs	r3, #1
 8004698:	627b      	str	r3, [r7, #36]	; 0x24
 800469a:	e02b      	b.n	80046f4 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800469c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469e:	015a      	lsls	r2, r3, #5
 80046a0:	69fb      	ldr	r3, [r7, #28]
 80046a2:	4413      	add	r3, r2
 80046a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80046ac:	6879      	ldr	r1, [r7, #4]
 80046ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046b0:	4613      	mov	r3, r2
 80046b2:	00db      	lsls	r3, r3, #3
 80046b4:	4413      	add	r3, r2
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	440b      	add	r3, r1
 80046ba:	3340      	adds	r3, #64	; 0x40
 80046bc:	781b      	ldrb	r3, [r3, #0]
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d115      	bne.n	80046ee <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80046c2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	da12      	bge.n	80046ee <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80046c8:	6879      	ldr	r1, [r7, #4]
 80046ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046cc:	4613      	mov	r3, r2
 80046ce:	00db      	lsls	r3, r3, #3
 80046d0:	4413      	add	r3, r2
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	440b      	add	r3, r1
 80046d6:	333f      	adds	r3, #63	; 0x3f
 80046d8:	2201      	movs	r2, #1
 80046da:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80046dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	4619      	mov	r1, r3
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f000 fae8 	bl	8004cbe <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80046ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f0:	3301      	adds	r3, #1
 80046f2:	627b      	str	r3, [r7, #36]	; 0x24
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046fa:	429a      	cmp	r2, r3
 80046fc:	d3ce      	bcc.n	800469c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	695a      	ldr	r2, [r3, #20]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800470c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4618      	mov	r0, r3
 8004714:	f003 f9e8 	bl	8007ae8 <USB_ReadInterrupts>
 8004718:	4603      	mov	r3, r0
 800471a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800471e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004722:	d155      	bne.n	80047d0 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004724:	2301      	movs	r3, #1
 8004726:	627b      	str	r3, [r7, #36]	; 0x24
 8004728:	e045      	b.n	80047b6 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800472a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472c:	015a      	lsls	r2, r3, #5
 800472e:	69fb      	ldr	r3, [r7, #28]
 8004730:	4413      	add	r3, r2
 8004732:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800473a:	6879      	ldr	r1, [r7, #4]
 800473c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800473e:	4613      	mov	r3, r2
 8004740:	00db      	lsls	r3, r3, #3
 8004742:	4413      	add	r3, r2
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	440b      	add	r3, r1
 8004748:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800474c:	781b      	ldrb	r3, [r3, #0]
 800474e:	2b01      	cmp	r3, #1
 8004750:	d12e      	bne.n	80047b0 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004752:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004754:	2b00      	cmp	r3, #0
 8004756:	da2b      	bge.n	80047b0 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004758:	69bb      	ldr	r3, [r7, #24]
 800475a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004764:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004768:	429a      	cmp	r2, r3
 800476a:	d121      	bne.n	80047b0 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800476c:	6879      	ldr	r1, [r7, #4]
 800476e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004770:	4613      	mov	r3, r2
 8004772:	00db      	lsls	r3, r3, #3
 8004774:	4413      	add	r3, r2
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	440b      	add	r3, r1
 800477a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800477e:	2201      	movs	r2, #1
 8004780:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004782:	6a3b      	ldr	r3, [r7, #32]
 8004784:	699b      	ldr	r3, [r3, #24]
 8004786:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800478a:	6a3b      	ldr	r3, [r7, #32]
 800478c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800478e:	6a3b      	ldr	r3, [r7, #32]
 8004790:	695b      	ldr	r3, [r3, #20]
 8004792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004796:	2b00      	cmp	r3, #0
 8004798:	d10a      	bne.n	80047b0 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800479a:	69fb      	ldr	r3, [r7, #28]
 800479c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	69fa      	ldr	r2, [r7, #28]
 80047a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80047ac:	6053      	str	r3, [r2, #4]
            break;
 80047ae:	e007      	b.n	80047c0 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80047b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b2:	3301      	adds	r3, #1
 80047b4:	627b      	str	r3, [r7, #36]	; 0x24
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047bc:	429a      	cmp	r2, r3
 80047be:	d3b4      	bcc.n	800472a <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	695a      	ldr	r2, [r3, #20]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80047ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4618      	mov	r0, r3
 80047d6:	f003 f987 	bl	8007ae8 <USB_ReadInterrupts>
 80047da:	4603      	mov	r3, r0
 80047dc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80047e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047e4:	d10a      	bne.n	80047fc <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f008 fc0e 	bl	800d008 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	695a      	ldr	r2, [r3, #20]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80047fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4618      	mov	r0, r3
 8004802:	f003 f971 	bl	8007ae8 <USB_ReadInterrupts>
 8004806:	4603      	mov	r3, r0
 8004808:	f003 0304 	and.w	r3, r3, #4
 800480c:	2b04      	cmp	r3, #4
 800480e:	d115      	bne.n	800483c <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004818:	69bb      	ldr	r3, [r7, #24]
 800481a:	f003 0304 	and.w	r3, r3, #4
 800481e:	2b00      	cmp	r3, #0
 8004820:	d002      	beq.n	8004828 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f008 fbfe 	bl	800d024 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	6859      	ldr	r1, [r3, #4]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	69ba      	ldr	r2, [r7, #24]
 8004834:	430a      	orrs	r2, r1
 8004836:	605a      	str	r2, [r3, #4]
 8004838:	e000      	b.n	800483c <HAL_PCD_IRQHandler+0x938>
      return;
 800483a:	bf00      	nop
    }
  }
}
 800483c:	3734      	adds	r7, #52	; 0x34
 800483e:	46bd      	mov	sp, r7
 8004840:	bd90      	pop	{r4, r7, pc}

08004842 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004842:	b580      	push	{r7, lr}
 8004844:	b082      	sub	sp, #8
 8004846:	af00      	add	r7, sp, #0
 8004848:	6078      	str	r0, [r7, #4]
 800484a:	460b      	mov	r3, r1
 800484c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004854:	2b01      	cmp	r3, #1
 8004856:	d101      	bne.n	800485c <HAL_PCD_SetAddress+0x1a>
 8004858:	2302      	movs	r3, #2
 800485a:	e013      	b.n	8004884 <HAL_PCD_SetAddress+0x42>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2201      	movs	r2, #1
 8004860:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	78fa      	ldrb	r2, [r7, #3]
 8004868:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	78fa      	ldrb	r2, [r7, #3]
 8004872:	4611      	mov	r1, r2
 8004874:	4618      	mov	r0, r3
 8004876:	f003 f8cf 	bl	8007a18 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004882:	2300      	movs	r3, #0
}
 8004884:	4618      	mov	r0, r3
 8004886:	3708      	adds	r7, #8
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}

0800488c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b084      	sub	sp, #16
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	4608      	mov	r0, r1
 8004896:	4611      	mov	r1, r2
 8004898:	461a      	mov	r2, r3
 800489a:	4603      	mov	r3, r0
 800489c:	70fb      	strb	r3, [r7, #3]
 800489e:	460b      	mov	r3, r1
 80048a0:	803b      	strh	r3, [r7, #0]
 80048a2:	4613      	mov	r3, r2
 80048a4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80048a6:	2300      	movs	r3, #0
 80048a8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80048aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	da0f      	bge.n	80048d2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80048b2:	78fb      	ldrb	r3, [r7, #3]
 80048b4:	f003 020f 	and.w	r2, r3, #15
 80048b8:	4613      	mov	r3, r2
 80048ba:	00db      	lsls	r3, r3, #3
 80048bc:	4413      	add	r3, r2
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	3338      	adds	r3, #56	; 0x38
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	4413      	add	r3, r2
 80048c6:	3304      	adds	r3, #4
 80048c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2201      	movs	r2, #1
 80048ce:	705a      	strb	r2, [r3, #1]
 80048d0:	e00f      	b.n	80048f2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80048d2:	78fb      	ldrb	r3, [r7, #3]
 80048d4:	f003 020f 	and.w	r2, r3, #15
 80048d8:	4613      	mov	r3, r2
 80048da:	00db      	lsls	r3, r3, #3
 80048dc:	4413      	add	r3, r2
 80048de:	009b      	lsls	r3, r3, #2
 80048e0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80048e4:	687a      	ldr	r2, [r7, #4]
 80048e6:	4413      	add	r3, r2
 80048e8:	3304      	adds	r3, #4
 80048ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2200      	movs	r2, #0
 80048f0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80048f2:	78fb      	ldrb	r3, [r7, #3]
 80048f4:	f003 030f 	and.w	r3, r3, #15
 80048f8:	b2da      	uxtb	r2, r3
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80048fe:	883a      	ldrh	r2, [r7, #0]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	78ba      	ldrb	r2, [r7, #2]
 8004908:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	785b      	ldrb	r3, [r3, #1]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d004      	beq.n	800491c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	781b      	ldrb	r3, [r3, #0]
 8004916:	b29a      	uxth	r2, r3
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800491c:	78bb      	ldrb	r3, [r7, #2]
 800491e:	2b02      	cmp	r3, #2
 8004920:	d102      	bne.n	8004928 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2200      	movs	r2, #0
 8004926:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800492e:	2b01      	cmp	r3, #1
 8004930:	d101      	bne.n	8004936 <HAL_PCD_EP_Open+0xaa>
 8004932:	2302      	movs	r3, #2
 8004934:	e00e      	b.n	8004954 <HAL_PCD_EP_Open+0xc8>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2201      	movs	r2, #1
 800493a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	68f9      	ldr	r1, [r7, #12]
 8004944:	4618      	mov	r0, r3
 8004946:	f002 f94f 	bl	8006be8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2200      	movs	r2, #0
 800494e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8004952:	7afb      	ldrb	r3, [r7, #11]
}
 8004954:	4618      	mov	r0, r3
 8004956:	3710      	adds	r7, #16
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}

0800495c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b084      	sub	sp, #16
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
 8004964:	460b      	mov	r3, r1
 8004966:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004968:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800496c:	2b00      	cmp	r3, #0
 800496e:	da0f      	bge.n	8004990 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004970:	78fb      	ldrb	r3, [r7, #3]
 8004972:	f003 020f 	and.w	r2, r3, #15
 8004976:	4613      	mov	r3, r2
 8004978:	00db      	lsls	r3, r3, #3
 800497a:	4413      	add	r3, r2
 800497c:	009b      	lsls	r3, r3, #2
 800497e:	3338      	adds	r3, #56	; 0x38
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	4413      	add	r3, r2
 8004984:	3304      	adds	r3, #4
 8004986:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2201      	movs	r2, #1
 800498c:	705a      	strb	r2, [r3, #1]
 800498e:	e00f      	b.n	80049b0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004990:	78fb      	ldrb	r3, [r7, #3]
 8004992:	f003 020f 	and.w	r2, r3, #15
 8004996:	4613      	mov	r3, r2
 8004998:	00db      	lsls	r3, r3, #3
 800499a:	4413      	add	r3, r2
 800499c:	009b      	lsls	r3, r3, #2
 800499e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	4413      	add	r3, r2
 80049a6:	3304      	adds	r3, #4
 80049a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2200      	movs	r2, #0
 80049ae:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80049b0:	78fb      	ldrb	r3, [r7, #3]
 80049b2:	f003 030f 	and.w	r3, r3, #15
 80049b6:	b2da      	uxtb	r2, r3
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d101      	bne.n	80049ca <HAL_PCD_EP_Close+0x6e>
 80049c6:	2302      	movs	r3, #2
 80049c8:	e00e      	b.n	80049e8 <HAL_PCD_EP_Close+0x8c>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2201      	movs	r2, #1
 80049ce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	68f9      	ldr	r1, [r7, #12]
 80049d8:	4618      	mov	r0, r3
 80049da:	f002 f98d 	bl	8006cf8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2200      	movs	r2, #0
 80049e2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80049e6:	2300      	movs	r3, #0
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3710      	adds	r7, #16
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}

080049f0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b086      	sub	sp, #24
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	60f8      	str	r0, [r7, #12]
 80049f8:	607a      	str	r2, [r7, #4]
 80049fa:	603b      	str	r3, [r7, #0]
 80049fc:	460b      	mov	r3, r1
 80049fe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a00:	7afb      	ldrb	r3, [r7, #11]
 8004a02:	f003 020f 	and.w	r2, r3, #15
 8004a06:	4613      	mov	r3, r2
 8004a08:	00db      	lsls	r3, r3, #3
 8004a0a:	4413      	add	r3, r2
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004a12:	68fa      	ldr	r2, [r7, #12]
 8004a14:	4413      	add	r3, r2
 8004a16:	3304      	adds	r3, #4
 8004a18:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	687a      	ldr	r2, [r7, #4]
 8004a1e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	683a      	ldr	r2, [r7, #0]
 8004a24:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a32:	7afb      	ldrb	r3, [r7, #11]
 8004a34:	f003 030f 	and.w	r3, r3, #15
 8004a38:	b2da      	uxtb	r2, r3
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	691b      	ldr	r3, [r3, #16]
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d102      	bne.n	8004a4c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004a4c:	7afb      	ldrb	r3, [r7, #11]
 8004a4e:	f003 030f 	and.w	r3, r3, #15
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d109      	bne.n	8004a6a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	6818      	ldr	r0, [r3, #0]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	691b      	ldr	r3, [r3, #16]
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	461a      	mov	r2, r3
 8004a62:	6979      	ldr	r1, [r7, #20]
 8004a64:	f002 fc6c 	bl	8007340 <USB_EP0StartXfer>
 8004a68:	e008      	b.n	8004a7c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	6818      	ldr	r0, [r3, #0]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	691b      	ldr	r3, [r3, #16]
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	461a      	mov	r2, r3
 8004a76:	6979      	ldr	r1, [r7, #20]
 8004a78:	f002 fa1a 	bl	8006eb0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004a7c:	2300      	movs	r3, #0
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3718      	adds	r7, #24
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}

08004a86 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a86:	b480      	push	{r7}
 8004a88:	b083      	sub	sp, #12
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	6078      	str	r0, [r7, #4]
 8004a8e:	460b      	mov	r3, r1
 8004a90:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004a92:	78fb      	ldrb	r3, [r7, #3]
 8004a94:	f003 020f 	and.w	r2, r3, #15
 8004a98:	6879      	ldr	r1, [r7, #4]
 8004a9a:	4613      	mov	r3, r2
 8004a9c:	00db      	lsls	r3, r3, #3
 8004a9e:	4413      	add	r3, r2
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	440b      	add	r3, r1
 8004aa4:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8004aa8:	681b      	ldr	r3, [r3, #0]
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	370c      	adds	r7, #12
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr

08004ab6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004ab6:	b580      	push	{r7, lr}
 8004ab8:	b086      	sub	sp, #24
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	60f8      	str	r0, [r7, #12]
 8004abe:	607a      	str	r2, [r7, #4]
 8004ac0:	603b      	str	r3, [r7, #0]
 8004ac2:	460b      	mov	r3, r1
 8004ac4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ac6:	7afb      	ldrb	r3, [r7, #11]
 8004ac8:	f003 020f 	and.w	r2, r3, #15
 8004acc:	4613      	mov	r3, r2
 8004ace:	00db      	lsls	r3, r3, #3
 8004ad0:	4413      	add	r3, r2
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	3338      	adds	r3, #56	; 0x38
 8004ad6:	68fa      	ldr	r2, [r7, #12]
 8004ad8:	4413      	add	r3, r2
 8004ada:	3304      	adds	r3, #4
 8004adc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	687a      	ldr	r2, [r7, #4]
 8004ae2:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	683a      	ldr	r2, [r7, #0]
 8004ae8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	2200      	movs	r2, #0
 8004aee:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	2201      	movs	r2, #1
 8004af4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004af6:	7afb      	ldrb	r3, [r7, #11]
 8004af8:	f003 030f 	and.w	r3, r3, #15
 8004afc:	b2da      	uxtb	r2, r3
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	691b      	ldr	r3, [r3, #16]
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d102      	bne.n	8004b10 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004b10:	7afb      	ldrb	r3, [r7, #11]
 8004b12:	f003 030f 	and.w	r3, r3, #15
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d109      	bne.n	8004b2e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	6818      	ldr	r0, [r3, #0]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	691b      	ldr	r3, [r3, #16]
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	461a      	mov	r2, r3
 8004b26:	6979      	ldr	r1, [r7, #20]
 8004b28:	f002 fc0a 	bl	8007340 <USB_EP0StartXfer>
 8004b2c:	e008      	b.n	8004b40 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	6818      	ldr	r0, [r3, #0]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	691b      	ldr	r3, [r3, #16]
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	461a      	mov	r2, r3
 8004b3a:	6979      	ldr	r1, [r7, #20]
 8004b3c:	f002 f9b8 	bl	8006eb0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004b40:	2300      	movs	r3, #0
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3718      	adds	r7, #24
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}

08004b4a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004b4a:	b580      	push	{r7, lr}
 8004b4c:	b084      	sub	sp, #16
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	6078      	str	r0, [r7, #4]
 8004b52:	460b      	mov	r3, r1
 8004b54:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004b56:	78fb      	ldrb	r3, [r7, #3]
 8004b58:	f003 020f 	and.w	r2, r3, #15
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d901      	bls.n	8004b68 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	e050      	b.n	8004c0a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004b68:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	da0f      	bge.n	8004b90 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b70:	78fb      	ldrb	r3, [r7, #3]
 8004b72:	f003 020f 	and.w	r2, r3, #15
 8004b76:	4613      	mov	r3, r2
 8004b78:	00db      	lsls	r3, r3, #3
 8004b7a:	4413      	add	r3, r2
 8004b7c:	009b      	lsls	r3, r3, #2
 8004b7e:	3338      	adds	r3, #56	; 0x38
 8004b80:	687a      	ldr	r2, [r7, #4]
 8004b82:	4413      	add	r3, r2
 8004b84:	3304      	adds	r3, #4
 8004b86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	705a      	strb	r2, [r3, #1]
 8004b8e:	e00d      	b.n	8004bac <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004b90:	78fa      	ldrb	r2, [r7, #3]
 8004b92:	4613      	mov	r3, r2
 8004b94:	00db      	lsls	r3, r3, #3
 8004b96:	4413      	add	r3, r2
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004b9e:	687a      	ldr	r2, [r7, #4]
 8004ba0:	4413      	add	r3, r2
 8004ba2:	3304      	adds	r3, #4
 8004ba4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004bb2:	78fb      	ldrb	r3, [r7, #3]
 8004bb4:	f003 030f 	and.w	r3, r3, #15
 8004bb8:	b2da      	uxtb	r2, r3
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d101      	bne.n	8004bcc <HAL_PCD_EP_SetStall+0x82>
 8004bc8:	2302      	movs	r3, #2
 8004bca:	e01e      	b.n	8004c0a <HAL_PCD_EP_SetStall+0xc0>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	68f9      	ldr	r1, [r7, #12]
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f002 fe48 	bl	8007870 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004be0:	78fb      	ldrb	r3, [r7, #3]
 8004be2:	f003 030f 	and.w	r3, r3, #15
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d10a      	bne.n	8004c00 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6818      	ldr	r0, [r3, #0]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	691b      	ldr	r3, [r3, #16]
 8004bf2:	b2d9      	uxtb	r1, r3
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	f003 f838 	bl	8007c70 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2200      	movs	r2, #0
 8004c04:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004c08:	2300      	movs	r3, #0
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3710      	adds	r7, #16
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}

08004c12 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004c12:	b580      	push	{r7, lr}
 8004c14:	b084      	sub	sp, #16
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	6078      	str	r0, [r7, #4]
 8004c1a:	460b      	mov	r3, r1
 8004c1c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004c1e:	78fb      	ldrb	r3, [r7, #3]
 8004c20:	f003 020f 	and.w	r2, r3, #15
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d901      	bls.n	8004c30 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e042      	b.n	8004cb6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004c30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	da0f      	bge.n	8004c58 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c38:	78fb      	ldrb	r3, [r7, #3]
 8004c3a:	f003 020f 	and.w	r2, r3, #15
 8004c3e:	4613      	mov	r3, r2
 8004c40:	00db      	lsls	r3, r3, #3
 8004c42:	4413      	add	r3, r2
 8004c44:	009b      	lsls	r3, r3, #2
 8004c46:	3338      	adds	r3, #56	; 0x38
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	4413      	add	r3, r2
 8004c4c:	3304      	adds	r3, #4
 8004c4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2201      	movs	r2, #1
 8004c54:	705a      	strb	r2, [r3, #1]
 8004c56:	e00f      	b.n	8004c78 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c58:	78fb      	ldrb	r3, [r7, #3]
 8004c5a:	f003 020f 	and.w	r2, r3, #15
 8004c5e:	4613      	mov	r3, r2
 8004c60:	00db      	lsls	r3, r3, #3
 8004c62:	4413      	add	r3, r2
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	4413      	add	r3, r2
 8004c6e:	3304      	adds	r3, #4
 8004c70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2200      	movs	r2, #0
 8004c76:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c7e:	78fb      	ldrb	r3, [r7, #3]
 8004c80:	f003 030f 	and.w	r3, r3, #15
 8004c84:	b2da      	uxtb	r2, r3
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d101      	bne.n	8004c98 <HAL_PCD_EP_ClrStall+0x86>
 8004c94:	2302      	movs	r3, #2
 8004c96:	e00e      	b.n	8004cb6 <HAL_PCD_EP_ClrStall+0xa4>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	68f9      	ldr	r1, [r7, #12]
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f002 fe50 	bl	800794c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004cb4:	2300      	movs	r3, #0
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3710      	adds	r7, #16
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}

08004cbe <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004cbe:	b580      	push	{r7, lr}
 8004cc0:	b084      	sub	sp, #16
 8004cc2:	af00      	add	r7, sp, #0
 8004cc4:	6078      	str	r0, [r7, #4]
 8004cc6:	460b      	mov	r3, r1
 8004cc8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004cca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	da0c      	bge.n	8004cec <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004cd2:	78fb      	ldrb	r3, [r7, #3]
 8004cd4:	f003 020f 	and.w	r2, r3, #15
 8004cd8:	4613      	mov	r3, r2
 8004cda:	00db      	lsls	r3, r3, #3
 8004cdc:	4413      	add	r3, r2
 8004cde:	009b      	lsls	r3, r3, #2
 8004ce0:	3338      	adds	r3, #56	; 0x38
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	4413      	add	r3, r2
 8004ce6:	3304      	adds	r3, #4
 8004ce8:	60fb      	str	r3, [r7, #12]
 8004cea:	e00c      	b.n	8004d06 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004cec:	78fb      	ldrb	r3, [r7, #3]
 8004cee:	f003 020f 	and.w	r2, r3, #15
 8004cf2:	4613      	mov	r3, r2
 8004cf4:	00db      	lsls	r3, r3, #3
 8004cf6:	4413      	add	r3, r2
 8004cf8:	009b      	lsls	r3, r3, #2
 8004cfa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	4413      	add	r3, r2
 8004d02:	3304      	adds	r3, #4
 8004d04:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	68f9      	ldr	r1, [r7, #12]
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f002 fc6f 	bl	80075f0 <USB_EPStopXfer>
 8004d12:	4603      	mov	r3, r0
 8004d14:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004d16:	7afb      	ldrb	r3, [r7, #11]
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3710      	adds	r7, #16
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}

08004d20 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b08a      	sub	sp, #40	; 0x28
 8004d24:	af02      	add	r7, sp, #8
 8004d26:	6078      	str	r0, [r7, #4]
 8004d28:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004d34:	683a      	ldr	r2, [r7, #0]
 8004d36:	4613      	mov	r3, r2
 8004d38:	00db      	lsls	r3, r3, #3
 8004d3a:	4413      	add	r3, r2
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	3338      	adds	r3, #56	; 0x38
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	4413      	add	r3, r2
 8004d44:	3304      	adds	r3, #4
 8004d46:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6a1a      	ldr	r2, [r3, #32]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	699b      	ldr	r3, [r3, #24]
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d901      	bls.n	8004d58 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	e06c      	b.n	8004e32 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	699a      	ldr	r2, [r3, #24]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6a1b      	ldr	r3, [r3, #32]
 8004d60:	1ad3      	subs	r3, r2, r3
 8004d62:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	69fa      	ldr	r2, [r7, #28]
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d902      	bls.n	8004d74 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	68db      	ldr	r3, [r3, #12]
 8004d72:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004d74:	69fb      	ldr	r3, [r7, #28]
 8004d76:	3303      	adds	r3, #3
 8004d78:	089b      	lsrs	r3, r3, #2
 8004d7a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004d7c:	e02b      	b.n	8004dd6 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	699a      	ldr	r2, [r3, #24]
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	6a1b      	ldr	r3, [r3, #32]
 8004d86:	1ad3      	subs	r3, r2, r3
 8004d88:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	68db      	ldr	r3, [r3, #12]
 8004d8e:	69fa      	ldr	r2, [r7, #28]
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d902      	bls.n	8004d9a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	68db      	ldr	r3, [r3, #12]
 8004d98:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004d9a:	69fb      	ldr	r3, [r7, #28]
 8004d9c:	3303      	adds	r3, #3
 8004d9e:	089b      	lsrs	r3, r3, #2
 8004da0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	6919      	ldr	r1, [r3, #16]
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	b2da      	uxtb	r2, r3
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	9300      	str	r3, [sp, #0]
 8004db6:	4603      	mov	r3, r0
 8004db8:	6978      	ldr	r0, [r7, #20]
 8004dba:	f002 fcc3 	bl	8007744 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	691a      	ldr	r2, [r3, #16]
 8004dc2:	69fb      	ldr	r3, [r7, #28]
 8004dc4:	441a      	add	r2, r3
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	6a1a      	ldr	r2, [r3, #32]
 8004dce:	69fb      	ldr	r3, [r7, #28]
 8004dd0:	441a      	add	r2, r3
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	015a      	lsls	r2, r3, #5
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	4413      	add	r3, r2
 8004dde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004de2:	699b      	ldr	r3, [r3, #24]
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	69ba      	ldr	r2, [r7, #24]
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d809      	bhi.n	8004e00 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	6a1a      	ldr	r2, [r3, #32]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d203      	bcs.n	8004e00 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	699b      	ldr	r3, [r3, #24]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d1be      	bne.n	8004d7e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	699a      	ldr	r2, [r3, #24]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	6a1b      	ldr	r3, [r3, #32]
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d811      	bhi.n	8004e30 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	f003 030f 	and.w	r3, r3, #15
 8004e12:	2201      	movs	r2, #1
 8004e14:	fa02 f303 	lsl.w	r3, r2, r3
 8004e18:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	43db      	mvns	r3, r3
 8004e26:	6939      	ldr	r1, [r7, #16]
 8004e28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e2c:	4013      	ands	r3, r2
 8004e2e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004e30:	2300      	movs	r3, #0
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3720      	adds	r7, #32
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
	...

08004e3c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b088      	sub	sp, #32
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004e50:	69fb      	ldr	r3, [r7, #28]
 8004e52:	333c      	adds	r3, #60	; 0x3c
 8004e54:	3304      	adds	r3, #4
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	015a      	lsls	r2, r3, #5
 8004e5e:	69bb      	ldr	r3, [r7, #24]
 8004e60:	4413      	add	r3, r2
 8004e62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	691b      	ldr	r3, [r3, #16]
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d17b      	bne.n	8004f6a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	f003 0308 	and.w	r3, r3, #8
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d015      	beq.n	8004ea8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	4a61      	ldr	r2, [pc, #388]	; (8005004 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	f240 80b9 	bls.w	8004ff8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	f000 80b3 	beq.w	8004ff8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	015a      	lsls	r2, r3, #5
 8004e96:	69bb      	ldr	r3, [r7, #24]
 8004e98:	4413      	add	r3, r2
 8004e9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ea4:	6093      	str	r3, [r2, #8]
 8004ea6:	e0a7      	b.n	8004ff8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	f003 0320 	and.w	r3, r3, #32
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d009      	beq.n	8004ec6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	015a      	lsls	r2, r3, #5
 8004eb6:	69bb      	ldr	r3, [r7, #24]
 8004eb8:	4413      	add	r3, r2
 8004eba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	2320      	movs	r3, #32
 8004ec2:	6093      	str	r3, [r2, #8]
 8004ec4:	e098      	b.n	8004ff8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	f040 8093 	bne.w	8004ff8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	4a4b      	ldr	r2, [pc, #300]	; (8005004 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d90f      	bls.n	8004efa <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d00a      	beq.n	8004efa <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	015a      	lsls	r2, r3, #5
 8004ee8:	69bb      	ldr	r3, [r7, #24]
 8004eea:	4413      	add	r3, r2
 8004eec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ef6:	6093      	str	r3, [r2, #8]
 8004ef8:	e07e      	b.n	8004ff8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004efa:	683a      	ldr	r2, [r7, #0]
 8004efc:	4613      	mov	r3, r2
 8004efe:	00db      	lsls	r3, r3, #3
 8004f00:	4413      	add	r3, r2
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004f08:	687a      	ldr	r2, [r7, #4]
 8004f0a:	4413      	add	r3, r2
 8004f0c:	3304      	adds	r3, #4
 8004f0e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	69da      	ldr	r2, [r3, #28]
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	0159      	lsls	r1, r3, #5
 8004f18:	69bb      	ldr	r3, [r7, #24]
 8004f1a:	440b      	add	r3, r1
 8004f1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f20:	691b      	ldr	r3, [r3, #16]
 8004f22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f26:	1ad2      	subs	r2, r2, r3
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d114      	bne.n	8004f5c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	699b      	ldr	r3, [r3, #24]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d109      	bne.n	8004f4e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6818      	ldr	r0, [r3, #0]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004f44:	461a      	mov	r2, r3
 8004f46:	2101      	movs	r1, #1
 8004f48:	f002 fe92 	bl	8007c70 <USB_EP0_OutStart>
 8004f4c:	e006      	b.n	8004f5c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	691a      	ldr	r2, [r3, #16]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6a1b      	ldr	r3, [r3, #32]
 8004f56:	441a      	add	r2, r3
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	b2db      	uxtb	r3, r3
 8004f60:	4619      	mov	r1, r3
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f007 ff96 	bl	800ce94 <HAL_PCD_DataOutStageCallback>
 8004f68:	e046      	b.n	8004ff8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	4a26      	ldr	r2, [pc, #152]	; (8005008 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d124      	bne.n	8004fbc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d00a      	beq.n	8004f92 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	015a      	lsls	r2, r3, #5
 8004f80:	69bb      	ldr	r3, [r7, #24]
 8004f82:	4413      	add	r3, r2
 8004f84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f88:	461a      	mov	r2, r3
 8004f8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f8e:	6093      	str	r3, [r2, #8]
 8004f90:	e032      	b.n	8004ff8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	f003 0320 	and.w	r3, r3, #32
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d008      	beq.n	8004fae <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	015a      	lsls	r2, r3, #5
 8004fa0:	69bb      	ldr	r3, [r7, #24]
 8004fa2:	4413      	add	r3, r2
 8004fa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fa8:	461a      	mov	r2, r3
 8004faa:	2320      	movs	r3, #32
 8004fac:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	4619      	mov	r1, r3
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f007 ff6d 	bl	800ce94 <HAL_PCD_DataOutStageCallback>
 8004fba:	e01d      	b.n	8004ff8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d114      	bne.n	8004fec <PCD_EP_OutXfrComplete_int+0x1b0>
 8004fc2:	6879      	ldr	r1, [r7, #4]
 8004fc4:	683a      	ldr	r2, [r7, #0]
 8004fc6:	4613      	mov	r3, r2
 8004fc8:	00db      	lsls	r3, r3, #3
 8004fca:	4413      	add	r3, r2
 8004fcc:	009b      	lsls	r3, r3, #2
 8004fce:	440b      	add	r3, r1
 8004fd0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d108      	bne.n	8004fec <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6818      	ldr	r0, [r3, #0]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004fe4:	461a      	mov	r2, r3
 8004fe6:	2100      	movs	r1, #0
 8004fe8:	f002 fe42 	bl	8007c70 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	4619      	mov	r1, r3
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f007 ff4e 	bl	800ce94 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004ff8:	2300      	movs	r3, #0
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3720      	adds	r7, #32
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
 8005002:	bf00      	nop
 8005004:	4f54300a 	.word	0x4f54300a
 8005008:	4f54310a 	.word	0x4f54310a

0800500c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b086      	sub	sp, #24
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	333c      	adds	r3, #60	; 0x3c
 8005024:	3304      	adds	r3, #4
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	015a      	lsls	r2, r3, #5
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	4413      	add	r3, r2
 8005032:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	4a15      	ldr	r2, [pc, #84]	; (8005094 <PCD_EP_OutSetupPacket_int+0x88>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d90e      	bls.n	8005060 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005048:	2b00      	cmp	r3, #0
 800504a:	d009      	beq.n	8005060 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	015a      	lsls	r2, r3, #5
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	4413      	add	r3, r2
 8005054:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005058:	461a      	mov	r2, r3
 800505a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800505e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f007 ff05 	bl	800ce70 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	4a0a      	ldr	r2, [pc, #40]	; (8005094 <PCD_EP_OutSetupPacket_int+0x88>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d90c      	bls.n	8005088 <PCD_EP_OutSetupPacket_int+0x7c>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	691b      	ldr	r3, [r3, #16]
 8005072:	2b01      	cmp	r3, #1
 8005074:	d108      	bne.n	8005088 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6818      	ldr	r0, [r3, #0]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005080:	461a      	mov	r2, r3
 8005082:	2101      	movs	r1, #1
 8005084:	f002 fdf4 	bl	8007c70 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005088:	2300      	movs	r3, #0
}
 800508a:	4618      	mov	r0, r3
 800508c:	3718      	adds	r7, #24
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}
 8005092:	bf00      	nop
 8005094:	4f54300a 	.word	0x4f54300a

08005098 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005098:	b480      	push	{r7}
 800509a:	b085      	sub	sp, #20
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	460b      	mov	r3, r1
 80050a2:	70fb      	strb	r3, [r7, #3]
 80050a4:	4613      	mov	r3, r2
 80050a6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ae:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80050b0:	78fb      	ldrb	r3, [r7, #3]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d107      	bne.n	80050c6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80050b6:	883b      	ldrh	r3, [r7, #0]
 80050b8:	0419      	lsls	r1, r3, #16
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	68ba      	ldr	r2, [r7, #8]
 80050c0:	430a      	orrs	r2, r1
 80050c2:	629a      	str	r2, [r3, #40]	; 0x28
 80050c4:	e028      	b.n	8005118 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050cc:	0c1b      	lsrs	r3, r3, #16
 80050ce:	68ba      	ldr	r2, [r7, #8]
 80050d0:	4413      	add	r3, r2
 80050d2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80050d4:	2300      	movs	r3, #0
 80050d6:	73fb      	strb	r3, [r7, #15]
 80050d8:	e00d      	b.n	80050f6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	7bfb      	ldrb	r3, [r7, #15]
 80050e0:	3340      	adds	r3, #64	; 0x40
 80050e2:	009b      	lsls	r3, r3, #2
 80050e4:	4413      	add	r3, r2
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	0c1b      	lsrs	r3, r3, #16
 80050ea:	68ba      	ldr	r2, [r7, #8]
 80050ec:	4413      	add	r3, r2
 80050ee:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80050f0:	7bfb      	ldrb	r3, [r7, #15]
 80050f2:	3301      	adds	r3, #1
 80050f4:	73fb      	strb	r3, [r7, #15]
 80050f6:	7bfa      	ldrb	r2, [r7, #15]
 80050f8:	78fb      	ldrb	r3, [r7, #3]
 80050fa:	3b01      	subs	r3, #1
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d3ec      	bcc.n	80050da <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005100:	883b      	ldrh	r3, [r7, #0]
 8005102:	0418      	lsls	r0, r3, #16
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6819      	ldr	r1, [r3, #0]
 8005108:	78fb      	ldrb	r3, [r7, #3]
 800510a:	3b01      	subs	r3, #1
 800510c:	68ba      	ldr	r2, [r7, #8]
 800510e:	4302      	orrs	r2, r0
 8005110:	3340      	adds	r3, #64	; 0x40
 8005112:	009b      	lsls	r3, r3, #2
 8005114:	440b      	add	r3, r1
 8005116:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005118:	2300      	movs	r3, #0
}
 800511a:	4618      	mov	r0, r3
 800511c:	3714      	adds	r7, #20
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr

08005126 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005126:	b480      	push	{r7}
 8005128:	b083      	sub	sp, #12
 800512a:	af00      	add	r7, sp, #0
 800512c:	6078      	str	r0, [r7, #4]
 800512e:	460b      	mov	r3, r1
 8005130:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	887a      	ldrh	r2, [r7, #2]
 8005138:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800513a:	2300      	movs	r3, #0
}
 800513c:	4618      	mov	r0, r3
 800513e:	370c      	adds	r7, #12
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr

08005148 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005148:	b480      	push	{r7}
 800514a:	b083      	sub	sp, #12
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	460b      	mov	r3, r1
 8005152:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005154:	bf00      	nop
 8005156:	370c      	adds	r7, #12
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr

08005160 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b086      	sub	sp, #24
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d101      	bne.n	8005172 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800516e:	2301      	movs	r3, #1
 8005170:	e267      	b.n	8005642 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f003 0301 	and.w	r3, r3, #1
 800517a:	2b00      	cmp	r3, #0
 800517c:	d075      	beq.n	800526a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800517e:	4b88      	ldr	r3, [pc, #544]	; (80053a0 <HAL_RCC_OscConfig+0x240>)
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	f003 030c 	and.w	r3, r3, #12
 8005186:	2b04      	cmp	r3, #4
 8005188:	d00c      	beq.n	80051a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800518a:	4b85      	ldr	r3, [pc, #532]	; (80053a0 <HAL_RCC_OscConfig+0x240>)
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005192:	2b08      	cmp	r3, #8
 8005194:	d112      	bne.n	80051bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005196:	4b82      	ldr	r3, [pc, #520]	; (80053a0 <HAL_RCC_OscConfig+0x240>)
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800519e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051a2:	d10b      	bne.n	80051bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051a4:	4b7e      	ldr	r3, [pc, #504]	; (80053a0 <HAL_RCC_OscConfig+0x240>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d05b      	beq.n	8005268 <HAL_RCC_OscConfig+0x108>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d157      	bne.n	8005268 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	e242      	b.n	8005642 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051c4:	d106      	bne.n	80051d4 <HAL_RCC_OscConfig+0x74>
 80051c6:	4b76      	ldr	r3, [pc, #472]	; (80053a0 <HAL_RCC_OscConfig+0x240>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a75      	ldr	r2, [pc, #468]	; (80053a0 <HAL_RCC_OscConfig+0x240>)
 80051cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051d0:	6013      	str	r3, [r2, #0]
 80051d2:	e01d      	b.n	8005210 <HAL_RCC_OscConfig+0xb0>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80051dc:	d10c      	bne.n	80051f8 <HAL_RCC_OscConfig+0x98>
 80051de:	4b70      	ldr	r3, [pc, #448]	; (80053a0 <HAL_RCC_OscConfig+0x240>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a6f      	ldr	r2, [pc, #444]	; (80053a0 <HAL_RCC_OscConfig+0x240>)
 80051e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80051e8:	6013      	str	r3, [r2, #0]
 80051ea:	4b6d      	ldr	r3, [pc, #436]	; (80053a0 <HAL_RCC_OscConfig+0x240>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a6c      	ldr	r2, [pc, #432]	; (80053a0 <HAL_RCC_OscConfig+0x240>)
 80051f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051f4:	6013      	str	r3, [r2, #0]
 80051f6:	e00b      	b.n	8005210 <HAL_RCC_OscConfig+0xb0>
 80051f8:	4b69      	ldr	r3, [pc, #420]	; (80053a0 <HAL_RCC_OscConfig+0x240>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a68      	ldr	r2, [pc, #416]	; (80053a0 <HAL_RCC_OscConfig+0x240>)
 80051fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005202:	6013      	str	r3, [r2, #0]
 8005204:	4b66      	ldr	r3, [pc, #408]	; (80053a0 <HAL_RCC_OscConfig+0x240>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a65      	ldr	r2, [pc, #404]	; (80053a0 <HAL_RCC_OscConfig+0x240>)
 800520a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800520e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d013      	beq.n	8005240 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005218:	f7fb ff7a 	bl	8001110 <HAL_GetTick>
 800521c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800521e:	e008      	b.n	8005232 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005220:	f7fb ff76 	bl	8001110 <HAL_GetTick>
 8005224:	4602      	mov	r2, r0
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	1ad3      	subs	r3, r2, r3
 800522a:	2b64      	cmp	r3, #100	; 0x64
 800522c:	d901      	bls.n	8005232 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800522e:	2303      	movs	r3, #3
 8005230:	e207      	b.n	8005642 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005232:	4b5b      	ldr	r3, [pc, #364]	; (80053a0 <HAL_RCC_OscConfig+0x240>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800523a:	2b00      	cmp	r3, #0
 800523c:	d0f0      	beq.n	8005220 <HAL_RCC_OscConfig+0xc0>
 800523e:	e014      	b.n	800526a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005240:	f7fb ff66 	bl	8001110 <HAL_GetTick>
 8005244:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005246:	e008      	b.n	800525a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005248:	f7fb ff62 	bl	8001110 <HAL_GetTick>
 800524c:	4602      	mov	r2, r0
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	1ad3      	subs	r3, r2, r3
 8005252:	2b64      	cmp	r3, #100	; 0x64
 8005254:	d901      	bls.n	800525a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005256:	2303      	movs	r3, #3
 8005258:	e1f3      	b.n	8005642 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800525a:	4b51      	ldr	r3, [pc, #324]	; (80053a0 <HAL_RCC_OscConfig+0x240>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005262:	2b00      	cmp	r3, #0
 8005264:	d1f0      	bne.n	8005248 <HAL_RCC_OscConfig+0xe8>
 8005266:	e000      	b.n	800526a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005268:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 0302 	and.w	r3, r3, #2
 8005272:	2b00      	cmp	r3, #0
 8005274:	d063      	beq.n	800533e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005276:	4b4a      	ldr	r3, [pc, #296]	; (80053a0 <HAL_RCC_OscConfig+0x240>)
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	f003 030c 	and.w	r3, r3, #12
 800527e:	2b00      	cmp	r3, #0
 8005280:	d00b      	beq.n	800529a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005282:	4b47      	ldr	r3, [pc, #284]	; (80053a0 <HAL_RCC_OscConfig+0x240>)
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800528a:	2b08      	cmp	r3, #8
 800528c:	d11c      	bne.n	80052c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800528e:	4b44      	ldr	r3, [pc, #272]	; (80053a0 <HAL_RCC_OscConfig+0x240>)
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005296:	2b00      	cmp	r3, #0
 8005298:	d116      	bne.n	80052c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800529a:	4b41      	ldr	r3, [pc, #260]	; (80053a0 <HAL_RCC_OscConfig+0x240>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f003 0302 	and.w	r3, r3, #2
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d005      	beq.n	80052b2 <HAL_RCC_OscConfig+0x152>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	68db      	ldr	r3, [r3, #12]
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	d001      	beq.n	80052b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	e1c7      	b.n	8005642 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052b2:	4b3b      	ldr	r3, [pc, #236]	; (80053a0 <HAL_RCC_OscConfig+0x240>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	691b      	ldr	r3, [r3, #16]
 80052be:	00db      	lsls	r3, r3, #3
 80052c0:	4937      	ldr	r1, [pc, #220]	; (80053a0 <HAL_RCC_OscConfig+0x240>)
 80052c2:	4313      	orrs	r3, r2
 80052c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80052c6:	e03a      	b.n	800533e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d020      	beq.n	8005312 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80052d0:	4b34      	ldr	r3, [pc, #208]	; (80053a4 <HAL_RCC_OscConfig+0x244>)
 80052d2:	2201      	movs	r2, #1
 80052d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052d6:	f7fb ff1b 	bl	8001110 <HAL_GetTick>
 80052da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052dc:	e008      	b.n	80052f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80052de:	f7fb ff17 	bl	8001110 <HAL_GetTick>
 80052e2:	4602      	mov	r2, r0
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	1ad3      	subs	r3, r2, r3
 80052e8:	2b02      	cmp	r3, #2
 80052ea:	d901      	bls.n	80052f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80052ec:	2303      	movs	r3, #3
 80052ee:	e1a8      	b.n	8005642 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052f0:	4b2b      	ldr	r3, [pc, #172]	; (80053a0 <HAL_RCC_OscConfig+0x240>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f003 0302 	and.w	r3, r3, #2
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d0f0      	beq.n	80052de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052fc:	4b28      	ldr	r3, [pc, #160]	; (80053a0 <HAL_RCC_OscConfig+0x240>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	691b      	ldr	r3, [r3, #16]
 8005308:	00db      	lsls	r3, r3, #3
 800530a:	4925      	ldr	r1, [pc, #148]	; (80053a0 <HAL_RCC_OscConfig+0x240>)
 800530c:	4313      	orrs	r3, r2
 800530e:	600b      	str	r3, [r1, #0]
 8005310:	e015      	b.n	800533e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005312:	4b24      	ldr	r3, [pc, #144]	; (80053a4 <HAL_RCC_OscConfig+0x244>)
 8005314:	2200      	movs	r2, #0
 8005316:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005318:	f7fb fefa 	bl	8001110 <HAL_GetTick>
 800531c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800531e:	e008      	b.n	8005332 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005320:	f7fb fef6 	bl	8001110 <HAL_GetTick>
 8005324:	4602      	mov	r2, r0
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	1ad3      	subs	r3, r2, r3
 800532a:	2b02      	cmp	r3, #2
 800532c:	d901      	bls.n	8005332 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800532e:	2303      	movs	r3, #3
 8005330:	e187      	b.n	8005642 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005332:	4b1b      	ldr	r3, [pc, #108]	; (80053a0 <HAL_RCC_OscConfig+0x240>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f003 0302 	and.w	r3, r3, #2
 800533a:	2b00      	cmp	r3, #0
 800533c:	d1f0      	bne.n	8005320 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f003 0308 	and.w	r3, r3, #8
 8005346:	2b00      	cmp	r3, #0
 8005348:	d036      	beq.n	80053b8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	695b      	ldr	r3, [r3, #20]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d016      	beq.n	8005380 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005352:	4b15      	ldr	r3, [pc, #84]	; (80053a8 <HAL_RCC_OscConfig+0x248>)
 8005354:	2201      	movs	r2, #1
 8005356:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005358:	f7fb feda 	bl	8001110 <HAL_GetTick>
 800535c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800535e:	e008      	b.n	8005372 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005360:	f7fb fed6 	bl	8001110 <HAL_GetTick>
 8005364:	4602      	mov	r2, r0
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	1ad3      	subs	r3, r2, r3
 800536a:	2b02      	cmp	r3, #2
 800536c:	d901      	bls.n	8005372 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800536e:	2303      	movs	r3, #3
 8005370:	e167      	b.n	8005642 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005372:	4b0b      	ldr	r3, [pc, #44]	; (80053a0 <HAL_RCC_OscConfig+0x240>)
 8005374:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005376:	f003 0302 	and.w	r3, r3, #2
 800537a:	2b00      	cmp	r3, #0
 800537c:	d0f0      	beq.n	8005360 <HAL_RCC_OscConfig+0x200>
 800537e:	e01b      	b.n	80053b8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005380:	4b09      	ldr	r3, [pc, #36]	; (80053a8 <HAL_RCC_OscConfig+0x248>)
 8005382:	2200      	movs	r2, #0
 8005384:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005386:	f7fb fec3 	bl	8001110 <HAL_GetTick>
 800538a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800538c:	e00e      	b.n	80053ac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800538e:	f7fb febf 	bl	8001110 <HAL_GetTick>
 8005392:	4602      	mov	r2, r0
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	1ad3      	subs	r3, r2, r3
 8005398:	2b02      	cmp	r3, #2
 800539a:	d907      	bls.n	80053ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800539c:	2303      	movs	r3, #3
 800539e:	e150      	b.n	8005642 <HAL_RCC_OscConfig+0x4e2>
 80053a0:	40023800 	.word	0x40023800
 80053a4:	42470000 	.word	0x42470000
 80053a8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053ac:	4b88      	ldr	r3, [pc, #544]	; (80055d0 <HAL_RCC_OscConfig+0x470>)
 80053ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053b0:	f003 0302 	and.w	r3, r3, #2
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d1ea      	bne.n	800538e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f003 0304 	and.w	r3, r3, #4
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	f000 8097 	beq.w	80054f4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80053c6:	2300      	movs	r3, #0
 80053c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80053ca:	4b81      	ldr	r3, [pc, #516]	; (80055d0 <HAL_RCC_OscConfig+0x470>)
 80053cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d10f      	bne.n	80053f6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053d6:	2300      	movs	r3, #0
 80053d8:	60bb      	str	r3, [r7, #8]
 80053da:	4b7d      	ldr	r3, [pc, #500]	; (80055d0 <HAL_RCC_OscConfig+0x470>)
 80053dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053de:	4a7c      	ldr	r2, [pc, #496]	; (80055d0 <HAL_RCC_OscConfig+0x470>)
 80053e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053e4:	6413      	str	r3, [r2, #64]	; 0x40
 80053e6:	4b7a      	ldr	r3, [pc, #488]	; (80055d0 <HAL_RCC_OscConfig+0x470>)
 80053e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053ee:	60bb      	str	r3, [r7, #8]
 80053f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80053f2:	2301      	movs	r3, #1
 80053f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053f6:	4b77      	ldr	r3, [pc, #476]	; (80055d4 <HAL_RCC_OscConfig+0x474>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d118      	bne.n	8005434 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005402:	4b74      	ldr	r3, [pc, #464]	; (80055d4 <HAL_RCC_OscConfig+0x474>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a73      	ldr	r2, [pc, #460]	; (80055d4 <HAL_RCC_OscConfig+0x474>)
 8005408:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800540c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800540e:	f7fb fe7f 	bl	8001110 <HAL_GetTick>
 8005412:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005414:	e008      	b.n	8005428 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005416:	f7fb fe7b 	bl	8001110 <HAL_GetTick>
 800541a:	4602      	mov	r2, r0
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	1ad3      	subs	r3, r2, r3
 8005420:	2b02      	cmp	r3, #2
 8005422:	d901      	bls.n	8005428 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005424:	2303      	movs	r3, #3
 8005426:	e10c      	b.n	8005642 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005428:	4b6a      	ldr	r3, [pc, #424]	; (80055d4 <HAL_RCC_OscConfig+0x474>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005430:	2b00      	cmp	r3, #0
 8005432:	d0f0      	beq.n	8005416 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	2b01      	cmp	r3, #1
 800543a:	d106      	bne.n	800544a <HAL_RCC_OscConfig+0x2ea>
 800543c:	4b64      	ldr	r3, [pc, #400]	; (80055d0 <HAL_RCC_OscConfig+0x470>)
 800543e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005440:	4a63      	ldr	r2, [pc, #396]	; (80055d0 <HAL_RCC_OscConfig+0x470>)
 8005442:	f043 0301 	orr.w	r3, r3, #1
 8005446:	6713      	str	r3, [r2, #112]	; 0x70
 8005448:	e01c      	b.n	8005484 <HAL_RCC_OscConfig+0x324>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	2b05      	cmp	r3, #5
 8005450:	d10c      	bne.n	800546c <HAL_RCC_OscConfig+0x30c>
 8005452:	4b5f      	ldr	r3, [pc, #380]	; (80055d0 <HAL_RCC_OscConfig+0x470>)
 8005454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005456:	4a5e      	ldr	r2, [pc, #376]	; (80055d0 <HAL_RCC_OscConfig+0x470>)
 8005458:	f043 0304 	orr.w	r3, r3, #4
 800545c:	6713      	str	r3, [r2, #112]	; 0x70
 800545e:	4b5c      	ldr	r3, [pc, #368]	; (80055d0 <HAL_RCC_OscConfig+0x470>)
 8005460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005462:	4a5b      	ldr	r2, [pc, #364]	; (80055d0 <HAL_RCC_OscConfig+0x470>)
 8005464:	f043 0301 	orr.w	r3, r3, #1
 8005468:	6713      	str	r3, [r2, #112]	; 0x70
 800546a:	e00b      	b.n	8005484 <HAL_RCC_OscConfig+0x324>
 800546c:	4b58      	ldr	r3, [pc, #352]	; (80055d0 <HAL_RCC_OscConfig+0x470>)
 800546e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005470:	4a57      	ldr	r2, [pc, #348]	; (80055d0 <HAL_RCC_OscConfig+0x470>)
 8005472:	f023 0301 	bic.w	r3, r3, #1
 8005476:	6713      	str	r3, [r2, #112]	; 0x70
 8005478:	4b55      	ldr	r3, [pc, #340]	; (80055d0 <HAL_RCC_OscConfig+0x470>)
 800547a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800547c:	4a54      	ldr	r2, [pc, #336]	; (80055d0 <HAL_RCC_OscConfig+0x470>)
 800547e:	f023 0304 	bic.w	r3, r3, #4
 8005482:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d015      	beq.n	80054b8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800548c:	f7fb fe40 	bl	8001110 <HAL_GetTick>
 8005490:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005492:	e00a      	b.n	80054aa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005494:	f7fb fe3c 	bl	8001110 <HAL_GetTick>
 8005498:	4602      	mov	r2, r0
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	1ad3      	subs	r3, r2, r3
 800549e:	f241 3288 	movw	r2, #5000	; 0x1388
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d901      	bls.n	80054aa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80054a6:	2303      	movs	r3, #3
 80054a8:	e0cb      	b.n	8005642 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054aa:	4b49      	ldr	r3, [pc, #292]	; (80055d0 <HAL_RCC_OscConfig+0x470>)
 80054ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054ae:	f003 0302 	and.w	r3, r3, #2
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d0ee      	beq.n	8005494 <HAL_RCC_OscConfig+0x334>
 80054b6:	e014      	b.n	80054e2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054b8:	f7fb fe2a 	bl	8001110 <HAL_GetTick>
 80054bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054be:	e00a      	b.n	80054d6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80054c0:	f7fb fe26 	bl	8001110 <HAL_GetTick>
 80054c4:	4602      	mov	r2, r0
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	1ad3      	subs	r3, r2, r3
 80054ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d901      	bls.n	80054d6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80054d2:	2303      	movs	r3, #3
 80054d4:	e0b5      	b.n	8005642 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054d6:	4b3e      	ldr	r3, [pc, #248]	; (80055d0 <HAL_RCC_OscConfig+0x470>)
 80054d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054da:	f003 0302 	and.w	r3, r3, #2
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d1ee      	bne.n	80054c0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80054e2:	7dfb      	ldrb	r3, [r7, #23]
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d105      	bne.n	80054f4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054e8:	4b39      	ldr	r3, [pc, #228]	; (80055d0 <HAL_RCC_OscConfig+0x470>)
 80054ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ec:	4a38      	ldr	r2, [pc, #224]	; (80055d0 <HAL_RCC_OscConfig+0x470>)
 80054ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054f2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	699b      	ldr	r3, [r3, #24]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	f000 80a1 	beq.w	8005640 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80054fe:	4b34      	ldr	r3, [pc, #208]	; (80055d0 <HAL_RCC_OscConfig+0x470>)
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	f003 030c 	and.w	r3, r3, #12
 8005506:	2b08      	cmp	r3, #8
 8005508:	d05c      	beq.n	80055c4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	699b      	ldr	r3, [r3, #24]
 800550e:	2b02      	cmp	r3, #2
 8005510:	d141      	bne.n	8005596 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005512:	4b31      	ldr	r3, [pc, #196]	; (80055d8 <HAL_RCC_OscConfig+0x478>)
 8005514:	2200      	movs	r2, #0
 8005516:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005518:	f7fb fdfa 	bl	8001110 <HAL_GetTick>
 800551c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800551e:	e008      	b.n	8005532 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005520:	f7fb fdf6 	bl	8001110 <HAL_GetTick>
 8005524:	4602      	mov	r2, r0
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	1ad3      	subs	r3, r2, r3
 800552a:	2b02      	cmp	r3, #2
 800552c:	d901      	bls.n	8005532 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800552e:	2303      	movs	r3, #3
 8005530:	e087      	b.n	8005642 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005532:	4b27      	ldr	r3, [pc, #156]	; (80055d0 <HAL_RCC_OscConfig+0x470>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800553a:	2b00      	cmp	r3, #0
 800553c:	d1f0      	bne.n	8005520 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	69da      	ldr	r2, [r3, #28]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6a1b      	ldr	r3, [r3, #32]
 8005546:	431a      	orrs	r2, r3
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800554c:	019b      	lsls	r3, r3, #6
 800554e:	431a      	orrs	r2, r3
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005554:	085b      	lsrs	r3, r3, #1
 8005556:	3b01      	subs	r3, #1
 8005558:	041b      	lsls	r3, r3, #16
 800555a:	431a      	orrs	r2, r3
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005560:	061b      	lsls	r3, r3, #24
 8005562:	491b      	ldr	r1, [pc, #108]	; (80055d0 <HAL_RCC_OscConfig+0x470>)
 8005564:	4313      	orrs	r3, r2
 8005566:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005568:	4b1b      	ldr	r3, [pc, #108]	; (80055d8 <HAL_RCC_OscConfig+0x478>)
 800556a:	2201      	movs	r2, #1
 800556c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800556e:	f7fb fdcf 	bl	8001110 <HAL_GetTick>
 8005572:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005574:	e008      	b.n	8005588 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005576:	f7fb fdcb 	bl	8001110 <HAL_GetTick>
 800557a:	4602      	mov	r2, r0
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	1ad3      	subs	r3, r2, r3
 8005580:	2b02      	cmp	r3, #2
 8005582:	d901      	bls.n	8005588 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005584:	2303      	movs	r3, #3
 8005586:	e05c      	b.n	8005642 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005588:	4b11      	ldr	r3, [pc, #68]	; (80055d0 <HAL_RCC_OscConfig+0x470>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005590:	2b00      	cmp	r3, #0
 8005592:	d0f0      	beq.n	8005576 <HAL_RCC_OscConfig+0x416>
 8005594:	e054      	b.n	8005640 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005596:	4b10      	ldr	r3, [pc, #64]	; (80055d8 <HAL_RCC_OscConfig+0x478>)
 8005598:	2200      	movs	r2, #0
 800559a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800559c:	f7fb fdb8 	bl	8001110 <HAL_GetTick>
 80055a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055a2:	e008      	b.n	80055b6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055a4:	f7fb fdb4 	bl	8001110 <HAL_GetTick>
 80055a8:	4602      	mov	r2, r0
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	1ad3      	subs	r3, r2, r3
 80055ae:	2b02      	cmp	r3, #2
 80055b0:	d901      	bls.n	80055b6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80055b2:	2303      	movs	r3, #3
 80055b4:	e045      	b.n	8005642 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055b6:	4b06      	ldr	r3, [pc, #24]	; (80055d0 <HAL_RCC_OscConfig+0x470>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d1f0      	bne.n	80055a4 <HAL_RCC_OscConfig+0x444>
 80055c2:	e03d      	b.n	8005640 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	699b      	ldr	r3, [r3, #24]
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d107      	bne.n	80055dc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	e038      	b.n	8005642 <HAL_RCC_OscConfig+0x4e2>
 80055d0:	40023800 	.word	0x40023800
 80055d4:	40007000 	.word	0x40007000
 80055d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80055dc:	4b1b      	ldr	r3, [pc, #108]	; (800564c <HAL_RCC_OscConfig+0x4ec>)
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	699b      	ldr	r3, [r3, #24]
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d028      	beq.n	800563c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80055f4:	429a      	cmp	r2, r3
 80055f6:	d121      	bne.n	800563c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005602:	429a      	cmp	r2, r3
 8005604:	d11a      	bne.n	800563c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005606:	68fa      	ldr	r2, [r7, #12]
 8005608:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800560c:	4013      	ands	r3, r2
 800560e:	687a      	ldr	r2, [r7, #4]
 8005610:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005612:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005614:	4293      	cmp	r3, r2
 8005616:	d111      	bne.n	800563c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005622:	085b      	lsrs	r3, r3, #1
 8005624:	3b01      	subs	r3, #1
 8005626:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005628:	429a      	cmp	r2, r3
 800562a:	d107      	bne.n	800563c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005636:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005638:	429a      	cmp	r2, r3
 800563a:	d001      	beq.n	8005640 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800563c:	2301      	movs	r3, #1
 800563e:	e000      	b.n	8005642 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005640:	2300      	movs	r3, #0
}
 8005642:	4618      	mov	r0, r3
 8005644:	3718      	adds	r7, #24
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}
 800564a:	bf00      	nop
 800564c:	40023800 	.word	0x40023800

08005650 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b084      	sub	sp, #16
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d101      	bne.n	8005664 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	e0cc      	b.n	80057fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005664:	4b68      	ldr	r3, [pc, #416]	; (8005808 <HAL_RCC_ClockConfig+0x1b8>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f003 0307 	and.w	r3, r3, #7
 800566c:	683a      	ldr	r2, [r7, #0]
 800566e:	429a      	cmp	r2, r3
 8005670:	d90c      	bls.n	800568c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005672:	4b65      	ldr	r3, [pc, #404]	; (8005808 <HAL_RCC_ClockConfig+0x1b8>)
 8005674:	683a      	ldr	r2, [r7, #0]
 8005676:	b2d2      	uxtb	r2, r2
 8005678:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800567a:	4b63      	ldr	r3, [pc, #396]	; (8005808 <HAL_RCC_ClockConfig+0x1b8>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f003 0307 	and.w	r3, r3, #7
 8005682:	683a      	ldr	r2, [r7, #0]
 8005684:	429a      	cmp	r2, r3
 8005686:	d001      	beq.n	800568c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	e0b8      	b.n	80057fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f003 0302 	and.w	r3, r3, #2
 8005694:	2b00      	cmp	r3, #0
 8005696:	d020      	beq.n	80056da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f003 0304 	and.w	r3, r3, #4
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d005      	beq.n	80056b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80056a4:	4b59      	ldr	r3, [pc, #356]	; (800580c <HAL_RCC_ClockConfig+0x1bc>)
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	4a58      	ldr	r2, [pc, #352]	; (800580c <HAL_RCC_ClockConfig+0x1bc>)
 80056aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80056ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 0308 	and.w	r3, r3, #8
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d005      	beq.n	80056c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80056bc:	4b53      	ldr	r3, [pc, #332]	; (800580c <HAL_RCC_ClockConfig+0x1bc>)
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	4a52      	ldr	r2, [pc, #328]	; (800580c <HAL_RCC_ClockConfig+0x1bc>)
 80056c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80056c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056c8:	4b50      	ldr	r3, [pc, #320]	; (800580c <HAL_RCC_ClockConfig+0x1bc>)
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	494d      	ldr	r1, [pc, #308]	; (800580c <HAL_RCC_ClockConfig+0x1bc>)
 80056d6:	4313      	orrs	r3, r2
 80056d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f003 0301 	and.w	r3, r3, #1
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d044      	beq.n	8005770 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d107      	bne.n	80056fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056ee:	4b47      	ldr	r3, [pc, #284]	; (800580c <HAL_RCC_ClockConfig+0x1bc>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d119      	bne.n	800572e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	e07f      	b.n	80057fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	2b02      	cmp	r3, #2
 8005704:	d003      	beq.n	800570e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800570a:	2b03      	cmp	r3, #3
 800570c:	d107      	bne.n	800571e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800570e:	4b3f      	ldr	r3, [pc, #252]	; (800580c <HAL_RCC_ClockConfig+0x1bc>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005716:	2b00      	cmp	r3, #0
 8005718:	d109      	bne.n	800572e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	e06f      	b.n	80057fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800571e:	4b3b      	ldr	r3, [pc, #236]	; (800580c <HAL_RCC_ClockConfig+0x1bc>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 0302 	and.w	r3, r3, #2
 8005726:	2b00      	cmp	r3, #0
 8005728:	d101      	bne.n	800572e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	e067      	b.n	80057fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800572e:	4b37      	ldr	r3, [pc, #220]	; (800580c <HAL_RCC_ClockConfig+0x1bc>)
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	f023 0203 	bic.w	r2, r3, #3
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	4934      	ldr	r1, [pc, #208]	; (800580c <HAL_RCC_ClockConfig+0x1bc>)
 800573c:	4313      	orrs	r3, r2
 800573e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005740:	f7fb fce6 	bl	8001110 <HAL_GetTick>
 8005744:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005746:	e00a      	b.n	800575e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005748:	f7fb fce2 	bl	8001110 <HAL_GetTick>
 800574c:	4602      	mov	r2, r0
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	1ad3      	subs	r3, r2, r3
 8005752:	f241 3288 	movw	r2, #5000	; 0x1388
 8005756:	4293      	cmp	r3, r2
 8005758:	d901      	bls.n	800575e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800575a:	2303      	movs	r3, #3
 800575c:	e04f      	b.n	80057fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800575e:	4b2b      	ldr	r3, [pc, #172]	; (800580c <HAL_RCC_ClockConfig+0x1bc>)
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	f003 020c 	and.w	r2, r3, #12
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	009b      	lsls	r3, r3, #2
 800576c:	429a      	cmp	r2, r3
 800576e:	d1eb      	bne.n	8005748 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005770:	4b25      	ldr	r3, [pc, #148]	; (8005808 <HAL_RCC_ClockConfig+0x1b8>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f003 0307 	and.w	r3, r3, #7
 8005778:	683a      	ldr	r2, [r7, #0]
 800577a:	429a      	cmp	r2, r3
 800577c:	d20c      	bcs.n	8005798 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800577e:	4b22      	ldr	r3, [pc, #136]	; (8005808 <HAL_RCC_ClockConfig+0x1b8>)
 8005780:	683a      	ldr	r2, [r7, #0]
 8005782:	b2d2      	uxtb	r2, r2
 8005784:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005786:	4b20      	ldr	r3, [pc, #128]	; (8005808 <HAL_RCC_ClockConfig+0x1b8>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f003 0307 	and.w	r3, r3, #7
 800578e:	683a      	ldr	r2, [r7, #0]
 8005790:	429a      	cmp	r2, r3
 8005792:	d001      	beq.n	8005798 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005794:	2301      	movs	r3, #1
 8005796:	e032      	b.n	80057fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f003 0304 	and.w	r3, r3, #4
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d008      	beq.n	80057b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80057a4:	4b19      	ldr	r3, [pc, #100]	; (800580c <HAL_RCC_ClockConfig+0x1bc>)
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	68db      	ldr	r3, [r3, #12]
 80057b0:	4916      	ldr	r1, [pc, #88]	; (800580c <HAL_RCC_ClockConfig+0x1bc>)
 80057b2:	4313      	orrs	r3, r2
 80057b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f003 0308 	and.w	r3, r3, #8
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d009      	beq.n	80057d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80057c2:	4b12      	ldr	r3, [pc, #72]	; (800580c <HAL_RCC_ClockConfig+0x1bc>)
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	691b      	ldr	r3, [r3, #16]
 80057ce:	00db      	lsls	r3, r3, #3
 80057d0:	490e      	ldr	r1, [pc, #56]	; (800580c <HAL_RCC_ClockConfig+0x1bc>)
 80057d2:	4313      	orrs	r3, r2
 80057d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80057d6:	f000 f821 	bl	800581c <HAL_RCC_GetSysClockFreq>
 80057da:	4602      	mov	r2, r0
 80057dc:	4b0b      	ldr	r3, [pc, #44]	; (800580c <HAL_RCC_ClockConfig+0x1bc>)
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	091b      	lsrs	r3, r3, #4
 80057e2:	f003 030f 	and.w	r3, r3, #15
 80057e6:	490a      	ldr	r1, [pc, #40]	; (8005810 <HAL_RCC_ClockConfig+0x1c0>)
 80057e8:	5ccb      	ldrb	r3, [r1, r3]
 80057ea:	fa22 f303 	lsr.w	r3, r2, r3
 80057ee:	4a09      	ldr	r2, [pc, #36]	; (8005814 <HAL_RCC_ClockConfig+0x1c4>)
 80057f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80057f2:	4b09      	ldr	r3, [pc, #36]	; (8005818 <HAL_RCC_ClockConfig+0x1c8>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4618      	mov	r0, r3
 80057f8:	f7fb fb28 	bl	8000e4c <HAL_InitTick>

  return HAL_OK;
 80057fc:	2300      	movs	r3, #0
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3710      	adds	r7, #16
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}
 8005806:	bf00      	nop
 8005808:	40023c00 	.word	0x40023c00
 800580c:	40023800 	.word	0x40023800
 8005810:	0800dfd8 	.word	0x0800dfd8
 8005814:	20000000 	.word	0x20000000
 8005818:	20000004 	.word	0x20000004

0800581c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800581c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005820:	b090      	sub	sp, #64	; 0x40
 8005822:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005824:	2300      	movs	r3, #0
 8005826:	637b      	str	r3, [r7, #52]	; 0x34
 8005828:	2300      	movs	r3, #0
 800582a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800582c:	2300      	movs	r3, #0
 800582e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005830:	2300      	movs	r3, #0
 8005832:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005834:	4b59      	ldr	r3, [pc, #356]	; (800599c <HAL_RCC_GetSysClockFreq+0x180>)
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	f003 030c 	and.w	r3, r3, #12
 800583c:	2b08      	cmp	r3, #8
 800583e:	d00d      	beq.n	800585c <HAL_RCC_GetSysClockFreq+0x40>
 8005840:	2b08      	cmp	r3, #8
 8005842:	f200 80a1 	bhi.w	8005988 <HAL_RCC_GetSysClockFreq+0x16c>
 8005846:	2b00      	cmp	r3, #0
 8005848:	d002      	beq.n	8005850 <HAL_RCC_GetSysClockFreq+0x34>
 800584a:	2b04      	cmp	r3, #4
 800584c:	d003      	beq.n	8005856 <HAL_RCC_GetSysClockFreq+0x3a>
 800584e:	e09b      	b.n	8005988 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005850:	4b53      	ldr	r3, [pc, #332]	; (80059a0 <HAL_RCC_GetSysClockFreq+0x184>)
 8005852:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005854:	e09b      	b.n	800598e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005856:	4b53      	ldr	r3, [pc, #332]	; (80059a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8005858:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800585a:	e098      	b.n	800598e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800585c:	4b4f      	ldr	r3, [pc, #316]	; (800599c <HAL_RCC_GetSysClockFreq+0x180>)
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005864:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005866:	4b4d      	ldr	r3, [pc, #308]	; (800599c <HAL_RCC_GetSysClockFreq+0x180>)
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800586e:	2b00      	cmp	r3, #0
 8005870:	d028      	beq.n	80058c4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005872:	4b4a      	ldr	r3, [pc, #296]	; (800599c <HAL_RCC_GetSysClockFreq+0x180>)
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	099b      	lsrs	r3, r3, #6
 8005878:	2200      	movs	r2, #0
 800587a:	623b      	str	r3, [r7, #32]
 800587c:	627a      	str	r2, [r7, #36]	; 0x24
 800587e:	6a3b      	ldr	r3, [r7, #32]
 8005880:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005884:	2100      	movs	r1, #0
 8005886:	4b47      	ldr	r3, [pc, #284]	; (80059a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8005888:	fb03 f201 	mul.w	r2, r3, r1
 800588c:	2300      	movs	r3, #0
 800588e:	fb00 f303 	mul.w	r3, r0, r3
 8005892:	4413      	add	r3, r2
 8005894:	4a43      	ldr	r2, [pc, #268]	; (80059a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8005896:	fba0 1202 	umull	r1, r2, r0, r2
 800589a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800589c:	460a      	mov	r2, r1
 800589e:	62ba      	str	r2, [r7, #40]	; 0x28
 80058a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058a2:	4413      	add	r3, r2
 80058a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058a8:	2200      	movs	r2, #0
 80058aa:	61bb      	str	r3, [r7, #24]
 80058ac:	61fa      	str	r2, [r7, #28]
 80058ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80058b2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80058b6:	f7fa fceb 	bl	8000290 <__aeabi_uldivmod>
 80058ba:	4602      	mov	r2, r0
 80058bc:	460b      	mov	r3, r1
 80058be:	4613      	mov	r3, r2
 80058c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058c2:	e053      	b.n	800596c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80058c4:	4b35      	ldr	r3, [pc, #212]	; (800599c <HAL_RCC_GetSysClockFreq+0x180>)
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	099b      	lsrs	r3, r3, #6
 80058ca:	2200      	movs	r2, #0
 80058cc:	613b      	str	r3, [r7, #16]
 80058ce:	617a      	str	r2, [r7, #20]
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80058d6:	f04f 0b00 	mov.w	fp, #0
 80058da:	4652      	mov	r2, sl
 80058dc:	465b      	mov	r3, fp
 80058de:	f04f 0000 	mov.w	r0, #0
 80058e2:	f04f 0100 	mov.w	r1, #0
 80058e6:	0159      	lsls	r1, r3, #5
 80058e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80058ec:	0150      	lsls	r0, r2, #5
 80058ee:	4602      	mov	r2, r0
 80058f0:	460b      	mov	r3, r1
 80058f2:	ebb2 080a 	subs.w	r8, r2, sl
 80058f6:	eb63 090b 	sbc.w	r9, r3, fp
 80058fa:	f04f 0200 	mov.w	r2, #0
 80058fe:	f04f 0300 	mov.w	r3, #0
 8005902:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005906:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800590a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800590e:	ebb2 0408 	subs.w	r4, r2, r8
 8005912:	eb63 0509 	sbc.w	r5, r3, r9
 8005916:	f04f 0200 	mov.w	r2, #0
 800591a:	f04f 0300 	mov.w	r3, #0
 800591e:	00eb      	lsls	r3, r5, #3
 8005920:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005924:	00e2      	lsls	r2, r4, #3
 8005926:	4614      	mov	r4, r2
 8005928:	461d      	mov	r5, r3
 800592a:	eb14 030a 	adds.w	r3, r4, sl
 800592e:	603b      	str	r3, [r7, #0]
 8005930:	eb45 030b 	adc.w	r3, r5, fp
 8005934:	607b      	str	r3, [r7, #4]
 8005936:	f04f 0200 	mov.w	r2, #0
 800593a:	f04f 0300 	mov.w	r3, #0
 800593e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005942:	4629      	mov	r1, r5
 8005944:	028b      	lsls	r3, r1, #10
 8005946:	4621      	mov	r1, r4
 8005948:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800594c:	4621      	mov	r1, r4
 800594e:	028a      	lsls	r2, r1, #10
 8005950:	4610      	mov	r0, r2
 8005952:	4619      	mov	r1, r3
 8005954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005956:	2200      	movs	r2, #0
 8005958:	60bb      	str	r3, [r7, #8]
 800595a:	60fa      	str	r2, [r7, #12]
 800595c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005960:	f7fa fc96 	bl	8000290 <__aeabi_uldivmod>
 8005964:	4602      	mov	r2, r0
 8005966:	460b      	mov	r3, r1
 8005968:	4613      	mov	r3, r2
 800596a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800596c:	4b0b      	ldr	r3, [pc, #44]	; (800599c <HAL_RCC_GetSysClockFreq+0x180>)
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	0c1b      	lsrs	r3, r3, #16
 8005972:	f003 0303 	and.w	r3, r3, #3
 8005976:	3301      	adds	r3, #1
 8005978:	005b      	lsls	r3, r3, #1
 800597a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800597c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800597e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005980:	fbb2 f3f3 	udiv	r3, r2, r3
 8005984:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005986:	e002      	b.n	800598e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005988:	4b05      	ldr	r3, [pc, #20]	; (80059a0 <HAL_RCC_GetSysClockFreq+0x184>)
 800598a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800598c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800598e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005990:	4618      	mov	r0, r3
 8005992:	3740      	adds	r7, #64	; 0x40
 8005994:	46bd      	mov	sp, r7
 8005996:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800599a:	bf00      	nop
 800599c:	40023800 	.word	0x40023800
 80059a0:	00f42400 	.word	0x00f42400
 80059a4:	017d7840 	.word	0x017d7840

080059a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80059a8:	b480      	push	{r7}
 80059aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80059ac:	4b03      	ldr	r3, [pc, #12]	; (80059bc <HAL_RCC_GetHCLKFreq+0x14>)
 80059ae:	681b      	ldr	r3, [r3, #0]
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr
 80059ba:	bf00      	nop
 80059bc:	20000000 	.word	0x20000000

080059c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80059c4:	f7ff fff0 	bl	80059a8 <HAL_RCC_GetHCLKFreq>
 80059c8:	4602      	mov	r2, r0
 80059ca:	4b05      	ldr	r3, [pc, #20]	; (80059e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	0a9b      	lsrs	r3, r3, #10
 80059d0:	f003 0307 	and.w	r3, r3, #7
 80059d4:	4903      	ldr	r1, [pc, #12]	; (80059e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80059d6:	5ccb      	ldrb	r3, [r1, r3]
 80059d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059dc:	4618      	mov	r0, r3
 80059de:	bd80      	pop	{r7, pc}
 80059e0:	40023800 	.word	0x40023800
 80059e4:	0800dfe8 	.word	0x0800dfe8

080059e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80059ec:	f7ff ffdc 	bl	80059a8 <HAL_RCC_GetHCLKFreq>
 80059f0:	4602      	mov	r2, r0
 80059f2:	4b05      	ldr	r3, [pc, #20]	; (8005a08 <HAL_RCC_GetPCLK2Freq+0x20>)
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	0b5b      	lsrs	r3, r3, #13
 80059f8:	f003 0307 	and.w	r3, r3, #7
 80059fc:	4903      	ldr	r1, [pc, #12]	; (8005a0c <HAL_RCC_GetPCLK2Freq+0x24>)
 80059fe:	5ccb      	ldrb	r3, [r1, r3]
 8005a00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	bd80      	pop	{r7, pc}
 8005a08:	40023800 	.word	0x40023800
 8005a0c:	0800dfe8 	.word	0x0800dfe8

08005a10 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b083      	sub	sp, #12
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	220f      	movs	r2, #15
 8005a1e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005a20:	4b12      	ldr	r3, [pc, #72]	; (8005a6c <HAL_RCC_GetClockConfig+0x5c>)
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	f003 0203 	and.w	r2, r3, #3
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005a2c:	4b0f      	ldr	r3, [pc, #60]	; (8005a6c <HAL_RCC_GetClockConfig+0x5c>)
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005a38:	4b0c      	ldr	r3, [pc, #48]	; (8005a6c <HAL_RCC_GetClockConfig+0x5c>)
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005a44:	4b09      	ldr	r3, [pc, #36]	; (8005a6c <HAL_RCC_GetClockConfig+0x5c>)
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	08db      	lsrs	r3, r3, #3
 8005a4a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005a52:	4b07      	ldr	r3, [pc, #28]	; (8005a70 <HAL_RCC_GetClockConfig+0x60>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f003 0207 	and.w	r2, r3, #7
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	601a      	str	r2, [r3, #0]
}
 8005a5e:	bf00      	nop
 8005a60:	370c      	adds	r7, #12
 8005a62:	46bd      	mov	sp, r7
 8005a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a68:	4770      	bx	lr
 8005a6a:	bf00      	nop
 8005a6c:	40023800 	.word	0x40023800
 8005a70:	40023c00 	.word	0x40023c00

08005a74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b082      	sub	sp, #8
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d101      	bne.n	8005a86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a82:	2301      	movs	r3, #1
 8005a84:	e041      	b.n	8005b0a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d106      	bne.n	8005aa0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2200      	movs	r2, #0
 8005a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f000 f839 	bl	8005b12 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2202      	movs	r2, #2
 8005aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681a      	ldr	r2, [r3, #0]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	3304      	adds	r3, #4
 8005ab0:	4619      	mov	r1, r3
 8005ab2:	4610      	mov	r0, r2
 8005ab4:	f000 f9ca 	bl	8005e4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2201      	movs	r2, #1
 8005abc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2201      	movs	r2, #1
 8005acc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2201      	movs	r2, #1
 8005adc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2201      	movs	r2, #1
 8005aec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2201      	movs	r2, #1
 8005af4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2201      	movs	r2, #1
 8005afc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2201      	movs	r2, #1
 8005b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b08:	2300      	movs	r3, #0
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3708      	adds	r7, #8
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}

08005b12 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005b12:	b480      	push	{r7}
 8005b14:	b083      	sub	sp, #12
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005b1a:	bf00      	nop
 8005b1c:	370c      	adds	r7, #12
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b24:	4770      	bx	lr
	...

08005b28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b085      	sub	sp, #20
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b36:	b2db      	uxtb	r3, r3
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d001      	beq.n	8005b40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	e044      	b.n	8005bca <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2202      	movs	r2, #2
 8005b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	68da      	ldr	r2, [r3, #12]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f042 0201 	orr.w	r2, r2, #1
 8005b56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a1e      	ldr	r2, [pc, #120]	; (8005bd8 <HAL_TIM_Base_Start_IT+0xb0>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d018      	beq.n	8005b94 <HAL_TIM_Base_Start_IT+0x6c>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b6a:	d013      	beq.n	8005b94 <HAL_TIM_Base_Start_IT+0x6c>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a1a      	ldr	r2, [pc, #104]	; (8005bdc <HAL_TIM_Base_Start_IT+0xb4>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d00e      	beq.n	8005b94 <HAL_TIM_Base_Start_IT+0x6c>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a19      	ldr	r2, [pc, #100]	; (8005be0 <HAL_TIM_Base_Start_IT+0xb8>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d009      	beq.n	8005b94 <HAL_TIM_Base_Start_IT+0x6c>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a17      	ldr	r2, [pc, #92]	; (8005be4 <HAL_TIM_Base_Start_IT+0xbc>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d004      	beq.n	8005b94 <HAL_TIM_Base_Start_IT+0x6c>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a16      	ldr	r2, [pc, #88]	; (8005be8 <HAL_TIM_Base_Start_IT+0xc0>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d111      	bne.n	8005bb8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	f003 0307 	and.w	r3, r3, #7
 8005b9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2b06      	cmp	r3, #6
 8005ba4:	d010      	beq.n	8005bc8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f042 0201 	orr.w	r2, r2, #1
 8005bb4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bb6:	e007      	b.n	8005bc8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f042 0201 	orr.w	r2, r2, #1
 8005bc6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005bc8:	2300      	movs	r3, #0
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3714      	adds	r7, #20
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd4:	4770      	bx	lr
 8005bd6:	bf00      	nop
 8005bd8:	40010000 	.word	0x40010000
 8005bdc:	40000400 	.word	0x40000400
 8005be0:	40000800 	.word	0x40000800
 8005be4:	40000c00 	.word	0x40000c00
 8005be8:	40014000 	.word	0x40014000

08005bec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b082      	sub	sp, #8
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	691b      	ldr	r3, [r3, #16]
 8005bfa:	f003 0302 	and.w	r3, r3, #2
 8005bfe:	2b02      	cmp	r3, #2
 8005c00:	d122      	bne.n	8005c48 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	68db      	ldr	r3, [r3, #12]
 8005c08:	f003 0302 	and.w	r3, r3, #2
 8005c0c:	2b02      	cmp	r3, #2
 8005c0e:	d11b      	bne.n	8005c48 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f06f 0202 	mvn.w	r2, #2
 8005c18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	699b      	ldr	r3, [r3, #24]
 8005c26:	f003 0303 	and.w	r3, r3, #3
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d003      	beq.n	8005c36 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f000 f8ee 	bl	8005e10 <HAL_TIM_IC_CaptureCallback>
 8005c34:	e005      	b.n	8005c42 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f000 f8e0 	bl	8005dfc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f000 f8f1 	bl	8005e24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2200      	movs	r2, #0
 8005c46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	691b      	ldr	r3, [r3, #16]
 8005c4e:	f003 0304 	and.w	r3, r3, #4
 8005c52:	2b04      	cmp	r3, #4
 8005c54:	d122      	bne.n	8005c9c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	68db      	ldr	r3, [r3, #12]
 8005c5c:	f003 0304 	and.w	r3, r3, #4
 8005c60:	2b04      	cmp	r3, #4
 8005c62:	d11b      	bne.n	8005c9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f06f 0204 	mvn.w	r2, #4
 8005c6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2202      	movs	r2, #2
 8005c72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	699b      	ldr	r3, [r3, #24]
 8005c7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d003      	beq.n	8005c8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f000 f8c4 	bl	8005e10 <HAL_TIM_IC_CaptureCallback>
 8005c88:	e005      	b.n	8005c96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f000 f8b6 	bl	8005dfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f000 f8c7 	bl	8005e24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	691b      	ldr	r3, [r3, #16]
 8005ca2:	f003 0308 	and.w	r3, r3, #8
 8005ca6:	2b08      	cmp	r3, #8
 8005ca8:	d122      	bne.n	8005cf0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	68db      	ldr	r3, [r3, #12]
 8005cb0:	f003 0308 	and.w	r3, r3, #8
 8005cb4:	2b08      	cmp	r3, #8
 8005cb6:	d11b      	bne.n	8005cf0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f06f 0208 	mvn.w	r2, #8
 8005cc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2204      	movs	r2, #4
 8005cc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	69db      	ldr	r3, [r3, #28]
 8005cce:	f003 0303 	and.w	r3, r3, #3
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d003      	beq.n	8005cde <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f000 f89a 	bl	8005e10 <HAL_TIM_IC_CaptureCallback>
 8005cdc:	e005      	b.n	8005cea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f000 f88c 	bl	8005dfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f000 f89d 	bl	8005e24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2200      	movs	r2, #0
 8005cee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	691b      	ldr	r3, [r3, #16]
 8005cf6:	f003 0310 	and.w	r3, r3, #16
 8005cfa:	2b10      	cmp	r3, #16
 8005cfc:	d122      	bne.n	8005d44 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	68db      	ldr	r3, [r3, #12]
 8005d04:	f003 0310 	and.w	r3, r3, #16
 8005d08:	2b10      	cmp	r3, #16
 8005d0a:	d11b      	bne.n	8005d44 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f06f 0210 	mvn.w	r2, #16
 8005d14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2208      	movs	r2, #8
 8005d1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	69db      	ldr	r3, [r3, #28]
 8005d22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d003      	beq.n	8005d32 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f000 f870 	bl	8005e10 <HAL_TIM_IC_CaptureCallback>
 8005d30:	e005      	b.n	8005d3e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f000 f862 	bl	8005dfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f000 f873 	bl	8005e24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2200      	movs	r2, #0
 8005d42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	691b      	ldr	r3, [r3, #16]
 8005d4a:	f003 0301 	and.w	r3, r3, #1
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	d10e      	bne.n	8005d70 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	f003 0301 	and.w	r3, r3, #1
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d107      	bne.n	8005d70 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f06f 0201 	mvn.w	r2, #1
 8005d68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f7fa ff46 	bl	8000bfc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	691b      	ldr	r3, [r3, #16]
 8005d76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d7a:	2b80      	cmp	r3, #128	; 0x80
 8005d7c:	d10e      	bne.n	8005d9c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	68db      	ldr	r3, [r3, #12]
 8005d84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d88:	2b80      	cmp	r3, #128	; 0x80
 8005d8a:	d107      	bne.n	8005d9c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005d94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f000 f8e2 	bl	8005f60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	691b      	ldr	r3, [r3, #16]
 8005da2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005da6:	2b40      	cmp	r3, #64	; 0x40
 8005da8:	d10e      	bne.n	8005dc8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005db4:	2b40      	cmp	r3, #64	; 0x40
 8005db6:	d107      	bne.n	8005dc8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005dc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f000 f838 	bl	8005e38 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	691b      	ldr	r3, [r3, #16]
 8005dce:	f003 0320 	and.w	r3, r3, #32
 8005dd2:	2b20      	cmp	r3, #32
 8005dd4:	d10e      	bne.n	8005df4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	68db      	ldr	r3, [r3, #12]
 8005ddc:	f003 0320 	and.w	r3, r3, #32
 8005de0:	2b20      	cmp	r3, #32
 8005de2:	d107      	bne.n	8005df4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f06f 0220 	mvn.w	r2, #32
 8005dec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f000 f8ac 	bl	8005f4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005df4:	bf00      	nop
 8005df6:	3708      	adds	r7, #8
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}

08005dfc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b083      	sub	sp, #12
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005e04:	bf00      	nop
 8005e06:	370c      	adds	r7, #12
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr

08005e10 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b083      	sub	sp, #12
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005e18:	bf00      	nop
 8005e1a:	370c      	adds	r7, #12
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr

08005e24 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b083      	sub	sp, #12
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e2c:	bf00      	nop
 8005e2e:	370c      	adds	r7, #12
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr

08005e38 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b083      	sub	sp, #12
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e40:	bf00      	nop
 8005e42:	370c      	adds	r7, #12
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr

08005e4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b085      	sub	sp, #20
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
 8005e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	4a34      	ldr	r2, [pc, #208]	; (8005f30 <TIM_Base_SetConfig+0xe4>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d00f      	beq.n	8005e84 <TIM_Base_SetConfig+0x38>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e6a:	d00b      	beq.n	8005e84 <TIM_Base_SetConfig+0x38>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	4a31      	ldr	r2, [pc, #196]	; (8005f34 <TIM_Base_SetConfig+0xe8>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d007      	beq.n	8005e84 <TIM_Base_SetConfig+0x38>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	4a30      	ldr	r2, [pc, #192]	; (8005f38 <TIM_Base_SetConfig+0xec>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d003      	beq.n	8005e84 <TIM_Base_SetConfig+0x38>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	4a2f      	ldr	r2, [pc, #188]	; (8005f3c <TIM_Base_SetConfig+0xf0>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d108      	bne.n	8005e96 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	68fa      	ldr	r2, [r7, #12]
 8005e92:	4313      	orrs	r3, r2
 8005e94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	4a25      	ldr	r2, [pc, #148]	; (8005f30 <TIM_Base_SetConfig+0xe4>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d01b      	beq.n	8005ed6 <TIM_Base_SetConfig+0x8a>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ea4:	d017      	beq.n	8005ed6 <TIM_Base_SetConfig+0x8a>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	4a22      	ldr	r2, [pc, #136]	; (8005f34 <TIM_Base_SetConfig+0xe8>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d013      	beq.n	8005ed6 <TIM_Base_SetConfig+0x8a>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	4a21      	ldr	r2, [pc, #132]	; (8005f38 <TIM_Base_SetConfig+0xec>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d00f      	beq.n	8005ed6 <TIM_Base_SetConfig+0x8a>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	4a20      	ldr	r2, [pc, #128]	; (8005f3c <TIM_Base_SetConfig+0xf0>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d00b      	beq.n	8005ed6 <TIM_Base_SetConfig+0x8a>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	4a1f      	ldr	r2, [pc, #124]	; (8005f40 <TIM_Base_SetConfig+0xf4>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d007      	beq.n	8005ed6 <TIM_Base_SetConfig+0x8a>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	4a1e      	ldr	r2, [pc, #120]	; (8005f44 <TIM_Base_SetConfig+0xf8>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d003      	beq.n	8005ed6 <TIM_Base_SetConfig+0x8a>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	4a1d      	ldr	r2, [pc, #116]	; (8005f48 <TIM_Base_SetConfig+0xfc>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d108      	bne.n	8005ee8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005edc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	68db      	ldr	r3, [r3, #12]
 8005ee2:	68fa      	ldr	r2, [r7, #12]
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	695b      	ldr	r3, [r3, #20]
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	68fa      	ldr	r2, [r7, #12]
 8005efa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	689a      	ldr	r2, [r3, #8]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	4a08      	ldr	r2, [pc, #32]	; (8005f30 <TIM_Base_SetConfig+0xe4>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d103      	bne.n	8005f1c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	691a      	ldr	r2, [r3, #16]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	615a      	str	r2, [r3, #20]
}
 8005f22:	bf00      	nop
 8005f24:	3714      	adds	r7, #20
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr
 8005f2e:	bf00      	nop
 8005f30:	40010000 	.word	0x40010000
 8005f34:	40000400 	.word	0x40000400
 8005f38:	40000800 	.word	0x40000800
 8005f3c:	40000c00 	.word	0x40000c00
 8005f40:	40014000 	.word	0x40014000
 8005f44:	40014400 	.word	0x40014400
 8005f48:	40014800 	.word	0x40014800

08005f4c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b083      	sub	sp, #12
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f54:	bf00      	nop
 8005f56:	370c      	adds	r7, #12
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr

08005f60 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b083      	sub	sp, #12
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f68:	bf00      	nop
 8005f6a:	370c      	adds	r7, #12
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr

08005f74 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b082      	sub	sp, #8
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d101      	bne.n	8005f86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f82:	2301      	movs	r3, #1
 8005f84:	e03f      	b.n	8006006 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f8c:	b2db      	uxtb	r3, r3
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d106      	bne.n	8005fa0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2200      	movs	r2, #0
 8005f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f7fa ff0e 	bl	8000dbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2224      	movs	r2, #36	; 0x24
 8005fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	68da      	ldr	r2, [r3, #12]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005fb6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f000 f829 	bl	8006010 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	691a      	ldr	r2, [r3, #16]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005fcc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	695a      	ldr	r2, [r3, #20]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005fdc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	68da      	ldr	r2, [r3, #12]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005fec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2220      	movs	r2, #32
 8005ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2220      	movs	r2, #32
 8006000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006004:	2300      	movs	r3, #0
}
 8006006:	4618      	mov	r0, r3
 8006008:	3708      	adds	r7, #8
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}
	...

08006010 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006010:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006014:	b0c0      	sub	sp, #256	; 0x100
 8006016:	af00      	add	r7, sp, #0
 8006018:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800601c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	691b      	ldr	r3, [r3, #16]
 8006024:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800602c:	68d9      	ldr	r1, [r3, #12]
 800602e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006032:	681a      	ldr	r2, [r3, #0]
 8006034:	ea40 0301 	orr.w	r3, r0, r1
 8006038:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800603a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800603e:	689a      	ldr	r2, [r3, #8]
 8006040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006044:	691b      	ldr	r3, [r3, #16]
 8006046:	431a      	orrs	r2, r3
 8006048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800604c:	695b      	ldr	r3, [r3, #20]
 800604e:	431a      	orrs	r2, r3
 8006050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006054:	69db      	ldr	r3, [r3, #28]
 8006056:	4313      	orrs	r3, r2
 8006058:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800605c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	68db      	ldr	r3, [r3, #12]
 8006064:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006068:	f021 010c 	bic.w	r1, r1, #12
 800606c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006070:	681a      	ldr	r2, [r3, #0]
 8006072:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006076:	430b      	orrs	r3, r1
 8006078:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800607a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	695b      	ldr	r3, [r3, #20]
 8006082:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006086:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800608a:	6999      	ldr	r1, [r3, #24]
 800608c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006090:	681a      	ldr	r2, [r3, #0]
 8006092:	ea40 0301 	orr.w	r3, r0, r1
 8006096:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	4b8f      	ldr	r3, [pc, #572]	; (80062dc <UART_SetConfig+0x2cc>)
 80060a0:	429a      	cmp	r2, r3
 80060a2:	d005      	beq.n	80060b0 <UART_SetConfig+0xa0>
 80060a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060a8:	681a      	ldr	r2, [r3, #0]
 80060aa:	4b8d      	ldr	r3, [pc, #564]	; (80062e0 <UART_SetConfig+0x2d0>)
 80060ac:	429a      	cmp	r2, r3
 80060ae:	d104      	bne.n	80060ba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80060b0:	f7ff fc9a 	bl	80059e8 <HAL_RCC_GetPCLK2Freq>
 80060b4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80060b8:	e003      	b.n	80060c2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80060ba:	f7ff fc81 	bl	80059c0 <HAL_RCC_GetPCLK1Freq>
 80060be:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060c6:	69db      	ldr	r3, [r3, #28]
 80060c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060cc:	f040 810c 	bne.w	80062e8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80060d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060d4:	2200      	movs	r2, #0
 80060d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80060da:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80060de:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80060e2:	4622      	mov	r2, r4
 80060e4:	462b      	mov	r3, r5
 80060e6:	1891      	adds	r1, r2, r2
 80060e8:	65b9      	str	r1, [r7, #88]	; 0x58
 80060ea:	415b      	adcs	r3, r3
 80060ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80060ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80060f2:	4621      	mov	r1, r4
 80060f4:	eb12 0801 	adds.w	r8, r2, r1
 80060f8:	4629      	mov	r1, r5
 80060fa:	eb43 0901 	adc.w	r9, r3, r1
 80060fe:	f04f 0200 	mov.w	r2, #0
 8006102:	f04f 0300 	mov.w	r3, #0
 8006106:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800610a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800610e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006112:	4690      	mov	r8, r2
 8006114:	4699      	mov	r9, r3
 8006116:	4623      	mov	r3, r4
 8006118:	eb18 0303 	adds.w	r3, r8, r3
 800611c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006120:	462b      	mov	r3, r5
 8006122:	eb49 0303 	adc.w	r3, r9, r3
 8006126:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800612a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	2200      	movs	r2, #0
 8006132:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006136:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800613a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800613e:	460b      	mov	r3, r1
 8006140:	18db      	adds	r3, r3, r3
 8006142:	653b      	str	r3, [r7, #80]	; 0x50
 8006144:	4613      	mov	r3, r2
 8006146:	eb42 0303 	adc.w	r3, r2, r3
 800614a:	657b      	str	r3, [r7, #84]	; 0x54
 800614c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006150:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006154:	f7fa f89c 	bl	8000290 <__aeabi_uldivmod>
 8006158:	4602      	mov	r2, r0
 800615a:	460b      	mov	r3, r1
 800615c:	4b61      	ldr	r3, [pc, #388]	; (80062e4 <UART_SetConfig+0x2d4>)
 800615e:	fba3 2302 	umull	r2, r3, r3, r2
 8006162:	095b      	lsrs	r3, r3, #5
 8006164:	011c      	lsls	r4, r3, #4
 8006166:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800616a:	2200      	movs	r2, #0
 800616c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006170:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006174:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006178:	4642      	mov	r2, r8
 800617a:	464b      	mov	r3, r9
 800617c:	1891      	adds	r1, r2, r2
 800617e:	64b9      	str	r1, [r7, #72]	; 0x48
 8006180:	415b      	adcs	r3, r3
 8006182:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006184:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006188:	4641      	mov	r1, r8
 800618a:	eb12 0a01 	adds.w	sl, r2, r1
 800618e:	4649      	mov	r1, r9
 8006190:	eb43 0b01 	adc.w	fp, r3, r1
 8006194:	f04f 0200 	mov.w	r2, #0
 8006198:	f04f 0300 	mov.w	r3, #0
 800619c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80061a0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80061a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80061a8:	4692      	mov	sl, r2
 80061aa:	469b      	mov	fp, r3
 80061ac:	4643      	mov	r3, r8
 80061ae:	eb1a 0303 	adds.w	r3, sl, r3
 80061b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80061b6:	464b      	mov	r3, r9
 80061b8:	eb4b 0303 	adc.w	r3, fp, r3
 80061bc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80061c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	2200      	movs	r2, #0
 80061c8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80061cc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80061d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80061d4:	460b      	mov	r3, r1
 80061d6:	18db      	adds	r3, r3, r3
 80061d8:	643b      	str	r3, [r7, #64]	; 0x40
 80061da:	4613      	mov	r3, r2
 80061dc:	eb42 0303 	adc.w	r3, r2, r3
 80061e0:	647b      	str	r3, [r7, #68]	; 0x44
 80061e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80061e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80061ea:	f7fa f851 	bl	8000290 <__aeabi_uldivmod>
 80061ee:	4602      	mov	r2, r0
 80061f0:	460b      	mov	r3, r1
 80061f2:	4611      	mov	r1, r2
 80061f4:	4b3b      	ldr	r3, [pc, #236]	; (80062e4 <UART_SetConfig+0x2d4>)
 80061f6:	fba3 2301 	umull	r2, r3, r3, r1
 80061fa:	095b      	lsrs	r3, r3, #5
 80061fc:	2264      	movs	r2, #100	; 0x64
 80061fe:	fb02 f303 	mul.w	r3, r2, r3
 8006202:	1acb      	subs	r3, r1, r3
 8006204:	00db      	lsls	r3, r3, #3
 8006206:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800620a:	4b36      	ldr	r3, [pc, #216]	; (80062e4 <UART_SetConfig+0x2d4>)
 800620c:	fba3 2302 	umull	r2, r3, r3, r2
 8006210:	095b      	lsrs	r3, r3, #5
 8006212:	005b      	lsls	r3, r3, #1
 8006214:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006218:	441c      	add	r4, r3
 800621a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800621e:	2200      	movs	r2, #0
 8006220:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006224:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006228:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800622c:	4642      	mov	r2, r8
 800622e:	464b      	mov	r3, r9
 8006230:	1891      	adds	r1, r2, r2
 8006232:	63b9      	str	r1, [r7, #56]	; 0x38
 8006234:	415b      	adcs	r3, r3
 8006236:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006238:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800623c:	4641      	mov	r1, r8
 800623e:	1851      	adds	r1, r2, r1
 8006240:	6339      	str	r1, [r7, #48]	; 0x30
 8006242:	4649      	mov	r1, r9
 8006244:	414b      	adcs	r3, r1
 8006246:	637b      	str	r3, [r7, #52]	; 0x34
 8006248:	f04f 0200 	mov.w	r2, #0
 800624c:	f04f 0300 	mov.w	r3, #0
 8006250:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006254:	4659      	mov	r1, fp
 8006256:	00cb      	lsls	r3, r1, #3
 8006258:	4651      	mov	r1, sl
 800625a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800625e:	4651      	mov	r1, sl
 8006260:	00ca      	lsls	r2, r1, #3
 8006262:	4610      	mov	r0, r2
 8006264:	4619      	mov	r1, r3
 8006266:	4603      	mov	r3, r0
 8006268:	4642      	mov	r2, r8
 800626a:	189b      	adds	r3, r3, r2
 800626c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006270:	464b      	mov	r3, r9
 8006272:	460a      	mov	r2, r1
 8006274:	eb42 0303 	adc.w	r3, r2, r3
 8006278:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800627c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	2200      	movs	r2, #0
 8006284:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006288:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800628c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006290:	460b      	mov	r3, r1
 8006292:	18db      	adds	r3, r3, r3
 8006294:	62bb      	str	r3, [r7, #40]	; 0x28
 8006296:	4613      	mov	r3, r2
 8006298:	eb42 0303 	adc.w	r3, r2, r3
 800629c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800629e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80062a2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80062a6:	f7f9 fff3 	bl	8000290 <__aeabi_uldivmod>
 80062aa:	4602      	mov	r2, r0
 80062ac:	460b      	mov	r3, r1
 80062ae:	4b0d      	ldr	r3, [pc, #52]	; (80062e4 <UART_SetConfig+0x2d4>)
 80062b0:	fba3 1302 	umull	r1, r3, r3, r2
 80062b4:	095b      	lsrs	r3, r3, #5
 80062b6:	2164      	movs	r1, #100	; 0x64
 80062b8:	fb01 f303 	mul.w	r3, r1, r3
 80062bc:	1ad3      	subs	r3, r2, r3
 80062be:	00db      	lsls	r3, r3, #3
 80062c0:	3332      	adds	r3, #50	; 0x32
 80062c2:	4a08      	ldr	r2, [pc, #32]	; (80062e4 <UART_SetConfig+0x2d4>)
 80062c4:	fba2 2303 	umull	r2, r3, r2, r3
 80062c8:	095b      	lsrs	r3, r3, #5
 80062ca:	f003 0207 	and.w	r2, r3, #7
 80062ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4422      	add	r2, r4
 80062d6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80062d8:	e105      	b.n	80064e6 <UART_SetConfig+0x4d6>
 80062da:	bf00      	nop
 80062dc:	40011000 	.word	0x40011000
 80062e0:	40011400 	.word	0x40011400
 80062e4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80062e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062ec:	2200      	movs	r2, #0
 80062ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80062f2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80062f6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80062fa:	4642      	mov	r2, r8
 80062fc:	464b      	mov	r3, r9
 80062fe:	1891      	adds	r1, r2, r2
 8006300:	6239      	str	r1, [r7, #32]
 8006302:	415b      	adcs	r3, r3
 8006304:	627b      	str	r3, [r7, #36]	; 0x24
 8006306:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800630a:	4641      	mov	r1, r8
 800630c:	1854      	adds	r4, r2, r1
 800630e:	4649      	mov	r1, r9
 8006310:	eb43 0501 	adc.w	r5, r3, r1
 8006314:	f04f 0200 	mov.w	r2, #0
 8006318:	f04f 0300 	mov.w	r3, #0
 800631c:	00eb      	lsls	r3, r5, #3
 800631e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006322:	00e2      	lsls	r2, r4, #3
 8006324:	4614      	mov	r4, r2
 8006326:	461d      	mov	r5, r3
 8006328:	4643      	mov	r3, r8
 800632a:	18e3      	adds	r3, r4, r3
 800632c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006330:	464b      	mov	r3, r9
 8006332:	eb45 0303 	adc.w	r3, r5, r3
 8006336:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800633a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	2200      	movs	r2, #0
 8006342:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006346:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800634a:	f04f 0200 	mov.w	r2, #0
 800634e:	f04f 0300 	mov.w	r3, #0
 8006352:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006356:	4629      	mov	r1, r5
 8006358:	008b      	lsls	r3, r1, #2
 800635a:	4621      	mov	r1, r4
 800635c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006360:	4621      	mov	r1, r4
 8006362:	008a      	lsls	r2, r1, #2
 8006364:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006368:	f7f9 ff92 	bl	8000290 <__aeabi_uldivmod>
 800636c:	4602      	mov	r2, r0
 800636e:	460b      	mov	r3, r1
 8006370:	4b60      	ldr	r3, [pc, #384]	; (80064f4 <UART_SetConfig+0x4e4>)
 8006372:	fba3 2302 	umull	r2, r3, r3, r2
 8006376:	095b      	lsrs	r3, r3, #5
 8006378:	011c      	lsls	r4, r3, #4
 800637a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800637e:	2200      	movs	r2, #0
 8006380:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006384:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006388:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800638c:	4642      	mov	r2, r8
 800638e:	464b      	mov	r3, r9
 8006390:	1891      	adds	r1, r2, r2
 8006392:	61b9      	str	r1, [r7, #24]
 8006394:	415b      	adcs	r3, r3
 8006396:	61fb      	str	r3, [r7, #28]
 8006398:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800639c:	4641      	mov	r1, r8
 800639e:	1851      	adds	r1, r2, r1
 80063a0:	6139      	str	r1, [r7, #16]
 80063a2:	4649      	mov	r1, r9
 80063a4:	414b      	adcs	r3, r1
 80063a6:	617b      	str	r3, [r7, #20]
 80063a8:	f04f 0200 	mov.w	r2, #0
 80063ac:	f04f 0300 	mov.w	r3, #0
 80063b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80063b4:	4659      	mov	r1, fp
 80063b6:	00cb      	lsls	r3, r1, #3
 80063b8:	4651      	mov	r1, sl
 80063ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80063be:	4651      	mov	r1, sl
 80063c0:	00ca      	lsls	r2, r1, #3
 80063c2:	4610      	mov	r0, r2
 80063c4:	4619      	mov	r1, r3
 80063c6:	4603      	mov	r3, r0
 80063c8:	4642      	mov	r2, r8
 80063ca:	189b      	adds	r3, r3, r2
 80063cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80063d0:	464b      	mov	r3, r9
 80063d2:	460a      	mov	r2, r1
 80063d4:	eb42 0303 	adc.w	r3, r2, r3
 80063d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80063dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	2200      	movs	r2, #0
 80063e4:	67bb      	str	r3, [r7, #120]	; 0x78
 80063e6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80063e8:	f04f 0200 	mov.w	r2, #0
 80063ec:	f04f 0300 	mov.w	r3, #0
 80063f0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80063f4:	4649      	mov	r1, r9
 80063f6:	008b      	lsls	r3, r1, #2
 80063f8:	4641      	mov	r1, r8
 80063fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80063fe:	4641      	mov	r1, r8
 8006400:	008a      	lsls	r2, r1, #2
 8006402:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006406:	f7f9 ff43 	bl	8000290 <__aeabi_uldivmod>
 800640a:	4602      	mov	r2, r0
 800640c:	460b      	mov	r3, r1
 800640e:	4b39      	ldr	r3, [pc, #228]	; (80064f4 <UART_SetConfig+0x4e4>)
 8006410:	fba3 1302 	umull	r1, r3, r3, r2
 8006414:	095b      	lsrs	r3, r3, #5
 8006416:	2164      	movs	r1, #100	; 0x64
 8006418:	fb01 f303 	mul.w	r3, r1, r3
 800641c:	1ad3      	subs	r3, r2, r3
 800641e:	011b      	lsls	r3, r3, #4
 8006420:	3332      	adds	r3, #50	; 0x32
 8006422:	4a34      	ldr	r2, [pc, #208]	; (80064f4 <UART_SetConfig+0x4e4>)
 8006424:	fba2 2303 	umull	r2, r3, r2, r3
 8006428:	095b      	lsrs	r3, r3, #5
 800642a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800642e:	441c      	add	r4, r3
 8006430:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006434:	2200      	movs	r2, #0
 8006436:	673b      	str	r3, [r7, #112]	; 0x70
 8006438:	677a      	str	r2, [r7, #116]	; 0x74
 800643a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800643e:	4642      	mov	r2, r8
 8006440:	464b      	mov	r3, r9
 8006442:	1891      	adds	r1, r2, r2
 8006444:	60b9      	str	r1, [r7, #8]
 8006446:	415b      	adcs	r3, r3
 8006448:	60fb      	str	r3, [r7, #12]
 800644a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800644e:	4641      	mov	r1, r8
 8006450:	1851      	adds	r1, r2, r1
 8006452:	6039      	str	r1, [r7, #0]
 8006454:	4649      	mov	r1, r9
 8006456:	414b      	adcs	r3, r1
 8006458:	607b      	str	r3, [r7, #4]
 800645a:	f04f 0200 	mov.w	r2, #0
 800645e:	f04f 0300 	mov.w	r3, #0
 8006462:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006466:	4659      	mov	r1, fp
 8006468:	00cb      	lsls	r3, r1, #3
 800646a:	4651      	mov	r1, sl
 800646c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006470:	4651      	mov	r1, sl
 8006472:	00ca      	lsls	r2, r1, #3
 8006474:	4610      	mov	r0, r2
 8006476:	4619      	mov	r1, r3
 8006478:	4603      	mov	r3, r0
 800647a:	4642      	mov	r2, r8
 800647c:	189b      	adds	r3, r3, r2
 800647e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006480:	464b      	mov	r3, r9
 8006482:	460a      	mov	r2, r1
 8006484:	eb42 0303 	adc.w	r3, r2, r3
 8006488:	66fb      	str	r3, [r7, #108]	; 0x6c
 800648a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	2200      	movs	r2, #0
 8006492:	663b      	str	r3, [r7, #96]	; 0x60
 8006494:	667a      	str	r2, [r7, #100]	; 0x64
 8006496:	f04f 0200 	mov.w	r2, #0
 800649a:	f04f 0300 	mov.w	r3, #0
 800649e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80064a2:	4649      	mov	r1, r9
 80064a4:	008b      	lsls	r3, r1, #2
 80064a6:	4641      	mov	r1, r8
 80064a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80064ac:	4641      	mov	r1, r8
 80064ae:	008a      	lsls	r2, r1, #2
 80064b0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80064b4:	f7f9 feec 	bl	8000290 <__aeabi_uldivmod>
 80064b8:	4602      	mov	r2, r0
 80064ba:	460b      	mov	r3, r1
 80064bc:	4b0d      	ldr	r3, [pc, #52]	; (80064f4 <UART_SetConfig+0x4e4>)
 80064be:	fba3 1302 	umull	r1, r3, r3, r2
 80064c2:	095b      	lsrs	r3, r3, #5
 80064c4:	2164      	movs	r1, #100	; 0x64
 80064c6:	fb01 f303 	mul.w	r3, r1, r3
 80064ca:	1ad3      	subs	r3, r2, r3
 80064cc:	011b      	lsls	r3, r3, #4
 80064ce:	3332      	adds	r3, #50	; 0x32
 80064d0:	4a08      	ldr	r2, [pc, #32]	; (80064f4 <UART_SetConfig+0x4e4>)
 80064d2:	fba2 2303 	umull	r2, r3, r2, r3
 80064d6:	095b      	lsrs	r3, r3, #5
 80064d8:	f003 020f 	and.w	r2, r3, #15
 80064dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4422      	add	r2, r4
 80064e4:	609a      	str	r2, [r3, #8]
}
 80064e6:	bf00      	nop
 80064e8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80064ec:	46bd      	mov	sp, r7
 80064ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80064f2:	bf00      	nop
 80064f4:	51eb851f 	.word	0x51eb851f

080064f8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80064f8:	b084      	sub	sp, #16
 80064fa:	b580      	push	{r7, lr}
 80064fc:	b084      	sub	sp, #16
 80064fe:	af00      	add	r7, sp, #0
 8006500:	6078      	str	r0, [r7, #4]
 8006502:	f107 001c 	add.w	r0, r7, #28
 8006506:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800650a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800650c:	2b01      	cmp	r3, #1
 800650e:	d122      	bne.n	8006556 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006514:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	68db      	ldr	r3, [r3, #12]
 8006520:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006524:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006528:	687a      	ldr	r2, [r7, #4]
 800652a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	68db      	ldr	r3, [r3, #12]
 8006530:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006538:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800653a:	2b01      	cmp	r3, #1
 800653c:	d105      	bne.n	800654a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	68db      	ldr	r3, [r3, #12]
 8006542:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f001 fbee 	bl	8007d2c <USB_CoreReset>
 8006550:	4603      	mov	r3, r0
 8006552:	73fb      	strb	r3, [r7, #15]
 8006554:	e01a      	b.n	800658c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	68db      	ldr	r3, [r3, #12]
 800655a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f001 fbe2 	bl	8007d2c <USB_CoreReset>
 8006568:	4603      	mov	r3, r0
 800656a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800656c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800656e:	2b00      	cmp	r3, #0
 8006570:	d106      	bne.n	8006580 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006576:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	639a      	str	r2, [r3, #56]	; 0x38
 800657e:	e005      	b.n	800658c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006584:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800658c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800658e:	2b01      	cmp	r3, #1
 8006590:	d10b      	bne.n	80065aa <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	689b      	ldr	r3, [r3, #8]
 8006596:	f043 0206 	orr.w	r2, r3, #6
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	689b      	ldr	r3, [r3, #8]
 80065a2:	f043 0220 	orr.w	r2, r3, #32
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80065aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	3710      	adds	r7, #16
 80065b0:	46bd      	mov	sp, r7
 80065b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80065b6:	b004      	add	sp, #16
 80065b8:	4770      	bx	lr
	...

080065bc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80065bc:	b480      	push	{r7}
 80065be:	b087      	sub	sp, #28
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	60f8      	str	r0, [r7, #12]
 80065c4:	60b9      	str	r1, [r7, #8]
 80065c6:	4613      	mov	r3, r2
 80065c8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80065ca:	79fb      	ldrb	r3, [r7, #7]
 80065cc:	2b02      	cmp	r3, #2
 80065ce:	d165      	bne.n	800669c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	4a41      	ldr	r2, [pc, #260]	; (80066d8 <USB_SetTurnaroundTime+0x11c>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d906      	bls.n	80065e6 <USB_SetTurnaroundTime+0x2a>
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	4a40      	ldr	r2, [pc, #256]	; (80066dc <USB_SetTurnaroundTime+0x120>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d202      	bcs.n	80065e6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80065e0:	230f      	movs	r3, #15
 80065e2:	617b      	str	r3, [r7, #20]
 80065e4:	e062      	b.n	80066ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	4a3c      	ldr	r2, [pc, #240]	; (80066dc <USB_SetTurnaroundTime+0x120>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d306      	bcc.n	80065fc <USB_SetTurnaroundTime+0x40>
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	4a3b      	ldr	r2, [pc, #236]	; (80066e0 <USB_SetTurnaroundTime+0x124>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d202      	bcs.n	80065fc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80065f6:	230e      	movs	r3, #14
 80065f8:	617b      	str	r3, [r7, #20]
 80065fa:	e057      	b.n	80066ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	4a38      	ldr	r2, [pc, #224]	; (80066e0 <USB_SetTurnaroundTime+0x124>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d306      	bcc.n	8006612 <USB_SetTurnaroundTime+0x56>
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	4a37      	ldr	r2, [pc, #220]	; (80066e4 <USB_SetTurnaroundTime+0x128>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d202      	bcs.n	8006612 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800660c:	230d      	movs	r3, #13
 800660e:	617b      	str	r3, [r7, #20]
 8006610:	e04c      	b.n	80066ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	4a33      	ldr	r2, [pc, #204]	; (80066e4 <USB_SetTurnaroundTime+0x128>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d306      	bcc.n	8006628 <USB_SetTurnaroundTime+0x6c>
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	4a32      	ldr	r2, [pc, #200]	; (80066e8 <USB_SetTurnaroundTime+0x12c>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d802      	bhi.n	8006628 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006622:	230c      	movs	r3, #12
 8006624:	617b      	str	r3, [r7, #20]
 8006626:	e041      	b.n	80066ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	4a2f      	ldr	r2, [pc, #188]	; (80066e8 <USB_SetTurnaroundTime+0x12c>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d906      	bls.n	800663e <USB_SetTurnaroundTime+0x82>
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	4a2e      	ldr	r2, [pc, #184]	; (80066ec <USB_SetTurnaroundTime+0x130>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d802      	bhi.n	800663e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006638:	230b      	movs	r3, #11
 800663a:	617b      	str	r3, [r7, #20]
 800663c:	e036      	b.n	80066ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	4a2a      	ldr	r2, [pc, #168]	; (80066ec <USB_SetTurnaroundTime+0x130>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d906      	bls.n	8006654 <USB_SetTurnaroundTime+0x98>
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	4a29      	ldr	r2, [pc, #164]	; (80066f0 <USB_SetTurnaroundTime+0x134>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d802      	bhi.n	8006654 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800664e:	230a      	movs	r3, #10
 8006650:	617b      	str	r3, [r7, #20]
 8006652:	e02b      	b.n	80066ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	4a26      	ldr	r2, [pc, #152]	; (80066f0 <USB_SetTurnaroundTime+0x134>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d906      	bls.n	800666a <USB_SetTurnaroundTime+0xae>
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	4a25      	ldr	r2, [pc, #148]	; (80066f4 <USB_SetTurnaroundTime+0x138>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d202      	bcs.n	800666a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006664:	2309      	movs	r3, #9
 8006666:	617b      	str	r3, [r7, #20]
 8006668:	e020      	b.n	80066ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	4a21      	ldr	r2, [pc, #132]	; (80066f4 <USB_SetTurnaroundTime+0x138>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d306      	bcc.n	8006680 <USB_SetTurnaroundTime+0xc4>
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	4a20      	ldr	r2, [pc, #128]	; (80066f8 <USB_SetTurnaroundTime+0x13c>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d802      	bhi.n	8006680 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800667a:	2308      	movs	r3, #8
 800667c:	617b      	str	r3, [r7, #20]
 800667e:	e015      	b.n	80066ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	4a1d      	ldr	r2, [pc, #116]	; (80066f8 <USB_SetTurnaroundTime+0x13c>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d906      	bls.n	8006696 <USB_SetTurnaroundTime+0xda>
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	4a1c      	ldr	r2, [pc, #112]	; (80066fc <USB_SetTurnaroundTime+0x140>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d202      	bcs.n	8006696 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006690:	2307      	movs	r3, #7
 8006692:	617b      	str	r3, [r7, #20]
 8006694:	e00a      	b.n	80066ac <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006696:	2306      	movs	r3, #6
 8006698:	617b      	str	r3, [r7, #20]
 800669a:	e007      	b.n	80066ac <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800669c:	79fb      	ldrb	r3, [r7, #7]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d102      	bne.n	80066a8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80066a2:	2309      	movs	r3, #9
 80066a4:	617b      	str	r3, [r7, #20]
 80066a6:	e001      	b.n	80066ac <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80066a8:	2309      	movs	r3, #9
 80066aa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	68db      	ldr	r3, [r3, #12]
 80066b0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	68da      	ldr	r2, [r3, #12]
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	029b      	lsls	r3, r3, #10
 80066c0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80066c4:	431a      	orrs	r2, r3
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80066ca:	2300      	movs	r3, #0
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	371c      	adds	r7, #28
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr
 80066d8:	00d8acbf 	.word	0x00d8acbf
 80066dc:	00e4e1c0 	.word	0x00e4e1c0
 80066e0:	00f42400 	.word	0x00f42400
 80066e4:	01067380 	.word	0x01067380
 80066e8:	011a499f 	.word	0x011a499f
 80066ec:	01312cff 	.word	0x01312cff
 80066f0:	014ca43f 	.word	0x014ca43f
 80066f4:	016e3600 	.word	0x016e3600
 80066f8:	01a6ab1f 	.word	0x01a6ab1f
 80066fc:	01e84800 	.word	0x01e84800

08006700 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006700:	b480      	push	{r7}
 8006702:	b083      	sub	sp, #12
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	f043 0201 	orr.w	r2, r3, #1
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006714:	2300      	movs	r3, #0
}
 8006716:	4618      	mov	r0, r3
 8006718:	370c      	adds	r7, #12
 800671a:	46bd      	mov	sp, r7
 800671c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006720:	4770      	bx	lr

08006722 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006722:	b480      	push	{r7}
 8006724:	b083      	sub	sp, #12
 8006726:	af00      	add	r7, sp, #0
 8006728:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	689b      	ldr	r3, [r3, #8]
 800672e:	f023 0201 	bic.w	r2, r3, #1
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006736:	2300      	movs	r3, #0
}
 8006738:	4618      	mov	r0, r3
 800673a:	370c      	adds	r7, #12
 800673c:	46bd      	mov	sp, r7
 800673e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006742:	4770      	bx	lr

08006744 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b084      	sub	sp, #16
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
 800674c:	460b      	mov	r3, r1
 800674e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006750:	2300      	movs	r3, #0
 8006752:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	68db      	ldr	r3, [r3, #12]
 8006758:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006760:	78fb      	ldrb	r3, [r7, #3]
 8006762:	2b01      	cmp	r3, #1
 8006764:	d115      	bne.n	8006792 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	68db      	ldr	r3, [r3, #12]
 800676a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006772:	2001      	movs	r0, #1
 8006774:	f7fa fcd8 	bl	8001128 <HAL_Delay>
      ms++;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	3301      	adds	r3, #1
 800677c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f001 fa45 	bl	8007c0e <USB_GetMode>
 8006784:	4603      	mov	r3, r0
 8006786:	2b01      	cmp	r3, #1
 8006788:	d01e      	beq.n	80067c8 <USB_SetCurrentMode+0x84>
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	2b31      	cmp	r3, #49	; 0x31
 800678e:	d9f0      	bls.n	8006772 <USB_SetCurrentMode+0x2e>
 8006790:	e01a      	b.n	80067c8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006792:	78fb      	ldrb	r3, [r7, #3]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d115      	bne.n	80067c4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	68db      	ldr	r3, [r3, #12]
 800679c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80067a4:	2001      	movs	r0, #1
 80067a6:	f7fa fcbf 	bl	8001128 <HAL_Delay>
      ms++;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	3301      	adds	r3, #1
 80067ae:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f001 fa2c 	bl	8007c0e <USB_GetMode>
 80067b6:	4603      	mov	r3, r0
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d005      	beq.n	80067c8 <USB_SetCurrentMode+0x84>
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2b31      	cmp	r3, #49	; 0x31
 80067c0:	d9f0      	bls.n	80067a4 <USB_SetCurrentMode+0x60>
 80067c2:	e001      	b.n	80067c8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80067c4:	2301      	movs	r3, #1
 80067c6:	e005      	b.n	80067d4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	2b32      	cmp	r3, #50	; 0x32
 80067cc:	d101      	bne.n	80067d2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80067ce:	2301      	movs	r3, #1
 80067d0:	e000      	b.n	80067d4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80067d2:	2300      	movs	r3, #0
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	3710      	adds	r7, #16
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}

080067dc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80067dc:	b084      	sub	sp, #16
 80067de:	b580      	push	{r7, lr}
 80067e0:	b086      	sub	sp, #24
 80067e2:	af00      	add	r7, sp, #0
 80067e4:	6078      	str	r0, [r7, #4]
 80067e6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80067ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80067ee:	2300      	movs	r3, #0
 80067f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80067f6:	2300      	movs	r3, #0
 80067f8:	613b      	str	r3, [r7, #16]
 80067fa:	e009      	b.n	8006810 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80067fc:	687a      	ldr	r2, [r7, #4]
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	3340      	adds	r3, #64	; 0x40
 8006802:	009b      	lsls	r3, r3, #2
 8006804:	4413      	add	r3, r2
 8006806:	2200      	movs	r2, #0
 8006808:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	3301      	adds	r3, #1
 800680e:	613b      	str	r3, [r7, #16]
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	2b0e      	cmp	r3, #14
 8006814:	d9f2      	bls.n	80067fc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006816:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006818:	2b00      	cmp	r3, #0
 800681a:	d11c      	bne.n	8006856 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	68fa      	ldr	r2, [r7, #12]
 8006826:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800682a:	f043 0302 	orr.w	r3, r3, #2
 800682e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006834:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006840:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800684c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	639a      	str	r2, [r3, #56]	; 0x38
 8006854:	e00b      	b.n	800686e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800685a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006866:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006874:	461a      	mov	r2, r3
 8006876:	2300      	movs	r3, #0
 8006878:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006880:	4619      	mov	r1, r3
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006888:	461a      	mov	r2, r3
 800688a:	680b      	ldr	r3, [r1, #0]
 800688c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800688e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006890:	2b01      	cmp	r3, #1
 8006892:	d10c      	bne.n	80068ae <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006896:	2b00      	cmp	r3, #0
 8006898:	d104      	bne.n	80068a4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800689a:	2100      	movs	r1, #0
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f000 f965 	bl	8006b6c <USB_SetDevSpeed>
 80068a2:	e008      	b.n	80068b6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80068a4:	2101      	movs	r1, #1
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f000 f960 	bl	8006b6c <USB_SetDevSpeed>
 80068ac:	e003      	b.n	80068b6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80068ae:	2103      	movs	r1, #3
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f000 f95b 	bl	8006b6c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80068b6:	2110      	movs	r1, #16
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f000 f8f3 	bl	8006aa4 <USB_FlushTxFifo>
 80068be:	4603      	mov	r3, r0
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d001      	beq.n	80068c8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80068c4:	2301      	movs	r3, #1
 80068c6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f000 f91f 	bl	8006b0c <USB_FlushRxFifo>
 80068ce:	4603      	mov	r3, r0
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d001      	beq.n	80068d8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80068d4:	2301      	movs	r3, #1
 80068d6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068de:	461a      	mov	r2, r3
 80068e0:	2300      	movs	r3, #0
 80068e2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068ea:	461a      	mov	r2, r3
 80068ec:	2300      	movs	r3, #0
 80068ee:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068f6:	461a      	mov	r2, r3
 80068f8:	2300      	movs	r3, #0
 80068fa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80068fc:	2300      	movs	r3, #0
 80068fe:	613b      	str	r3, [r7, #16]
 8006900:	e043      	b.n	800698a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	015a      	lsls	r2, r3, #5
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	4413      	add	r3, r2
 800690a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006914:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006918:	d118      	bne.n	800694c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d10a      	bne.n	8006936 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	015a      	lsls	r2, r3, #5
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	4413      	add	r3, r2
 8006928:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800692c:	461a      	mov	r2, r3
 800692e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006932:	6013      	str	r3, [r2, #0]
 8006934:	e013      	b.n	800695e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	015a      	lsls	r2, r3, #5
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	4413      	add	r3, r2
 800693e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006942:	461a      	mov	r2, r3
 8006944:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006948:	6013      	str	r3, [r2, #0]
 800694a:	e008      	b.n	800695e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	015a      	lsls	r2, r3, #5
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	4413      	add	r3, r2
 8006954:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006958:	461a      	mov	r2, r3
 800695a:	2300      	movs	r3, #0
 800695c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	015a      	lsls	r2, r3, #5
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	4413      	add	r3, r2
 8006966:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800696a:	461a      	mov	r2, r3
 800696c:	2300      	movs	r3, #0
 800696e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	015a      	lsls	r2, r3, #5
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	4413      	add	r3, r2
 8006978:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800697c:	461a      	mov	r2, r3
 800697e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006982:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	3301      	adds	r3, #1
 8006988:	613b      	str	r3, [r7, #16]
 800698a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800698c:	693a      	ldr	r2, [r7, #16]
 800698e:	429a      	cmp	r2, r3
 8006990:	d3b7      	bcc.n	8006902 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006992:	2300      	movs	r3, #0
 8006994:	613b      	str	r3, [r7, #16]
 8006996:	e043      	b.n	8006a20 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	015a      	lsls	r2, r3, #5
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	4413      	add	r3, r2
 80069a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069ae:	d118      	bne.n	80069e2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d10a      	bne.n	80069cc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	015a      	lsls	r2, r3, #5
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	4413      	add	r3, r2
 80069be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069c2:	461a      	mov	r2, r3
 80069c4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80069c8:	6013      	str	r3, [r2, #0]
 80069ca:	e013      	b.n	80069f4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	015a      	lsls	r2, r3, #5
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	4413      	add	r3, r2
 80069d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069d8:	461a      	mov	r2, r3
 80069da:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80069de:	6013      	str	r3, [r2, #0]
 80069e0:	e008      	b.n	80069f4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	015a      	lsls	r2, r3, #5
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	4413      	add	r3, r2
 80069ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069ee:	461a      	mov	r2, r3
 80069f0:	2300      	movs	r3, #0
 80069f2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	015a      	lsls	r2, r3, #5
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	4413      	add	r3, r2
 80069fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a00:	461a      	mov	r2, r3
 8006a02:	2300      	movs	r3, #0
 8006a04:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	015a      	lsls	r2, r3, #5
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	4413      	add	r3, r2
 8006a0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a12:	461a      	mov	r2, r3
 8006a14:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006a18:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	3301      	adds	r3, #1
 8006a1e:	613b      	str	r3, [r7, #16]
 8006a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a22:	693a      	ldr	r2, [r7, #16]
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d3b7      	bcc.n	8006998 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a2e:	691b      	ldr	r3, [r3, #16]
 8006a30:	68fa      	ldr	r2, [r7, #12]
 8006a32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a36:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a3a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006a48:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d105      	bne.n	8006a5c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	699b      	ldr	r3, [r3, #24]
 8006a54:	f043 0210 	orr.w	r2, r3, #16
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	699a      	ldr	r2, [r3, #24]
 8006a60:	4b0f      	ldr	r3, [pc, #60]	; (8006aa0 <USB_DevInit+0x2c4>)
 8006a62:	4313      	orrs	r3, r2
 8006a64:	687a      	ldr	r2, [r7, #4]
 8006a66:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006a68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d005      	beq.n	8006a7a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	699b      	ldr	r3, [r3, #24]
 8006a72:	f043 0208 	orr.w	r2, r3, #8
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006a7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d107      	bne.n	8006a90 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	699b      	ldr	r3, [r3, #24]
 8006a84:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a88:	f043 0304 	orr.w	r3, r3, #4
 8006a8c:	687a      	ldr	r2, [r7, #4]
 8006a8e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006a90:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3718      	adds	r7, #24
 8006a96:	46bd      	mov	sp, r7
 8006a98:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006a9c:	b004      	add	sp, #16
 8006a9e:	4770      	bx	lr
 8006aa0:	803c3800 	.word	0x803c3800

08006aa4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b085      	sub	sp, #20
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	3301      	adds	r3, #1
 8006ab6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	4a13      	ldr	r2, [pc, #76]	; (8006b08 <USB_FlushTxFifo+0x64>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d901      	bls.n	8006ac4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006ac0:	2303      	movs	r3, #3
 8006ac2:	e01b      	b.n	8006afc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	691b      	ldr	r3, [r3, #16]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	daf2      	bge.n	8006ab2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006acc:	2300      	movs	r3, #0
 8006ace:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	019b      	lsls	r3, r3, #6
 8006ad4:	f043 0220 	orr.w	r2, r3, #32
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	3301      	adds	r3, #1
 8006ae0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	4a08      	ldr	r2, [pc, #32]	; (8006b08 <USB_FlushTxFifo+0x64>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d901      	bls.n	8006aee <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006aea:	2303      	movs	r3, #3
 8006aec:	e006      	b.n	8006afc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	691b      	ldr	r3, [r3, #16]
 8006af2:	f003 0320 	and.w	r3, r3, #32
 8006af6:	2b20      	cmp	r3, #32
 8006af8:	d0f0      	beq.n	8006adc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006afa:	2300      	movs	r3, #0
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	3714      	adds	r7, #20
 8006b00:	46bd      	mov	sp, r7
 8006b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b06:	4770      	bx	lr
 8006b08:	00030d40 	.word	0x00030d40

08006b0c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b085      	sub	sp, #20
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006b14:	2300      	movs	r3, #0
 8006b16:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	3301      	adds	r3, #1
 8006b1c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	4a11      	ldr	r2, [pc, #68]	; (8006b68 <USB_FlushRxFifo+0x5c>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d901      	bls.n	8006b2a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006b26:	2303      	movs	r3, #3
 8006b28:	e018      	b.n	8006b5c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	691b      	ldr	r3, [r3, #16]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	daf2      	bge.n	8006b18 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006b32:	2300      	movs	r3, #0
 8006b34:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2210      	movs	r2, #16
 8006b3a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	3301      	adds	r3, #1
 8006b40:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	4a08      	ldr	r2, [pc, #32]	; (8006b68 <USB_FlushRxFifo+0x5c>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d901      	bls.n	8006b4e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006b4a:	2303      	movs	r3, #3
 8006b4c:	e006      	b.n	8006b5c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	691b      	ldr	r3, [r3, #16]
 8006b52:	f003 0310 	and.w	r3, r3, #16
 8006b56:	2b10      	cmp	r3, #16
 8006b58:	d0f0      	beq.n	8006b3c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006b5a:	2300      	movs	r3, #0
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3714      	adds	r7, #20
 8006b60:	46bd      	mov	sp, r7
 8006b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b66:	4770      	bx	lr
 8006b68:	00030d40 	.word	0x00030d40

08006b6c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b085      	sub	sp, #20
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
 8006b74:	460b      	mov	r3, r1
 8006b76:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b82:	681a      	ldr	r2, [r3, #0]
 8006b84:	78fb      	ldrb	r3, [r7, #3]
 8006b86:	68f9      	ldr	r1, [r7, #12]
 8006b88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006b90:	2300      	movs	r3, #0
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3714      	adds	r7, #20
 8006b96:	46bd      	mov	sp, r7
 8006b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9c:	4770      	bx	lr

08006b9e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006b9e:	b480      	push	{r7}
 8006ba0:	b087      	sub	sp, #28
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bb0:	689b      	ldr	r3, [r3, #8]
 8006bb2:	f003 0306 	and.w	r3, r3, #6
 8006bb6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d102      	bne.n	8006bc4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	75fb      	strb	r3, [r7, #23]
 8006bc2:	e00a      	b.n	8006bda <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	2b02      	cmp	r3, #2
 8006bc8:	d002      	beq.n	8006bd0 <USB_GetDevSpeed+0x32>
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2b06      	cmp	r3, #6
 8006bce:	d102      	bne.n	8006bd6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006bd0:	2302      	movs	r3, #2
 8006bd2:	75fb      	strb	r3, [r7, #23]
 8006bd4:	e001      	b.n	8006bda <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006bd6:	230f      	movs	r3, #15
 8006bd8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006bda:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	371c      	adds	r7, #28
 8006be0:	46bd      	mov	sp, r7
 8006be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be6:	4770      	bx	lr

08006be8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b085      	sub	sp, #20
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
 8006bf0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	781b      	ldrb	r3, [r3, #0]
 8006bfa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	785b      	ldrb	r3, [r3, #1]
 8006c00:	2b01      	cmp	r3, #1
 8006c02:	d13a      	bne.n	8006c7a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c0a:	69da      	ldr	r2, [r3, #28]
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	781b      	ldrb	r3, [r3, #0]
 8006c10:	f003 030f 	and.w	r3, r3, #15
 8006c14:	2101      	movs	r1, #1
 8006c16:	fa01 f303 	lsl.w	r3, r1, r3
 8006c1a:	b29b      	uxth	r3, r3
 8006c1c:	68f9      	ldr	r1, [r7, #12]
 8006c1e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c22:	4313      	orrs	r3, r2
 8006c24:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	015a      	lsls	r2, r3, #5
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	4413      	add	r3, r2
 8006c2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d155      	bne.n	8006ce8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	015a      	lsls	r2, r3, #5
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	4413      	add	r3, r2
 8006c44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c48:	681a      	ldr	r2, [r3, #0]
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	68db      	ldr	r3, [r3, #12]
 8006c4e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	791b      	ldrb	r3, [r3, #4]
 8006c56:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006c58:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	059b      	lsls	r3, r3, #22
 8006c5e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006c60:	4313      	orrs	r3, r2
 8006c62:	68ba      	ldr	r2, [r7, #8]
 8006c64:	0151      	lsls	r1, r2, #5
 8006c66:	68fa      	ldr	r2, [r7, #12]
 8006c68:	440a      	add	r2, r1
 8006c6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c76:	6013      	str	r3, [r2, #0]
 8006c78:	e036      	b.n	8006ce8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c80:	69da      	ldr	r2, [r3, #28]
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	781b      	ldrb	r3, [r3, #0]
 8006c86:	f003 030f 	and.w	r3, r3, #15
 8006c8a:	2101      	movs	r1, #1
 8006c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8006c90:	041b      	lsls	r3, r3, #16
 8006c92:	68f9      	ldr	r1, [r7, #12]
 8006c94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	015a      	lsls	r2, r3, #5
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	4413      	add	r3, r2
 8006ca4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d11a      	bne.n	8006ce8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	015a      	lsls	r2, r3, #5
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	4413      	add	r3, r2
 8006cba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cbe:	681a      	ldr	r2, [r3, #0]
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	68db      	ldr	r3, [r3, #12]
 8006cc4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	791b      	ldrb	r3, [r3, #4]
 8006ccc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006cce:	430b      	orrs	r3, r1
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	68ba      	ldr	r2, [r7, #8]
 8006cd4:	0151      	lsls	r1, r2, #5
 8006cd6:	68fa      	ldr	r2, [r7, #12]
 8006cd8:	440a      	add	r2, r1
 8006cda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ce2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ce6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006ce8:	2300      	movs	r3, #0
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	3714      	adds	r7, #20
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf4:	4770      	bx	lr
	...

08006cf8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b085      	sub	sp, #20
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
 8006d00:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	781b      	ldrb	r3, [r3, #0]
 8006d0a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	785b      	ldrb	r3, [r3, #1]
 8006d10:	2b01      	cmp	r3, #1
 8006d12:	d161      	bne.n	8006dd8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	015a      	lsls	r2, r3, #5
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	4413      	add	r3, r2
 8006d1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d26:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d2a:	d11f      	bne.n	8006d6c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	015a      	lsls	r2, r3, #5
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	4413      	add	r3, r2
 8006d34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	68ba      	ldr	r2, [r7, #8]
 8006d3c:	0151      	lsls	r1, r2, #5
 8006d3e:	68fa      	ldr	r2, [r7, #12]
 8006d40:	440a      	add	r2, r1
 8006d42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d46:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006d4a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	015a      	lsls	r2, r3, #5
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	4413      	add	r3, r2
 8006d54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	68ba      	ldr	r2, [r7, #8]
 8006d5c:	0151      	lsls	r1, r2, #5
 8006d5e:	68fa      	ldr	r2, [r7, #12]
 8006d60:	440a      	add	r2, r1
 8006d62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d66:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006d6a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	781b      	ldrb	r3, [r3, #0]
 8006d78:	f003 030f 	and.w	r3, r3, #15
 8006d7c:	2101      	movs	r1, #1
 8006d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	43db      	mvns	r3, r3
 8006d86:	68f9      	ldr	r1, [r7, #12]
 8006d88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d8c:	4013      	ands	r3, r2
 8006d8e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d96:	69da      	ldr	r2, [r3, #28]
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	781b      	ldrb	r3, [r3, #0]
 8006d9c:	f003 030f 	and.w	r3, r3, #15
 8006da0:	2101      	movs	r1, #1
 8006da2:	fa01 f303 	lsl.w	r3, r1, r3
 8006da6:	b29b      	uxth	r3, r3
 8006da8:	43db      	mvns	r3, r3
 8006daa:	68f9      	ldr	r1, [r7, #12]
 8006dac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006db0:	4013      	ands	r3, r2
 8006db2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	015a      	lsls	r2, r3, #5
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	4413      	add	r3, r2
 8006dbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dc0:	681a      	ldr	r2, [r3, #0]
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	0159      	lsls	r1, r3, #5
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	440b      	add	r3, r1
 8006dca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dce:	4619      	mov	r1, r3
 8006dd0:	4b35      	ldr	r3, [pc, #212]	; (8006ea8 <USB_DeactivateEndpoint+0x1b0>)
 8006dd2:	4013      	ands	r3, r2
 8006dd4:	600b      	str	r3, [r1, #0]
 8006dd6:	e060      	b.n	8006e9a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	015a      	lsls	r2, r3, #5
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	4413      	add	r3, r2
 8006de0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006dea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006dee:	d11f      	bne.n	8006e30 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	015a      	lsls	r2, r3, #5
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	4413      	add	r3, r2
 8006df8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	68ba      	ldr	r2, [r7, #8]
 8006e00:	0151      	lsls	r1, r2, #5
 8006e02:	68fa      	ldr	r2, [r7, #12]
 8006e04:	440a      	add	r2, r1
 8006e06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e0a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006e0e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	015a      	lsls	r2, r3, #5
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	4413      	add	r3, r2
 8006e18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	68ba      	ldr	r2, [r7, #8]
 8006e20:	0151      	lsls	r1, r2, #5
 8006e22:	68fa      	ldr	r2, [r7, #12]
 8006e24:	440a      	add	r2, r1
 8006e26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e2a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e2e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	781b      	ldrb	r3, [r3, #0]
 8006e3c:	f003 030f 	and.w	r3, r3, #15
 8006e40:	2101      	movs	r1, #1
 8006e42:	fa01 f303 	lsl.w	r3, r1, r3
 8006e46:	041b      	lsls	r3, r3, #16
 8006e48:	43db      	mvns	r3, r3
 8006e4a:	68f9      	ldr	r1, [r7, #12]
 8006e4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e50:	4013      	ands	r3, r2
 8006e52:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e5a:	69da      	ldr	r2, [r3, #28]
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	781b      	ldrb	r3, [r3, #0]
 8006e60:	f003 030f 	and.w	r3, r3, #15
 8006e64:	2101      	movs	r1, #1
 8006e66:	fa01 f303 	lsl.w	r3, r1, r3
 8006e6a:	041b      	lsls	r3, r3, #16
 8006e6c:	43db      	mvns	r3, r3
 8006e6e:	68f9      	ldr	r1, [r7, #12]
 8006e70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e74:	4013      	ands	r3, r2
 8006e76:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	015a      	lsls	r2, r3, #5
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	4413      	add	r3, r2
 8006e80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e84:	681a      	ldr	r2, [r3, #0]
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	0159      	lsls	r1, r3, #5
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	440b      	add	r3, r1
 8006e8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e92:	4619      	mov	r1, r3
 8006e94:	4b05      	ldr	r3, [pc, #20]	; (8006eac <USB_DeactivateEndpoint+0x1b4>)
 8006e96:	4013      	ands	r3, r2
 8006e98:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006e9a:	2300      	movs	r3, #0
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3714      	adds	r7, #20
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr
 8006ea8:	ec337800 	.word	0xec337800
 8006eac:	eff37800 	.word	0xeff37800

08006eb0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b08a      	sub	sp, #40	; 0x28
 8006eb4:	af02      	add	r7, sp, #8
 8006eb6:	60f8      	str	r0, [r7, #12]
 8006eb8:	60b9      	str	r1, [r7, #8]
 8006eba:	4613      	mov	r3, r2
 8006ebc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	781b      	ldrb	r3, [r3, #0]
 8006ec6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	785b      	ldrb	r3, [r3, #1]
 8006ecc:	2b01      	cmp	r3, #1
 8006ece:	f040 815c 	bne.w	800718a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	699b      	ldr	r3, [r3, #24]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d132      	bne.n	8006f40 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006eda:	69bb      	ldr	r3, [r7, #24]
 8006edc:	015a      	lsls	r2, r3, #5
 8006ede:	69fb      	ldr	r3, [r7, #28]
 8006ee0:	4413      	add	r3, r2
 8006ee2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ee6:	691b      	ldr	r3, [r3, #16]
 8006ee8:	69ba      	ldr	r2, [r7, #24]
 8006eea:	0151      	lsls	r1, r2, #5
 8006eec:	69fa      	ldr	r2, [r7, #28]
 8006eee:	440a      	add	r2, r1
 8006ef0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ef4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006ef8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006efc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006efe:	69bb      	ldr	r3, [r7, #24]
 8006f00:	015a      	lsls	r2, r3, #5
 8006f02:	69fb      	ldr	r3, [r7, #28]
 8006f04:	4413      	add	r3, r2
 8006f06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f0a:	691b      	ldr	r3, [r3, #16]
 8006f0c:	69ba      	ldr	r2, [r7, #24]
 8006f0e:	0151      	lsls	r1, r2, #5
 8006f10:	69fa      	ldr	r2, [r7, #28]
 8006f12:	440a      	add	r2, r1
 8006f14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f18:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006f1c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006f1e:	69bb      	ldr	r3, [r7, #24]
 8006f20:	015a      	lsls	r2, r3, #5
 8006f22:	69fb      	ldr	r3, [r7, #28]
 8006f24:	4413      	add	r3, r2
 8006f26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f2a:	691b      	ldr	r3, [r3, #16]
 8006f2c:	69ba      	ldr	r2, [r7, #24]
 8006f2e:	0151      	lsls	r1, r2, #5
 8006f30:	69fa      	ldr	r2, [r7, #28]
 8006f32:	440a      	add	r2, r1
 8006f34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f38:	0cdb      	lsrs	r3, r3, #19
 8006f3a:	04db      	lsls	r3, r3, #19
 8006f3c:	6113      	str	r3, [r2, #16]
 8006f3e:	e074      	b.n	800702a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006f40:	69bb      	ldr	r3, [r7, #24]
 8006f42:	015a      	lsls	r2, r3, #5
 8006f44:	69fb      	ldr	r3, [r7, #28]
 8006f46:	4413      	add	r3, r2
 8006f48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f4c:	691b      	ldr	r3, [r3, #16]
 8006f4e:	69ba      	ldr	r2, [r7, #24]
 8006f50:	0151      	lsls	r1, r2, #5
 8006f52:	69fa      	ldr	r2, [r7, #28]
 8006f54:	440a      	add	r2, r1
 8006f56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f5a:	0cdb      	lsrs	r3, r3, #19
 8006f5c:	04db      	lsls	r3, r3, #19
 8006f5e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006f60:	69bb      	ldr	r3, [r7, #24]
 8006f62:	015a      	lsls	r2, r3, #5
 8006f64:	69fb      	ldr	r3, [r7, #28]
 8006f66:	4413      	add	r3, r2
 8006f68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f6c:	691b      	ldr	r3, [r3, #16]
 8006f6e:	69ba      	ldr	r2, [r7, #24]
 8006f70:	0151      	lsls	r1, r2, #5
 8006f72:	69fa      	ldr	r2, [r7, #28]
 8006f74:	440a      	add	r2, r1
 8006f76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f7a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006f7e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006f82:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006f84:	69bb      	ldr	r3, [r7, #24]
 8006f86:	015a      	lsls	r2, r3, #5
 8006f88:	69fb      	ldr	r3, [r7, #28]
 8006f8a:	4413      	add	r3, r2
 8006f8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f90:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	6999      	ldr	r1, [r3, #24]
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	68db      	ldr	r3, [r3, #12]
 8006f9a:	440b      	add	r3, r1
 8006f9c:	1e59      	subs	r1, r3, #1
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	68db      	ldr	r3, [r3, #12]
 8006fa2:	fbb1 f3f3 	udiv	r3, r1, r3
 8006fa6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006fa8:	4b9d      	ldr	r3, [pc, #628]	; (8007220 <USB_EPStartXfer+0x370>)
 8006faa:	400b      	ands	r3, r1
 8006fac:	69b9      	ldr	r1, [r7, #24]
 8006fae:	0148      	lsls	r0, r1, #5
 8006fb0:	69f9      	ldr	r1, [r7, #28]
 8006fb2:	4401      	add	r1, r0
 8006fb4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006fb8:	4313      	orrs	r3, r2
 8006fba:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006fbc:	69bb      	ldr	r3, [r7, #24]
 8006fbe:	015a      	lsls	r2, r3, #5
 8006fc0:	69fb      	ldr	r3, [r7, #28]
 8006fc2:	4413      	add	r3, r2
 8006fc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fc8:	691a      	ldr	r2, [r3, #16]
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	699b      	ldr	r3, [r3, #24]
 8006fce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006fd2:	69b9      	ldr	r1, [r7, #24]
 8006fd4:	0148      	lsls	r0, r1, #5
 8006fd6:	69f9      	ldr	r1, [r7, #28]
 8006fd8:	4401      	add	r1, r0
 8006fda:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	791b      	ldrb	r3, [r3, #4]
 8006fe6:	2b01      	cmp	r3, #1
 8006fe8:	d11f      	bne.n	800702a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006fea:	69bb      	ldr	r3, [r7, #24]
 8006fec:	015a      	lsls	r2, r3, #5
 8006fee:	69fb      	ldr	r3, [r7, #28]
 8006ff0:	4413      	add	r3, r2
 8006ff2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ff6:	691b      	ldr	r3, [r3, #16]
 8006ff8:	69ba      	ldr	r2, [r7, #24]
 8006ffa:	0151      	lsls	r1, r2, #5
 8006ffc:	69fa      	ldr	r2, [r7, #28]
 8006ffe:	440a      	add	r2, r1
 8007000:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007004:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007008:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800700a:	69bb      	ldr	r3, [r7, #24]
 800700c:	015a      	lsls	r2, r3, #5
 800700e:	69fb      	ldr	r3, [r7, #28]
 8007010:	4413      	add	r3, r2
 8007012:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007016:	691b      	ldr	r3, [r3, #16]
 8007018:	69ba      	ldr	r2, [r7, #24]
 800701a:	0151      	lsls	r1, r2, #5
 800701c:	69fa      	ldr	r2, [r7, #28]
 800701e:	440a      	add	r2, r1
 8007020:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007024:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007028:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800702a:	79fb      	ldrb	r3, [r7, #7]
 800702c:	2b01      	cmp	r3, #1
 800702e:	d14b      	bne.n	80070c8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	695b      	ldr	r3, [r3, #20]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d009      	beq.n	800704c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007038:	69bb      	ldr	r3, [r7, #24]
 800703a:	015a      	lsls	r2, r3, #5
 800703c:	69fb      	ldr	r3, [r7, #28]
 800703e:	4413      	add	r3, r2
 8007040:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007044:	461a      	mov	r2, r3
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	695b      	ldr	r3, [r3, #20]
 800704a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	791b      	ldrb	r3, [r3, #4]
 8007050:	2b01      	cmp	r3, #1
 8007052:	d128      	bne.n	80070a6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007054:	69fb      	ldr	r3, [r7, #28]
 8007056:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800705a:	689b      	ldr	r3, [r3, #8]
 800705c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007060:	2b00      	cmp	r3, #0
 8007062:	d110      	bne.n	8007086 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007064:	69bb      	ldr	r3, [r7, #24]
 8007066:	015a      	lsls	r2, r3, #5
 8007068:	69fb      	ldr	r3, [r7, #28]
 800706a:	4413      	add	r3, r2
 800706c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	69ba      	ldr	r2, [r7, #24]
 8007074:	0151      	lsls	r1, r2, #5
 8007076:	69fa      	ldr	r2, [r7, #28]
 8007078:	440a      	add	r2, r1
 800707a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800707e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007082:	6013      	str	r3, [r2, #0]
 8007084:	e00f      	b.n	80070a6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007086:	69bb      	ldr	r3, [r7, #24]
 8007088:	015a      	lsls	r2, r3, #5
 800708a:	69fb      	ldr	r3, [r7, #28]
 800708c:	4413      	add	r3, r2
 800708e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	69ba      	ldr	r2, [r7, #24]
 8007096:	0151      	lsls	r1, r2, #5
 8007098:	69fa      	ldr	r2, [r7, #28]
 800709a:	440a      	add	r2, r1
 800709c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070a4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80070a6:	69bb      	ldr	r3, [r7, #24]
 80070a8:	015a      	lsls	r2, r3, #5
 80070aa:	69fb      	ldr	r3, [r7, #28]
 80070ac:	4413      	add	r3, r2
 80070ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	69ba      	ldr	r2, [r7, #24]
 80070b6:	0151      	lsls	r1, r2, #5
 80070b8:	69fa      	ldr	r2, [r7, #28]
 80070ba:	440a      	add	r2, r1
 80070bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070c0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80070c4:	6013      	str	r3, [r2, #0]
 80070c6:	e133      	b.n	8007330 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80070c8:	69bb      	ldr	r3, [r7, #24]
 80070ca:	015a      	lsls	r2, r3, #5
 80070cc:	69fb      	ldr	r3, [r7, #28]
 80070ce:	4413      	add	r3, r2
 80070d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	69ba      	ldr	r2, [r7, #24]
 80070d8:	0151      	lsls	r1, r2, #5
 80070da:	69fa      	ldr	r2, [r7, #28]
 80070dc:	440a      	add	r2, r1
 80070de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070e2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80070e6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	791b      	ldrb	r3, [r3, #4]
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	d015      	beq.n	800711c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	699b      	ldr	r3, [r3, #24]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	f000 811b 	beq.w	8007330 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80070fa:	69fb      	ldr	r3, [r7, #28]
 80070fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007100:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	781b      	ldrb	r3, [r3, #0]
 8007106:	f003 030f 	and.w	r3, r3, #15
 800710a:	2101      	movs	r1, #1
 800710c:	fa01 f303 	lsl.w	r3, r1, r3
 8007110:	69f9      	ldr	r1, [r7, #28]
 8007112:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007116:	4313      	orrs	r3, r2
 8007118:	634b      	str	r3, [r1, #52]	; 0x34
 800711a:	e109      	b.n	8007330 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800711c:	69fb      	ldr	r3, [r7, #28]
 800711e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007122:	689b      	ldr	r3, [r3, #8]
 8007124:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007128:	2b00      	cmp	r3, #0
 800712a:	d110      	bne.n	800714e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800712c:	69bb      	ldr	r3, [r7, #24]
 800712e:	015a      	lsls	r2, r3, #5
 8007130:	69fb      	ldr	r3, [r7, #28]
 8007132:	4413      	add	r3, r2
 8007134:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	69ba      	ldr	r2, [r7, #24]
 800713c:	0151      	lsls	r1, r2, #5
 800713e:	69fa      	ldr	r2, [r7, #28]
 8007140:	440a      	add	r2, r1
 8007142:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007146:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800714a:	6013      	str	r3, [r2, #0]
 800714c:	e00f      	b.n	800716e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800714e:	69bb      	ldr	r3, [r7, #24]
 8007150:	015a      	lsls	r2, r3, #5
 8007152:	69fb      	ldr	r3, [r7, #28]
 8007154:	4413      	add	r3, r2
 8007156:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	69ba      	ldr	r2, [r7, #24]
 800715e:	0151      	lsls	r1, r2, #5
 8007160:	69fa      	ldr	r2, [r7, #28]
 8007162:	440a      	add	r2, r1
 8007164:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007168:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800716c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	6919      	ldr	r1, [r3, #16]
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	781a      	ldrb	r2, [r3, #0]
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	699b      	ldr	r3, [r3, #24]
 800717a:	b298      	uxth	r0, r3
 800717c:	79fb      	ldrb	r3, [r7, #7]
 800717e:	9300      	str	r3, [sp, #0]
 8007180:	4603      	mov	r3, r0
 8007182:	68f8      	ldr	r0, [r7, #12]
 8007184:	f000 fade 	bl	8007744 <USB_WritePacket>
 8007188:	e0d2      	b.n	8007330 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800718a:	69bb      	ldr	r3, [r7, #24]
 800718c:	015a      	lsls	r2, r3, #5
 800718e:	69fb      	ldr	r3, [r7, #28]
 8007190:	4413      	add	r3, r2
 8007192:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007196:	691b      	ldr	r3, [r3, #16]
 8007198:	69ba      	ldr	r2, [r7, #24]
 800719a:	0151      	lsls	r1, r2, #5
 800719c:	69fa      	ldr	r2, [r7, #28]
 800719e:	440a      	add	r2, r1
 80071a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071a4:	0cdb      	lsrs	r3, r3, #19
 80071a6:	04db      	lsls	r3, r3, #19
 80071a8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80071aa:	69bb      	ldr	r3, [r7, #24]
 80071ac:	015a      	lsls	r2, r3, #5
 80071ae:	69fb      	ldr	r3, [r7, #28]
 80071b0:	4413      	add	r3, r2
 80071b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071b6:	691b      	ldr	r3, [r3, #16]
 80071b8:	69ba      	ldr	r2, [r7, #24]
 80071ba:	0151      	lsls	r1, r2, #5
 80071bc:	69fa      	ldr	r2, [r7, #28]
 80071be:	440a      	add	r2, r1
 80071c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071c4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80071c8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80071cc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	699b      	ldr	r3, [r3, #24]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d126      	bne.n	8007224 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80071d6:	69bb      	ldr	r3, [r7, #24]
 80071d8:	015a      	lsls	r2, r3, #5
 80071da:	69fb      	ldr	r3, [r7, #28]
 80071dc:	4413      	add	r3, r2
 80071de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071e2:	691a      	ldr	r2, [r3, #16]
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	68db      	ldr	r3, [r3, #12]
 80071e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071ec:	69b9      	ldr	r1, [r7, #24]
 80071ee:	0148      	lsls	r0, r1, #5
 80071f0:	69f9      	ldr	r1, [r7, #28]
 80071f2:	4401      	add	r1, r0
 80071f4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80071f8:	4313      	orrs	r3, r2
 80071fa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80071fc:	69bb      	ldr	r3, [r7, #24]
 80071fe:	015a      	lsls	r2, r3, #5
 8007200:	69fb      	ldr	r3, [r7, #28]
 8007202:	4413      	add	r3, r2
 8007204:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007208:	691b      	ldr	r3, [r3, #16]
 800720a:	69ba      	ldr	r2, [r7, #24]
 800720c:	0151      	lsls	r1, r2, #5
 800720e:	69fa      	ldr	r2, [r7, #28]
 8007210:	440a      	add	r2, r1
 8007212:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007216:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800721a:	6113      	str	r3, [r2, #16]
 800721c:	e03a      	b.n	8007294 <USB_EPStartXfer+0x3e4>
 800721e:	bf00      	nop
 8007220:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	699a      	ldr	r2, [r3, #24]
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	68db      	ldr	r3, [r3, #12]
 800722c:	4413      	add	r3, r2
 800722e:	1e5a      	subs	r2, r3, #1
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	68db      	ldr	r3, [r3, #12]
 8007234:	fbb2 f3f3 	udiv	r3, r2, r3
 8007238:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	68db      	ldr	r3, [r3, #12]
 800723e:	8afa      	ldrh	r2, [r7, #22]
 8007240:	fb03 f202 	mul.w	r2, r3, r2
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007248:	69bb      	ldr	r3, [r7, #24]
 800724a:	015a      	lsls	r2, r3, #5
 800724c:	69fb      	ldr	r3, [r7, #28]
 800724e:	4413      	add	r3, r2
 8007250:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007254:	691a      	ldr	r2, [r3, #16]
 8007256:	8afb      	ldrh	r3, [r7, #22]
 8007258:	04d9      	lsls	r1, r3, #19
 800725a:	4b38      	ldr	r3, [pc, #224]	; (800733c <USB_EPStartXfer+0x48c>)
 800725c:	400b      	ands	r3, r1
 800725e:	69b9      	ldr	r1, [r7, #24]
 8007260:	0148      	lsls	r0, r1, #5
 8007262:	69f9      	ldr	r1, [r7, #28]
 8007264:	4401      	add	r1, r0
 8007266:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800726a:	4313      	orrs	r3, r2
 800726c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800726e:	69bb      	ldr	r3, [r7, #24]
 8007270:	015a      	lsls	r2, r3, #5
 8007272:	69fb      	ldr	r3, [r7, #28]
 8007274:	4413      	add	r3, r2
 8007276:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800727a:	691a      	ldr	r2, [r3, #16]
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	69db      	ldr	r3, [r3, #28]
 8007280:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007284:	69b9      	ldr	r1, [r7, #24]
 8007286:	0148      	lsls	r0, r1, #5
 8007288:	69f9      	ldr	r1, [r7, #28]
 800728a:	4401      	add	r1, r0
 800728c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007290:	4313      	orrs	r3, r2
 8007292:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007294:	79fb      	ldrb	r3, [r7, #7]
 8007296:	2b01      	cmp	r3, #1
 8007298:	d10d      	bne.n	80072b6 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	691b      	ldr	r3, [r3, #16]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d009      	beq.n	80072b6 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	6919      	ldr	r1, [r3, #16]
 80072a6:	69bb      	ldr	r3, [r7, #24]
 80072a8:	015a      	lsls	r2, r3, #5
 80072aa:	69fb      	ldr	r3, [r7, #28]
 80072ac:	4413      	add	r3, r2
 80072ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072b2:	460a      	mov	r2, r1
 80072b4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	791b      	ldrb	r3, [r3, #4]
 80072ba:	2b01      	cmp	r3, #1
 80072bc:	d128      	bne.n	8007310 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80072be:	69fb      	ldr	r3, [r7, #28]
 80072c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072c4:	689b      	ldr	r3, [r3, #8]
 80072c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d110      	bne.n	80072f0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80072ce:	69bb      	ldr	r3, [r7, #24]
 80072d0:	015a      	lsls	r2, r3, #5
 80072d2:	69fb      	ldr	r3, [r7, #28]
 80072d4:	4413      	add	r3, r2
 80072d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	69ba      	ldr	r2, [r7, #24]
 80072de:	0151      	lsls	r1, r2, #5
 80072e0:	69fa      	ldr	r2, [r7, #28]
 80072e2:	440a      	add	r2, r1
 80072e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072e8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80072ec:	6013      	str	r3, [r2, #0]
 80072ee:	e00f      	b.n	8007310 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80072f0:	69bb      	ldr	r3, [r7, #24]
 80072f2:	015a      	lsls	r2, r3, #5
 80072f4:	69fb      	ldr	r3, [r7, #28]
 80072f6:	4413      	add	r3, r2
 80072f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	69ba      	ldr	r2, [r7, #24]
 8007300:	0151      	lsls	r1, r2, #5
 8007302:	69fa      	ldr	r2, [r7, #28]
 8007304:	440a      	add	r2, r1
 8007306:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800730a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800730e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007310:	69bb      	ldr	r3, [r7, #24]
 8007312:	015a      	lsls	r2, r3, #5
 8007314:	69fb      	ldr	r3, [r7, #28]
 8007316:	4413      	add	r3, r2
 8007318:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	69ba      	ldr	r2, [r7, #24]
 8007320:	0151      	lsls	r1, r2, #5
 8007322:	69fa      	ldr	r2, [r7, #28]
 8007324:	440a      	add	r2, r1
 8007326:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800732a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800732e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007330:	2300      	movs	r3, #0
}
 8007332:	4618      	mov	r0, r3
 8007334:	3720      	adds	r7, #32
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}
 800733a:	bf00      	nop
 800733c:	1ff80000 	.word	0x1ff80000

08007340 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007340:	b480      	push	{r7}
 8007342:	b087      	sub	sp, #28
 8007344:	af00      	add	r7, sp, #0
 8007346:	60f8      	str	r0, [r7, #12]
 8007348:	60b9      	str	r1, [r7, #8]
 800734a:	4613      	mov	r3, r2
 800734c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	781b      	ldrb	r3, [r3, #0]
 8007356:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	785b      	ldrb	r3, [r3, #1]
 800735c:	2b01      	cmp	r3, #1
 800735e:	f040 80ce 	bne.w	80074fe <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	699b      	ldr	r3, [r3, #24]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d132      	bne.n	80073d0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800736a:	693b      	ldr	r3, [r7, #16]
 800736c:	015a      	lsls	r2, r3, #5
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	4413      	add	r3, r2
 8007372:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007376:	691b      	ldr	r3, [r3, #16]
 8007378:	693a      	ldr	r2, [r7, #16]
 800737a:	0151      	lsls	r1, r2, #5
 800737c:	697a      	ldr	r2, [r7, #20]
 800737e:	440a      	add	r2, r1
 8007380:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007384:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007388:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800738c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	015a      	lsls	r2, r3, #5
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	4413      	add	r3, r2
 8007396:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800739a:	691b      	ldr	r3, [r3, #16]
 800739c:	693a      	ldr	r2, [r7, #16]
 800739e:	0151      	lsls	r1, r2, #5
 80073a0:	697a      	ldr	r2, [r7, #20]
 80073a2:	440a      	add	r2, r1
 80073a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80073ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80073ae:	693b      	ldr	r3, [r7, #16]
 80073b0:	015a      	lsls	r2, r3, #5
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	4413      	add	r3, r2
 80073b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073ba:	691b      	ldr	r3, [r3, #16]
 80073bc:	693a      	ldr	r2, [r7, #16]
 80073be:	0151      	lsls	r1, r2, #5
 80073c0:	697a      	ldr	r2, [r7, #20]
 80073c2:	440a      	add	r2, r1
 80073c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073c8:	0cdb      	lsrs	r3, r3, #19
 80073ca:	04db      	lsls	r3, r3, #19
 80073cc:	6113      	str	r3, [r2, #16]
 80073ce:	e04e      	b.n	800746e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	015a      	lsls	r2, r3, #5
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	4413      	add	r3, r2
 80073d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073dc:	691b      	ldr	r3, [r3, #16]
 80073de:	693a      	ldr	r2, [r7, #16]
 80073e0:	0151      	lsls	r1, r2, #5
 80073e2:	697a      	ldr	r2, [r7, #20]
 80073e4:	440a      	add	r2, r1
 80073e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073ea:	0cdb      	lsrs	r3, r3, #19
 80073ec:	04db      	lsls	r3, r3, #19
 80073ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	015a      	lsls	r2, r3, #5
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	4413      	add	r3, r2
 80073f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073fc:	691b      	ldr	r3, [r3, #16]
 80073fe:	693a      	ldr	r2, [r7, #16]
 8007400:	0151      	lsls	r1, r2, #5
 8007402:	697a      	ldr	r2, [r7, #20]
 8007404:	440a      	add	r2, r1
 8007406:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800740a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800740e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007412:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	699a      	ldr	r2, [r3, #24]
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	68db      	ldr	r3, [r3, #12]
 800741c:	429a      	cmp	r2, r3
 800741e:	d903      	bls.n	8007428 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	68da      	ldr	r2, [r3, #12]
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	015a      	lsls	r2, r3, #5
 800742c:	697b      	ldr	r3, [r7, #20]
 800742e:	4413      	add	r3, r2
 8007430:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007434:	691b      	ldr	r3, [r3, #16]
 8007436:	693a      	ldr	r2, [r7, #16]
 8007438:	0151      	lsls	r1, r2, #5
 800743a:	697a      	ldr	r2, [r7, #20]
 800743c:	440a      	add	r2, r1
 800743e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007442:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007446:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	015a      	lsls	r2, r3, #5
 800744c:	697b      	ldr	r3, [r7, #20]
 800744e:	4413      	add	r3, r2
 8007450:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007454:	691a      	ldr	r2, [r3, #16]
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	699b      	ldr	r3, [r3, #24]
 800745a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800745e:	6939      	ldr	r1, [r7, #16]
 8007460:	0148      	lsls	r0, r1, #5
 8007462:	6979      	ldr	r1, [r7, #20]
 8007464:	4401      	add	r1, r0
 8007466:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800746a:	4313      	orrs	r3, r2
 800746c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800746e:	79fb      	ldrb	r3, [r7, #7]
 8007470:	2b01      	cmp	r3, #1
 8007472:	d11e      	bne.n	80074b2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	695b      	ldr	r3, [r3, #20]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d009      	beq.n	8007490 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	015a      	lsls	r2, r3, #5
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	4413      	add	r3, r2
 8007484:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007488:	461a      	mov	r2, r3
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	695b      	ldr	r3, [r3, #20]
 800748e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007490:	693b      	ldr	r3, [r7, #16]
 8007492:	015a      	lsls	r2, r3, #5
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	4413      	add	r3, r2
 8007498:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	693a      	ldr	r2, [r7, #16]
 80074a0:	0151      	lsls	r1, r2, #5
 80074a2:	697a      	ldr	r2, [r7, #20]
 80074a4:	440a      	add	r2, r1
 80074a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074aa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80074ae:	6013      	str	r3, [r2, #0]
 80074b0:	e097      	b.n	80075e2 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	015a      	lsls	r2, r3, #5
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	4413      	add	r3, r2
 80074ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	693a      	ldr	r2, [r7, #16]
 80074c2:	0151      	lsls	r1, r2, #5
 80074c4:	697a      	ldr	r2, [r7, #20]
 80074c6:	440a      	add	r2, r1
 80074c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074cc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80074d0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	699b      	ldr	r3, [r3, #24]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	f000 8083 	beq.w	80075e2 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	781b      	ldrb	r3, [r3, #0]
 80074e8:	f003 030f 	and.w	r3, r3, #15
 80074ec:	2101      	movs	r1, #1
 80074ee:	fa01 f303 	lsl.w	r3, r1, r3
 80074f2:	6979      	ldr	r1, [r7, #20]
 80074f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80074f8:	4313      	orrs	r3, r2
 80074fa:	634b      	str	r3, [r1, #52]	; 0x34
 80074fc:	e071      	b.n	80075e2 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80074fe:	693b      	ldr	r3, [r7, #16]
 8007500:	015a      	lsls	r2, r3, #5
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	4413      	add	r3, r2
 8007506:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800750a:	691b      	ldr	r3, [r3, #16]
 800750c:	693a      	ldr	r2, [r7, #16]
 800750e:	0151      	lsls	r1, r2, #5
 8007510:	697a      	ldr	r2, [r7, #20]
 8007512:	440a      	add	r2, r1
 8007514:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007518:	0cdb      	lsrs	r3, r3, #19
 800751a:	04db      	lsls	r3, r3, #19
 800751c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	015a      	lsls	r2, r3, #5
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	4413      	add	r3, r2
 8007526:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800752a:	691b      	ldr	r3, [r3, #16]
 800752c:	693a      	ldr	r2, [r7, #16]
 800752e:	0151      	lsls	r1, r2, #5
 8007530:	697a      	ldr	r2, [r7, #20]
 8007532:	440a      	add	r2, r1
 8007534:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007538:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800753c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007540:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	699b      	ldr	r3, [r3, #24]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d003      	beq.n	8007552 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	68da      	ldr	r2, [r3, #12]
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	68da      	ldr	r2, [r3, #12]
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	015a      	lsls	r2, r3, #5
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	4413      	add	r3, r2
 8007562:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007566:	691b      	ldr	r3, [r3, #16]
 8007568:	693a      	ldr	r2, [r7, #16]
 800756a:	0151      	lsls	r1, r2, #5
 800756c:	697a      	ldr	r2, [r7, #20]
 800756e:	440a      	add	r2, r1
 8007570:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007574:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007578:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800757a:	693b      	ldr	r3, [r7, #16]
 800757c:	015a      	lsls	r2, r3, #5
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	4413      	add	r3, r2
 8007582:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007586:	691a      	ldr	r2, [r3, #16]
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	69db      	ldr	r3, [r3, #28]
 800758c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007590:	6939      	ldr	r1, [r7, #16]
 8007592:	0148      	lsls	r0, r1, #5
 8007594:	6979      	ldr	r1, [r7, #20]
 8007596:	4401      	add	r1, r0
 8007598:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800759c:	4313      	orrs	r3, r2
 800759e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80075a0:	79fb      	ldrb	r3, [r7, #7]
 80075a2:	2b01      	cmp	r3, #1
 80075a4:	d10d      	bne.n	80075c2 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	691b      	ldr	r3, [r3, #16]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d009      	beq.n	80075c2 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	6919      	ldr	r1, [r3, #16]
 80075b2:	693b      	ldr	r3, [r7, #16]
 80075b4:	015a      	lsls	r2, r3, #5
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	4413      	add	r3, r2
 80075ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075be:	460a      	mov	r2, r1
 80075c0:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80075c2:	693b      	ldr	r3, [r7, #16]
 80075c4:	015a      	lsls	r2, r3, #5
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	4413      	add	r3, r2
 80075ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	693a      	ldr	r2, [r7, #16]
 80075d2:	0151      	lsls	r1, r2, #5
 80075d4:	697a      	ldr	r2, [r7, #20]
 80075d6:	440a      	add	r2, r1
 80075d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075dc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80075e0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80075e2:	2300      	movs	r3, #0
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	371c      	adds	r7, #28
 80075e8:	46bd      	mov	sp, r7
 80075ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ee:	4770      	bx	lr

080075f0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b087      	sub	sp, #28
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
 80075f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80075fa:	2300      	movs	r3, #0
 80075fc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80075fe:	2300      	movs	r3, #0
 8007600:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	785b      	ldrb	r3, [r3, #1]
 800760a:	2b01      	cmp	r3, #1
 800760c:	d14a      	bne.n	80076a4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	781b      	ldrb	r3, [r3, #0]
 8007612:	015a      	lsls	r2, r3, #5
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	4413      	add	r3, r2
 8007618:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007622:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007626:	f040 8086 	bne.w	8007736 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	781b      	ldrb	r3, [r3, #0]
 800762e:	015a      	lsls	r2, r3, #5
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	4413      	add	r3, r2
 8007634:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	683a      	ldr	r2, [r7, #0]
 800763c:	7812      	ldrb	r2, [r2, #0]
 800763e:	0151      	lsls	r1, r2, #5
 8007640:	693a      	ldr	r2, [r7, #16]
 8007642:	440a      	add	r2, r1
 8007644:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007648:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800764c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	781b      	ldrb	r3, [r3, #0]
 8007652:	015a      	lsls	r2, r3, #5
 8007654:	693b      	ldr	r3, [r7, #16]
 8007656:	4413      	add	r3, r2
 8007658:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	683a      	ldr	r2, [r7, #0]
 8007660:	7812      	ldrb	r2, [r2, #0]
 8007662:	0151      	lsls	r1, r2, #5
 8007664:	693a      	ldr	r2, [r7, #16]
 8007666:	440a      	add	r2, r1
 8007668:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800766c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007670:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	3301      	adds	r3, #1
 8007676:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	f242 7210 	movw	r2, #10000	; 0x2710
 800767e:	4293      	cmp	r3, r2
 8007680:	d902      	bls.n	8007688 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007682:	2301      	movs	r3, #1
 8007684:	75fb      	strb	r3, [r7, #23]
          break;
 8007686:	e056      	b.n	8007736 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	781b      	ldrb	r3, [r3, #0]
 800768c:	015a      	lsls	r2, r3, #5
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	4413      	add	r3, r2
 8007692:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800769c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80076a0:	d0e7      	beq.n	8007672 <USB_EPStopXfer+0x82>
 80076a2:	e048      	b.n	8007736 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	781b      	ldrb	r3, [r3, #0]
 80076a8:	015a      	lsls	r2, r3, #5
 80076aa:	693b      	ldr	r3, [r7, #16]
 80076ac:	4413      	add	r3, r2
 80076ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80076b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80076bc:	d13b      	bne.n	8007736 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	781b      	ldrb	r3, [r3, #0]
 80076c2:	015a      	lsls	r2, r3, #5
 80076c4:	693b      	ldr	r3, [r7, #16]
 80076c6:	4413      	add	r3, r2
 80076c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	683a      	ldr	r2, [r7, #0]
 80076d0:	7812      	ldrb	r2, [r2, #0]
 80076d2:	0151      	lsls	r1, r2, #5
 80076d4:	693a      	ldr	r2, [r7, #16]
 80076d6:	440a      	add	r2, r1
 80076d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076dc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80076e0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	781b      	ldrb	r3, [r3, #0]
 80076e6:	015a      	lsls	r2, r3, #5
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	4413      	add	r3, r2
 80076ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	683a      	ldr	r2, [r7, #0]
 80076f4:	7812      	ldrb	r2, [r2, #0]
 80076f6:	0151      	lsls	r1, r2, #5
 80076f8:	693a      	ldr	r2, [r7, #16]
 80076fa:	440a      	add	r2, r1
 80076fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007700:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007704:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	3301      	adds	r3, #1
 800770a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	f242 7210 	movw	r2, #10000	; 0x2710
 8007712:	4293      	cmp	r3, r2
 8007714:	d902      	bls.n	800771c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007716:	2301      	movs	r3, #1
 8007718:	75fb      	strb	r3, [r7, #23]
          break;
 800771a:	e00c      	b.n	8007736 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	781b      	ldrb	r3, [r3, #0]
 8007720:	015a      	lsls	r2, r3, #5
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	4413      	add	r3, r2
 8007726:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007730:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007734:	d0e7      	beq.n	8007706 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007736:	7dfb      	ldrb	r3, [r7, #23]
}
 8007738:	4618      	mov	r0, r3
 800773a:	371c      	adds	r7, #28
 800773c:	46bd      	mov	sp, r7
 800773e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007742:	4770      	bx	lr

08007744 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007744:	b480      	push	{r7}
 8007746:	b089      	sub	sp, #36	; 0x24
 8007748:	af00      	add	r7, sp, #0
 800774a:	60f8      	str	r0, [r7, #12]
 800774c:	60b9      	str	r1, [r7, #8]
 800774e:	4611      	mov	r1, r2
 8007750:	461a      	mov	r2, r3
 8007752:	460b      	mov	r3, r1
 8007754:	71fb      	strb	r3, [r7, #7]
 8007756:	4613      	mov	r3, r2
 8007758:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007762:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007766:	2b00      	cmp	r3, #0
 8007768:	d123      	bne.n	80077b2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800776a:	88bb      	ldrh	r3, [r7, #4]
 800776c:	3303      	adds	r3, #3
 800776e:	089b      	lsrs	r3, r3, #2
 8007770:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007772:	2300      	movs	r3, #0
 8007774:	61bb      	str	r3, [r7, #24]
 8007776:	e018      	b.n	80077aa <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007778:	79fb      	ldrb	r3, [r7, #7]
 800777a:	031a      	lsls	r2, r3, #12
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	4413      	add	r3, r2
 8007780:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007784:	461a      	mov	r2, r3
 8007786:	69fb      	ldr	r3, [r7, #28]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800778c:	69fb      	ldr	r3, [r7, #28]
 800778e:	3301      	adds	r3, #1
 8007790:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007792:	69fb      	ldr	r3, [r7, #28]
 8007794:	3301      	adds	r3, #1
 8007796:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007798:	69fb      	ldr	r3, [r7, #28]
 800779a:	3301      	adds	r3, #1
 800779c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800779e:	69fb      	ldr	r3, [r7, #28]
 80077a0:	3301      	adds	r3, #1
 80077a2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80077a4:	69bb      	ldr	r3, [r7, #24]
 80077a6:	3301      	adds	r3, #1
 80077a8:	61bb      	str	r3, [r7, #24]
 80077aa:	69ba      	ldr	r2, [r7, #24]
 80077ac:	693b      	ldr	r3, [r7, #16]
 80077ae:	429a      	cmp	r2, r3
 80077b0:	d3e2      	bcc.n	8007778 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80077b2:	2300      	movs	r3, #0
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	3724      	adds	r7, #36	; 0x24
 80077b8:	46bd      	mov	sp, r7
 80077ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077be:	4770      	bx	lr

080077c0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80077c0:	b480      	push	{r7}
 80077c2:	b08b      	sub	sp, #44	; 0x2c
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	60f8      	str	r0, [r7, #12]
 80077c8:	60b9      	str	r1, [r7, #8]
 80077ca:	4613      	mov	r3, r2
 80077cc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80077d6:	88fb      	ldrh	r3, [r7, #6]
 80077d8:	089b      	lsrs	r3, r3, #2
 80077da:	b29b      	uxth	r3, r3
 80077dc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80077de:	88fb      	ldrh	r3, [r7, #6]
 80077e0:	f003 0303 	and.w	r3, r3, #3
 80077e4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80077e6:	2300      	movs	r3, #0
 80077e8:	623b      	str	r3, [r7, #32]
 80077ea:	e014      	b.n	8007816 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80077ec:	69bb      	ldr	r3, [r7, #24]
 80077ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077f2:	681a      	ldr	r2, [r3, #0]
 80077f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f6:	601a      	str	r2, [r3, #0]
    pDest++;
 80077f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077fa:	3301      	adds	r3, #1
 80077fc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80077fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007800:	3301      	adds	r3, #1
 8007802:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007806:	3301      	adds	r3, #1
 8007808:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800780a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800780c:	3301      	adds	r3, #1
 800780e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007810:	6a3b      	ldr	r3, [r7, #32]
 8007812:	3301      	adds	r3, #1
 8007814:	623b      	str	r3, [r7, #32]
 8007816:	6a3a      	ldr	r2, [r7, #32]
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	429a      	cmp	r2, r3
 800781c:	d3e6      	bcc.n	80077ec <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800781e:	8bfb      	ldrh	r3, [r7, #30]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d01e      	beq.n	8007862 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007824:	2300      	movs	r3, #0
 8007826:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007828:	69bb      	ldr	r3, [r7, #24]
 800782a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800782e:	461a      	mov	r2, r3
 8007830:	f107 0310 	add.w	r3, r7, #16
 8007834:	6812      	ldr	r2, [r2, #0]
 8007836:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007838:	693a      	ldr	r2, [r7, #16]
 800783a:	6a3b      	ldr	r3, [r7, #32]
 800783c:	b2db      	uxtb	r3, r3
 800783e:	00db      	lsls	r3, r3, #3
 8007840:	fa22 f303 	lsr.w	r3, r2, r3
 8007844:	b2da      	uxtb	r2, r3
 8007846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007848:	701a      	strb	r2, [r3, #0]
      i++;
 800784a:	6a3b      	ldr	r3, [r7, #32]
 800784c:	3301      	adds	r3, #1
 800784e:	623b      	str	r3, [r7, #32]
      pDest++;
 8007850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007852:	3301      	adds	r3, #1
 8007854:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007856:	8bfb      	ldrh	r3, [r7, #30]
 8007858:	3b01      	subs	r3, #1
 800785a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800785c:	8bfb      	ldrh	r3, [r7, #30]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d1ea      	bne.n	8007838 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007864:	4618      	mov	r0, r3
 8007866:	372c      	adds	r7, #44	; 0x2c
 8007868:	46bd      	mov	sp, r7
 800786a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786e:	4770      	bx	lr

08007870 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007870:	b480      	push	{r7}
 8007872:	b085      	sub	sp, #20
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
 8007878:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	781b      	ldrb	r3, [r3, #0]
 8007882:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	785b      	ldrb	r3, [r3, #1]
 8007888:	2b01      	cmp	r3, #1
 800788a:	d12c      	bne.n	80078e6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	015a      	lsls	r2, r3, #5
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	4413      	add	r3, r2
 8007894:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	2b00      	cmp	r3, #0
 800789c:	db12      	blt.n	80078c4 <USB_EPSetStall+0x54>
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d00f      	beq.n	80078c4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	015a      	lsls	r2, r3, #5
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	4413      	add	r3, r2
 80078ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	68ba      	ldr	r2, [r7, #8]
 80078b4:	0151      	lsls	r1, r2, #5
 80078b6:	68fa      	ldr	r2, [r7, #12]
 80078b8:	440a      	add	r2, r1
 80078ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078be:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80078c2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	015a      	lsls	r2, r3, #5
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	4413      	add	r3, r2
 80078cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	68ba      	ldr	r2, [r7, #8]
 80078d4:	0151      	lsls	r1, r2, #5
 80078d6:	68fa      	ldr	r2, [r7, #12]
 80078d8:	440a      	add	r2, r1
 80078da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80078e2:	6013      	str	r3, [r2, #0]
 80078e4:	e02b      	b.n	800793e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	015a      	lsls	r2, r3, #5
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	4413      	add	r3, r2
 80078ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	db12      	blt.n	800791e <USB_EPSetStall+0xae>
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d00f      	beq.n	800791e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	015a      	lsls	r2, r3, #5
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	4413      	add	r3, r2
 8007906:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	68ba      	ldr	r2, [r7, #8]
 800790e:	0151      	lsls	r1, r2, #5
 8007910:	68fa      	ldr	r2, [r7, #12]
 8007912:	440a      	add	r2, r1
 8007914:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007918:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800791c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	015a      	lsls	r2, r3, #5
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	4413      	add	r3, r2
 8007926:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	68ba      	ldr	r2, [r7, #8]
 800792e:	0151      	lsls	r1, r2, #5
 8007930:	68fa      	ldr	r2, [r7, #12]
 8007932:	440a      	add	r2, r1
 8007934:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007938:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800793c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800793e:	2300      	movs	r3, #0
}
 8007940:	4618      	mov	r0, r3
 8007942:	3714      	adds	r7, #20
 8007944:	46bd      	mov	sp, r7
 8007946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794a:	4770      	bx	lr

0800794c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800794c:	b480      	push	{r7}
 800794e:	b085      	sub	sp, #20
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	781b      	ldrb	r3, [r3, #0]
 800795e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	785b      	ldrb	r3, [r3, #1]
 8007964:	2b01      	cmp	r3, #1
 8007966:	d128      	bne.n	80079ba <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	015a      	lsls	r2, r3, #5
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	4413      	add	r3, r2
 8007970:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	68ba      	ldr	r2, [r7, #8]
 8007978:	0151      	lsls	r1, r2, #5
 800797a:	68fa      	ldr	r2, [r7, #12]
 800797c:	440a      	add	r2, r1
 800797e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007982:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007986:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	791b      	ldrb	r3, [r3, #4]
 800798c:	2b03      	cmp	r3, #3
 800798e:	d003      	beq.n	8007998 <USB_EPClearStall+0x4c>
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	791b      	ldrb	r3, [r3, #4]
 8007994:	2b02      	cmp	r3, #2
 8007996:	d138      	bne.n	8007a0a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	015a      	lsls	r2, r3, #5
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	4413      	add	r3, r2
 80079a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	68ba      	ldr	r2, [r7, #8]
 80079a8:	0151      	lsls	r1, r2, #5
 80079aa:	68fa      	ldr	r2, [r7, #12]
 80079ac:	440a      	add	r2, r1
 80079ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079b6:	6013      	str	r3, [r2, #0]
 80079b8:	e027      	b.n	8007a0a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	015a      	lsls	r2, r3, #5
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	4413      	add	r3, r2
 80079c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	68ba      	ldr	r2, [r7, #8]
 80079ca:	0151      	lsls	r1, r2, #5
 80079cc:	68fa      	ldr	r2, [r7, #12]
 80079ce:	440a      	add	r2, r1
 80079d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079d4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80079d8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	791b      	ldrb	r3, [r3, #4]
 80079de:	2b03      	cmp	r3, #3
 80079e0:	d003      	beq.n	80079ea <USB_EPClearStall+0x9e>
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	791b      	ldrb	r3, [r3, #4]
 80079e6:	2b02      	cmp	r3, #2
 80079e8:	d10f      	bne.n	8007a0a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	015a      	lsls	r2, r3, #5
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	4413      	add	r3, r2
 80079f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	68ba      	ldr	r2, [r7, #8]
 80079fa:	0151      	lsls	r1, r2, #5
 80079fc:	68fa      	ldr	r2, [r7, #12]
 80079fe:	440a      	add	r2, r1
 8007a00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a08:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007a0a:	2300      	movs	r3, #0
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	3714      	adds	r7, #20
 8007a10:	46bd      	mov	sp, r7
 8007a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a16:	4770      	bx	lr

08007a18 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b085      	sub	sp, #20
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
 8007a20:	460b      	mov	r3, r1
 8007a22:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	68fa      	ldr	r2, [r7, #12]
 8007a32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a36:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007a3a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a42:	681a      	ldr	r2, [r3, #0]
 8007a44:	78fb      	ldrb	r3, [r7, #3]
 8007a46:	011b      	lsls	r3, r3, #4
 8007a48:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007a4c:	68f9      	ldr	r1, [r7, #12]
 8007a4e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007a52:	4313      	orrs	r3, r2
 8007a54:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007a56:	2300      	movs	r3, #0
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	3714      	adds	r7, #20
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a62:	4770      	bx	lr

08007a64 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007a64:	b480      	push	{r7}
 8007a66:	b085      	sub	sp, #20
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	68fa      	ldr	r2, [r7, #12]
 8007a7a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007a7e:	f023 0303 	bic.w	r3, r3, #3
 8007a82:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a8a:	685b      	ldr	r3, [r3, #4]
 8007a8c:	68fa      	ldr	r2, [r7, #12]
 8007a8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a92:	f023 0302 	bic.w	r3, r3, #2
 8007a96:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007a98:	2300      	movs	r3, #0
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	3714      	adds	r7, #20
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa4:	4770      	bx	lr

08007aa6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007aa6:	b480      	push	{r7}
 8007aa8:	b085      	sub	sp, #20
 8007aaa:	af00      	add	r7, sp, #0
 8007aac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	68fa      	ldr	r2, [r7, #12]
 8007abc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007ac0:	f023 0303 	bic.w	r3, r3, #3
 8007ac4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007acc:	685b      	ldr	r3, [r3, #4]
 8007ace:	68fa      	ldr	r2, [r7, #12]
 8007ad0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007ad4:	f043 0302 	orr.w	r3, r3, #2
 8007ad8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007ada:	2300      	movs	r3, #0
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	3714      	adds	r7, #20
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae6:	4770      	bx	lr

08007ae8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b085      	sub	sp, #20
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	695b      	ldr	r3, [r3, #20]
 8007af4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	699b      	ldr	r3, [r3, #24]
 8007afa:	68fa      	ldr	r2, [r7, #12]
 8007afc:	4013      	ands	r3, r2
 8007afe:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007b00:	68fb      	ldr	r3, [r7, #12]
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	3714      	adds	r7, #20
 8007b06:	46bd      	mov	sp, r7
 8007b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0c:	4770      	bx	lr

08007b0e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007b0e:	b480      	push	{r7}
 8007b10:	b085      	sub	sp, #20
 8007b12:	af00      	add	r7, sp, #0
 8007b14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b20:	699b      	ldr	r3, [r3, #24]
 8007b22:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b2a:	69db      	ldr	r3, [r3, #28]
 8007b2c:	68ba      	ldr	r2, [r7, #8]
 8007b2e:	4013      	ands	r3, r2
 8007b30:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	0c1b      	lsrs	r3, r3, #16
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3714      	adds	r7, #20
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b40:	4770      	bx	lr

08007b42 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007b42:	b480      	push	{r7}
 8007b44:	b085      	sub	sp, #20
 8007b46:	af00      	add	r7, sp, #0
 8007b48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b54:	699b      	ldr	r3, [r3, #24]
 8007b56:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b5e:	69db      	ldr	r3, [r3, #28]
 8007b60:	68ba      	ldr	r2, [r7, #8]
 8007b62:	4013      	ands	r3, r2
 8007b64:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	b29b      	uxth	r3, r3
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	3714      	adds	r7, #20
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b74:	4770      	bx	lr

08007b76 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007b76:	b480      	push	{r7}
 8007b78:	b085      	sub	sp, #20
 8007b7a:	af00      	add	r7, sp, #0
 8007b7c:	6078      	str	r0, [r7, #4]
 8007b7e:	460b      	mov	r3, r1
 8007b80:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007b86:	78fb      	ldrb	r3, [r7, #3]
 8007b88:	015a      	lsls	r2, r3, #5
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	4413      	add	r3, r2
 8007b8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b92:	689b      	ldr	r3, [r3, #8]
 8007b94:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b9c:	695b      	ldr	r3, [r3, #20]
 8007b9e:	68ba      	ldr	r2, [r7, #8]
 8007ba0:	4013      	ands	r3, r2
 8007ba2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007ba4:	68bb      	ldr	r3, [r7, #8]
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3714      	adds	r7, #20
 8007baa:	46bd      	mov	sp, r7
 8007bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb0:	4770      	bx	lr

08007bb2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007bb2:	b480      	push	{r7}
 8007bb4:	b087      	sub	sp, #28
 8007bb6:	af00      	add	r7, sp, #0
 8007bb8:	6078      	str	r0, [r7, #4]
 8007bba:	460b      	mov	r3, r1
 8007bbc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007bc2:	697b      	ldr	r3, [r7, #20]
 8007bc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bc8:	691b      	ldr	r3, [r3, #16]
 8007bca:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007bcc:	697b      	ldr	r3, [r7, #20]
 8007bce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bd4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007bd6:	78fb      	ldrb	r3, [r7, #3]
 8007bd8:	f003 030f 	and.w	r3, r3, #15
 8007bdc:	68fa      	ldr	r2, [r7, #12]
 8007bde:	fa22 f303 	lsr.w	r3, r2, r3
 8007be2:	01db      	lsls	r3, r3, #7
 8007be4:	b2db      	uxtb	r3, r3
 8007be6:	693a      	ldr	r2, [r7, #16]
 8007be8:	4313      	orrs	r3, r2
 8007bea:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007bec:	78fb      	ldrb	r3, [r7, #3]
 8007bee:	015a      	lsls	r2, r3, #5
 8007bf0:	697b      	ldr	r3, [r7, #20]
 8007bf2:	4413      	add	r3, r2
 8007bf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bf8:	689b      	ldr	r3, [r3, #8]
 8007bfa:	693a      	ldr	r2, [r7, #16]
 8007bfc:	4013      	ands	r3, r2
 8007bfe:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007c00:	68bb      	ldr	r3, [r7, #8]
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	371c      	adds	r7, #28
 8007c06:	46bd      	mov	sp, r7
 8007c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0c:	4770      	bx	lr

08007c0e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007c0e:	b480      	push	{r7}
 8007c10:	b083      	sub	sp, #12
 8007c12:	af00      	add	r7, sp, #0
 8007c14:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	695b      	ldr	r3, [r3, #20]
 8007c1a:	f003 0301 	and.w	r3, r3, #1
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	370c      	adds	r7, #12
 8007c22:	46bd      	mov	sp, r7
 8007c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c28:	4770      	bx	lr

08007c2a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007c2a:	b480      	push	{r7}
 8007c2c:	b085      	sub	sp, #20
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	68fa      	ldr	r2, [r7, #12]
 8007c40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c44:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007c48:	f023 0307 	bic.w	r3, r3, #7
 8007c4c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c54:	685b      	ldr	r3, [r3, #4]
 8007c56:	68fa      	ldr	r2, [r7, #12]
 8007c58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c60:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007c62:	2300      	movs	r3, #0
}
 8007c64:	4618      	mov	r0, r3
 8007c66:	3714      	adds	r7, #20
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6e:	4770      	bx	lr

08007c70 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007c70:	b480      	push	{r7}
 8007c72:	b087      	sub	sp, #28
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	60f8      	str	r0, [r7, #12]
 8007c78:	460b      	mov	r3, r1
 8007c7a:	607a      	str	r2, [r7, #4]
 8007c7c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	333c      	adds	r3, #60	; 0x3c
 8007c86:	3304      	adds	r3, #4
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	4a26      	ldr	r2, [pc, #152]	; (8007d28 <USB_EP0_OutStart+0xb8>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d90a      	bls.n	8007caa <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007c94:	697b      	ldr	r3, [r7, #20]
 8007c96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ca0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ca4:	d101      	bne.n	8007caa <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	e037      	b.n	8007d1a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007caa:	697b      	ldr	r3, [r7, #20]
 8007cac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cb0:	461a      	mov	r2, r3
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007cb6:	697b      	ldr	r3, [r7, #20]
 8007cb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cbc:	691b      	ldr	r3, [r3, #16]
 8007cbe:	697a      	ldr	r2, [r7, #20]
 8007cc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007cc4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007cc8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007cca:	697b      	ldr	r3, [r7, #20]
 8007ccc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cd0:	691b      	ldr	r3, [r3, #16]
 8007cd2:	697a      	ldr	r2, [r7, #20]
 8007cd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007cd8:	f043 0318 	orr.w	r3, r3, #24
 8007cdc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ce4:	691b      	ldr	r3, [r3, #16]
 8007ce6:	697a      	ldr	r2, [r7, #20]
 8007ce8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007cec:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007cf0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007cf2:	7afb      	ldrb	r3, [r7, #11]
 8007cf4:	2b01      	cmp	r3, #1
 8007cf6:	d10f      	bne.n	8007d18 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007cf8:	697b      	ldr	r3, [r7, #20]
 8007cfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cfe:	461a      	mov	r2, r3
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007d04:	697b      	ldr	r3, [r7, #20]
 8007d06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	697a      	ldr	r2, [r7, #20]
 8007d0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d12:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007d16:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007d18:	2300      	movs	r3, #0
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	371c      	adds	r7, #28
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d24:	4770      	bx	lr
 8007d26:	bf00      	nop
 8007d28:	4f54300a 	.word	0x4f54300a

08007d2c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b085      	sub	sp, #20
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007d34:	2300      	movs	r3, #0
 8007d36:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	3301      	adds	r3, #1
 8007d3c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	4a13      	ldr	r2, [pc, #76]	; (8007d90 <USB_CoreReset+0x64>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d901      	bls.n	8007d4a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007d46:	2303      	movs	r3, #3
 8007d48:	e01b      	b.n	8007d82 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	691b      	ldr	r3, [r3, #16]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	daf2      	bge.n	8007d38 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007d52:	2300      	movs	r3, #0
 8007d54:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	691b      	ldr	r3, [r3, #16]
 8007d5a:	f043 0201 	orr.w	r2, r3, #1
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	3301      	adds	r3, #1
 8007d66:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	4a09      	ldr	r2, [pc, #36]	; (8007d90 <USB_CoreReset+0x64>)
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d901      	bls.n	8007d74 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007d70:	2303      	movs	r3, #3
 8007d72:	e006      	b.n	8007d82 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	691b      	ldr	r3, [r3, #16]
 8007d78:	f003 0301 	and.w	r3, r3, #1
 8007d7c:	2b01      	cmp	r3, #1
 8007d7e:	d0f0      	beq.n	8007d62 <USB_CoreReset+0x36>

  return HAL_OK;
 8007d80:	2300      	movs	r3, #0
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	3714      	adds	r7, #20
 8007d86:	46bd      	mov	sp, r7
 8007d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8c:	4770      	bx	lr
 8007d8e:	bf00      	nop
 8007d90:	00030d40 	.word	0x00030d40

08007d94 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b084      	sub	sp, #16
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
 8007d9c:	460b      	mov	r3, r1
 8007d9e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007da0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007da4:	f005 fad6 	bl	800d354 <USBD_static_malloc>
 8007da8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d109      	bne.n	8007dc4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	32b0      	adds	r2, #176	; 0xb0
 8007dba:	2100      	movs	r1, #0
 8007dbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007dc0:	2302      	movs	r3, #2
 8007dc2:	e0d4      	b.n	8007f6e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007dc4:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8007dc8:	2100      	movs	r1, #0
 8007dca:	68f8      	ldr	r0, [r7, #12]
 8007dcc:	f005 fbb0 	bl	800d530 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	32b0      	adds	r2, #176	; 0xb0
 8007dda:	68f9      	ldr	r1, [r7, #12]
 8007ddc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	32b0      	adds	r2, #176	; 0xb0
 8007dea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	7c1b      	ldrb	r3, [r3, #16]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d138      	bne.n	8007e6e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007dfc:	4b5e      	ldr	r3, [pc, #376]	; (8007f78 <USBD_CDC_Init+0x1e4>)
 8007dfe:	7819      	ldrb	r1, [r3, #0]
 8007e00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e04:	2202      	movs	r2, #2
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f005 f981 	bl	800d10e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007e0c:	4b5a      	ldr	r3, [pc, #360]	; (8007f78 <USBD_CDC_Init+0x1e4>)
 8007e0e:	781b      	ldrb	r3, [r3, #0]
 8007e10:	f003 020f 	and.w	r2, r3, #15
 8007e14:	6879      	ldr	r1, [r7, #4]
 8007e16:	4613      	mov	r3, r2
 8007e18:	009b      	lsls	r3, r3, #2
 8007e1a:	4413      	add	r3, r2
 8007e1c:	009b      	lsls	r3, r3, #2
 8007e1e:	440b      	add	r3, r1
 8007e20:	3324      	adds	r3, #36	; 0x24
 8007e22:	2201      	movs	r2, #1
 8007e24:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007e26:	4b55      	ldr	r3, [pc, #340]	; (8007f7c <USBD_CDC_Init+0x1e8>)
 8007e28:	7819      	ldrb	r1, [r3, #0]
 8007e2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e2e:	2202      	movs	r2, #2
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f005 f96c 	bl	800d10e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007e36:	4b51      	ldr	r3, [pc, #324]	; (8007f7c <USBD_CDC_Init+0x1e8>)
 8007e38:	781b      	ldrb	r3, [r3, #0]
 8007e3a:	f003 020f 	and.w	r2, r3, #15
 8007e3e:	6879      	ldr	r1, [r7, #4]
 8007e40:	4613      	mov	r3, r2
 8007e42:	009b      	lsls	r3, r3, #2
 8007e44:	4413      	add	r3, r2
 8007e46:	009b      	lsls	r3, r3, #2
 8007e48:	440b      	add	r3, r1
 8007e4a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007e4e:	2201      	movs	r2, #1
 8007e50:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007e52:	4b4b      	ldr	r3, [pc, #300]	; (8007f80 <USBD_CDC_Init+0x1ec>)
 8007e54:	781b      	ldrb	r3, [r3, #0]
 8007e56:	f003 020f 	and.w	r2, r3, #15
 8007e5a:	6879      	ldr	r1, [r7, #4]
 8007e5c:	4613      	mov	r3, r2
 8007e5e:	009b      	lsls	r3, r3, #2
 8007e60:	4413      	add	r3, r2
 8007e62:	009b      	lsls	r3, r3, #2
 8007e64:	440b      	add	r3, r1
 8007e66:	3326      	adds	r3, #38	; 0x26
 8007e68:	2210      	movs	r2, #16
 8007e6a:	801a      	strh	r2, [r3, #0]
 8007e6c:	e035      	b.n	8007eda <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007e6e:	4b42      	ldr	r3, [pc, #264]	; (8007f78 <USBD_CDC_Init+0x1e4>)
 8007e70:	7819      	ldrb	r1, [r3, #0]
 8007e72:	2340      	movs	r3, #64	; 0x40
 8007e74:	2202      	movs	r2, #2
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f005 f949 	bl	800d10e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007e7c:	4b3e      	ldr	r3, [pc, #248]	; (8007f78 <USBD_CDC_Init+0x1e4>)
 8007e7e:	781b      	ldrb	r3, [r3, #0]
 8007e80:	f003 020f 	and.w	r2, r3, #15
 8007e84:	6879      	ldr	r1, [r7, #4]
 8007e86:	4613      	mov	r3, r2
 8007e88:	009b      	lsls	r3, r3, #2
 8007e8a:	4413      	add	r3, r2
 8007e8c:	009b      	lsls	r3, r3, #2
 8007e8e:	440b      	add	r3, r1
 8007e90:	3324      	adds	r3, #36	; 0x24
 8007e92:	2201      	movs	r2, #1
 8007e94:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007e96:	4b39      	ldr	r3, [pc, #228]	; (8007f7c <USBD_CDC_Init+0x1e8>)
 8007e98:	7819      	ldrb	r1, [r3, #0]
 8007e9a:	2340      	movs	r3, #64	; 0x40
 8007e9c:	2202      	movs	r2, #2
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f005 f935 	bl	800d10e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007ea4:	4b35      	ldr	r3, [pc, #212]	; (8007f7c <USBD_CDC_Init+0x1e8>)
 8007ea6:	781b      	ldrb	r3, [r3, #0]
 8007ea8:	f003 020f 	and.w	r2, r3, #15
 8007eac:	6879      	ldr	r1, [r7, #4]
 8007eae:	4613      	mov	r3, r2
 8007eb0:	009b      	lsls	r3, r3, #2
 8007eb2:	4413      	add	r3, r2
 8007eb4:	009b      	lsls	r3, r3, #2
 8007eb6:	440b      	add	r3, r1
 8007eb8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007ebc:	2201      	movs	r2, #1
 8007ebe:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007ec0:	4b2f      	ldr	r3, [pc, #188]	; (8007f80 <USBD_CDC_Init+0x1ec>)
 8007ec2:	781b      	ldrb	r3, [r3, #0]
 8007ec4:	f003 020f 	and.w	r2, r3, #15
 8007ec8:	6879      	ldr	r1, [r7, #4]
 8007eca:	4613      	mov	r3, r2
 8007ecc:	009b      	lsls	r3, r3, #2
 8007ece:	4413      	add	r3, r2
 8007ed0:	009b      	lsls	r3, r3, #2
 8007ed2:	440b      	add	r3, r1
 8007ed4:	3326      	adds	r3, #38	; 0x26
 8007ed6:	2210      	movs	r2, #16
 8007ed8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007eda:	4b29      	ldr	r3, [pc, #164]	; (8007f80 <USBD_CDC_Init+0x1ec>)
 8007edc:	7819      	ldrb	r1, [r3, #0]
 8007ede:	2308      	movs	r3, #8
 8007ee0:	2203      	movs	r2, #3
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f005 f913 	bl	800d10e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007ee8:	4b25      	ldr	r3, [pc, #148]	; (8007f80 <USBD_CDC_Init+0x1ec>)
 8007eea:	781b      	ldrb	r3, [r3, #0]
 8007eec:	f003 020f 	and.w	r2, r3, #15
 8007ef0:	6879      	ldr	r1, [r7, #4]
 8007ef2:	4613      	mov	r3, r2
 8007ef4:	009b      	lsls	r3, r3, #2
 8007ef6:	4413      	add	r3, r2
 8007ef8:	009b      	lsls	r3, r3, #2
 8007efa:	440b      	add	r3, r1
 8007efc:	3324      	adds	r3, #36	; 0x24
 8007efe:	2201      	movs	r2, #1
 8007f00:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	2200      	movs	r2, #0
 8007f06:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007f10:	687a      	ldr	r2, [r7, #4]
 8007f12:	33b0      	adds	r3, #176	; 0xb0
 8007f14:	009b      	lsls	r3, r3, #2
 8007f16:	4413      	add	r3, r2
 8007f18:	685b      	ldr	r3, [r3, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	2200      	movs	r2, #0
 8007f22:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	2200      	movs	r2, #0
 8007f2a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d101      	bne.n	8007f3c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007f38:	2302      	movs	r3, #2
 8007f3a:	e018      	b.n	8007f6e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	7c1b      	ldrb	r3, [r3, #16]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d10a      	bne.n	8007f5a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007f44:	4b0d      	ldr	r3, [pc, #52]	; (8007f7c <USBD_CDC_Init+0x1e8>)
 8007f46:	7819      	ldrb	r1, [r3, #0]
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007f4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f005 f9ca 	bl	800d2ec <USBD_LL_PrepareReceive>
 8007f58:	e008      	b.n	8007f6c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007f5a:	4b08      	ldr	r3, [pc, #32]	; (8007f7c <USBD_CDC_Init+0x1e8>)
 8007f5c:	7819      	ldrb	r1, [r3, #0]
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007f64:	2340      	movs	r3, #64	; 0x40
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f005 f9c0 	bl	800d2ec <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007f6c:	2300      	movs	r3, #0
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	3710      	adds	r7, #16
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}
 8007f76:	bf00      	nop
 8007f78:	20000093 	.word	0x20000093
 8007f7c:	20000094 	.word	0x20000094
 8007f80:	20000095 	.word	0x20000095

08007f84 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b082      	sub	sp, #8
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
 8007f8c:	460b      	mov	r3, r1
 8007f8e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007f90:	4b3a      	ldr	r3, [pc, #232]	; (800807c <USBD_CDC_DeInit+0xf8>)
 8007f92:	781b      	ldrb	r3, [r3, #0]
 8007f94:	4619      	mov	r1, r3
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f005 f8df 	bl	800d15a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007f9c:	4b37      	ldr	r3, [pc, #220]	; (800807c <USBD_CDC_DeInit+0xf8>)
 8007f9e:	781b      	ldrb	r3, [r3, #0]
 8007fa0:	f003 020f 	and.w	r2, r3, #15
 8007fa4:	6879      	ldr	r1, [r7, #4]
 8007fa6:	4613      	mov	r3, r2
 8007fa8:	009b      	lsls	r3, r3, #2
 8007faa:	4413      	add	r3, r2
 8007fac:	009b      	lsls	r3, r3, #2
 8007fae:	440b      	add	r3, r1
 8007fb0:	3324      	adds	r3, #36	; 0x24
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007fb6:	4b32      	ldr	r3, [pc, #200]	; (8008080 <USBD_CDC_DeInit+0xfc>)
 8007fb8:	781b      	ldrb	r3, [r3, #0]
 8007fba:	4619      	mov	r1, r3
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	f005 f8cc 	bl	800d15a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007fc2:	4b2f      	ldr	r3, [pc, #188]	; (8008080 <USBD_CDC_DeInit+0xfc>)
 8007fc4:	781b      	ldrb	r3, [r3, #0]
 8007fc6:	f003 020f 	and.w	r2, r3, #15
 8007fca:	6879      	ldr	r1, [r7, #4]
 8007fcc:	4613      	mov	r3, r2
 8007fce:	009b      	lsls	r3, r3, #2
 8007fd0:	4413      	add	r3, r2
 8007fd2:	009b      	lsls	r3, r3, #2
 8007fd4:	440b      	add	r3, r1
 8007fd6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007fda:	2200      	movs	r2, #0
 8007fdc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007fde:	4b29      	ldr	r3, [pc, #164]	; (8008084 <USBD_CDC_DeInit+0x100>)
 8007fe0:	781b      	ldrb	r3, [r3, #0]
 8007fe2:	4619      	mov	r1, r3
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	f005 f8b8 	bl	800d15a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007fea:	4b26      	ldr	r3, [pc, #152]	; (8008084 <USBD_CDC_DeInit+0x100>)
 8007fec:	781b      	ldrb	r3, [r3, #0]
 8007fee:	f003 020f 	and.w	r2, r3, #15
 8007ff2:	6879      	ldr	r1, [r7, #4]
 8007ff4:	4613      	mov	r3, r2
 8007ff6:	009b      	lsls	r3, r3, #2
 8007ff8:	4413      	add	r3, r2
 8007ffa:	009b      	lsls	r3, r3, #2
 8007ffc:	440b      	add	r3, r1
 8007ffe:	3324      	adds	r3, #36	; 0x24
 8008000:	2200      	movs	r2, #0
 8008002:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008004:	4b1f      	ldr	r3, [pc, #124]	; (8008084 <USBD_CDC_DeInit+0x100>)
 8008006:	781b      	ldrb	r3, [r3, #0]
 8008008:	f003 020f 	and.w	r2, r3, #15
 800800c:	6879      	ldr	r1, [r7, #4]
 800800e:	4613      	mov	r3, r2
 8008010:	009b      	lsls	r3, r3, #2
 8008012:	4413      	add	r3, r2
 8008014:	009b      	lsls	r3, r3, #2
 8008016:	440b      	add	r3, r1
 8008018:	3326      	adds	r3, #38	; 0x26
 800801a:	2200      	movs	r2, #0
 800801c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	32b0      	adds	r2, #176	; 0xb0
 8008028:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d01f      	beq.n	8008070 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008036:	687a      	ldr	r2, [r7, #4]
 8008038:	33b0      	adds	r3, #176	; 0xb0
 800803a:	009b      	lsls	r3, r3, #2
 800803c:	4413      	add	r3, r2
 800803e:	685b      	ldr	r3, [r3, #4]
 8008040:	685b      	ldr	r3, [r3, #4]
 8008042:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	32b0      	adds	r2, #176	; 0xb0
 800804e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008052:	4618      	mov	r0, r3
 8008054:	f005 f98c 	bl	800d370 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	32b0      	adds	r2, #176	; 0xb0
 8008062:	2100      	movs	r1, #0
 8008064:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2200      	movs	r2, #0
 800806c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008070:	2300      	movs	r3, #0
}
 8008072:	4618      	mov	r0, r3
 8008074:	3708      	adds	r7, #8
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}
 800807a:	bf00      	nop
 800807c:	20000093 	.word	0x20000093
 8008080:	20000094 	.word	0x20000094
 8008084:	20000095 	.word	0x20000095

08008088 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b086      	sub	sp, #24
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
 8008090:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	32b0      	adds	r2, #176	; 0xb0
 800809c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080a0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80080a2:	2300      	movs	r3, #0
 80080a4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80080a6:	2300      	movs	r3, #0
 80080a8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80080aa:	2300      	movs	r3, #0
 80080ac:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80080ae:	693b      	ldr	r3, [r7, #16]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d101      	bne.n	80080b8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80080b4:	2303      	movs	r3, #3
 80080b6:	e0bf      	b.n	8008238 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	781b      	ldrb	r3, [r3, #0]
 80080bc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d050      	beq.n	8008166 <USBD_CDC_Setup+0xde>
 80080c4:	2b20      	cmp	r3, #32
 80080c6:	f040 80af 	bne.w	8008228 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	88db      	ldrh	r3, [r3, #6]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d03a      	beq.n	8008148 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	781b      	ldrb	r3, [r3, #0]
 80080d6:	b25b      	sxtb	r3, r3
 80080d8:	2b00      	cmp	r3, #0
 80080da:	da1b      	bge.n	8008114 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80080e2:	687a      	ldr	r2, [r7, #4]
 80080e4:	33b0      	adds	r3, #176	; 0xb0
 80080e6:	009b      	lsls	r3, r3, #2
 80080e8:	4413      	add	r3, r2
 80080ea:	685b      	ldr	r3, [r3, #4]
 80080ec:	689b      	ldr	r3, [r3, #8]
 80080ee:	683a      	ldr	r2, [r7, #0]
 80080f0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80080f2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80080f4:	683a      	ldr	r2, [r7, #0]
 80080f6:	88d2      	ldrh	r2, [r2, #6]
 80080f8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	88db      	ldrh	r3, [r3, #6]
 80080fe:	2b07      	cmp	r3, #7
 8008100:	bf28      	it	cs
 8008102:	2307      	movcs	r3, #7
 8008104:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008106:	693b      	ldr	r3, [r7, #16]
 8008108:	89fa      	ldrh	r2, [r7, #14]
 800810a:	4619      	mov	r1, r3
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f001 fd89 	bl	8009c24 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008112:	e090      	b.n	8008236 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	785a      	ldrb	r2, [r3, #1]
 8008118:	693b      	ldr	r3, [r7, #16]
 800811a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	88db      	ldrh	r3, [r3, #6]
 8008122:	2b3f      	cmp	r3, #63	; 0x3f
 8008124:	d803      	bhi.n	800812e <USBD_CDC_Setup+0xa6>
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	88db      	ldrh	r3, [r3, #6]
 800812a:	b2da      	uxtb	r2, r3
 800812c:	e000      	b.n	8008130 <USBD_CDC_Setup+0xa8>
 800812e:	2240      	movs	r2, #64	; 0x40
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008136:	6939      	ldr	r1, [r7, #16]
 8008138:	693b      	ldr	r3, [r7, #16]
 800813a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800813e:	461a      	mov	r2, r3
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	f001 fd9b 	bl	8009c7c <USBD_CtlPrepareRx>
      break;
 8008146:	e076      	b.n	8008236 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800814e:	687a      	ldr	r2, [r7, #4]
 8008150:	33b0      	adds	r3, #176	; 0xb0
 8008152:	009b      	lsls	r3, r3, #2
 8008154:	4413      	add	r3, r2
 8008156:	685b      	ldr	r3, [r3, #4]
 8008158:	689b      	ldr	r3, [r3, #8]
 800815a:	683a      	ldr	r2, [r7, #0]
 800815c:	7850      	ldrb	r0, [r2, #1]
 800815e:	2200      	movs	r2, #0
 8008160:	6839      	ldr	r1, [r7, #0]
 8008162:	4798      	blx	r3
      break;
 8008164:	e067      	b.n	8008236 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	785b      	ldrb	r3, [r3, #1]
 800816a:	2b0b      	cmp	r3, #11
 800816c:	d851      	bhi.n	8008212 <USBD_CDC_Setup+0x18a>
 800816e:	a201      	add	r2, pc, #4	; (adr r2, 8008174 <USBD_CDC_Setup+0xec>)
 8008170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008174:	080081a5 	.word	0x080081a5
 8008178:	08008221 	.word	0x08008221
 800817c:	08008213 	.word	0x08008213
 8008180:	08008213 	.word	0x08008213
 8008184:	08008213 	.word	0x08008213
 8008188:	08008213 	.word	0x08008213
 800818c:	08008213 	.word	0x08008213
 8008190:	08008213 	.word	0x08008213
 8008194:	08008213 	.word	0x08008213
 8008198:	08008213 	.word	0x08008213
 800819c:	080081cf 	.word	0x080081cf
 80081a0:	080081f9 	.word	0x080081f9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081aa:	b2db      	uxtb	r3, r3
 80081ac:	2b03      	cmp	r3, #3
 80081ae:	d107      	bne.n	80081c0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80081b0:	f107 030a 	add.w	r3, r7, #10
 80081b4:	2202      	movs	r2, #2
 80081b6:	4619      	mov	r1, r3
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f001 fd33 	bl	8009c24 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80081be:	e032      	b.n	8008226 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80081c0:	6839      	ldr	r1, [r7, #0]
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f001 fcbd 	bl	8009b42 <USBD_CtlError>
            ret = USBD_FAIL;
 80081c8:	2303      	movs	r3, #3
 80081ca:	75fb      	strb	r3, [r7, #23]
          break;
 80081cc:	e02b      	b.n	8008226 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081d4:	b2db      	uxtb	r3, r3
 80081d6:	2b03      	cmp	r3, #3
 80081d8:	d107      	bne.n	80081ea <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80081da:	f107 030d 	add.w	r3, r7, #13
 80081de:	2201      	movs	r2, #1
 80081e0:	4619      	mov	r1, r3
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f001 fd1e 	bl	8009c24 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80081e8:	e01d      	b.n	8008226 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80081ea:	6839      	ldr	r1, [r7, #0]
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f001 fca8 	bl	8009b42 <USBD_CtlError>
            ret = USBD_FAIL;
 80081f2:	2303      	movs	r3, #3
 80081f4:	75fb      	strb	r3, [r7, #23]
          break;
 80081f6:	e016      	b.n	8008226 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081fe:	b2db      	uxtb	r3, r3
 8008200:	2b03      	cmp	r3, #3
 8008202:	d00f      	beq.n	8008224 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008204:	6839      	ldr	r1, [r7, #0]
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f001 fc9b 	bl	8009b42 <USBD_CtlError>
            ret = USBD_FAIL;
 800820c:	2303      	movs	r3, #3
 800820e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008210:	e008      	b.n	8008224 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008212:	6839      	ldr	r1, [r7, #0]
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f001 fc94 	bl	8009b42 <USBD_CtlError>
          ret = USBD_FAIL;
 800821a:	2303      	movs	r3, #3
 800821c:	75fb      	strb	r3, [r7, #23]
          break;
 800821e:	e002      	b.n	8008226 <USBD_CDC_Setup+0x19e>
          break;
 8008220:	bf00      	nop
 8008222:	e008      	b.n	8008236 <USBD_CDC_Setup+0x1ae>
          break;
 8008224:	bf00      	nop
      }
      break;
 8008226:	e006      	b.n	8008236 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008228:	6839      	ldr	r1, [r7, #0]
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f001 fc89 	bl	8009b42 <USBD_CtlError>
      ret = USBD_FAIL;
 8008230:	2303      	movs	r3, #3
 8008232:	75fb      	strb	r3, [r7, #23]
      break;
 8008234:	bf00      	nop
  }

  return (uint8_t)ret;
 8008236:	7dfb      	ldrb	r3, [r7, #23]
}
 8008238:	4618      	mov	r0, r3
 800823a:	3718      	adds	r7, #24
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}

08008240 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b084      	sub	sp, #16
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
 8008248:	460b      	mov	r3, r1
 800824a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008252:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	32b0      	adds	r2, #176	; 0xb0
 800825e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d101      	bne.n	800826a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008266:	2303      	movs	r3, #3
 8008268:	e065      	b.n	8008336 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	32b0      	adds	r2, #176	; 0xb0
 8008274:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008278:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800827a:	78fb      	ldrb	r3, [r7, #3]
 800827c:	f003 020f 	and.w	r2, r3, #15
 8008280:	6879      	ldr	r1, [r7, #4]
 8008282:	4613      	mov	r3, r2
 8008284:	009b      	lsls	r3, r3, #2
 8008286:	4413      	add	r3, r2
 8008288:	009b      	lsls	r3, r3, #2
 800828a:	440b      	add	r3, r1
 800828c:	3318      	adds	r3, #24
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d02f      	beq.n	80082f4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008294:	78fb      	ldrb	r3, [r7, #3]
 8008296:	f003 020f 	and.w	r2, r3, #15
 800829a:	6879      	ldr	r1, [r7, #4]
 800829c:	4613      	mov	r3, r2
 800829e:	009b      	lsls	r3, r3, #2
 80082a0:	4413      	add	r3, r2
 80082a2:	009b      	lsls	r3, r3, #2
 80082a4:	440b      	add	r3, r1
 80082a6:	3318      	adds	r3, #24
 80082a8:	681a      	ldr	r2, [r3, #0]
 80082aa:	78fb      	ldrb	r3, [r7, #3]
 80082ac:	f003 010f 	and.w	r1, r3, #15
 80082b0:	68f8      	ldr	r0, [r7, #12]
 80082b2:	460b      	mov	r3, r1
 80082b4:	00db      	lsls	r3, r3, #3
 80082b6:	440b      	add	r3, r1
 80082b8:	009b      	lsls	r3, r3, #2
 80082ba:	4403      	add	r3, r0
 80082bc:	3348      	adds	r3, #72	; 0x48
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	fbb2 f1f3 	udiv	r1, r2, r3
 80082c4:	fb01 f303 	mul.w	r3, r1, r3
 80082c8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d112      	bne.n	80082f4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80082ce:	78fb      	ldrb	r3, [r7, #3]
 80082d0:	f003 020f 	and.w	r2, r3, #15
 80082d4:	6879      	ldr	r1, [r7, #4]
 80082d6:	4613      	mov	r3, r2
 80082d8:	009b      	lsls	r3, r3, #2
 80082da:	4413      	add	r3, r2
 80082dc:	009b      	lsls	r3, r3, #2
 80082de:	440b      	add	r3, r1
 80082e0:	3318      	adds	r3, #24
 80082e2:	2200      	movs	r2, #0
 80082e4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80082e6:	78f9      	ldrb	r1, [r7, #3]
 80082e8:	2300      	movs	r3, #0
 80082ea:	2200      	movs	r2, #0
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f004 ffdc 	bl	800d2aa <USBD_LL_Transmit>
 80082f2:	e01f      	b.n	8008334 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	2200      	movs	r2, #0
 80082f8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008302:	687a      	ldr	r2, [r7, #4]
 8008304:	33b0      	adds	r3, #176	; 0xb0
 8008306:	009b      	lsls	r3, r3, #2
 8008308:	4413      	add	r3, r2
 800830a:	685b      	ldr	r3, [r3, #4]
 800830c:	691b      	ldr	r3, [r3, #16]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d010      	beq.n	8008334 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008318:	687a      	ldr	r2, [r7, #4]
 800831a:	33b0      	adds	r3, #176	; 0xb0
 800831c:	009b      	lsls	r3, r3, #2
 800831e:	4413      	add	r3, r2
 8008320:	685b      	ldr	r3, [r3, #4]
 8008322:	691b      	ldr	r3, [r3, #16]
 8008324:	68ba      	ldr	r2, [r7, #8]
 8008326:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800832a:	68ba      	ldr	r2, [r7, #8]
 800832c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008330:	78fa      	ldrb	r2, [r7, #3]
 8008332:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008334:	2300      	movs	r3, #0
}
 8008336:	4618      	mov	r0, r3
 8008338:	3710      	adds	r7, #16
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}

0800833e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800833e:	b580      	push	{r7, lr}
 8008340:	b084      	sub	sp, #16
 8008342:	af00      	add	r7, sp, #0
 8008344:	6078      	str	r0, [r7, #4]
 8008346:	460b      	mov	r3, r1
 8008348:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	32b0      	adds	r2, #176	; 0xb0
 8008354:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008358:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	32b0      	adds	r2, #176	; 0xb0
 8008364:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d101      	bne.n	8008370 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800836c:	2303      	movs	r3, #3
 800836e:	e01a      	b.n	80083a6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008370:	78fb      	ldrb	r3, [r7, #3]
 8008372:	4619      	mov	r1, r3
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f004 ffda 	bl	800d32e <USBD_LL_GetRxDataSize>
 800837a:	4602      	mov	r2, r0
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008388:	687a      	ldr	r2, [r7, #4]
 800838a:	33b0      	adds	r3, #176	; 0xb0
 800838c:	009b      	lsls	r3, r3, #2
 800838e:	4413      	add	r3, r2
 8008390:	685b      	ldr	r3, [r3, #4]
 8008392:	68db      	ldr	r3, [r3, #12]
 8008394:	68fa      	ldr	r2, [r7, #12]
 8008396:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800839a:	68fa      	ldr	r2, [r7, #12]
 800839c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80083a0:	4611      	mov	r1, r2
 80083a2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80083a4:	2300      	movs	r3, #0
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	3710      	adds	r7, #16
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}

080083ae <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80083ae:	b580      	push	{r7, lr}
 80083b0:	b084      	sub	sp, #16
 80083b2:	af00      	add	r7, sp, #0
 80083b4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	32b0      	adds	r2, #176	; 0xb0
 80083c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083c4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d101      	bne.n	80083d0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80083cc:	2303      	movs	r3, #3
 80083ce:	e025      	b.n	800841c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80083d6:	687a      	ldr	r2, [r7, #4]
 80083d8:	33b0      	adds	r3, #176	; 0xb0
 80083da:	009b      	lsls	r3, r3, #2
 80083dc:	4413      	add	r3, r2
 80083de:	685b      	ldr	r3, [r3, #4]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d01a      	beq.n	800841a <USBD_CDC_EP0_RxReady+0x6c>
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80083ea:	2bff      	cmp	r3, #255	; 0xff
 80083ec:	d015      	beq.n	800841a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80083f4:	687a      	ldr	r2, [r7, #4]
 80083f6:	33b0      	adds	r3, #176	; 0xb0
 80083f8:	009b      	lsls	r3, r3, #2
 80083fa:	4413      	add	r3, r2
 80083fc:	685b      	ldr	r3, [r3, #4]
 80083fe:	689b      	ldr	r3, [r3, #8]
 8008400:	68fa      	ldr	r2, [r7, #12]
 8008402:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8008406:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008408:	68fa      	ldr	r2, [r7, #12]
 800840a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800840e:	b292      	uxth	r2, r2
 8008410:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	22ff      	movs	r2, #255	; 0xff
 8008416:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800841a:	2300      	movs	r3, #0
}
 800841c:	4618      	mov	r0, r3
 800841e:	3710      	adds	r7, #16
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}

08008424 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b086      	sub	sp, #24
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800842c:	2182      	movs	r1, #130	; 0x82
 800842e:	4818      	ldr	r0, [pc, #96]	; (8008490 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008430:	f000 fd4f 	bl	8008ed2 <USBD_GetEpDesc>
 8008434:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008436:	2101      	movs	r1, #1
 8008438:	4815      	ldr	r0, [pc, #84]	; (8008490 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800843a:	f000 fd4a 	bl	8008ed2 <USBD_GetEpDesc>
 800843e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008440:	2181      	movs	r1, #129	; 0x81
 8008442:	4813      	ldr	r0, [pc, #76]	; (8008490 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008444:	f000 fd45 	bl	8008ed2 <USBD_GetEpDesc>
 8008448:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800844a:	697b      	ldr	r3, [r7, #20]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d002      	beq.n	8008456 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008450:	697b      	ldr	r3, [r7, #20]
 8008452:	2210      	movs	r2, #16
 8008454:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008456:	693b      	ldr	r3, [r7, #16]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d006      	beq.n	800846a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800845c:	693b      	ldr	r3, [r7, #16]
 800845e:	2200      	movs	r2, #0
 8008460:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008464:	711a      	strb	r2, [r3, #4]
 8008466:	2200      	movs	r2, #0
 8008468:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d006      	beq.n	800847e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	2200      	movs	r2, #0
 8008474:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008478:	711a      	strb	r2, [r3, #4]
 800847a:	2200      	movs	r2, #0
 800847c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2243      	movs	r2, #67	; 0x43
 8008482:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008484:	4b02      	ldr	r3, [pc, #8]	; (8008490 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008486:	4618      	mov	r0, r3
 8008488:	3718      	adds	r7, #24
 800848a:	46bd      	mov	sp, r7
 800848c:	bd80      	pop	{r7, pc}
 800848e:	bf00      	nop
 8008490:	20000050 	.word	0x20000050

08008494 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b086      	sub	sp, #24
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800849c:	2182      	movs	r1, #130	; 0x82
 800849e:	4818      	ldr	r0, [pc, #96]	; (8008500 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80084a0:	f000 fd17 	bl	8008ed2 <USBD_GetEpDesc>
 80084a4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80084a6:	2101      	movs	r1, #1
 80084a8:	4815      	ldr	r0, [pc, #84]	; (8008500 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80084aa:	f000 fd12 	bl	8008ed2 <USBD_GetEpDesc>
 80084ae:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80084b0:	2181      	movs	r1, #129	; 0x81
 80084b2:	4813      	ldr	r0, [pc, #76]	; (8008500 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80084b4:	f000 fd0d 	bl	8008ed2 <USBD_GetEpDesc>
 80084b8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80084ba:	697b      	ldr	r3, [r7, #20]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d002      	beq.n	80084c6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80084c0:	697b      	ldr	r3, [r7, #20]
 80084c2:	2210      	movs	r2, #16
 80084c4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80084c6:	693b      	ldr	r3, [r7, #16]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d006      	beq.n	80084da <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80084cc:	693b      	ldr	r3, [r7, #16]
 80084ce:	2200      	movs	r2, #0
 80084d0:	711a      	strb	r2, [r3, #4]
 80084d2:	2200      	movs	r2, #0
 80084d4:	f042 0202 	orr.w	r2, r2, #2
 80084d8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d006      	beq.n	80084ee <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	2200      	movs	r2, #0
 80084e4:	711a      	strb	r2, [r3, #4]
 80084e6:	2200      	movs	r2, #0
 80084e8:	f042 0202 	orr.w	r2, r2, #2
 80084ec:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2243      	movs	r2, #67	; 0x43
 80084f2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80084f4:	4b02      	ldr	r3, [pc, #8]	; (8008500 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3718      	adds	r7, #24
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}
 80084fe:	bf00      	nop
 8008500:	20000050 	.word	0x20000050

08008504 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b086      	sub	sp, #24
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800850c:	2182      	movs	r1, #130	; 0x82
 800850e:	4818      	ldr	r0, [pc, #96]	; (8008570 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008510:	f000 fcdf 	bl	8008ed2 <USBD_GetEpDesc>
 8008514:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008516:	2101      	movs	r1, #1
 8008518:	4815      	ldr	r0, [pc, #84]	; (8008570 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800851a:	f000 fcda 	bl	8008ed2 <USBD_GetEpDesc>
 800851e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008520:	2181      	movs	r1, #129	; 0x81
 8008522:	4813      	ldr	r0, [pc, #76]	; (8008570 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008524:	f000 fcd5 	bl	8008ed2 <USBD_GetEpDesc>
 8008528:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800852a:	697b      	ldr	r3, [r7, #20]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d002      	beq.n	8008536 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008530:	697b      	ldr	r3, [r7, #20]
 8008532:	2210      	movs	r2, #16
 8008534:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008536:	693b      	ldr	r3, [r7, #16]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d006      	beq.n	800854a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800853c:	693b      	ldr	r3, [r7, #16]
 800853e:	2200      	movs	r2, #0
 8008540:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008544:	711a      	strb	r2, [r3, #4]
 8008546:	2200      	movs	r2, #0
 8008548:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d006      	beq.n	800855e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	2200      	movs	r2, #0
 8008554:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008558:	711a      	strb	r2, [r3, #4]
 800855a:	2200      	movs	r2, #0
 800855c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2243      	movs	r2, #67	; 0x43
 8008562:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008564:	4b02      	ldr	r3, [pc, #8]	; (8008570 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008566:	4618      	mov	r0, r3
 8008568:	3718      	adds	r7, #24
 800856a:	46bd      	mov	sp, r7
 800856c:	bd80      	pop	{r7, pc}
 800856e:	bf00      	nop
 8008570:	20000050 	.word	0x20000050

08008574 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008574:	b480      	push	{r7}
 8008576:	b083      	sub	sp, #12
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	220a      	movs	r2, #10
 8008580:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008582:	4b03      	ldr	r3, [pc, #12]	; (8008590 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008584:	4618      	mov	r0, r3
 8008586:	370c      	adds	r7, #12
 8008588:	46bd      	mov	sp, r7
 800858a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858e:	4770      	bx	lr
 8008590:	2000000c 	.word	0x2000000c

08008594 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008594:	b480      	push	{r7}
 8008596:	b083      	sub	sp, #12
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
 800859c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d101      	bne.n	80085a8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80085a4:	2303      	movs	r3, #3
 80085a6:	e009      	b.n	80085bc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80085ae:	687a      	ldr	r2, [r7, #4]
 80085b0:	33b0      	adds	r3, #176	; 0xb0
 80085b2:	009b      	lsls	r3, r3, #2
 80085b4:	4413      	add	r3, r2
 80085b6:	683a      	ldr	r2, [r7, #0]
 80085b8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80085ba:	2300      	movs	r3, #0
}
 80085bc:	4618      	mov	r0, r3
 80085be:	370c      	adds	r7, #12
 80085c0:	46bd      	mov	sp, r7
 80085c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c6:	4770      	bx	lr

080085c8 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80085c8:	b480      	push	{r7}
 80085ca:	b087      	sub	sp, #28
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	60f8      	str	r0, [r7, #12]
 80085d0:	60b9      	str	r1, [r7, #8]
 80085d2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	32b0      	adds	r2, #176	; 0xb0
 80085de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085e2:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80085e4:	697b      	ldr	r3, [r7, #20]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d101      	bne.n	80085ee <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80085ea:	2303      	movs	r3, #3
 80085ec:	e008      	b.n	8008600 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80085ee:	697b      	ldr	r3, [r7, #20]
 80085f0:	68ba      	ldr	r2, [r7, #8]
 80085f2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80085f6:	697b      	ldr	r3, [r7, #20]
 80085f8:	687a      	ldr	r2, [r7, #4]
 80085fa:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80085fe:	2300      	movs	r3, #0
}
 8008600:	4618      	mov	r0, r3
 8008602:	371c      	adds	r7, #28
 8008604:	46bd      	mov	sp, r7
 8008606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860a:	4770      	bx	lr

0800860c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800860c:	b480      	push	{r7}
 800860e:	b085      	sub	sp, #20
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
 8008614:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	32b0      	adds	r2, #176	; 0xb0
 8008620:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008624:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d101      	bne.n	8008630 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800862c:	2303      	movs	r3, #3
 800862e:	e004      	b.n	800863a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	683a      	ldr	r2, [r7, #0]
 8008634:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008638:	2300      	movs	r3, #0
}
 800863a:	4618      	mov	r0, r3
 800863c:	3714      	adds	r7, #20
 800863e:	46bd      	mov	sp, r7
 8008640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008644:	4770      	bx	lr
	...

08008648 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b084      	sub	sp, #16
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	32b0      	adds	r2, #176	; 0xb0
 800865a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800865e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008660:	2301      	movs	r3, #1
 8008662:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	32b0      	adds	r2, #176	; 0xb0
 800866e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d101      	bne.n	800867a <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008676:	2303      	movs	r3, #3
 8008678:	e025      	b.n	80086c6 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800867a:	68bb      	ldr	r3, [r7, #8]
 800867c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008680:	2b00      	cmp	r3, #0
 8008682:	d11f      	bne.n	80086c4 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	2201      	movs	r2, #1
 8008688:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800868c:	4b10      	ldr	r3, [pc, #64]	; (80086d0 <USBD_CDC_TransmitPacket+0x88>)
 800868e:	781b      	ldrb	r3, [r3, #0]
 8008690:	f003 020f 	and.w	r2, r3, #15
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	4613      	mov	r3, r2
 800869e:	009b      	lsls	r3, r3, #2
 80086a0:	4413      	add	r3, r2
 80086a2:	009b      	lsls	r3, r3, #2
 80086a4:	4403      	add	r3, r0
 80086a6:	3318      	adds	r3, #24
 80086a8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80086aa:	4b09      	ldr	r3, [pc, #36]	; (80086d0 <USBD_CDC_TransmitPacket+0x88>)
 80086ac:	7819      	ldrb	r1, [r3, #0]
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f004 fdf5 	bl	800d2aa <USBD_LL_Transmit>

    ret = USBD_OK;
 80086c0:	2300      	movs	r3, #0
 80086c2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80086c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80086c6:	4618      	mov	r0, r3
 80086c8:	3710      	adds	r7, #16
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}
 80086ce:	bf00      	nop
 80086d0:	20000093 	.word	0x20000093

080086d4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b084      	sub	sp, #16
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	32b0      	adds	r2, #176	; 0xb0
 80086e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086ea:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	32b0      	adds	r2, #176	; 0xb0
 80086f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d101      	bne.n	8008702 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80086fe:	2303      	movs	r3, #3
 8008700:	e018      	b.n	8008734 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	7c1b      	ldrb	r3, [r3, #16]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d10a      	bne.n	8008720 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800870a:	4b0c      	ldr	r3, [pc, #48]	; (800873c <USBD_CDC_ReceivePacket+0x68>)
 800870c:	7819      	ldrb	r1, [r3, #0]
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008714:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f004 fde7 	bl	800d2ec <USBD_LL_PrepareReceive>
 800871e:	e008      	b.n	8008732 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008720:	4b06      	ldr	r3, [pc, #24]	; (800873c <USBD_CDC_ReceivePacket+0x68>)
 8008722:	7819      	ldrb	r1, [r3, #0]
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800872a:	2340      	movs	r3, #64	; 0x40
 800872c:	6878      	ldr	r0, [r7, #4]
 800872e:	f004 fddd 	bl	800d2ec <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008732:	2300      	movs	r3, #0
}
 8008734:	4618      	mov	r0, r3
 8008736:	3710      	adds	r7, #16
 8008738:	46bd      	mov	sp, r7
 800873a:	bd80      	pop	{r7, pc}
 800873c:	20000094 	.word	0x20000094

08008740 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b086      	sub	sp, #24
 8008744:	af00      	add	r7, sp, #0
 8008746:	60f8      	str	r0, [r7, #12]
 8008748:	60b9      	str	r1, [r7, #8]
 800874a:	4613      	mov	r3, r2
 800874c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d101      	bne.n	8008758 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008754:	2303      	movs	r3, #3
 8008756:	e01f      	b.n	8008798 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	2200      	movs	r2, #0
 800875c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	2200      	movs	r2, #0
 8008764:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	2200      	movs	r2, #0
 800876c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d003      	beq.n	800877e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	68ba      	ldr	r2, [r7, #8]
 800877a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	2201      	movs	r2, #1
 8008782:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	79fa      	ldrb	r2, [r7, #7]
 800878a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800878c:	68f8      	ldr	r0, [r7, #12]
 800878e:	f004 fc57 	bl	800d040 <USBD_LL_Init>
 8008792:	4603      	mov	r3, r0
 8008794:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008796:	7dfb      	ldrb	r3, [r7, #23]
}
 8008798:	4618      	mov	r0, r3
 800879a:	3718      	adds	r7, #24
 800879c:	46bd      	mov	sp, r7
 800879e:	bd80      	pop	{r7, pc}

080087a0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b084      	sub	sp, #16
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
 80087a8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80087aa:	2300      	movs	r3, #0
 80087ac:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d101      	bne.n	80087b8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80087b4:	2303      	movs	r3, #3
 80087b6:	e025      	b.n	8008804 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	683a      	ldr	r2, [r7, #0]
 80087bc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	32ae      	adds	r2, #174	; 0xae
 80087ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d00f      	beq.n	80087f4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	32ae      	adds	r2, #174	; 0xae
 80087de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087e4:	f107 020e 	add.w	r2, r7, #14
 80087e8:	4610      	mov	r0, r2
 80087ea:	4798      	blx	r3
 80087ec:	4602      	mov	r2, r0
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80087fa:	1c5a      	adds	r2, r3, #1
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8008802:	2300      	movs	r3, #0
}
 8008804:	4618      	mov	r0, r3
 8008806:	3710      	adds	r7, #16
 8008808:	46bd      	mov	sp, r7
 800880a:	bd80      	pop	{r7, pc}

0800880c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b082      	sub	sp, #8
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008814:	6878      	ldr	r0, [r7, #4]
 8008816:	f004 fc5f 	bl	800d0d8 <USBD_LL_Start>
 800881a:	4603      	mov	r3, r0
}
 800881c:	4618      	mov	r0, r3
 800881e:	3708      	adds	r7, #8
 8008820:	46bd      	mov	sp, r7
 8008822:	bd80      	pop	{r7, pc}

08008824 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008824:	b480      	push	{r7}
 8008826:	b083      	sub	sp, #12
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800882c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800882e:	4618      	mov	r0, r3
 8008830:	370c      	adds	r7, #12
 8008832:	46bd      	mov	sp, r7
 8008834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008838:	4770      	bx	lr

0800883a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800883a:	b580      	push	{r7, lr}
 800883c:	b084      	sub	sp, #16
 800883e:	af00      	add	r7, sp, #0
 8008840:	6078      	str	r0, [r7, #4]
 8008842:	460b      	mov	r3, r1
 8008844:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008846:	2300      	movs	r3, #0
 8008848:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008850:	2b00      	cmp	r3, #0
 8008852:	d009      	beq.n	8008868 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	78fa      	ldrb	r2, [r7, #3]
 800885e:	4611      	mov	r1, r2
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	4798      	blx	r3
 8008864:	4603      	mov	r3, r0
 8008866:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008868:	7bfb      	ldrb	r3, [r7, #15]
}
 800886a:	4618      	mov	r0, r3
 800886c:	3710      	adds	r7, #16
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}

08008872 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008872:	b580      	push	{r7, lr}
 8008874:	b084      	sub	sp, #16
 8008876:	af00      	add	r7, sp, #0
 8008878:	6078      	str	r0, [r7, #4]
 800887a:	460b      	mov	r3, r1
 800887c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800887e:	2300      	movs	r3, #0
 8008880:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008888:	685b      	ldr	r3, [r3, #4]
 800888a:	78fa      	ldrb	r2, [r7, #3]
 800888c:	4611      	mov	r1, r2
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	4798      	blx	r3
 8008892:	4603      	mov	r3, r0
 8008894:	2b00      	cmp	r3, #0
 8008896:	d001      	beq.n	800889c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008898:	2303      	movs	r3, #3
 800889a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800889c:	7bfb      	ldrb	r3, [r7, #15]
}
 800889e:	4618      	mov	r0, r3
 80088a0:	3710      	adds	r7, #16
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd80      	pop	{r7, pc}

080088a6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80088a6:	b580      	push	{r7, lr}
 80088a8:	b084      	sub	sp, #16
 80088aa:	af00      	add	r7, sp, #0
 80088ac:	6078      	str	r0, [r7, #4]
 80088ae:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80088b6:	6839      	ldr	r1, [r7, #0]
 80088b8:	4618      	mov	r0, r3
 80088ba:	f001 f908 	bl	8009ace <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2201      	movs	r2, #1
 80088c2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80088cc:	461a      	mov	r2, r3
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80088da:	f003 031f 	and.w	r3, r3, #31
 80088de:	2b02      	cmp	r3, #2
 80088e0:	d01a      	beq.n	8008918 <USBD_LL_SetupStage+0x72>
 80088e2:	2b02      	cmp	r3, #2
 80088e4:	d822      	bhi.n	800892c <USBD_LL_SetupStage+0x86>
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d002      	beq.n	80088f0 <USBD_LL_SetupStage+0x4a>
 80088ea:	2b01      	cmp	r3, #1
 80088ec:	d00a      	beq.n	8008904 <USBD_LL_SetupStage+0x5e>
 80088ee:	e01d      	b.n	800892c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80088f6:	4619      	mov	r1, r3
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f000 fb5f 	bl	8008fbc <USBD_StdDevReq>
 80088fe:	4603      	mov	r3, r0
 8008900:	73fb      	strb	r3, [r7, #15]
      break;
 8008902:	e020      	b.n	8008946 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800890a:	4619      	mov	r1, r3
 800890c:	6878      	ldr	r0, [r7, #4]
 800890e:	f000 fbc7 	bl	80090a0 <USBD_StdItfReq>
 8008912:	4603      	mov	r3, r0
 8008914:	73fb      	strb	r3, [r7, #15]
      break;
 8008916:	e016      	b.n	8008946 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800891e:	4619      	mov	r1, r3
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f000 fc29 	bl	8009178 <USBD_StdEPReq>
 8008926:	4603      	mov	r3, r0
 8008928:	73fb      	strb	r3, [r7, #15]
      break;
 800892a:	e00c      	b.n	8008946 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008932:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008936:	b2db      	uxtb	r3, r3
 8008938:	4619      	mov	r1, r3
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f004 fc2c 	bl	800d198 <USBD_LL_StallEP>
 8008940:	4603      	mov	r3, r0
 8008942:	73fb      	strb	r3, [r7, #15]
      break;
 8008944:	bf00      	nop
  }

  return ret;
 8008946:	7bfb      	ldrb	r3, [r7, #15]
}
 8008948:	4618      	mov	r0, r3
 800894a:	3710      	adds	r7, #16
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}

08008950 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b086      	sub	sp, #24
 8008954:	af00      	add	r7, sp, #0
 8008956:	60f8      	str	r0, [r7, #12]
 8008958:	460b      	mov	r3, r1
 800895a:	607a      	str	r2, [r7, #4]
 800895c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800895e:	2300      	movs	r3, #0
 8008960:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008962:	7afb      	ldrb	r3, [r7, #11]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d16e      	bne.n	8008a46 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800896e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008976:	2b03      	cmp	r3, #3
 8008978:	f040 8098 	bne.w	8008aac <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800897c:	693b      	ldr	r3, [r7, #16]
 800897e:	689a      	ldr	r2, [r3, #8]
 8008980:	693b      	ldr	r3, [r7, #16]
 8008982:	68db      	ldr	r3, [r3, #12]
 8008984:	429a      	cmp	r2, r3
 8008986:	d913      	bls.n	80089b0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008988:	693b      	ldr	r3, [r7, #16]
 800898a:	689a      	ldr	r2, [r3, #8]
 800898c:	693b      	ldr	r3, [r7, #16]
 800898e:	68db      	ldr	r3, [r3, #12]
 8008990:	1ad2      	subs	r2, r2, r3
 8008992:	693b      	ldr	r3, [r7, #16]
 8008994:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008996:	693b      	ldr	r3, [r7, #16]
 8008998:	68da      	ldr	r2, [r3, #12]
 800899a:	693b      	ldr	r3, [r7, #16]
 800899c:	689b      	ldr	r3, [r3, #8]
 800899e:	4293      	cmp	r3, r2
 80089a0:	bf28      	it	cs
 80089a2:	4613      	movcs	r3, r2
 80089a4:	461a      	mov	r2, r3
 80089a6:	6879      	ldr	r1, [r7, #4]
 80089a8:	68f8      	ldr	r0, [r7, #12]
 80089aa:	f001 f984 	bl	8009cb6 <USBD_CtlContinueRx>
 80089ae:	e07d      	b.n	8008aac <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80089b6:	f003 031f 	and.w	r3, r3, #31
 80089ba:	2b02      	cmp	r3, #2
 80089bc:	d014      	beq.n	80089e8 <USBD_LL_DataOutStage+0x98>
 80089be:	2b02      	cmp	r3, #2
 80089c0:	d81d      	bhi.n	80089fe <USBD_LL_DataOutStage+0xae>
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d002      	beq.n	80089cc <USBD_LL_DataOutStage+0x7c>
 80089c6:	2b01      	cmp	r3, #1
 80089c8:	d003      	beq.n	80089d2 <USBD_LL_DataOutStage+0x82>
 80089ca:	e018      	b.n	80089fe <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80089cc:	2300      	movs	r3, #0
 80089ce:	75bb      	strb	r3, [r7, #22]
            break;
 80089d0:	e018      	b.n	8008a04 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80089d8:	b2db      	uxtb	r3, r3
 80089da:	4619      	mov	r1, r3
 80089dc:	68f8      	ldr	r0, [r7, #12]
 80089de:	f000 fa5e 	bl	8008e9e <USBD_CoreFindIF>
 80089e2:	4603      	mov	r3, r0
 80089e4:	75bb      	strb	r3, [r7, #22]
            break;
 80089e6:	e00d      	b.n	8008a04 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80089ee:	b2db      	uxtb	r3, r3
 80089f0:	4619      	mov	r1, r3
 80089f2:	68f8      	ldr	r0, [r7, #12]
 80089f4:	f000 fa60 	bl	8008eb8 <USBD_CoreFindEP>
 80089f8:	4603      	mov	r3, r0
 80089fa:	75bb      	strb	r3, [r7, #22]
            break;
 80089fc:	e002      	b.n	8008a04 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80089fe:	2300      	movs	r3, #0
 8008a00:	75bb      	strb	r3, [r7, #22]
            break;
 8008a02:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008a04:	7dbb      	ldrb	r3, [r7, #22]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d119      	bne.n	8008a3e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a10:	b2db      	uxtb	r3, r3
 8008a12:	2b03      	cmp	r3, #3
 8008a14:	d113      	bne.n	8008a3e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008a16:	7dba      	ldrb	r2, [r7, #22]
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	32ae      	adds	r2, #174	; 0xae
 8008a1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a20:	691b      	ldr	r3, [r3, #16]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d00b      	beq.n	8008a3e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008a26:	7dba      	ldrb	r2, [r7, #22]
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008a2e:	7dba      	ldrb	r2, [r7, #22]
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	32ae      	adds	r2, #174	; 0xae
 8008a34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a38:	691b      	ldr	r3, [r3, #16]
 8008a3a:	68f8      	ldr	r0, [r7, #12]
 8008a3c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008a3e:	68f8      	ldr	r0, [r7, #12]
 8008a40:	f001 f94a 	bl	8009cd8 <USBD_CtlSendStatus>
 8008a44:	e032      	b.n	8008aac <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008a46:	7afb      	ldrb	r3, [r7, #11]
 8008a48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a4c:	b2db      	uxtb	r3, r3
 8008a4e:	4619      	mov	r1, r3
 8008a50:	68f8      	ldr	r0, [r7, #12]
 8008a52:	f000 fa31 	bl	8008eb8 <USBD_CoreFindEP>
 8008a56:	4603      	mov	r3, r0
 8008a58:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008a5a:	7dbb      	ldrb	r3, [r7, #22]
 8008a5c:	2bff      	cmp	r3, #255	; 0xff
 8008a5e:	d025      	beq.n	8008aac <USBD_LL_DataOutStage+0x15c>
 8008a60:	7dbb      	ldrb	r3, [r7, #22]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d122      	bne.n	8008aac <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a6c:	b2db      	uxtb	r3, r3
 8008a6e:	2b03      	cmp	r3, #3
 8008a70:	d117      	bne.n	8008aa2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008a72:	7dba      	ldrb	r2, [r7, #22]
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	32ae      	adds	r2, #174	; 0xae
 8008a78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a7c:	699b      	ldr	r3, [r3, #24]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d00f      	beq.n	8008aa2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008a82:	7dba      	ldrb	r2, [r7, #22]
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008a8a:	7dba      	ldrb	r2, [r7, #22]
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	32ae      	adds	r2, #174	; 0xae
 8008a90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a94:	699b      	ldr	r3, [r3, #24]
 8008a96:	7afa      	ldrb	r2, [r7, #11]
 8008a98:	4611      	mov	r1, r2
 8008a9a:	68f8      	ldr	r0, [r7, #12]
 8008a9c:	4798      	blx	r3
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008aa2:	7dfb      	ldrb	r3, [r7, #23]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d001      	beq.n	8008aac <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008aa8:	7dfb      	ldrb	r3, [r7, #23]
 8008aaa:	e000      	b.n	8008aae <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008aac:	2300      	movs	r3, #0
}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	3718      	adds	r7, #24
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bd80      	pop	{r7, pc}

08008ab6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008ab6:	b580      	push	{r7, lr}
 8008ab8:	b086      	sub	sp, #24
 8008aba:	af00      	add	r7, sp, #0
 8008abc:	60f8      	str	r0, [r7, #12]
 8008abe:	460b      	mov	r3, r1
 8008ac0:	607a      	str	r2, [r7, #4]
 8008ac2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008ac4:	7afb      	ldrb	r3, [r7, #11]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d16f      	bne.n	8008baa <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	3314      	adds	r3, #20
 8008ace:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008ad6:	2b02      	cmp	r3, #2
 8008ad8:	d15a      	bne.n	8008b90 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008ada:	693b      	ldr	r3, [r7, #16]
 8008adc:	689a      	ldr	r2, [r3, #8]
 8008ade:	693b      	ldr	r3, [r7, #16]
 8008ae0:	68db      	ldr	r3, [r3, #12]
 8008ae2:	429a      	cmp	r2, r3
 8008ae4:	d914      	bls.n	8008b10 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008ae6:	693b      	ldr	r3, [r7, #16]
 8008ae8:	689a      	ldr	r2, [r3, #8]
 8008aea:	693b      	ldr	r3, [r7, #16]
 8008aec:	68db      	ldr	r3, [r3, #12]
 8008aee:	1ad2      	subs	r2, r2, r3
 8008af0:	693b      	ldr	r3, [r7, #16]
 8008af2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008af4:	693b      	ldr	r3, [r7, #16]
 8008af6:	689b      	ldr	r3, [r3, #8]
 8008af8:	461a      	mov	r2, r3
 8008afa:	6879      	ldr	r1, [r7, #4]
 8008afc:	68f8      	ldr	r0, [r7, #12]
 8008afe:	f001 f8ac 	bl	8009c5a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008b02:	2300      	movs	r3, #0
 8008b04:	2200      	movs	r2, #0
 8008b06:	2100      	movs	r1, #0
 8008b08:	68f8      	ldr	r0, [r7, #12]
 8008b0a:	f004 fbef 	bl	800d2ec <USBD_LL_PrepareReceive>
 8008b0e:	e03f      	b.n	8008b90 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008b10:	693b      	ldr	r3, [r7, #16]
 8008b12:	68da      	ldr	r2, [r3, #12]
 8008b14:	693b      	ldr	r3, [r7, #16]
 8008b16:	689b      	ldr	r3, [r3, #8]
 8008b18:	429a      	cmp	r2, r3
 8008b1a:	d11c      	bne.n	8008b56 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008b1c:	693b      	ldr	r3, [r7, #16]
 8008b1e:	685a      	ldr	r2, [r3, #4]
 8008b20:	693b      	ldr	r3, [r7, #16]
 8008b22:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008b24:	429a      	cmp	r2, r3
 8008b26:	d316      	bcc.n	8008b56 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008b28:	693b      	ldr	r3, [r7, #16]
 8008b2a:	685a      	ldr	r2, [r3, #4]
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008b32:	429a      	cmp	r2, r3
 8008b34:	d20f      	bcs.n	8008b56 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008b36:	2200      	movs	r2, #0
 8008b38:	2100      	movs	r1, #0
 8008b3a:	68f8      	ldr	r0, [r7, #12]
 8008b3c:	f001 f88d 	bl	8009c5a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	2200      	movs	r2, #0
 8008b44:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008b48:	2300      	movs	r3, #0
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	2100      	movs	r1, #0
 8008b4e:	68f8      	ldr	r0, [r7, #12]
 8008b50:	f004 fbcc 	bl	800d2ec <USBD_LL_PrepareReceive>
 8008b54:	e01c      	b.n	8008b90 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b5c:	b2db      	uxtb	r3, r3
 8008b5e:	2b03      	cmp	r3, #3
 8008b60:	d10f      	bne.n	8008b82 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b68:	68db      	ldr	r3, [r3, #12]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d009      	beq.n	8008b82 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	2200      	movs	r2, #0
 8008b72:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b7c:	68db      	ldr	r3, [r3, #12]
 8008b7e:	68f8      	ldr	r0, [r7, #12]
 8008b80:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008b82:	2180      	movs	r1, #128	; 0x80
 8008b84:	68f8      	ldr	r0, [r7, #12]
 8008b86:	f004 fb07 	bl	800d198 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008b8a:	68f8      	ldr	r0, [r7, #12]
 8008b8c:	f001 f8b7 	bl	8009cfe <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d03a      	beq.n	8008c10 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008b9a:	68f8      	ldr	r0, [r7, #12]
 8008b9c:	f7ff fe42 	bl	8008824 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008ba8:	e032      	b.n	8008c10 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008baa:	7afb      	ldrb	r3, [r7, #11]
 8008bac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008bb0:	b2db      	uxtb	r3, r3
 8008bb2:	4619      	mov	r1, r3
 8008bb4:	68f8      	ldr	r0, [r7, #12]
 8008bb6:	f000 f97f 	bl	8008eb8 <USBD_CoreFindEP>
 8008bba:	4603      	mov	r3, r0
 8008bbc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008bbe:	7dfb      	ldrb	r3, [r7, #23]
 8008bc0:	2bff      	cmp	r3, #255	; 0xff
 8008bc2:	d025      	beq.n	8008c10 <USBD_LL_DataInStage+0x15a>
 8008bc4:	7dfb      	ldrb	r3, [r7, #23]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d122      	bne.n	8008c10 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bd0:	b2db      	uxtb	r3, r3
 8008bd2:	2b03      	cmp	r3, #3
 8008bd4:	d11c      	bne.n	8008c10 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008bd6:	7dfa      	ldrb	r2, [r7, #23]
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	32ae      	adds	r2, #174	; 0xae
 8008bdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008be0:	695b      	ldr	r3, [r3, #20]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d014      	beq.n	8008c10 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008be6:	7dfa      	ldrb	r2, [r7, #23]
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008bee:	7dfa      	ldrb	r2, [r7, #23]
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	32ae      	adds	r2, #174	; 0xae
 8008bf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bf8:	695b      	ldr	r3, [r3, #20]
 8008bfa:	7afa      	ldrb	r2, [r7, #11]
 8008bfc:	4611      	mov	r1, r2
 8008bfe:	68f8      	ldr	r0, [r7, #12]
 8008c00:	4798      	blx	r3
 8008c02:	4603      	mov	r3, r0
 8008c04:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008c06:	7dbb      	ldrb	r3, [r7, #22]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d001      	beq.n	8008c10 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008c0c:	7dbb      	ldrb	r3, [r7, #22]
 8008c0e:	e000      	b.n	8008c12 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008c10:	2300      	movs	r3, #0
}
 8008c12:	4618      	mov	r0, r3
 8008c14:	3718      	adds	r7, #24
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bd80      	pop	{r7, pc}

08008c1a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008c1a:	b580      	push	{r7, lr}
 8008c1c:	b084      	sub	sp, #16
 8008c1e:	af00      	add	r7, sp, #0
 8008c20:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c22:	2300      	movs	r3, #0
 8008c24:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2201      	movs	r2, #1
 8008c2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2200      	movs	r2, #0
 8008c32:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2200      	movs	r2, #0
 8008c3a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2200      	movs	r2, #0
 8008c40:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2200      	movs	r2, #0
 8008c48:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d014      	beq.n	8008c80 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c5c:	685b      	ldr	r3, [r3, #4]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d00e      	beq.n	8008c80 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c68:	685b      	ldr	r3, [r3, #4]
 8008c6a:	687a      	ldr	r2, [r7, #4]
 8008c6c:	6852      	ldr	r2, [r2, #4]
 8008c6e:	b2d2      	uxtb	r2, r2
 8008c70:	4611      	mov	r1, r2
 8008c72:	6878      	ldr	r0, [r7, #4]
 8008c74:	4798      	blx	r3
 8008c76:	4603      	mov	r3, r0
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d001      	beq.n	8008c80 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008c7c:	2303      	movs	r3, #3
 8008c7e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008c80:	2340      	movs	r3, #64	; 0x40
 8008c82:	2200      	movs	r2, #0
 8008c84:	2100      	movs	r1, #0
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f004 fa41 	bl	800d10e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2201      	movs	r2, #1
 8008c90:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2240      	movs	r2, #64	; 0x40
 8008c98:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008c9c:	2340      	movs	r3, #64	; 0x40
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	2180      	movs	r1, #128	; 0x80
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f004 fa33 	bl	800d10e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2201      	movs	r2, #1
 8008cac:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2240      	movs	r2, #64	; 0x40
 8008cb2:	621a      	str	r2, [r3, #32]

  return ret;
 8008cb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	3710      	adds	r7, #16
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bd80      	pop	{r7, pc}

08008cbe <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008cbe:	b480      	push	{r7}
 8008cc0:	b083      	sub	sp, #12
 8008cc2:	af00      	add	r7, sp, #0
 8008cc4:	6078      	str	r0, [r7, #4]
 8008cc6:	460b      	mov	r3, r1
 8008cc8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	78fa      	ldrb	r2, [r7, #3]
 8008cce:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008cd0:	2300      	movs	r3, #0
}
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	370c      	adds	r7, #12
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cdc:	4770      	bx	lr

08008cde <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008cde:	b480      	push	{r7}
 8008ce0:	b083      	sub	sp, #12
 8008ce2:	af00      	add	r7, sp, #0
 8008ce4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cec:	b2da      	uxtb	r2, r3
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2204      	movs	r2, #4
 8008cf8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008cfc:	2300      	movs	r3, #0
}
 8008cfe:	4618      	mov	r0, r3
 8008d00:	370c      	adds	r7, #12
 8008d02:	46bd      	mov	sp, r7
 8008d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d08:	4770      	bx	lr

08008d0a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008d0a:	b480      	push	{r7}
 8008d0c:	b083      	sub	sp, #12
 8008d0e:	af00      	add	r7, sp, #0
 8008d10:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d18:	b2db      	uxtb	r3, r3
 8008d1a:	2b04      	cmp	r3, #4
 8008d1c:	d106      	bne.n	8008d2c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008d24:	b2da      	uxtb	r2, r3
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008d2c:	2300      	movs	r3, #0
}
 8008d2e:	4618      	mov	r0, r3
 8008d30:	370c      	adds	r7, #12
 8008d32:	46bd      	mov	sp, r7
 8008d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d38:	4770      	bx	lr

08008d3a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008d3a:	b580      	push	{r7, lr}
 8008d3c:	b082      	sub	sp, #8
 8008d3e:	af00      	add	r7, sp, #0
 8008d40:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d48:	b2db      	uxtb	r3, r3
 8008d4a:	2b03      	cmp	r3, #3
 8008d4c:	d110      	bne.n	8008d70 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d00b      	beq.n	8008d70 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d5e:	69db      	ldr	r3, [r3, #28]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d005      	beq.n	8008d70 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d6a:	69db      	ldr	r3, [r3, #28]
 8008d6c:	6878      	ldr	r0, [r7, #4]
 8008d6e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008d70:	2300      	movs	r3, #0
}
 8008d72:	4618      	mov	r0, r3
 8008d74:	3708      	adds	r7, #8
 8008d76:	46bd      	mov	sp, r7
 8008d78:	bd80      	pop	{r7, pc}

08008d7a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008d7a:	b580      	push	{r7, lr}
 8008d7c:	b082      	sub	sp, #8
 8008d7e:	af00      	add	r7, sp, #0
 8008d80:	6078      	str	r0, [r7, #4]
 8008d82:	460b      	mov	r3, r1
 8008d84:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	32ae      	adds	r2, #174	; 0xae
 8008d90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d101      	bne.n	8008d9c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008d98:	2303      	movs	r3, #3
 8008d9a:	e01c      	b.n	8008dd6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008da2:	b2db      	uxtb	r3, r3
 8008da4:	2b03      	cmp	r3, #3
 8008da6:	d115      	bne.n	8008dd4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	32ae      	adds	r2, #174	; 0xae
 8008db2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008db6:	6a1b      	ldr	r3, [r3, #32]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d00b      	beq.n	8008dd4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	32ae      	adds	r2, #174	; 0xae
 8008dc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dca:	6a1b      	ldr	r3, [r3, #32]
 8008dcc:	78fa      	ldrb	r2, [r7, #3]
 8008dce:	4611      	mov	r1, r2
 8008dd0:	6878      	ldr	r0, [r7, #4]
 8008dd2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008dd4:	2300      	movs	r3, #0
}
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	3708      	adds	r7, #8
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}

08008dde <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008dde:	b580      	push	{r7, lr}
 8008de0:	b082      	sub	sp, #8
 8008de2:	af00      	add	r7, sp, #0
 8008de4:	6078      	str	r0, [r7, #4]
 8008de6:	460b      	mov	r3, r1
 8008de8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	32ae      	adds	r2, #174	; 0xae
 8008df4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d101      	bne.n	8008e00 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008dfc:	2303      	movs	r3, #3
 8008dfe:	e01c      	b.n	8008e3a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e06:	b2db      	uxtb	r3, r3
 8008e08:	2b03      	cmp	r3, #3
 8008e0a:	d115      	bne.n	8008e38 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	32ae      	adds	r2, #174	; 0xae
 8008e16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d00b      	beq.n	8008e38 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	32ae      	adds	r2, #174	; 0xae
 8008e2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e30:	78fa      	ldrb	r2, [r7, #3]
 8008e32:	4611      	mov	r1, r2
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008e38:	2300      	movs	r3, #0
}
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	3708      	adds	r7, #8
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bd80      	pop	{r7, pc}

08008e42 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008e42:	b480      	push	{r7}
 8008e44:	b083      	sub	sp, #12
 8008e46:	af00      	add	r7, sp, #0
 8008e48:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008e4a:	2300      	movs	r3, #0
}
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	370c      	adds	r7, #12
 8008e50:	46bd      	mov	sp, r7
 8008e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e56:	4770      	bx	lr

08008e58 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b084      	sub	sp, #16
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008e60:	2300      	movs	r3, #0
 8008e62:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2201      	movs	r2, #1
 8008e68:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d00e      	beq.n	8008e94 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e7c:	685b      	ldr	r3, [r3, #4]
 8008e7e:	687a      	ldr	r2, [r7, #4]
 8008e80:	6852      	ldr	r2, [r2, #4]
 8008e82:	b2d2      	uxtb	r2, r2
 8008e84:	4611      	mov	r1, r2
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	4798      	blx	r3
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d001      	beq.n	8008e94 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008e90:	2303      	movs	r3, #3
 8008e92:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	3710      	adds	r7, #16
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}

08008e9e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008e9e:	b480      	push	{r7}
 8008ea0:	b083      	sub	sp, #12
 8008ea2:	af00      	add	r7, sp, #0
 8008ea4:	6078      	str	r0, [r7, #4]
 8008ea6:	460b      	mov	r3, r1
 8008ea8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008eaa:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008eac:	4618      	mov	r0, r3
 8008eae:	370c      	adds	r7, #12
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb6:	4770      	bx	lr

08008eb8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008eb8:	b480      	push	{r7}
 8008eba:	b083      	sub	sp, #12
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
 8008ec0:	460b      	mov	r3, r1
 8008ec2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008ec4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	370c      	adds	r7, #12
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed0:	4770      	bx	lr

08008ed2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008ed2:	b580      	push	{r7, lr}
 8008ed4:	b086      	sub	sp, #24
 8008ed6:	af00      	add	r7, sp, #0
 8008ed8:	6078      	str	r0, [r7, #4]
 8008eda:	460b      	mov	r3, r1
 8008edc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	885b      	ldrh	r3, [r3, #2]
 8008eee:	b29a      	uxth	r2, r3
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	781b      	ldrb	r3, [r3, #0]
 8008ef4:	b29b      	uxth	r3, r3
 8008ef6:	429a      	cmp	r2, r3
 8008ef8:	d920      	bls.n	8008f3c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	781b      	ldrb	r3, [r3, #0]
 8008efe:	b29b      	uxth	r3, r3
 8008f00:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008f02:	e013      	b.n	8008f2c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008f04:	f107 030a 	add.w	r3, r7, #10
 8008f08:	4619      	mov	r1, r3
 8008f0a:	6978      	ldr	r0, [r7, #20]
 8008f0c:	f000 f81b 	bl	8008f46 <USBD_GetNextDesc>
 8008f10:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008f12:	697b      	ldr	r3, [r7, #20]
 8008f14:	785b      	ldrb	r3, [r3, #1]
 8008f16:	2b05      	cmp	r3, #5
 8008f18:	d108      	bne.n	8008f2c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008f1a:	697b      	ldr	r3, [r7, #20]
 8008f1c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008f1e:	693b      	ldr	r3, [r7, #16]
 8008f20:	789b      	ldrb	r3, [r3, #2]
 8008f22:	78fa      	ldrb	r2, [r7, #3]
 8008f24:	429a      	cmp	r2, r3
 8008f26:	d008      	beq.n	8008f3a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008f28:	2300      	movs	r3, #0
 8008f2a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	885b      	ldrh	r3, [r3, #2]
 8008f30:	b29a      	uxth	r2, r3
 8008f32:	897b      	ldrh	r3, [r7, #10]
 8008f34:	429a      	cmp	r2, r3
 8008f36:	d8e5      	bhi.n	8008f04 <USBD_GetEpDesc+0x32>
 8008f38:	e000      	b.n	8008f3c <USBD_GetEpDesc+0x6a>
          break;
 8008f3a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008f3c:	693b      	ldr	r3, [r7, #16]
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	3718      	adds	r7, #24
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}

08008f46 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008f46:	b480      	push	{r7}
 8008f48:	b085      	sub	sp, #20
 8008f4a:	af00      	add	r7, sp, #0
 8008f4c:	6078      	str	r0, [r7, #4]
 8008f4e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	881a      	ldrh	r2, [r3, #0]
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	781b      	ldrb	r3, [r3, #0]
 8008f5c:	b29b      	uxth	r3, r3
 8008f5e:	4413      	add	r3, r2
 8008f60:	b29a      	uxth	r2, r3
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	781b      	ldrb	r3, [r3, #0]
 8008f6a:	461a      	mov	r2, r3
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	4413      	add	r3, r2
 8008f70:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008f72:	68fb      	ldr	r3, [r7, #12]
}
 8008f74:	4618      	mov	r0, r3
 8008f76:	3714      	adds	r7, #20
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7e:	4770      	bx	lr

08008f80 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008f80:	b480      	push	{r7}
 8008f82:	b087      	sub	sp, #28
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008f8c:	697b      	ldr	r3, [r7, #20]
 8008f8e:	781b      	ldrb	r3, [r3, #0]
 8008f90:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008f92:	697b      	ldr	r3, [r7, #20]
 8008f94:	3301      	adds	r3, #1
 8008f96:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008f98:	697b      	ldr	r3, [r7, #20]
 8008f9a:	781b      	ldrb	r3, [r3, #0]
 8008f9c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008f9e:	8a3b      	ldrh	r3, [r7, #16]
 8008fa0:	021b      	lsls	r3, r3, #8
 8008fa2:	b21a      	sxth	r2, r3
 8008fa4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008fa8:	4313      	orrs	r3, r2
 8008faa:	b21b      	sxth	r3, r3
 8008fac:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008fae:	89fb      	ldrh	r3, [r7, #14]
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	371c      	adds	r7, #28
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fba:	4770      	bx	lr

08008fbc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b084      	sub	sp, #16
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
 8008fc4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	781b      	ldrb	r3, [r3, #0]
 8008fce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008fd2:	2b40      	cmp	r3, #64	; 0x40
 8008fd4:	d005      	beq.n	8008fe2 <USBD_StdDevReq+0x26>
 8008fd6:	2b40      	cmp	r3, #64	; 0x40
 8008fd8:	d857      	bhi.n	800908a <USBD_StdDevReq+0xce>
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d00f      	beq.n	8008ffe <USBD_StdDevReq+0x42>
 8008fde:	2b20      	cmp	r3, #32
 8008fe0:	d153      	bne.n	800908a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	32ae      	adds	r2, #174	; 0xae
 8008fec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ff0:	689b      	ldr	r3, [r3, #8]
 8008ff2:	6839      	ldr	r1, [r7, #0]
 8008ff4:	6878      	ldr	r0, [r7, #4]
 8008ff6:	4798      	blx	r3
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	73fb      	strb	r3, [r7, #15]
      break;
 8008ffc:	e04a      	b.n	8009094 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	785b      	ldrb	r3, [r3, #1]
 8009002:	2b09      	cmp	r3, #9
 8009004:	d83b      	bhi.n	800907e <USBD_StdDevReq+0xc2>
 8009006:	a201      	add	r2, pc, #4	; (adr r2, 800900c <USBD_StdDevReq+0x50>)
 8009008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800900c:	08009061 	.word	0x08009061
 8009010:	08009075 	.word	0x08009075
 8009014:	0800907f 	.word	0x0800907f
 8009018:	0800906b 	.word	0x0800906b
 800901c:	0800907f 	.word	0x0800907f
 8009020:	0800903f 	.word	0x0800903f
 8009024:	08009035 	.word	0x08009035
 8009028:	0800907f 	.word	0x0800907f
 800902c:	08009057 	.word	0x08009057
 8009030:	08009049 	.word	0x08009049
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009034:	6839      	ldr	r1, [r7, #0]
 8009036:	6878      	ldr	r0, [r7, #4]
 8009038:	f000 fa3c 	bl	80094b4 <USBD_GetDescriptor>
          break;
 800903c:	e024      	b.n	8009088 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800903e:	6839      	ldr	r1, [r7, #0]
 8009040:	6878      	ldr	r0, [r7, #4]
 8009042:	f000 fba1 	bl	8009788 <USBD_SetAddress>
          break;
 8009046:	e01f      	b.n	8009088 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009048:	6839      	ldr	r1, [r7, #0]
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f000 fbe0 	bl	8009810 <USBD_SetConfig>
 8009050:	4603      	mov	r3, r0
 8009052:	73fb      	strb	r3, [r7, #15]
          break;
 8009054:	e018      	b.n	8009088 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009056:	6839      	ldr	r1, [r7, #0]
 8009058:	6878      	ldr	r0, [r7, #4]
 800905a:	f000 fc83 	bl	8009964 <USBD_GetConfig>
          break;
 800905e:	e013      	b.n	8009088 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009060:	6839      	ldr	r1, [r7, #0]
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f000 fcb4 	bl	80099d0 <USBD_GetStatus>
          break;
 8009068:	e00e      	b.n	8009088 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800906a:	6839      	ldr	r1, [r7, #0]
 800906c:	6878      	ldr	r0, [r7, #4]
 800906e:	f000 fce3 	bl	8009a38 <USBD_SetFeature>
          break;
 8009072:	e009      	b.n	8009088 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009074:	6839      	ldr	r1, [r7, #0]
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f000 fd07 	bl	8009a8a <USBD_ClrFeature>
          break;
 800907c:	e004      	b.n	8009088 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800907e:	6839      	ldr	r1, [r7, #0]
 8009080:	6878      	ldr	r0, [r7, #4]
 8009082:	f000 fd5e 	bl	8009b42 <USBD_CtlError>
          break;
 8009086:	bf00      	nop
      }
      break;
 8009088:	e004      	b.n	8009094 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800908a:	6839      	ldr	r1, [r7, #0]
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f000 fd58 	bl	8009b42 <USBD_CtlError>
      break;
 8009092:	bf00      	nop
  }

  return ret;
 8009094:	7bfb      	ldrb	r3, [r7, #15]
}
 8009096:	4618      	mov	r0, r3
 8009098:	3710      	adds	r7, #16
 800909a:	46bd      	mov	sp, r7
 800909c:	bd80      	pop	{r7, pc}
 800909e:	bf00      	nop

080090a0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b084      	sub	sp, #16
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
 80090a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80090aa:	2300      	movs	r3, #0
 80090ac:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	781b      	ldrb	r3, [r3, #0]
 80090b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80090b6:	2b40      	cmp	r3, #64	; 0x40
 80090b8:	d005      	beq.n	80090c6 <USBD_StdItfReq+0x26>
 80090ba:	2b40      	cmp	r3, #64	; 0x40
 80090bc:	d852      	bhi.n	8009164 <USBD_StdItfReq+0xc4>
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d001      	beq.n	80090c6 <USBD_StdItfReq+0x26>
 80090c2:	2b20      	cmp	r3, #32
 80090c4:	d14e      	bne.n	8009164 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090cc:	b2db      	uxtb	r3, r3
 80090ce:	3b01      	subs	r3, #1
 80090d0:	2b02      	cmp	r3, #2
 80090d2:	d840      	bhi.n	8009156 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	889b      	ldrh	r3, [r3, #4]
 80090d8:	b2db      	uxtb	r3, r3
 80090da:	2b01      	cmp	r3, #1
 80090dc:	d836      	bhi.n	800914c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	889b      	ldrh	r3, [r3, #4]
 80090e2:	b2db      	uxtb	r3, r3
 80090e4:	4619      	mov	r1, r3
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	f7ff fed9 	bl	8008e9e <USBD_CoreFindIF>
 80090ec:	4603      	mov	r3, r0
 80090ee:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80090f0:	7bbb      	ldrb	r3, [r7, #14]
 80090f2:	2bff      	cmp	r3, #255	; 0xff
 80090f4:	d01d      	beq.n	8009132 <USBD_StdItfReq+0x92>
 80090f6:	7bbb      	ldrb	r3, [r7, #14]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d11a      	bne.n	8009132 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80090fc:	7bba      	ldrb	r2, [r7, #14]
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	32ae      	adds	r2, #174	; 0xae
 8009102:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009106:	689b      	ldr	r3, [r3, #8]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d00f      	beq.n	800912c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800910c:	7bba      	ldrb	r2, [r7, #14]
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009114:	7bba      	ldrb	r2, [r7, #14]
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	32ae      	adds	r2, #174	; 0xae
 800911a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800911e:	689b      	ldr	r3, [r3, #8]
 8009120:	6839      	ldr	r1, [r7, #0]
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	4798      	blx	r3
 8009126:	4603      	mov	r3, r0
 8009128:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800912a:	e004      	b.n	8009136 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800912c:	2303      	movs	r3, #3
 800912e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009130:	e001      	b.n	8009136 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009132:	2303      	movs	r3, #3
 8009134:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	88db      	ldrh	r3, [r3, #6]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d110      	bne.n	8009160 <USBD_StdItfReq+0xc0>
 800913e:	7bfb      	ldrb	r3, [r7, #15]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d10d      	bne.n	8009160 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f000 fdc7 	bl	8009cd8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800914a:	e009      	b.n	8009160 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800914c:	6839      	ldr	r1, [r7, #0]
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f000 fcf7 	bl	8009b42 <USBD_CtlError>
          break;
 8009154:	e004      	b.n	8009160 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009156:	6839      	ldr	r1, [r7, #0]
 8009158:	6878      	ldr	r0, [r7, #4]
 800915a:	f000 fcf2 	bl	8009b42 <USBD_CtlError>
          break;
 800915e:	e000      	b.n	8009162 <USBD_StdItfReq+0xc2>
          break;
 8009160:	bf00      	nop
      }
      break;
 8009162:	e004      	b.n	800916e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009164:	6839      	ldr	r1, [r7, #0]
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	f000 fceb 	bl	8009b42 <USBD_CtlError>
      break;
 800916c:	bf00      	nop
  }

  return ret;
 800916e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009170:	4618      	mov	r0, r3
 8009172:	3710      	adds	r7, #16
 8009174:	46bd      	mov	sp, r7
 8009176:	bd80      	pop	{r7, pc}

08009178 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b084      	sub	sp, #16
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
 8009180:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009182:	2300      	movs	r3, #0
 8009184:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	889b      	ldrh	r3, [r3, #4]
 800918a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	781b      	ldrb	r3, [r3, #0]
 8009190:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009194:	2b40      	cmp	r3, #64	; 0x40
 8009196:	d007      	beq.n	80091a8 <USBD_StdEPReq+0x30>
 8009198:	2b40      	cmp	r3, #64	; 0x40
 800919a:	f200 817f 	bhi.w	800949c <USBD_StdEPReq+0x324>
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d02a      	beq.n	80091f8 <USBD_StdEPReq+0x80>
 80091a2:	2b20      	cmp	r3, #32
 80091a4:	f040 817a 	bne.w	800949c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80091a8:	7bbb      	ldrb	r3, [r7, #14]
 80091aa:	4619      	mov	r1, r3
 80091ac:	6878      	ldr	r0, [r7, #4]
 80091ae:	f7ff fe83 	bl	8008eb8 <USBD_CoreFindEP>
 80091b2:	4603      	mov	r3, r0
 80091b4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80091b6:	7b7b      	ldrb	r3, [r7, #13]
 80091b8:	2bff      	cmp	r3, #255	; 0xff
 80091ba:	f000 8174 	beq.w	80094a6 <USBD_StdEPReq+0x32e>
 80091be:	7b7b      	ldrb	r3, [r7, #13]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	f040 8170 	bne.w	80094a6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80091c6:	7b7a      	ldrb	r2, [r7, #13]
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80091ce:	7b7a      	ldrb	r2, [r7, #13]
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	32ae      	adds	r2, #174	; 0xae
 80091d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091d8:	689b      	ldr	r3, [r3, #8]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	f000 8163 	beq.w	80094a6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80091e0:	7b7a      	ldrb	r2, [r7, #13]
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	32ae      	adds	r2, #174	; 0xae
 80091e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091ea:	689b      	ldr	r3, [r3, #8]
 80091ec:	6839      	ldr	r1, [r7, #0]
 80091ee:	6878      	ldr	r0, [r7, #4]
 80091f0:	4798      	blx	r3
 80091f2:	4603      	mov	r3, r0
 80091f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80091f6:	e156      	b.n	80094a6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	785b      	ldrb	r3, [r3, #1]
 80091fc:	2b03      	cmp	r3, #3
 80091fe:	d008      	beq.n	8009212 <USBD_StdEPReq+0x9a>
 8009200:	2b03      	cmp	r3, #3
 8009202:	f300 8145 	bgt.w	8009490 <USBD_StdEPReq+0x318>
 8009206:	2b00      	cmp	r3, #0
 8009208:	f000 809b 	beq.w	8009342 <USBD_StdEPReq+0x1ca>
 800920c:	2b01      	cmp	r3, #1
 800920e:	d03c      	beq.n	800928a <USBD_StdEPReq+0x112>
 8009210:	e13e      	b.n	8009490 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009218:	b2db      	uxtb	r3, r3
 800921a:	2b02      	cmp	r3, #2
 800921c:	d002      	beq.n	8009224 <USBD_StdEPReq+0xac>
 800921e:	2b03      	cmp	r3, #3
 8009220:	d016      	beq.n	8009250 <USBD_StdEPReq+0xd8>
 8009222:	e02c      	b.n	800927e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009224:	7bbb      	ldrb	r3, [r7, #14]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d00d      	beq.n	8009246 <USBD_StdEPReq+0xce>
 800922a:	7bbb      	ldrb	r3, [r7, #14]
 800922c:	2b80      	cmp	r3, #128	; 0x80
 800922e:	d00a      	beq.n	8009246 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009230:	7bbb      	ldrb	r3, [r7, #14]
 8009232:	4619      	mov	r1, r3
 8009234:	6878      	ldr	r0, [r7, #4]
 8009236:	f003 ffaf 	bl	800d198 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800923a:	2180      	movs	r1, #128	; 0x80
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	f003 ffab 	bl	800d198 <USBD_LL_StallEP>
 8009242:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009244:	e020      	b.n	8009288 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009246:	6839      	ldr	r1, [r7, #0]
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f000 fc7a 	bl	8009b42 <USBD_CtlError>
              break;
 800924e:	e01b      	b.n	8009288 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	885b      	ldrh	r3, [r3, #2]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d10e      	bne.n	8009276 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009258:	7bbb      	ldrb	r3, [r7, #14]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d00b      	beq.n	8009276 <USBD_StdEPReq+0xfe>
 800925e:	7bbb      	ldrb	r3, [r7, #14]
 8009260:	2b80      	cmp	r3, #128	; 0x80
 8009262:	d008      	beq.n	8009276 <USBD_StdEPReq+0xfe>
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	88db      	ldrh	r3, [r3, #6]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d104      	bne.n	8009276 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800926c:	7bbb      	ldrb	r3, [r7, #14]
 800926e:	4619      	mov	r1, r3
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	f003 ff91 	bl	800d198 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009276:	6878      	ldr	r0, [r7, #4]
 8009278:	f000 fd2e 	bl	8009cd8 <USBD_CtlSendStatus>

              break;
 800927c:	e004      	b.n	8009288 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800927e:	6839      	ldr	r1, [r7, #0]
 8009280:	6878      	ldr	r0, [r7, #4]
 8009282:	f000 fc5e 	bl	8009b42 <USBD_CtlError>
              break;
 8009286:	bf00      	nop
          }
          break;
 8009288:	e107      	b.n	800949a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009290:	b2db      	uxtb	r3, r3
 8009292:	2b02      	cmp	r3, #2
 8009294:	d002      	beq.n	800929c <USBD_StdEPReq+0x124>
 8009296:	2b03      	cmp	r3, #3
 8009298:	d016      	beq.n	80092c8 <USBD_StdEPReq+0x150>
 800929a:	e04b      	b.n	8009334 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800929c:	7bbb      	ldrb	r3, [r7, #14]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d00d      	beq.n	80092be <USBD_StdEPReq+0x146>
 80092a2:	7bbb      	ldrb	r3, [r7, #14]
 80092a4:	2b80      	cmp	r3, #128	; 0x80
 80092a6:	d00a      	beq.n	80092be <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80092a8:	7bbb      	ldrb	r3, [r7, #14]
 80092aa:	4619      	mov	r1, r3
 80092ac:	6878      	ldr	r0, [r7, #4]
 80092ae:	f003 ff73 	bl	800d198 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80092b2:	2180      	movs	r1, #128	; 0x80
 80092b4:	6878      	ldr	r0, [r7, #4]
 80092b6:	f003 ff6f 	bl	800d198 <USBD_LL_StallEP>
 80092ba:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80092bc:	e040      	b.n	8009340 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80092be:	6839      	ldr	r1, [r7, #0]
 80092c0:	6878      	ldr	r0, [r7, #4]
 80092c2:	f000 fc3e 	bl	8009b42 <USBD_CtlError>
              break;
 80092c6:	e03b      	b.n	8009340 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	885b      	ldrh	r3, [r3, #2]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d136      	bne.n	800933e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80092d0:	7bbb      	ldrb	r3, [r7, #14]
 80092d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d004      	beq.n	80092e4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80092da:	7bbb      	ldrb	r3, [r7, #14]
 80092dc:	4619      	mov	r1, r3
 80092de:	6878      	ldr	r0, [r7, #4]
 80092e0:	f003 ff79 	bl	800d1d6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80092e4:	6878      	ldr	r0, [r7, #4]
 80092e6:	f000 fcf7 	bl	8009cd8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80092ea:	7bbb      	ldrb	r3, [r7, #14]
 80092ec:	4619      	mov	r1, r3
 80092ee:	6878      	ldr	r0, [r7, #4]
 80092f0:	f7ff fde2 	bl	8008eb8 <USBD_CoreFindEP>
 80092f4:	4603      	mov	r3, r0
 80092f6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80092f8:	7b7b      	ldrb	r3, [r7, #13]
 80092fa:	2bff      	cmp	r3, #255	; 0xff
 80092fc:	d01f      	beq.n	800933e <USBD_StdEPReq+0x1c6>
 80092fe:	7b7b      	ldrb	r3, [r7, #13]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d11c      	bne.n	800933e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009304:	7b7a      	ldrb	r2, [r7, #13]
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800930c:	7b7a      	ldrb	r2, [r7, #13]
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	32ae      	adds	r2, #174	; 0xae
 8009312:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009316:	689b      	ldr	r3, [r3, #8]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d010      	beq.n	800933e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800931c:	7b7a      	ldrb	r2, [r7, #13]
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	32ae      	adds	r2, #174	; 0xae
 8009322:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009326:	689b      	ldr	r3, [r3, #8]
 8009328:	6839      	ldr	r1, [r7, #0]
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	4798      	blx	r3
 800932e:	4603      	mov	r3, r0
 8009330:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009332:	e004      	b.n	800933e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009334:	6839      	ldr	r1, [r7, #0]
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	f000 fc03 	bl	8009b42 <USBD_CtlError>
              break;
 800933c:	e000      	b.n	8009340 <USBD_StdEPReq+0x1c8>
              break;
 800933e:	bf00      	nop
          }
          break;
 8009340:	e0ab      	b.n	800949a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009348:	b2db      	uxtb	r3, r3
 800934a:	2b02      	cmp	r3, #2
 800934c:	d002      	beq.n	8009354 <USBD_StdEPReq+0x1dc>
 800934e:	2b03      	cmp	r3, #3
 8009350:	d032      	beq.n	80093b8 <USBD_StdEPReq+0x240>
 8009352:	e097      	b.n	8009484 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009354:	7bbb      	ldrb	r3, [r7, #14]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d007      	beq.n	800936a <USBD_StdEPReq+0x1f2>
 800935a:	7bbb      	ldrb	r3, [r7, #14]
 800935c:	2b80      	cmp	r3, #128	; 0x80
 800935e:	d004      	beq.n	800936a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009360:	6839      	ldr	r1, [r7, #0]
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	f000 fbed 	bl	8009b42 <USBD_CtlError>
                break;
 8009368:	e091      	b.n	800948e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800936a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800936e:	2b00      	cmp	r3, #0
 8009370:	da0b      	bge.n	800938a <USBD_StdEPReq+0x212>
 8009372:	7bbb      	ldrb	r3, [r7, #14]
 8009374:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009378:	4613      	mov	r3, r2
 800937a:	009b      	lsls	r3, r3, #2
 800937c:	4413      	add	r3, r2
 800937e:	009b      	lsls	r3, r3, #2
 8009380:	3310      	adds	r3, #16
 8009382:	687a      	ldr	r2, [r7, #4]
 8009384:	4413      	add	r3, r2
 8009386:	3304      	adds	r3, #4
 8009388:	e00b      	b.n	80093a2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800938a:	7bbb      	ldrb	r3, [r7, #14]
 800938c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009390:	4613      	mov	r3, r2
 8009392:	009b      	lsls	r3, r3, #2
 8009394:	4413      	add	r3, r2
 8009396:	009b      	lsls	r3, r3, #2
 8009398:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800939c:	687a      	ldr	r2, [r7, #4]
 800939e:	4413      	add	r3, r2
 80093a0:	3304      	adds	r3, #4
 80093a2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80093a4:	68bb      	ldr	r3, [r7, #8]
 80093a6:	2200      	movs	r2, #0
 80093a8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80093aa:	68bb      	ldr	r3, [r7, #8]
 80093ac:	2202      	movs	r2, #2
 80093ae:	4619      	mov	r1, r3
 80093b0:	6878      	ldr	r0, [r7, #4]
 80093b2:	f000 fc37 	bl	8009c24 <USBD_CtlSendData>
              break;
 80093b6:	e06a      	b.n	800948e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80093b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	da11      	bge.n	80093e4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80093c0:	7bbb      	ldrb	r3, [r7, #14]
 80093c2:	f003 020f 	and.w	r2, r3, #15
 80093c6:	6879      	ldr	r1, [r7, #4]
 80093c8:	4613      	mov	r3, r2
 80093ca:	009b      	lsls	r3, r3, #2
 80093cc:	4413      	add	r3, r2
 80093ce:	009b      	lsls	r3, r3, #2
 80093d0:	440b      	add	r3, r1
 80093d2:	3324      	adds	r3, #36	; 0x24
 80093d4:	881b      	ldrh	r3, [r3, #0]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d117      	bne.n	800940a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80093da:	6839      	ldr	r1, [r7, #0]
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f000 fbb0 	bl	8009b42 <USBD_CtlError>
                  break;
 80093e2:	e054      	b.n	800948e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80093e4:	7bbb      	ldrb	r3, [r7, #14]
 80093e6:	f003 020f 	and.w	r2, r3, #15
 80093ea:	6879      	ldr	r1, [r7, #4]
 80093ec:	4613      	mov	r3, r2
 80093ee:	009b      	lsls	r3, r3, #2
 80093f0:	4413      	add	r3, r2
 80093f2:	009b      	lsls	r3, r3, #2
 80093f4:	440b      	add	r3, r1
 80093f6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80093fa:	881b      	ldrh	r3, [r3, #0]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d104      	bne.n	800940a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009400:	6839      	ldr	r1, [r7, #0]
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f000 fb9d 	bl	8009b42 <USBD_CtlError>
                  break;
 8009408:	e041      	b.n	800948e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800940a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800940e:	2b00      	cmp	r3, #0
 8009410:	da0b      	bge.n	800942a <USBD_StdEPReq+0x2b2>
 8009412:	7bbb      	ldrb	r3, [r7, #14]
 8009414:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009418:	4613      	mov	r3, r2
 800941a:	009b      	lsls	r3, r3, #2
 800941c:	4413      	add	r3, r2
 800941e:	009b      	lsls	r3, r3, #2
 8009420:	3310      	adds	r3, #16
 8009422:	687a      	ldr	r2, [r7, #4]
 8009424:	4413      	add	r3, r2
 8009426:	3304      	adds	r3, #4
 8009428:	e00b      	b.n	8009442 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800942a:	7bbb      	ldrb	r3, [r7, #14]
 800942c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009430:	4613      	mov	r3, r2
 8009432:	009b      	lsls	r3, r3, #2
 8009434:	4413      	add	r3, r2
 8009436:	009b      	lsls	r3, r3, #2
 8009438:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800943c:	687a      	ldr	r2, [r7, #4]
 800943e:	4413      	add	r3, r2
 8009440:	3304      	adds	r3, #4
 8009442:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009444:	7bbb      	ldrb	r3, [r7, #14]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d002      	beq.n	8009450 <USBD_StdEPReq+0x2d8>
 800944a:	7bbb      	ldrb	r3, [r7, #14]
 800944c:	2b80      	cmp	r3, #128	; 0x80
 800944e:	d103      	bne.n	8009458 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009450:	68bb      	ldr	r3, [r7, #8]
 8009452:	2200      	movs	r2, #0
 8009454:	601a      	str	r2, [r3, #0]
 8009456:	e00e      	b.n	8009476 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009458:	7bbb      	ldrb	r3, [r7, #14]
 800945a:	4619      	mov	r1, r3
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	f003 fed9 	bl	800d214 <USBD_LL_IsStallEP>
 8009462:	4603      	mov	r3, r0
 8009464:	2b00      	cmp	r3, #0
 8009466:	d003      	beq.n	8009470 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009468:	68bb      	ldr	r3, [r7, #8]
 800946a:	2201      	movs	r2, #1
 800946c:	601a      	str	r2, [r3, #0]
 800946e:	e002      	b.n	8009476 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	2200      	movs	r2, #0
 8009474:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009476:	68bb      	ldr	r3, [r7, #8]
 8009478:	2202      	movs	r2, #2
 800947a:	4619      	mov	r1, r3
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f000 fbd1 	bl	8009c24 <USBD_CtlSendData>
              break;
 8009482:	e004      	b.n	800948e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009484:	6839      	ldr	r1, [r7, #0]
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f000 fb5b 	bl	8009b42 <USBD_CtlError>
              break;
 800948c:	bf00      	nop
          }
          break;
 800948e:	e004      	b.n	800949a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009490:	6839      	ldr	r1, [r7, #0]
 8009492:	6878      	ldr	r0, [r7, #4]
 8009494:	f000 fb55 	bl	8009b42 <USBD_CtlError>
          break;
 8009498:	bf00      	nop
      }
      break;
 800949a:	e005      	b.n	80094a8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800949c:	6839      	ldr	r1, [r7, #0]
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	f000 fb4f 	bl	8009b42 <USBD_CtlError>
      break;
 80094a4:	e000      	b.n	80094a8 <USBD_StdEPReq+0x330>
      break;
 80094a6:	bf00      	nop
  }

  return ret;
 80094a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80094aa:	4618      	mov	r0, r3
 80094ac:	3710      	adds	r7, #16
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bd80      	pop	{r7, pc}
	...

080094b4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b084      	sub	sp, #16
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
 80094bc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80094be:	2300      	movs	r3, #0
 80094c0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80094c2:	2300      	movs	r3, #0
 80094c4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80094c6:	2300      	movs	r3, #0
 80094c8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	885b      	ldrh	r3, [r3, #2]
 80094ce:	0a1b      	lsrs	r3, r3, #8
 80094d0:	b29b      	uxth	r3, r3
 80094d2:	3b01      	subs	r3, #1
 80094d4:	2b06      	cmp	r3, #6
 80094d6:	f200 8128 	bhi.w	800972a <USBD_GetDescriptor+0x276>
 80094da:	a201      	add	r2, pc, #4	; (adr r2, 80094e0 <USBD_GetDescriptor+0x2c>)
 80094dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094e0:	080094fd 	.word	0x080094fd
 80094e4:	08009515 	.word	0x08009515
 80094e8:	08009555 	.word	0x08009555
 80094ec:	0800972b 	.word	0x0800972b
 80094f0:	0800972b 	.word	0x0800972b
 80094f4:	080096cb 	.word	0x080096cb
 80094f8:	080096f7 	.word	0x080096f7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	687a      	ldr	r2, [r7, #4]
 8009506:	7c12      	ldrb	r2, [r2, #16]
 8009508:	f107 0108 	add.w	r1, r7, #8
 800950c:	4610      	mov	r0, r2
 800950e:	4798      	blx	r3
 8009510:	60f8      	str	r0, [r7, #12]
      break;
 8009512:	e112      	b.n	800973a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	7c1b      	ldrb	r3, [r3, #16]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d10d      	bne.n	8009538 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009524:	f107 0208 	add.w	r2, r7, #8
 8009528:	4610      	mov	r0, r2
 800952a:	4798      	blx	r3
 800952c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	3301      	adds	r3, #1
 8009532:	2202      	movs	r2, #2
 8009534:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009536:	e100      	b.n	800973a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800953e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009540:	f107 0208 	add.w	r2, r7, #8
 8009544:	4610      	mov	r0, r2
 8009546:	4798      	blx	r3
 8009548:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	3301      	adds	r3, #1
 800954e:	2202      	movs	r2, #2
 8009550:	701a      	strb	r2, [r3, #0]
      break;
 8009552:	e0f2      	b.n	800973a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	885b      	ldrh	r3, [r3, #2]
 8009558:	b2db      	uxtb	r3, r3
 800955a:	2b05      	cmp	r3, #5
 800955c:	f200 80ac 	bhi.w	80096b8 <USBD_GetDescriptor+0x204>
 8009560:	a201      	add	r2, pc, #4	; (adr r2, 8009568 <USBD_GetDescriptor+0xb4>)
 8009562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009566:	bf00      	nop
 8009568:	08009581 	.word	0x08009581
 800956c:	080095b5 	.word	0x080095b5
 8009570:	080095e9 	.word	0x080095e9
 8009574:	0800961d 	.word	0x0800961d
 8009578:	08009651 	.word	0x08009651
 800957c:	08009685 	.word	0x08009685
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009586:	685b      	ldr	r3, [r3, #4]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d00b      	beq.n	80095a4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009592:	685b      	ldr	r3, [r3, #4]
 8009594:	687a      	ldr	r2, [r7, #4]
 8009596:	7c12      	ldrb	r2, [r2, #16]
 8009598:	f107 0108 	add.w	r1, r7, #8
 800959c:	4610      	mov	r0, r2
 800959e:	4798      	blx	r3
 80095a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80095a2:	e091      	b.n	80096c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80095a4:	6839      	ldr	r1, [r7, #0]
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	f000 facb 	bl	8009b42 <USBD_CtlError>
            err++;
 80095ac:	7afb      	ldrb	r3, [r7, #11]
 80095ae:	3301      	adds	r3, #1
 80095b0:	72fb      	strb	r3, [r7, #11]
          break;
 80095b2:	e089      	b.n	80096c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095ba:	689b      	ldr	r3, [r3, #8]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d00b      	beq.n	80095d8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095c6:	689b      	ldr	r3, [r3, #8]
 80095c8:	687a      	ldr	r2, [r7, #4]
 80095ca:	7c12      	ldrb	r2, [r2, #16]
 80095cc:	f107 0108 	add.w	r1, r7, #8
 80095d0:	4610      	mov	r0, r2
 80095d2:	4798      	blx	r3
 80095d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80095d6:	e077      	b.n	80096c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80095d8:	6839      	ldr	r1, [r7, #0]
 80095da:	6878      	ldr	r0, [r7, #4]
 80095dc:	f000 fab1 	bl	8009b42 <USBD_CtlError>
            err++;
 80095e0:	7afb      	ldrb	r3, [r7, #11]
 80095e2:	3301      	adds	r3, #1
 80095e4:	72fb      	strb	r3, [r7, #11]
          break;
 80095e6:	e06f      	b.n	80096c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095ee:	68db      	ldr	r3, [r3, #12]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d00b      	beq.n	800960c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095fa:	68db      	ldr	r3, [r3, #12]
 80095fc:	687a      	ldr	r2, [r7, #4]
 80095fe:	7c12      	ldrb	r2, [r2, #16]
 8009600:	f107 0108 	add.w	r1, r7, #8
 8009604:	4610      	mov	r0, r2
 8009606:	4798      	blx	r3
 8009608:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800960a:	e05d      	b.n	80096c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800960c:	6839      	ldr	r1, [r7, #0]
 800960e:	6878      	ldr	r0, [r7, #4]
 8009610:	f000 fa97 	bl	8009b42 <USBD_CtlError>
            err++;
 8009614:	7afb      	ldrb	r3, [r7, #11]
 8009616:	3301      	adds	r3, #1
 8009618:	72fb      	strb	r3, [r7, #11]
          break;
 800961a:	e055      	b.n	80096c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009622:	691b      	ldr	r3, [r3, #16]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d00b      	beq.n	8009640 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800962e:	691b      	ldr	r3, [r3, #16]
 8009630:	687a      	ldr	r2, [r7, #4]
 8009632:	7c12      	ldrb	r2, [r2, #16]
 8009634:	f107 0108 	add.w	r1, r7, #8
 8009638:	4610      	mov	r0, r2
 800963a:	4798      	blx	r3
 800963c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800963e:	e043      	b.n	80096c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009640:	6839      	ldr	r1, [r7, #0]
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	f000 fa7d 	bl	8009b42 <USBD_CtlError>
            err++;
 8009648:	7afb      	ldrb	r3, [r7, #11]
 800964a:	3301      	adds	r3, #1
 800964c:	72fb      	strb	r3, [r7, #11]
          break;
 800964e:	e03b      	b.n	80096c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009656:	695b      	ldr	r3, [r3, #20]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d00b      	beq.n	8009674 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009662:	695b      	ldr	r3, [r3, #20]
 8009664:	687a      	ldr	r2, [r7, #4]
 8009666:	7c12      	ldrb	r2, [r2, #16]
 8009668:	f107 0108 	add.w	r1, r7, #8
 800966c:	4610      	mov	r0, r2
 800966e:	4798      	blx	r3
 8009670:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009672:	e029      	b.n	80096c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009674:	6839      	ldr	r1, [r7, #0]
 8009676:	6878      	ldr	r0, [r7, #4]
 8009678:	f000 fa63 	bl	8009b42 <USBD_CtlError>
            err++;
 800967c:	7afb      	ldrb	r3, [r7, #11]
 800967e:	3301      	adds	r3, #1
 8009680:	72fb      	strb	r3, [r7, #11]
          break;
 8009682:	e021      	b.n	80096c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800968a:	699b      	ldr	r3, [r3, #24]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d00b      	beq.n	80096a8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009696:	699b      	ldr	r3, [r3, #24]
 8009698:	687a      	ldr	r2, [r7, #4]
 800969a:	7c12      	ldrb	r2, [r2, #16]
 800969c:	f107 0108 	add.w	r1, r7, #8
 80096a0:	4610      	mov	r0, r2
 80096a2:	4798      	blx	r3
 80096a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80096a6:	e00f      	b.n	80096c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80096a8:	6839      	ldr	r1, [r7, #0]
 80096aa:	6878      	ldr	r0, [r7, #4]
 80096ac:	f000 fa49 	bl	8009b42 <USBD_CtlError>
            err++;
 80096b0:	7afb      	ldrb	r3, [r7, #11]
 80096b2:	3301      	adds	r3, #1
 80096b4:	72fb      	strb	r3, [r7, #11]
          break;
 80096b6:	e007      	b.n	80096c8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80096b8:	6839      	ldr	r1, [r7, #0]
 80096ba:	6878      	ldr	r0, [r7, #4]
 80096bc:	f000 fa41 	bl	8009b42 <USBD_CtlError>
          err++;
 80096c0:	7afb      	ldrb	r3, [r7, #11]
 80096c2:	3301      	adds	r3, #1
 80096c4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80096c6:	bf00      	nop
      }
      break;
 80096c8:	e037      	b.n	800973a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	7c1b      	ldrb	r3, [r3, #16]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d109      	bne.n	80096e6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096da:	f107 0208 	add.w	r2, r7, #8
 80096de:	4610      	mov	r0, r2
 80096e0:	4798      	blx	r3
 80096e2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80096e4:	e029      	b.n	800973a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80096e6:	6839      	ldr	r1, [r7, #0]
 80096e8:	6878      	ldr	r0, [r7, #4]
 80096ea:	f000 fa2a 	bl	8009b42 <USBD_CtlError>
        err++;
 80096ee:	7afb      	ldrb	r3, [r7, #11]
 80096f0:	3301      	adds	r3, #1
 80096f2:	72fb      	strb	r3, [r7, #11]
      break;
 80096f4:	e021      	b.n	800973a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	7c1b      	ldrb	r3, [r3, #16]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d10d      	bne.n	800971a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009706:	f107 0208 	add.w	r2, r7, #8
 800970a:	4610      	mov	r0, r2
 800970c:	4798      	blx	r3
 800970e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	3301      	adds	r3, #1
 8009714:	2207      	movs	r2, #7
 8009716:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009718:	e00f      	b.n	800973a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800971a:	6839      	ldr	r1, [r7, #0]
 800971c:	6878      	ldr	r0, [r7, #4]
 800971e:	f000 fa10 	bl	8009b42 <USBD_CtlError>
        err++;
 8009722:	7afb      	ldrb	r3, [r7, #11]
 8009724:	3301      	adds	r3, #1
 8009726:	72fb      	strb	r3, [r7, #11]
      break;
 8009728:	e007      	b.n	800973a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800972a:	6839      	ldr	r1, [r7, #0]
 800972c:	6878      	ldr	r0, [r7, #4]
 800972e:	f000 fa08 	bl	8009b42 <USBD_CtlError>
      err++;
 8009732:	7afb      	ldrb	r3, [r7, #11]
 8009734:	3301      	adds	r3, #1
 8009736:	72fb      	strb	r3, [r7, #11]
      break;
 8009738:	bf00      	nop
  }

  if (err != 0U)
 800973a:	7afb      	ldrb	r3, [r7, #11]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d11e      	bne.n	800977e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	88db      	ldrh	r3, [r3, #6]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d016      	beq.n	8009776 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009748:	893b      	ldrh	r3, [r7, #8]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d00e      	beq.n	800976c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	88da      	ldrh	r2, [r3, #6]
 8009752:	893b      	ldrh	r3, [r7, #8]
 8009754:	4293      	cmp	r3, r2
 8009756:	bf28      	it	cs
 8009758:	4613      	movcs	r3, r2
 800975a:	b29b      	uxth	r3, r3
 800975c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800975e:	893b      	ldrh	r3, [r7, #8]
 8009760:	461a      	mov	r2, r3
 8009762:	68f9      	ldr	r1, [r7, #12]
 8009764:	6878      	ldr	r0, [r7, #4]
 8009766:	f000 fa5d 	bl	8009c24 <USBD_CtlSendData>
 800976a:	e009      	b.n	8009780 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800976c:	6839      	ldr	r1, [r7, #0]
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f000 f9e7 	bl	8009b42 <USBD_CtlError>
 8009774:	e004      	b.n	8009780 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009776:	6878      	ldr	r0, [r7, #4]
 8009778:	f000 faae 	bl	8009cd8 <USBD_CtlSendStatus>
 800977c:	e000      	b.n	8009780 <USBD_GetDescriptor+0x2cc>
    return;
 800977e:	bf00      	nop
  }
}
 8009780:	3710      	adds	r7, #16
 8009782:	46bd      	mov	sp, r7
 8009784:	bd80      	pop	{r7, pc}
 8009786:	bf00      	nop

08009788 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b084      	sub	sp, #16
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
 8009790:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	889b      	ldrh	r3, [r3, #4]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d131      	bne.n	80097fe <USBD_SetAddress+0x76>
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	88db      	ldrh	r3, [r3, #6]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d12d      	bne.n	80097fe <USBD_SetAddress+0x76>
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	885b      	ldrh	r3, [r3, #2]
 80097a6:	2b7f      	cmp	r3, #127	; 0x7f
 80097a8:	d829      	bhi.n	80097fe <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	885b      	ldrh	r3, [r3, #2]
 80097ae:	b2db      	uxtb	r3, r3
 80097b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097b4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097bc:	b2db      	uxtb	r3, r3
 80097be:	2b03      	cmp	r3, #3
 80097c0:	d104      	bne.n	80097cc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80097c2:	6839      	ldr	r1, [r7, #0]
 80097c4:	6878      	ldr	r0, [r7, #4]
 80097c6:	f000 f9bc 	bl	8009b42 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097ca:	e01d      	b.n	8009808 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	7bfa      	ldrb	r2, [r7, #15]
 80097d0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80097d4:	7bfb      	ldrb	r3, [r7, #15]
 80097d6:	4619      	mov	r1, r3
 80097d8:	6878      	ldr	r0, [r7, #4]
 80097da:	f003 fd47 	bl	800d26c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80097de:	6878      	ldr	r0, [r7, #4]
 80097e0:	f000 fa7a 	bl	8009cd8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80097e4:	7bfb      	ldrb	r3, [r7, #15]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d004      	beq.n	80097f4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	2202      	movs	r2, #2
 80097ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097f2:	e009      	b.n	8009808 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2201      	movs	r2, #1
 80097f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097fc:	e004      	b.n	8009808 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80097fe:	6839      	ldr	r1, [r7, #0]
 8009800:	6878      	ldr	r0, [r7, #4]
 8009802:	f000 f99e 	bl	8009b42 <USBD_CtlError>
  }
}
 8009806:	bf00      	nop
 8009808:	bf00      	nop
 800980a:	3710      	adds	r7, #16
 800980c:	46bd      	mov	sp, r7
 800980e:	bd80      	pop	{r7, pc}

08009810 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b084      	sub	sp, #16
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
 8009818:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800981a:	2300      	movs	r3, #0
 800981c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	885b      	ldrh	r3, [r3, #2]
 8009822:	b2da      	uxtb	r2, r3
 8009824:	4b4e      	ldr	r3, [pc, #312]	; (8009960 <USBD_SetConfig+0x150>)
 8009826:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009828:	4b4d      	ldr	r3, [pc, #308]	; (8009960 <USBD_SetConfig+0x150>)
 800982a:	781b      	ldrb	r3, [r3, #0]
 800982c:	2b01      	cmp	r3, #1
 800982e:	d905      	bls.n	800983c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009830:	6839      	ldr	r1, [r7, #0]
 8009832:	6878      	ldr	r0, [r7, #4]
 8009834:	f000 f985 	bl	8009b42 <USBD_CtlError>
    return USBD_FAIL;
 8009838:	2303      	movs	r3, #3
 800983a:	e08c      	b.n	8009956 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009842:	b2db      	uxtb	r3, r3
 8009844:	2b02      	cmp	r3, #2
 8009846:	d002      	beq.n	800984e <USBD_SetConfig+0x3e>
 8009848:	2b03      	cmp	r3, #3
 800984a:	d029      	beq.n	80098a0 <USBD_SetConfig+0x90>
 800984c:	e075      	b.n	800993a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800984e:	4b44      	ldr	r3, [pc, #272]	; (8009960 <USBD_SetConfig+0x150>)
 8009850:	781b      	ldrb	r3, [r3, #0]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d020      	beq.n	8009898 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009856:	4b42      	ldr	r3, [pc, #264]	; (8009960 <USBD_SetConfig+0x150>)
 8009858:	781b      	ldrb	r3, [r3, #0]
 800985a:	461a      	mov	r2, r3
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009860:	4b3f      	ldr	r3, [pc, #252]	; (8009960 <USBD_SetConfig+0x150>)
 8009862:	781b      	ldrb	r3, [r3, #0]
 8009864:	4619      	mov	r1, r3
 8009866:	6878      	ldr	r0, [r7, #4]
 8009868:	f7fe ffe7 	bl	800883a <USBD_SetClassConfig>
 800986c:	4603      	mov	r3, r0
 800986e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009870:	7bfb      	ldrb	r3, [r7, #15]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d008      	beq.n	8009888 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009876:	6839      	ldr	r1, [r7, #0]
 8009878:	6878      	ldr	r0, [r7, #4]
 800987a:	f000 f962 	bl	8009b42 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2202      	movs	r2, #2
 8009882:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009886:	e065      	b.n	8009954 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009888:	6878      	ldr	r0, [r7, #4]
 800988a:	f000 fa25 	bl	8009cd8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2203      	movs	r2, #3
 8009892:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009896:	e05d      	b.n	8009954 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009898:	6878      	ldr	r0, [r7, #4]
 800989a:	f000 fa1d 	bl	8009cd8 <USBD_CtlSendStatus>
      break;
 800989e:	e059      	b.n	8009954 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80098a0:	4b2f      	ldr	r3, [pc, #188]	; (8009960 <USBD_SetConfig+0x150>)
 80098a2:	781b      	ldrb	r3, [r3, #0]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d112      	bne.n	80098ce <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	2202      	movs	r2, #2
 80098ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80098b0:	4b2b      	ldr	r3, [pc, #172]	; (8009960 <USBD_SetConfig+0x150>)
 80098b2:	781b      	ldrb	r3, [r3, #0]
 80098b4:	461a      	mov	r2, r3
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80098ba:	4b29      	ldr	r3, [pc, #164]	; (8009960 <USBD_SetConfig+0x150>)
 80098bc:	781b      	ldrb	r3, [r3, #0]
 80098be:	4619      	mov	r1, r3
 80098c0:	6878      	ldr	r0, [r7, #4]
 80098c2:	f7fe ffd6 	bl	8008872 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	f000 fa06 	bl	8009cd8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80098cc:	e042      	b.n	8009954 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80098ce:	4b24      	ldr	r3, [pc, #144]	; (8009960 <USBD_SetConfig+0x150>)
 80098d0:	781b      	ldrb	r3, [r3, #0]
 80098d2:	461a      	mov	r2, r3
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	685b      	ldr	r3, [r3, #4]
 80098d8:	429a      	cmp	r2, r3
 80098da:	d02a      	beq.n	8009932 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	685b      	ldr	r3, [r3, #4]
 80098e0:	b2db      	uxtb	r3, r3
 80098e2:	4619      	mov	r1, r3
 80098e4:	6878      	ldr	r0, [r7, #4]
 80098e6:	f7fe ffc4 	bl	8008872 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80098ea:	4b1d      	ldr	r3, [pc, #116]	; (8009960 <USBD_SetConfig+0x150>)
 80098ec:	781b      	ldrb	r3, [r3, #0]
 80098ee:	461a      	mov	r2, r3
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80098f4:	4b1a      	ldr	r3, [pc, #104]	; (8009960 <USBD_SetConfig+0x150>)
 80098f6:	781b      	ldrb	r3, [r3, #0]
 80098f8:	4619      	mov	r1, r3
 80098fa:	6878      	ldr	r0, [r7, #4]
 80098fc:	f7fe ff9d 	bl	800883a <USBD_SetClassConfig>
 8009900:	4603      	mov	r3, r0
 8009902:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009904:	7bfb      	ldrb	r3, [r7, #15]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d00f      	beq.n	800992a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800990a:	6839      	ldr	r1, [r7, #0]
 800990c:	6878      	ldr	r0, [r7, #4]
 800990e:	f000 f918 	bl	8009b42 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	685b      	ldr	r3, [r3, #4]
 8009916:	b2db      	uxtb	r3, r3
 8009918:	4619      	mov	r1, r3
 800991a:	6878      	ldr	r0, [r7, #4]
 800991c:	f7fe ffa9 	bl	8008872 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2202      	movs	r2, #2
 8009924:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009928:	e014      	b.n	8009954 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800992a:	6878      	ldr	r0, [r7, #4]
 800992c:	f000 f9d4 	bl	8009cd8 <USBD_CtlSendStatus>
      break;
 8009930:	e010      	b.n	8009954 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009932:	6878      	ldr	r0, [r7, #4]
 8009934:	f000 f9d0 	bl	8009cd8 <USBD_CtlSendStatus>
      break;
 8009938:	e00c      	b.n	8009954 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800993a:	6839      	ldr	r1, [r7, #0]
 800993c:	6878      	ldr	r0, [r7, #4]
 800993e:	f000 f900 	bl	8009b42 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009942:	4b07      	ldr	r3, [pc, #28]	; (8009960 <USBD_SetConfig+0x150>)
 8009944:	781b      	ldrb	r3, [r3, #0]
 8009946:	4619      	mov	r1, r3
 8009948:	6878      	ldr	r0, [r7, #4]
 800994a:	f7fe ff92 	bl	8008872 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800994e:	2303      	movs	r3, #3
 8009950:	73fb      	strb	r3, [r7, #15]
      break;
 8009952:	bf00      	nop
  }

  return ret;
 8009954:	7bfb      	ldrb	r3, [r7, #15]
}
 8009956:	4618      	mov	r0, r3
 8009958:	3710      	adds	r7, #16
 800995a:	46bd      	mov	sp, r7
 800995c:	bd80      	pop	{r7, pc}
 800995e:	bf00      	nop
 8009960:	20000590 	.word	0x20000590

08009964 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b082      	sub	sp, #8
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
 800996c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800996e:	683b      	ldr	r3, [r7, #0]
 8009970:	88db      	ldrh	r3, [r3, #6]
 8009972:	2b01      	cmp	r3, #1
 8009974:	d004      	beq.n	8009980 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009976:	6839      	ldr	r1, [r7, #0]
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	f000 f8e2 	bl	8009b42 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800997e:	e023      	b.n	80099c8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009986:	b2db      	uxtb	r3, r3
 8009988:	2b02      	cmp	r3, #2
 800998a:	dc02      	bgt.n	8009992 <USBD_GetConfig+0x2e>
 800998c:	2b00      	cmp	r3, #0
 800998e:	dc03      	bgt.n	8009998 <USBD_GetConfig+0x34>
 8009990:	e015      	b.n	80099be <USBD_GetConfig+0x5a>
 8009992:	2b03      	cmp	r3, #3
 8009994:	d00b      	beq.n	80099ae <USBD_GetConfig+0x4a>
 8009996:	e012      	b.n	80099be <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2200      	movs	r2, #0
 800999c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	3308      	adds	r3, #8
 80099a2:	2201      	movs	r2, #1
 80099a4:	4619      	mov	r1, r3
 80099a6:	6878      	ldr	r0, [r7, #4]
 80099a8:	f000 f93c 	bl	8009c24 <USBD_CtlSendData>
        break;
 80099ac:	e00c      	b.n	80099c8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	3304      	adds	r3, #4
 80099b2:	2201      	movs	r2, #1
 80099b4:	4619      	mov	r1, r3
 80099b6:	6878      	ldr	r0, [r7, #4]
 80099b8:	f000 f934 	bl	8009c24 <USBD_CtlSendData>
        break;
 80099bc:	e004      	b.n	80099c8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80099be:	6839      	ldr	r1, [r7, #0]
 80099c0:	6878      	ldr	r0, [r7, #4]
 80099c2:	f000 f8be 	bl	8009b42 <USBD_CtlError>
        break;
 80099c6:	bf00      	nop
}
 80099c8:	bf00      	nop
 80099ca:	3708      	adds	r7, #8
 80099cc:	46bd      	mov	sp, r7
 80099ce:	bd80      	pop	{r7, pc}

080099d0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b082      	sub	sp, #8
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
 80099d8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099e0:	b2db      	uxtb	r3, r3
 80099e2:	3b01      	subs	r3, #1
 80099e4:	2b02      	cmp	r3, #2
 80099e6:	d81e      	bhi.n	8009a26 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	88db      	ldrh	r3, [r3, #6]
 80099ec:	2b02      	cmp	r3, #2
 80099ee:	d004      	beq.n	80099fa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80099f0:	6839      	ldr	r1, [r7, #0]
 80099f2:	6878      	ldr	r0, [r7, #4]
 80099f4:	f000 f8a5 	bl	8009b42 <USBD_CtlError>
        break;
 80099f8:	e01a      	b.n	8009a30 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	2201      	movs	r2, #1
 80099fe:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d005      	beq.n	8009a16 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	68db      	ldr	r3, [r3, #12]
 8009a0e:	f043 0202 	orr.w	r2, r3, #2
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	330c      	adds	r3, #12
 8009a1a:	2202      	movs	r2, #2
 8009a1c:	4619      	mov	r1, r3
 8009a1e:	6878      	ldr	r0, [r7, #4]
 8009a20:	f000 f900 	bl	8009c24 <USBD_CtlSendData>
      break;
 8009a24:	e004      	b.n	8009a30 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009a26:	6839      	ldr	r1, [r7, #0]
 8009a28:	6878      	ldr	r0, [r7, #4]
 8009a2a:	f000 f88a 	bl	8009b42 <USBD_CtlError>
      break;
 8009a2e:	bf00      	nop
  }
}
 8009a30:	bf00      	nop
 8009a32:	3708      	adds	r7, #8
 8009a34:	46bd      	mov	sp, r7
 8009a36:	bd80      	pop	{r7, pc}

08009a38 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b082      	sub	sp, #8
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
 8009a40:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	885b      	ldrh	r3, [r3, #2]
 8009a46:	2b01      	cmp	r3, #1
 8009a48:	d107      	bne.n	8009a5a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	2201      	movs	r2, #1
 8009a4e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009a52:	6878      	ldr	r0, [r7, #4]
 8009a54:	f000 f940 	bl	8009cd8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009a58:	e013      	b.n	8009a82 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	885b      	ldrh	r3, [r3, #2]
 8009a5e:	2b02      	cmp	r3, #2
 8009a60:	d10b      	bne.n	8009a7a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	889b      	ldrh	r3, [r3, #4]
 8009a66:	0a1b      	lsrs	r3, r3, #8
 8009a68:	b29b      	uxth	r3, r3
 8009a6a:	b2da      	uxtb	r2, r3
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009a72:	6878      	ldr	r0, [r7, #4]
 8009a74:	f000 f930 	bl	8009cd8 <USBD_CtlSendStatus>
}
 8009a78:	e003      	b.n	8009a82 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009a7a:	6839      	ldr	r1, [r7, #0]
 8009a7c:	6878      	ldr	r0, [r7, #4]
 8009a7e:	f000 f860 	bl	8009b42 <USBD_CtlError>
}
 8009a82:	bf00      	nop
 8009a84:	3708      	adds	r7, #8
 8009a86:	46bd      	mov	sp, r7
 8009a88:	bd80      	pop	{r7, pc}

08009a8a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a8a:	b580      	push	{r7, lr}
 8009a8c:	b082      	sub	sp, #8
 8009a8e:	af00      	add	r7, sp, #0
 8009a90:	6078      	str	r0, [r7, #4]
 8009a92:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a9a:	b2db      	uxtb	r3, r3
 8009a9c:	3b01      	subs	r3, #1
 8009a9e:	2b02      	cmp	r3, #2
 8009aa0:	d80b      	bhi.n	8009aba <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	885b      	ldrh	r3, [r3, #2]
 8009aa6:	2b01      	cmp	r3, #1
 8009aa8:	d10c      	bne.n	8009ac4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	2200      	movs	r2, #0
 8009aae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009ab2:	6878      	ldr	r0, [r7, #4]
 8009ab4:	f000 f910 	bl	8009cd8 <USBD_CtlSendStatus>
      }
      break;
 8009ab8:	e004      	b.n	8009ac4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009aba:	6839      	ldr	r1, [r7, #0]
 8009abc:	6878      	ldr	r0, [r7, #4]
 8009abe:	f000 f840 	bl	8009b42 <USBD_CtlError>
      break;
 8009ac2:	e000      	b.n	8009ac6 <USBD_ClrFeature+0x3c>
      break;
 8009ac4:	bf00      	nop
  }
}
 8009ac6:	bf00      	nop
 8009ac8:	3708      	adds	r7, #8
 8009aca:	46bd      	mov	sp, r7
 8009acc:	bd80      	pop	{r7, pc}

08009ace <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009ace:	b580      	push	{r7, lr}
 8009ad0:	b084      	sub	sp, #16
 8009ad2:	af00      	add	r7, sp, #0
 8009ad4:	6078      	str	r0, [r7, #4]
 8009ad6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	781a      	ldrb	r2, [r3, #0]
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	3301      	adds	r3, #1
 8009ae8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	781a      	ldrb	r2, [r3, #0]
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	3301      	adds	r3, #1
 8009af6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009af8:	68f8      	ldr	r0, [r7, #12]
 8009afa:	f7ff fa41 	bl	8008f80 <SWAPBYTE>
 8009afe:	4603      	mov	r3, r0
 8009b00:	461a      	mov	r2, r3
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	3301      	adds	r3, #1
 8009b0a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	3301      	adds	r3, #1
 8009b10:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009b12:	68f8      	ldr	r0, [r7, #12]
 8009b14:	f7ff fa34 	bl	8008f80 <SWAPBYTE>
 8009b18:	4603      	mov	r3, r0
 8009b1a:	461a      	mov	r2, r3
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	3301      	adds	r3, #1
 8009b24:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	3301      	adds	r3, #1
 8009b2a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009b2c:	68f8      	ldr	r0, [r7, #12]
 8009b2e:	f7ff fa27 	bl	8008f80 <SWAPBYTE>
 8009b32:	4603      	mov	r3, r0
 8009b34:	461a      	mov	r2, r3
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	80da      	strh	r2, [r3, #6]
}
 8009b3a:	bf00      	nop
 8009b3c:	3710      	adds	r7, #16
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	bd80      	pop	{r7, pc}

08009b42 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b42:	b580      	push	{r7, lr}
 8009b44:	b082      	sub	sp, #8
 8009b46:	af00      	add	r7, sp, #0
 8009b48:	6078      	str	r0, [r7, #4]
 8009b4a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009b4c:	2180      	movs	r1, #128	; 0x80
 8009b4e:	6878      	ldr	r0, [r7, #4]
 8009b50:	f003 fb22 	bl	800d198 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009b54:	2100      	movs	r1, #0
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	f003 fb1e 	bl	800d198 <USBD_LL_StallEP>
}
 8009b5c:	bf00      	nop
 8009b5e:	3708      	adds	r7, #8
 8009b60:	46bd      	mov	sp, r7
 8009b62:	bd80      	pop	{r7, pc}

08009b64 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b086      	sub	sp, #24
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	60f8      	str	r0, [r7, #12]
 8009b6c:	60b9      	str	r1, [r7, #8]
 8009b6e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009b70:	2300      	movs	r3, #0
 8009b72:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d036      	beq.n	8009be8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009b7e:	6938      	ldr	r0, [r7, #16]
 8009b80:	f000 f836 	bl	8009bf0 <USBD_GetLen>
 8009b84:	4603      	mov	r3, r0
 8009b86:	3301      	adds	r3, #1
 8009b88:	b29b      	uxth	r3, r3
 8009b8a:	005b      	lsls	r3, r3, #1
 8009b8c:	b29a      	uxth	r2, r3
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009b92:	7dfb      	ldrb	r3, [r7, #23]
 8009b94:	68ba      	ldr	r2, [r7, #8]
 8009b96:	4413      	add	r3, r2
 8009b98:	687a      	ldr	r2, [r7, #4]
 8009b9a:	7812      	ldrb	r2, [r2, #0]
 8009b9c:	701a      	strb	r2, [r3, #0]
  idx++;
 8009b9e:	7dfb      	ldrb	r3, [r7, #23]
 8009ba0:	3301      	adds	r3, #1
 8009ba2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009ba4:	7dfb      	ldrb	r3, [r7, #23]
 8009ba6:	68ba      	ldr	r2, [r7, #8]
 8009ba8:	4413      	add	r3, r2
 8009baa:	2203      	movs	r2, #3
 8009bac:	701a      	strb	r2, [r3, #0]
  idx++;
 8009bae:	7dfb      	ldrb	r3, [r7, #23]
 8009bb0:	3301      	adds	r3, #1
 8009bb2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009bb4:	e013      	b.n	8009bde <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009bb6:	7dfb      	ldrb	r3, [r7, #23]
 8009bb8:	68ba      	ldr	r2, [r7, #8]
 8009bba:	4413      	add	r3, r2
 8009bbc:	693a      	ldr	r2, [r7, #16]
 8009bbe:	7812      	ldrb	r2, [r2, #0]
 8009bc0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009bc2:	693b      	ldr	r3, [r7, #16]
 8009bc4:	3301      	adds	r3, #1
 8009bc6:	613b      	str	r3, [r7, #16]
    idx++;
 8009bc8:	7dfb      	ldrb	r3, [r7, #23]
 8009bca:	3301      	adds	r3, #1
 8009bcc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009bce:	7dfb      	ldrb	r3, [r7, #23]
 8009bd0:	68ba      	ldr	r2, [r7, #8]
 8009bd2:	4413      	add	r3, r2
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	701a      	strb	r2, [r3, #0]
    idx++;
 8009bd8:	7dfb      	ldrb	r3, [r7, #23]
 8009bda:	3301      	adds	r3, #1
 8009bdc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009bde:	693b      	ldr	r3, [r7, #16]
 8009be0:	781b      	ldrb	r3, [r3, #0]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d1e7      	bne.n	8009bb6 <USBD_GetString+0x52>
 8009be6:	e000      	b.n	8009bea <USBD_GetString+0x86>
    return;
 8009be8:	bf00      	nop
  }
}
 8009bea:	3718      	adds	r7, #24
 8009bec:	46bd      	mov	sp, r7
 8009bee:	bd80      	pop	{r7, pc}

08009bf0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009bf0:	b480      	push	{r7}
 8009bf2:	b085      	sub	sp, #20
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009c00:	e005      	b.n	8009c0e <USBD_GetLen+0x1e>
  {
    len++;
 8009c02:	7bfb      	ldrb	r3, [r7, #15]
 8009c04:	3301      	adds	r3, #1
 8009c06:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009c08:	68bb      	ldr	r3, [r7, #8]
 8009c0a:	3301      	adds	r3, #1
 8009c0c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009c0e:	68bb      	ldr	r3, [r7, #8]
 8009c10:	781b      	ldrb	r3, [r3, #0]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d1f5      	bne.n	8009c02 <USBD_GetLen+0x12>
  }

  return len;
 8009c16:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c18:	4618      	mov	r0, r3
 8009c1a:	3714      	adds	r7, #20
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c22:	4770      	bx	lr

08009c24 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b084      	sub	sp, #16
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	60f8      	str	r0, [r7, #12]
 8009c2c:	60b9      	str	r1, [r7, #8]
 8009c2e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	2202      	movs	r2, #2
 8009c34:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	687a      	ldr	r2, [r7, #4]
 8009c3c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	687a      	ldr	r2, [r7, #4]
 8009c42:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	68ba      	ldr	r2, [r7, #8]
 8009c48:	2100      	movs	r1, #0
 8009c4a:	68f8      	ldr	r0, [r7, #12]
 8009c4c:	f003 fb2d 	bl	800d2aa <USBD_LL_Transmit>

  return USBD_OK;
 8009c50:	2300      	movs	r3, #0
}
 8009c52:	4618      	mov	r0, r3
 8009c54:	3710      	adds	r7, #16
 8009c56:	46bd      	mov	sp, r7
 8009c58:	bd80      	pop	{r7, pc}

08009c5a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009c5a:	b580      	push	{r7, lr}
 8009c5c:	b084      	sub	sp, #16
 8009c5e:	af00      	add	r7, sp, #0
 8009c60:	60f8      	str	r0, [r7, #12]
 8009c62:	60b9      	str	r1, [r7, #8]
 8009c64:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	68ba      	ldr	r2, [r7, #8]
 8009c6a:	2100      	movs	r1, #0
 8009c6c:	68f8      	ldr	r0, [r7, #12]
 8009c6e:	f003 fb1c 	bl	800d2aa <USBD_LL_Transmit>

  return USBD_OK;
 8009c72:	2300      	movs	r3, #0
}
 8009c74:	4618      	mov	r0, r3
 8009c76:	3710      	adds	r7, #16
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	bd80      	pop	{r7, pc}

08009c7c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b084      	sub	sp, #16
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	60f8      	str	r0, [r7, #12]
 8009c84:	60b9      	str	r1, [r7, #8]
 8009c86:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	2203      	movs	r2, #3
 8009c8c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	687a      	ldr	r2, [r7, #4]
 8009c94:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	687a      	ldr	r2, [r7, #4]
 8009c9c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	68ba      	ldr	r2, [r7, #8]
 8009ca4:	2100      	movs	r1, #0
 8009ca6:	68f8      	ldr	r0, [r7, #12]
 8009ca8:	f003 fb20 	bl	800d2ec <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009cac:	2300      	movs	r3, #0
}
 8009cae:	4618      	mov	r0, r3
 8009cb0:	3710      	adds	r7, #16
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	bd80      	pop	{r7, pc}

08009cb6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009cb6:	b580      	push	{r7, lr}
 8009cb8:	b084      	sub	sp, #16
 8009cba:	af00      	add	r7, sp, #0
 8009cbc:	60f8      	str	r0, [r7, #12]
 8009cbe:	60b9      	str	r1, [r7, #8]
 8009cc0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	68ba      	ldr	r2, [r7, #8]
 8009cc6:	2100      	movs	r1, #0
 8009cc8:	68f8      	ldr	r0, [r7, #12]
 8009cca:	f003 fb0f 	bl	800d2ec <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009cce:	2300      	movs	r3, #0
}
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	3710      	adds	r7, #16
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	bd80      	pop	{r7, pc}

08009cd8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b082      	sub	sp, #8
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2204      	movs	r2, #4
 8009ce4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009ce8:	2300      	movs	r3, #0
 8009cea:	2200      	movs	r2, #0
 8009cec:	2100      	movs	r1, #0
 8009cee:	6878      	ldr	r0, [r7, #4]
 8009cf0:	f003 fadb 	bl	800d2aa <USBD_LL_Transmit>

  return USBD_OK;
 8009cf4:	2300      	movs	r3, #0
}
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	3708      	adds	r7, #8
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	bd80      	pop	{r7, pc}

08009cfe <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009cfe:	b580      	push	{r7, lr}
 8009d00:	b082      	sub	sp, #8
 8009d02:	af00      	add	r7, sp, #0
 8009d04:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	2205      	movs	r2, #5
 8009d0a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009d0e:	2300      	movs	r3, #0
 8009d10:	2200      	movs	r2, #0
 8009d12:	2100      	movs	r1, #0
 8009d14:	6878      	ldr	r0, [r7, #4]
 8009d16:	f003 fae9 	bl	800d2ec <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009d1a:	2300      	movs	r3, #0
}
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	3708      	adds	r7, #8
 8009d20:	46bd      	mov	sp, r7
 8009d22:	bd80      	pop	{r7, pc}

08009d24 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009d24:	b480      	push	{r7}
 8009d26:	b085      	sub	sp, #20
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	4603      	mov	r3, r0
 8009d2c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009d2e:	2300      	movs	r3, #0
 8009d30:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009d32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009d36:	2b84      	cmp	r3, #132	; 0x84
 8009d38:	d005      	beq.n	8009d46 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8009d3a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	4413      	add	r3, r2
 8009d42:	3303      	adds	r3, #3
 8009d44:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009d46:	68fb      	ldr	r3, [r7, #12]
}
 8009d48:	4618      	mov	r0, r3
 8009d4a:	3714      	adds	r7, #20
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d52:	4770      	bx	lr

08009d54 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8009d54:	b480      	push	{r7}
 8009d56:	b083      	sub	sp, #12
 8009d58:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d5a:	f3ef 8305 	mrs	r3, IPSR
 8009d5e:	607b      	str	r3, [r7, #4]
  return(result);
 8009d60:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	bf14      	ite	ne
 8009d66:	2301      	movne	r3, #1
 8009d68:	2300      	moveq	r3, #0
 8009d6a:	b2db      	uxtb	r3, r3
}
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	370c      	adds	r7, #12
 8009d70:	46bd      	mov	sp, r7
 8009d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d76:	4770      	bx	lr

08009d78 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009d7c:	f001 fbae 	bl	800b4dc <vTaskStartScheduler>
  
  return osOK;
 8009d80:	2300      	movs	r3, #0
}
 8009d82:	4618      	mov	r0, r3
 8009d84:	bd80      	pop	{r7, pc}

08009d86 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009d86:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d88:	b089      	sub	sp, #36	; 0x24
 8009d8a:	af04      	add	r7, sp, #16
 8009d8c:	6078      	str	r0, [r7, #4]
 8009d8e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	695b      	ldr	r3, [r3, #20]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d020      	beq.n	8009dda <osThreadCreate+0x54>
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	699b      	ldr	r3, [r3, #24]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d01c      	beq.n	8009dda <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	685c      	ldr	r4, [r3, #4]
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681d      	ldr	r5, [r3, #0]
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	691e      	ldr	r6, [r3, #16]
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009db2:	4618      	mov	r0, r3
 8009db4:	f7ff ffb6 	bl	8009d24 <makeFreeRtosPriority>
 8009db8:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	695b      	ldr	r3, [r3, #20]
 8009dbe:	687a      	ldr	r2, [r7, #4]
 8009dc0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009dc2:	9202      	str	r2, [sp, #8]
 8009dc4:	9301      	str	r3, [sp, #4]
 8009dc6:	9100      	str	r1, [sp, #0]
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	4632      	mov	r2, r6
 8009dcc:	4629      	mov	r1, r5
 8009dce:	4620      	mov	r0, r4
 8009dd0:	f001 f9a6 	bl	800b120 <xTaskCreateStatic>
 8009dd4:	4603      	mov	r3, r0
 8009dd6:	60fb      	str	r3, [r7, #12]
 8009dd8:	e01c      	b.n	8009e14 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	685c      	ldr	r4, [r3, #4]
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009de6:	b29e      	uxth	r6, r3
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009dee:	4618      	mov	r0, r3
 8009df0:	f7ff ff98 	bl	8009d24 <makeFreeRtosPriority>
 8009df4:	4602      	mov	r2, r0
 8009df6:	f107 030c 	add.w	r3, r7, #12
 8009dfa:	9301      	str	r3, [sp, #4]
 8009dfc:	9200      	str	r2, [sp, #0]
 8009dfe:	683b      	ldr	r3, [r7, #0]
 8009e00:	4632      	mov	r2, r6
 8009e02:	4629      	mov	r1, r5
 8009e04:	4620      	mov	r0, r4
 8009e06:	f001 f9e8 	bl	800b1da <xTaskCreate>
 8009e0a:	4603      	mov	r3, r0
 8009e0c:	2b01      	cmp	r3, #1
 8009e0e:	d001      	beq.n	8009e14 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8009e10:	2300      	movs	r3, #0
 8009e12:	e000      	b.n	8009e16 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009e14:	68fb      	ldr	r3, [r7, #12]
}
 8009e16:	4618      	mov	r0, r3
 8009e18:	3714      	adds	r7, #20
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009e1e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009e1e:	b580      	push	{r7, lr}
 8009e20:	b084      	sub	sp, #16
 8009e22:	af00      	add	r7, sp, #0
 8009e24:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d001      	beq.n	8009e34 <osDelay+0x16>
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	e000      	b.n	8009e36 <osDelay+0x18>
 8009e34:	2301      	movs	r3, #1
 8009e36:	4618      	mov	r0, r3
 8009e38:	f001 fb1c 	bl	800b474 <vTaskDelay>
  
  return osOK;
 8009e3c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009e3e:	4618      	mov	r0, r3
 8009e40:	3710      	adds	r7, #16
 8009e42:	46bd      	mov	sp, r7
 8009e44:	bd80      	pop	{r7, pc}

08009e46 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8009e46:	b580      	push	{r7, lr}
 8009e48:	b082      	sub	sp, #8
 8009e4a:	af00      	add	r7, sp, #0
 8009e4c:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	685b      	ldr	r3, [r3, #4]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d007      	beq.n	8009e66 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	685b      	ldr	r3, [r3, #4]
 8009e5a:	4619      	mov	r1, r3
 8009e5c:	2001      	movs	r0, #1
 8009e5e:	f000 fb8a 	bl	800a576 <xQueueCreateMutexStatic>
 8009e62:	4603      	mov	r3, r0
 8009e64:	e003      	b.n	8009e6e <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8009e66:	2001      	movs	r0, #1
 8009e68:	f000 fb6d 	bl	800a546 <xQueueCreateMutex>
 8009e6c:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8009e6e:	4618      	mov	r0, r3
 8009e70:	3708      	adds	r7, #8
 8009e72:	46bd      	mov	sp, r7
 8009e74:	bd80      	pop	{r7, pc}
	...

08009e78 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b084      	sub	sp, #16
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
 8009e80:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8009e82:	2300      	movs	r3, #0
 8009e84:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d101      	bne.n	8009e90 <osMutexWait+0x18>
    return osErrorParameter;
 8009e8c:	2380      	movs	r3, #128	; 0x80
 8009e8e:	e03a      	b.n	8009f06 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8009e90:	2300      	movs	r3, #0
 8009e92:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e9a:	d103      	bne.n	8009ea4 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8009e9c:	f04f 33ff 	mov.w	r3, #4294967295
 8009ea0:	60fb      	str	r3, [r7, #12]
 8009ea2:	e009      	b.n	8009eb8 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d006      	beq.n	8009eb8 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8009eaa:	683b      	ldr	r3, [r7, #0]
 8009eac:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d101      	bne.n	8009eb8 <osMutexWait+0x40>
      ticks = 1;
 8009eb4:	2301      	movs	r3, #1
 8009eb6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8009eb8:	f7ff ff4c 	bl	8009d54 <inHandlerMode>
 8009ebc:	4603      	mov	r3, r0
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d017      	beq.n	8009ef2 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8009ec2:	f107 0308 	add.w	r3, r7, #8
 8009ec6:	461a      	mov	r2, r3
 8009ec8:	2100      	movs	r1, #0
 8009eca:	6878      	ldr	r0, [r7, #4]
 8009ecc:	f000 ff80 	bl	800add0 <xQueueReceiveFromISR>
 8009ed0:	4603      	mov	r3, r0
 8009ed2:	2b01      	cmp	r3, #1
 8009ed4:	d001      	beq.n	8009eda <osMutexWait+0x62>
      return osErrorOS;
 8009ed6:	23ff      	movs	r3, #255	; 0xff
 8009ed8:	e015      	b.n	8009f06 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8009eda:	68bb      	ldr	r3, [r7, #8]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d011      	beq.n	8009f04 <osMutexWait+0x8c>
 8009ee0:	4b0b      	ldr	r3, [pc, #44]	; (8009f10 <osMutexWait+0x98>)
 8009ee2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ee6:	601a      	str	r2, [r3, #0]
 8009ee8:	f3bf 8f4f 	dsb	sy
 8009eec:	f3bf 8f6f 	isb	sy
 8009ef0:	e008      	b.n	8009f04 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8009ef2:	68f9      	ldr	r1, [r7, #12]
 8009ef4:	6878      	ldr	r0, [r7, #4]
 8009ef6:	f000 fe5f 	bl	800abb8 <xQueueSemaphoreTake>
 8009efa:	4603      	mov	r3, r0
 8009efc:	2b01      	cmp	r3, #1
 8009efe:	d001      	beq.n	8009f04 <osMutexWait+0x8c>
    return osErrorOS;
 8009f00:	23ff      	movs	r3, #255	; 0xff
 8009f02:	e000      	b.n	8009f06 <osMutexWait+0x8e>
  }
  
  return osOK;
 8009f04:	2300      	movs	r3, #0
}
 8009f06:	4618      	mov	r0, r3
 8009f08:	3710      	adds	r7, #16
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	bd80      	pop	{r7, pc}
 8009f0e:	bf00      	nop
 8009f10:	e000ed04 	.word	0xe000ed04

08009f14 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b084      	sub	sp, #16
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8009f20:	2300      	movs	r3, #0
 8009f22:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8009f24:	f7ff ff16 	bl	8009d54 <inHandlerMode>
 8009f28:	4603      	mov	r3, r0
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d016      	beq.n	8009f5c <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8009f2e:	f107 0308 	add.w	r3, r7, #8
 8009f32:	4619      	mov	r1, r3
 8009f34:	6878      	ldr	r0, [r7, #4]
 8009f36:	f000 fcd2 	bl	800a8de <xQueueGiveFromISR>
 8009f3a:	4603      	mov	r3, r0
 8009f3c:	2b01      	cmp	r3, #1
 8009f3e:	d001      	beq.n	8009f44 <osMutexRelease+0x30>
      return osErrorOS;
 8009f40:	23ff      	movs	r3, #255	; 0xff
 8009f42:	e017      	b.n	8009f74 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009f44:	68bb      	ldr	r3, [r7, #8]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d013      	beq.n	8009f72 <osMutexRelease+0x5e>
 8009f4a:	4b0c      	ldr	r3, [pc, #48]	; (8009f7c <osMutexRelease+0x68>)
 8009f4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f50:	601a      	str	r2, [r3, #0]
 8009f52:	f3bf 8f4f 	dsb	sy
 8009f56:	f3bf 8f6f 	isb	sy
 8009f5a:	e00a      	b.n	8009f72 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	2200      	movs	r2, #0
 8009f60:	2100      	movs	r1, #0
 8009f62:	6878      	ldr	r0, [r7, #4]
 8009f64:	f000 fb22 	bl	800a5ac <xQueueGenericSend>
 8009f68:	4603      	mov	r3, r0
 8009f6a:	2b01      	cmp	r3, #1
 8009f6c:	d001      	beq.n	8009f72 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8009f6e:	23ff      	movs	r3, #255	; 0xff
 8009f70:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8009f72:	68fb      	ldr	r3, [r7, #12]
}
 8009f74:	4618      	mov	r0, r3
 8009f76:	3710      	adds	r7, #16
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	bd80      	pop	{r7, pc}
 8009f7c:	e000ed04 	.word	0xe000ed04

08009f80 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8009f80:	b590      	push	{r4, r7, lr}
 8009f82:	b085      	sub	sp, #20
 8009f84:	af02      	add	r7, sp, #8
 8009f86:	6078      	str	r0, [r7, #4]
 8009f88:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	689b      	ldr	r3, [r3, #8]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d011      	beq.n	8009fb6 <osMessageCreate+0x36>
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	68db      	ldr	r3, [r3, #12]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d00d      	beq.n	8009fb6 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	6818      	ldr	r0, [r3, #0]
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	6859      	ldr	r1, [r3, #4]
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	689a      	ldr	r2, [r3, #8]
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	68db      	ldr	r3, [r3, #12]
 8009faa:	2400      	movs	r4, #0
 8009fac:	9400      	str	r4, [sp, #0]
 8009fae:	f000 f9df 	bl	800a370 <xQueueGenericCreateStatic>
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	e008      	b.n	8009fc8 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	6818      	ldr	r0, [r3, #0]
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	685b      	ldr	r3, [r3, #4]
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	4619      	mov	r1, r3
 8009fc2:	f000 fa4d 	bl	800a460 <xQueueGenericCreate>
 8009fc6:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8009fc8:	4618      	mov	r0, r3
 8009fca:	370c      	adds	r7, #12
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	bd90      	pop	{r4, r7, pc}

08009fd0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b086      	sub	sp, #24
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	60f8      	str	r0, [r7, #12]
 8009fd8:	60b9      	str	r1, [r7, #8]
 8009fda:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8009fdc:	2300      	movs	r3, #0
 8009fde:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8009fe4:	697b      	ldr	r3, [r7, #20]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d101      	bne.n	8009fee <osMessagePut+0x1e>
    ticks = 1;
 8009fea:	2301      	movs	r3, #1
 8009fec:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8009fee:	f7ff feb1 	bl	8009d54 <inHandlerMode>
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d018      	beq.n	800a02a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8009ff8:	f107 0210 	add.w	r2, r7, #16
 8009ffc:	f107 0108 	add.w	r1, r7, #8
 800a000:	2300      	movs	r3, #0
 800a002:	68f8      	ldr	r0, [r7, #12]
 800a004:	f000 fbd0 	bl	800a7a8 <xQueueGenericSendFromISR>
 800a008:	4603      	mov	r3, r0
 800a00a:	2b01      	cmp	r3, #1
 800a00c:	d001      	beq.n	800a012 <osMessagePut+0x42>
      return osErrorOS;
 800a00e:	23ff      	movs	r3, #255	; 0xff
 800a010:	e018      	b.n	800a044 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a012:	693b      	ldr	r3, [r7, #16]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d014      	beq.n	800a042 <osMessagePut+0x72>
 800a018:	4b0c      	ldr	r3, [pc, #48]	; (800a04c <osMessagePut+0x7c>)
 800a01a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a01e:	601a      	str	r2, [r3, #0]
 800a020:	f3bf 8f4f 	dsb	sy
 800a024:	f3bf 8f6f 	isb	sy
 800a028:	e00b      	b.n	800a042 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800a02a:	f107 0108 	add.w	r1, r7, #8
 800a02e:	2300      	movs	r3, #0
 800a030:	697a      	ldr	r2, [r7, #20]
 800a032:	68f8      	ldr	r0, [r7, #12]
 800a034:	f000 faba 	bl	800a5ac <xQueueGenericSend>
 800a038:	4603      	mov	r3, r0
 800a03a:	2b01      	cmp	r3, #1
 800a03c:	d001      	beq.n	800a042 <osMessagePut+0x72>
      return osErrorOS;
 800a03e:	23ff      	movs	r3, #255	; 0xff
 800a040:	e000      	b.n	800a044 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800a042:	2300      	movs	r3, #0
}
 800a044:	4618      	mov	r0, r3
 800a046:	3718      	adds	r7, #24
 800a048:	46bd      	mov	sp, r7
 800a04a:	bd80      	pop	{r7, pc}
 800a04c:	e000ed04 	.word	0xe000ed04

0800a050 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800a050:	b590      	push	{r4, r7, lr}
 800a052:	b08b      	sub	sp, #44	; 0x2c
 800a054:	af00      	add	r7, sp, #0
 800a056:	60f8      	str	r0, [r7, #12]
 800a058:	60b9      	str	r1, [r7, #8]
 800a05a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800a05c:	68bb      	ldr	r3, [r7, #8]
 800a05e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800a060:	2300      	movs	r3, #0
 800a062:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800a064:	68bb      	ldr	r3, [r7, #8]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d10a      	bne.n	800a080 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800a06a:	2380      	movs	r3, #128	; 0x80
 800a06c:	617b      	str	r3, [r7, #20]
    return event;
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	461c      	mov	r4, r3
 800a072:	f107 0314 	add.w	r3, r7, #20
 800a076:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a07a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a07e:	e054      	b.n	800a12a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800a080:	2300      	movs	r3, #0
 800a082:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800a084:	2300      	movs	r3, #0
 800a086:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a08e:	d103      	bne.n	800a098 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800a090:	f04f 33ff 	mov.w	r3, #4294967295
 800a094:	627b      	str	r3, [r7, #36]	; 0x24
 800a096:	e009      	b.n	800a0ac <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d006      	beq.n	800a0ac <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800a0a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d101      	bne.n	800a0ac <osMessageGet+0x5c>
      ticks = 1;
 800a0a8:	2301      	movs	r3, #1
 800a0aa:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800a0ac:	f7ff fe52 	bl	8009d54 <inHandlerMode>
 800a0b0:	4603      	mov	r3, r0
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d01c      	beq.n	800a0f0 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800a0b6:	f107 0220 	add.w	r2, r7, #32
 800a0ba:	f107 0314 	add.w	r3, r7, #20
 800a0be:	3304      	adds	r3, #4
 800a0c0:	4619      	mov	r1, r3
 800a0c2:	68b8      	ldr	r0, [r7, #8]
 800a0c4:	f000 fe84 	bl	800add0 <xQueueReceiveFromISR>
 800a0c8:	4603      	mov	r3, r0
 800a0ca:	2b01      	cmp	r3, #1
 800a0cc:	d102      	bne.n	800a0d4 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800a0ce:	2310      	movs	r3, #16
 800a0d0:	617b      	str	r3, [r7, #20]
 800a0d2:	e001      	b.n	800a0d8 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a0d8:	6a3b      	ldr	r3, [r7, #32]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d01d      	beq.n	800a11a <osMessageGet+0xca>
 800a0de:	4b15      	ldr	r3, [pc, #84]	; (800a134 <osMessageGet+0xe4>)
 800a0e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0e4:	601a      	str	r2, [r3, #0]
 800a0e6:	f3bf 8f4f 	dsb	sy
 800a0ea:	f3bf 8f6f 	isb	sy
 800a0ee:	e014      	b.n	800a11a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800a0f0:	f107 0314 	add.w	r3, r7, #20
 800a0f4:	3304      	adds	r3, #4
 800a0f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0f8:	4619      	mov	r1, r3
 800a0fa:	68b8      	ldr	r0, [r7, #8]
 800a0fc:	f000 fc7c 	bl	800a9f8 <xQueueReceive>
 800a100:	4603      	mov	r3, r0
 800a102:	2b01      	cmp	r3, #1
 800a104:	d102      	bne.n	800a10c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800a106:	2310      	movs	r3, #16
 800a108:	617b      	str	r3, [r7, #20]
 800a10a:	e006      	b.n	800a11a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800a10c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d101      	bne.n	800a116 <osMessageGet+0xc6>
 800a112:	2300      	movs	r3, #0
 800a114:	e000      	b.n	800a118 <osMessageGet+0xc8>
 800a116:	2340      	movs	r3, #64	; 0x40
 800a118:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	461c      	mov	r4, r3
 800a11e:	f107 0314 	add.w	r3, r7, #20
 800a122:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a126:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800a12a:	68f8      	ldr	r0, [r7, #12]
 800a12c:	372c      	adds	r7, #44	; 0x2c
 800a12e:	46bd      	mov	sp, r7
 800a130:	bd90      	pop	{r4, r7, pc}
 800a132:	bf00      	nop
 800a134:	e000ed04 	.word	0xe000ed04

0800a138 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a138:	b480      	push	{r7}
 800a13a:	b083      	sub	sp, #12
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	f103 0208 	add.w	r2, r3, #8
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	f04f 32ff 	mov.w	r2, #4294967295
 800a150:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	f103 0208 	add.w	r2, r3, #8
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	f103 0208 	add.w	r2, r3, #8
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	2200      	movs	r2, #0
 800a16a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a16c:	bf00      	nop
 800a16e:	370c      	adds	r7, #12
 800a170:	46bd      	mov	sp, r7
 800a172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a176:	4770      	bx	lr

0800a178 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a178:	b480      	push	{r7}
 800a17a:	b083      	sub	sp, #12
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2200      	movs	r2, #0
 800a184:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a186:	bf00      	nop
 800a188:	370c      	adds	r7, #12
 800a18a:	46bd      	mov	sp, r7
 800a18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a190:	4770      	bx	lr

0800a192 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a192:	b480      	push	{r7}
 800a194:	b085      	sub	sp, #20
 800a196:	af00      	add	r7, sp, #0
 800a198:	6078      	str	r0, [r7, #4]
 800a19a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	685b      	ldr	r3, [r3, #4]
 800a1a0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a1a2:	683b      	ldr	r3, [r7, #0]
 800a1a4:	68fa      	ldr	r2, [r7, #12]
 800a1a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	689a      	ldr	r2, [r3, #8]
 800a1ac:	683b      	ldr	r3, [r7, #0]
 800a1ae:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	689b      	ldr	r3, [r3, #8]
 800a1b4:	683a      	ldr	r2, [r7, #0]
 800a1b6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	683a      	ldr	r2, [r7, #0]
 800a1bc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	687a      	ldr	r2, [r7, #4]
 800a1c2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	1c5a      	adds	r2, r3, #1
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	601a      	str	r2, [r3, #0]
}
 800a1ce:	bf00      	nop
 800a1d0:	3714      	adds	r7, #20
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d8:	4770      	bx	lr

0800a1da <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a1da:	b480      	push	{r7}
 800a1dc:	b085      	sub	sp, #20
 800a1de:	af00      	add	r7, sp, #0
 800a1e0:	6078      	str	r0, [r7, #4]
 800a1e2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a1e4:	683b      	ldr	r3, [r7, #0]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a1ea:	68bb      	ldr	r3, [r7, #8]
 800a1ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1f0:	d103      	bne.n	800a1fa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	691b      	ldr	r3, [r3, #16]
 800a1f6:	60fb      	str	r3, [r7, #12]
 800a1f8:	e00c      	b.n	800a214 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	3308      	adds	r3, #8
 800a1fe:	60fb      	str	r3, [r7, #12]
 800a200:	e002      	b.n	800a208 <vListInsert+0x2e>
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	685b      	ldr	r3, [r3, #4]
 800a206:	60fb      	str	r3, [r7, #12]
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	685b      	ldr	r3, [r3, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	68ba      	ldr	r2, [r7, #8]
 800a210:	429a      	cmp	r2, r3
 800a212:	d2f6      	bcs.n	800a202 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	685a      	ldr	r2, [r3, #4]
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a21c:	683b      	ldr	r3, [r7, #0]
 800a21e:	685b      	ldr	r3, [r3, #4]
 800a220:	683a      	ldr	r2, [r7, #0]
 800a222:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a224:	683b      	ldr	r3, [r7, #0]
 800a226:	68fa      	ldr	r2, [r7, #12]
 800a228:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	683a      	ldr	r2, [r7, #0]
 800a22e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a230:	683b      	ldr	r3, [r7, #0]
 800a232:	687a      	ldr	r2, [r7, #4]
 800a234:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	1c5a      	adds	r2, r3, #1
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	601a      	str	r2, [r3, #0]
}
 800a240:	bf00      	nop
 800a242:	3714      	adds	r7, #20
 800a244:	46bd      	mov	sp, r7
 800a246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24a:	4770      	bx	lr

0800a24c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a24c:	b480      	push	{r7}
 800a24e:	b085      	sub	sp, #20
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	691b      	ldr	r3, [r3, #16]
 800a258:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	685b      	ldr	r3, [r3, #4]
 800a25e:	687a      	ldr	r2, [r7, #4]
 800a260:	6892      	ldr	r2, [r2, #8]
 800a262:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	689b      	ldr	r3, [r3, #8]
 800a268:	687a      	ldr	r2, [r7, #4]
 800a26a:	6852      	ldr	r2, [r2, #4]
 800a26c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	685b      	ldr	r3, [r3, #4]
 800a272:	687a      	ldr	r2, [r7, #4]
 800a274:	429a      	cmp	r2, r3
 800a276:	d103      	bne.n	800a280 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	689a      	ldr	r2, [r3, #8]
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	2200      	movs	r2, #0
 800a284:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	1e5a      	subs	r2, r3, #1
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	681b      	ldr	r3, [r3, #0]
}
 800a294:	4618      	mov	r0, r3
 800a296:	3714      	adds	r7, #20
 800a298:	46bd      	mov	sp, r7
 800a29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29e:	4770      	bx	lr

0800a2a0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b084      	sub	sp, #16
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
 800a2a8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d10a      	bne.n	800a2ca <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a2b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2b8:	f383 8811 	msr	BASEPRI, r3
 800a2bc:	f3bf 8f6f 	isb	sy
 800a2c0:	f3bf 8f4f 	dsb	sy
 800a2c4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a2c6:	bf00      	nop
 800a2c8:	e7fe      	b.n	800a2c8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a2ca:	f002 f86b 	bl	800c3a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	681a      	ldr	r2, [r3, #0]
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2d6:	68f9      	ldr	r1, [r7, #12]
 800a2d8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a2da:	fb01 f303 	mul.w	r3, r1, r3
 800a2de:	441a      	add	r2, r3
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	681a      	ldr	r2, [r3, #0]
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	681a      	ldr	r2, [r3, #0]
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2fa:	3b01      	subs	r3, #1
 800a2fc:	68f9      	ldr	r1, [r7, #12]
 800a2fe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a300:	fb01 f303 	mul.w	r3, r1, r3
 800a304:	441a      	add	r2, r3
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	22ff      	movs	r2, #255	; 0xff
 800a30e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	22ff      	movs	r2, #255	; 0xff
 800a316:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a31a:	683b      	ldr	r3, [r7, #0]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d114      	bne.n	800a34a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	691b      	ldr	r3, [r3, #16]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d01a      	beq.n	800a35e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	3310      	adds	r3, #16
 800a32c:	4618      	mov	r0, r3
 800a32e:	f001 fb27 	bl	800b980 <xTaskRemoveFromEventList>
 800a332:	4603      	mov	r3, r0
 800a334:	2b00      	cmp	r3, #0
 800a336:	d012      	beq.n	800a35e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a338:	4b0c      	ldr	r3, [pc, #48]	; (800a36c <xQueueGenericReset+0xcc>)
 800a33a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a33e:	601a      	str	r2, [r3, #0]
 800a340:	f3bf 8f4f 	dsb	sy
 800a344:	f3bf 8f6f 	isb	sy
 800a348:	e009      	b.n	800a35e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	3310      	adds	r3, #16
 800a34e:	4618      	mov	r0, r3
 800a350:	f7ff fef2 	bl	800a138 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	3324      	adds	r3, #36	; 0x24
 800a358:	4618      	mov	r0, r3
 800a35a:	f7ff feed 	bl	800a138 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a35e:	f002 f851 	bl	800c404 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a362:	2301      	movs	r3, #1
}
 800a364:	4618      	mov	r0, r3
 800a366:	3710      	adds	r7, #16
 800a368:	46bd      	mov	sp, r7
 800a36a:	bd80      	pop	{r7, pc}
 800a36c:	e000ed04 	.word	0xe000ed04

0800a370 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a370:	b580      	push	{r7, lr}
 800a372:	b08e      	sub	sp, #56	; 0x38
 800a374:	af02      	add	r7, sp, #8
 800a376:	60f8      	str	r0, [r7, #12]
 800a378:	60b9      	str	r1, [r7, #8]
 800a37a:	607a      	str	r2, [r7, #4]
 800a37c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d10a      	bne.n	800a39a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a384:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a388:	f383 8811 	msr	BASEPRI, r3
 800a38c:	f3bf 8f6f 	isb	sy
 800a390:	f3bf 8f4f 	dsb	sy
 800a394:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a396:	bf00      	nop
 800a398:	e7fe      	b.n	800a398 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a39a:	683b      	ldr	r3, [r7, #0]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d10a      	bne.n	800a3b6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a3a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3a4:	f383 8811 	msr	BASEPRI, r3
 800a3a8:	f3bf 8f6f 	isb	sy
 800a3ac:	f3bf 8f4f 	dsb	sy
 800a3b0:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a3b2:	bf00      	nop
 800a3b4:	e7fe      	b.n	800a3b4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d002      	beq.n	800a3c2 <xQueueGenericCreateStatic+0x52>
 800a3bc:	68bb      	ldr	r3, [r7, #8]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d001      	beq.n	800a3c6 <xQueueGenericCreateStatic+0x56>
 800a3c2:	2301      	movs	r3, #1
 800a3c4:	e000      	b.n	800a3c8 <xQueueGenericCreateStatic+0x58>
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d10a      	bne.n	800a3e2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a3cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3d0:	f383 8811 	msr	BASEPRI, r3
 800a3d4:	f3bf 8f6f 	isb	sy
 800a3d8:	f3bf 8f4f 	dsb	sy
 800a3dc:	623b      	str	r3, [r7, #32]
}
 800a3de:	bf00      	nop
 800a3e0:	e7fe      	b.n	800a3e0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d102      	bne.n	800a3ee <xQueueGenericCreateStatic+0x7e>
 800a3e8:	68bb      	ldr	r3, [r7, #8]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d101      	bne.n	800a3f2 <xQueueGenericCreateStatic+0x82>
 800a3ee:	2301      	movs	r3, #1
 800a3f0:	e000      	b.n	800a3f4 <xQueueGenericCreateStatic+0x84>
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d10a      	bne.n	800a40e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a3f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3fc:	f383 8811 	msr	BASEPRI, r3
 800a400:	f3bf 8f6f 	isb	sy
 800a404:	f3bf 8f4f 	dsb	sy
 800a408:	61fb      	str	r3, [r7, #28]
}
 800a40a:	bf00      	nop
 800a40c:	e7fe      	b.n	800a40c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a40e:	2348      	movs	r3, #72	; 0x48
 800a410:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a412:	697b      	ldr	r3, [r7, #20]
 800a414:	2b48      	cmp	r3, #72	; 0x48
 800a416:	d00a      	beq.n	800a42e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a41c:	f383 8811 	msr	BASEPRI, r3
 800a420:	f3bf 8f6f 	isb	sy
 800a424:	f3bf 8f4f 	dsb	sy
 800a428:	61bb      	str	r3, [r7, #24]
}
 800a42a:	bf00      	nop
 800a42c:	e7fe      	b.n	800a42c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a42e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a430:	683b      	ldr	r3, [r7, #0]
 800a432:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a436:	2b00      	cmp	r3, #0
 800a438:	d00d      	beq.n	800a456 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a43a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a43c:	2201      	movs	r2, #1
 800a43e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a442:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a448:	9300      	str	r3, [sp, #0]
 800a44a:	4613      	mov	r3, r2
 800a44c:	687a      	ldr	r2, [r7, #4]
 800a44e:	68b9      	ldr	r1, [r7, #8]
 800a450:	68f8      	ldr	r0, [r7, #12]
 800a452:	f000 f83f 	bl	800a4d4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a458:	4618      	mov	r0, r3
 800a45a:	3730      	adds	r7, #48	; 0x30
 800a45c:	46bd      	mov	sp, r7
 800a45e:	bd80      	pop	{r7, pc}

0800a460 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a460:	b580      	push	{r7, lr}
 800a462:	b08a      	sub	sp, #40	; 0x28
 800a464:	af02      	add	r7, sp, #8
 800a466:	60f8      	str	r0, [r7, #12]
 800a468:	60b9      	str	r1, [r7, #8]
 800a46a:	4613      	mov	r3, r2
 800a46c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d10a      	bne.n	800a48a <xQueueGenericCreate+0x2a>
	__asm volatile
 800a474:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a478:	f383 8811 	msr	BASEPRI, r3
 800a47c:	f3bf 8f6f 	isb	sy
 800a480:	f3bf 8f4f 	dsb	sy
 800a484:	613b      	str	r3, [r7, #16]
}
 800a486:	bf00      	nop
 800a488:	e7fe      	b.n	800a488 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	68ba      	ldr	r2, [r7, #8]
 800a48e:	fb02 f303 	mul.w	r3, r2, r3
 800a492:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a494:	69fb      	ldr	r3, [r7, #28]
 800a496:	3348      	adds	r3, #72	; 0x48
 800a498:	4618      	mov	r0, r3
 800a49a:	f002 f8a5 	bl	800c5e8 <pvPortMalloc>
 800a49e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a4a0:	69bb      	ldr	r3, [r7, #24]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d011      	beq.n	800a4ca <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a4a6:	69bb      	ldr	r3, [r7, #24]
 800a4a8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a4aa:	697b      	ldr	r3, [r7, #20]
 800a4ac:	3348      	adds	r3, #72	; 0x48
 800a4ae:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a4b0:	69bb      	ldr	r3, [r7, #24]
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a4b8:	79fa      	ldrb	r2, [r7, #7]
 800a4ba:	69bb      	ldr	r3, [r7, #24]
 800a4bc:	9300      	str	r3, [sp, #0]
 800a4be:	4613      	mov	r3, r2
 800a4c0:	697a      	ldr	r2, [r7, #20]
 800a4c2:	68b9      	ldr	r1, [r7, #8]
 800a4c4:	68f8      	ldr	r0, [r7, #12]
 800a4c6:	f000 f805 	bl	800a4d4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a4ca:	69bb      	ldr	r3, [r7, #24]
	}
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	3720      	adds	r7, #32
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	bd80      	pop	{r7, pc}

0800a4d4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b084      	sub	sp, #16
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	60f8      	str	r0, [r7, #12]
 800a4dc:	60b9      	str	r1, [r7, #8]
 800a4de:	607a      	str	r2, [r7, #4]
 800a4e0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a4e2:	68bb      	ldr	r3, [r7, #8]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d103      	bne.n	800a4f0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a4e8:	69bb      	ldr	r3, [r7, #24]
 800a4ea:	69ba      	ldr	r2, [r7, #24]
 800a4ec:	601a      	str	r2, [r3, #0]
 800a4ee:	e002      	b.n	800a4f6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a4f0:	69bb      	ldr	r3, [r7, #24]
 800a4f2:	687a      	ldr	r2, [r7, #4]
 800a4f4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a4f6:	69bb      	ldr	r3, [r7, #24]
 800a4f8:	68fa      	ldr	r2, [r7, #12]
 800a4fa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a4fc:	69bb      	ldr	r3, [r7, #24]
 800a4fe:	68ba      	ldr	r2, [r7, #8]
 800a500:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a502:	2101      	movs	r1, #1
 800a504:	69b8      	ldr	r0, [r7, #24]
 800a506:	f7ff fecb 	bl	800a2a0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a50a:	bf00      	nop
 800a50c:	3710      	adds	r7, #16
 800a50e:	46bd      	mov	sp, r7
 800a510:	bd80      	pop	{r7, pc}

0800a512 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800a512:	b580      	push	{r7, lr}
 800a514:	b082      	sub	sp, #8
 800a516:	af00      	add	r7, sp, #0
 800a518:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d00e      	beq.n	800a53e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2200      	movs	r2, #0
 800a524:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	2200      	movs	r2, #0
 800a52a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2200      	movs	r2, #0
 800a530:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800a532:	2300      	movs	r3, #0
 800a534:	2200      	movs	r2, #0
 800a536:	2100      	movs	r1, #0
 800a538:	6878      	ldr	r0, [r7, #4]
 800a53a:	f000 f837 	bl	800a5ac <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800a53e:	bf00      	nop
 800a540:	3708      	adds	r7, #8
 800a542:	46bd      	mov	sp, r7
 800a544:	bd80      	pop	{r7, pc}

0800a546 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800a546:	b580      	push	{r7, lr}
 800a548:	b086      	sub	sp, #24
 800a54a:	af00      	add	r7, sp, #0
 800a54c:	4603      	mov	r3, r0
 800a54e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a550:	2301      	movs	r3, #1
 800a552:	617b      	str	r3, [r7, #20]
 800a554:	2300      	movs	r3, #0
 800a556:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800a558:	79fb      	ldrb	r3, [r7, #7]
 800a55a:	461a      	mov	r2, r3
 800a55c:	6939      	ldr	r1, [r7, #16]
 800a55e:	6978      	ldr	r0, [r7, #20]
 800a560:	f7ff ff7e 	bl	800a460 <xQueueGenericCreate>
 800a564:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a566:	68f8      	ldr	r0, [r7, #12]
 800a568:	f7ff ffd3 	bl	800a512 <prvInitialiseMutex>

		return xNewQueue;
 800a56c:	68fb      	ldr	r3, [r7, #12]
	}
 800a56e:	4618      	mov	r0, r3
 800a570:	3718      	adds	r7, #24
 800a572:	46bd      	mov	sp, r7
 800a574:	bd80      	pop	{r7, pc}

0800a576 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800a576:	b580      	push	{r7, lr}
 800a578:	b088      	sub	sp, #32
 800a57a:	af02      	add	r7, sp, #8
 800a57c:	4603      	mov	r3, r0
 800a57e:	6039      	str	r1, [r7, #0]
 800a580:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a582:	2301      	movs	r3, #1
 800a584:	617b      	str	r3, [r7, #20]
 800a586:	2300      	movs	r3, #0
 800a588:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800a58a:	79fb      	ldrb	r3, [r7, #7]
 800a58c:	9300      	str	r3, [sp, #0]
 800a58e:	683b      	ldr	r3, [r7, #0]
 800a590:	2200      	movs	r2, #0
 800a592:	6939      	ldr	r1, [r7, #16]
 800a594:	6978      	ldr	r0, [r7, #20]
 800a596:	f7ff feeb 	bl	800a370 <xQueueGenericCreateStatic>
 800a59a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a59c:	68f8      	ldr	r0, [r7, #12]
 800a59e:	f7ff ffb8 	bl	800a512 <prvInitialiseMutex>

		return xNewQueue;
 800a5a2:	68fb      	ldr	r3, [r7, #12]
	}
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	3718      	adds	r7, #24
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	bd80      	pop	{r7, pc}

0800a5ac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b08e      	sub	sp, #56	; 0x38
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	60f8      	str	r0, [r7, #12]
 800a5b4:	60b9      	str	r1, [r7, #8]
 800a5b6:	607a      	str	r2, [r7, #4]
 800a5b8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a5c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d10a      	bne.n	800a5de <xQueueGenericSend+0x32>
	__asm volatile
 800a5c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5cc:	f383 8811 	msr	BASEPRI, r3
 800a5d0:	f3bf 8f6f 	isb	sy
 800a5d4:	f3bf 8f4f 	dsb	sy
 800a5d8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a5da:	bf00      	nop
 800a5dc:	e7fe      	b.n	800a5dc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a5de:	68bb      	ldr	r3, [r7, #8]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d103      	bne.n	800a5ec <xQueueGenericSend+0x40>
 800a5e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d101      	bne.n	800a5f0 <xQueueGenericSend+0x44>
 800a5ec:	2301      	movs	r3, #1
 800a5ee:	e000      	b.n	800a5f2 <xQueueGenericSend+0x46>
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d10a      	bne.n	800a60c <xQueueGenericSend+0x60>
	__asm volatile
 800a5f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5fa:	f383 8811 	msr	BASEPRI, r3
 800a5fe:	f3bf 8f6f 	isb	sy
 800a602:	f3bf 8f4f 	dsb	sy
 800a606:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a608:	bf00      	nop
 800a60a:	e7fe      	b.n	800a60a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a60c:	683b      	ldr	r3, [r7, #0]
 800a60e:	2b02      	cmp	r3, #2
 800a610:	d103      	bne.n	800a61a <xQueueGenericSend+0x6e>
 800a612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a616:	2b01      	cmp	r3, #1
 800a618:	d101      	bne.n	800a61e <xQueueGenericSend+0x72>
 800a61a:	2301      	movs	r3, #1
 800a61c:	e000      	b.n	800a620 <xQueueGenericSend+0x74>
 800a61e:	2300      	movs	r3, #0
 800a620:	2b00      	cmp	r3, #0
 800a622:	d10a      	bne.n	800a63a <xQueueGenericSend+0x8e>
	__asm volatile
 800a624:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a628:	f383 8811 	msr	BASEPRI, r3
 800a62c:	f3bf 8f6f 	isb	sy
 800a630:	f3bf 8f4f 	dsb	sy
 800a634:	623b      	str	r3, [r7, #32]
}
 800a636:	bf00      	nop
 800a638:	e7fe      	b.n	800a638 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a63a:	f001 fb61 	bl	800bd00 <xTaskGetSchedulerState>
 800a63e:	4603      	mov	r3, r0
 800a640:	2b00      	cmp	r3, #0
 800a642:	d102      	bne.n	800a64a <xQueueGenericSend+0x9e>
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2b00      	cmp	r3, #0
 800a648:	d101      	bne.n	800a64e <xQueueGenericSend+0xa2>
 800a64a:	2301      	movs	r3, #1
 800a64c:	e000      	b.n	800a650 <xQueueGenericSend+0xa4>
 800a64e:	2300      	movs	r3, #0
 800a650:	2b00      	cmp	r3, #0
 800a652:	d10a      	bne.n	800a66a <xQueueGenericSend+0xbe>
	__asm volatile
 800a654:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a658:	f383 8811 	msr	BASEPRI, r3
 800a65c:	f3bf 8f6f 	isb	sy
 800a660:	f3bf 8f4f 	dsb	sy
 800a664:	61fb      	str	r3, [r7, #28]
}
 800a666:	bf00      	nop
 800a668:	e7fe      	b.n	800a668 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a66a:	f001 fe9b 	bl	800c3a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a66e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a670:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a676:	429a      	cmp	r2, r3
 800a678:	d302      	bcc.n	800a680 <xQueueGenericSend+0xd4>
 800a67a:	683b      	ldr	r3, [r7, #0]
 800a67c:	2b02      	cmp	r3, #2
 800a67e:	d129      	bne.n	800a6d4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a680:	683a      	ldr	r2, [r7, #0]
 800a682:	68b9      	ldr	r1, [r7, #8]
 800a684:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a686:	f000 fc3b 	bl	800af00 <prvCopyDataToQueue>
 800a68a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a68c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a68e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a690:	2b00      	cmp	r3, #0
 800a692:	d010      	beq.n	800a6b6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a696:	3324      	adds	r3, #36	; 0x24
 800a698:	4618      	mov	r0, r3
 800a69a:	f001 f971 	bl	800b980 <xTaskRemoveFromEventList>
 800a69e:	4603      	mov	r3, r0
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d013      	beq.n	800a6cc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a6a4:	4b3f      	ldr	r3, [pc, #252]	; (800a7a4 <xQueueGenericSend+0x1f8>)
 800a6a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6aa:	601a      	str	r2, [r3, #0]
 800a6ac:	f3bf 8f4f 	dsb	sy
 800a6b0:	f3bf 8f6f 	isb	sy
 800a6b4:	e00a      	b.n	800a6cc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a6b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d007      	beq.n	800a6cc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a6bc:	4b39      	ldr	r3, [pc, #228]	; (800a7a4 <xQueueGenericSend+0x1f8>)
 800a6be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6c2:	601a      	str	r2, [r3, #0]
 800a6c4:	f3bf 8f4f 	dsb	sy
 800a6c8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a6cc:	f001 fe9a 	bl	800c404 <vPortExitCritical>
				return pdPASS;
 800a6d0:	2301      	movs	r3, #1
 800a6d2:	e063      	b.n	800a79c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d103      	bne.n	800a6e2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a6da:	f001 fe93 	bl	800c404 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a6de:	2300      	movs	r3, #0
 800a6e0:	e05c      	b.n	800a79c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a6e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d106      	bne.n	800a6f6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a6e8:	f107 0314 	add.w	r3, r7, #20
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	f001 f9a9 	bl	800ba44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a6f2:	2301      	movs	r3, #1
 800a6f4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a6f6:	f001 fe85 	bl	800c404 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a6fa:	f000 ff59 	bl	800b5b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a6fe:	f001 fe51 	bl	800c3a4 <vPortEnterCritical>
 800a702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a704:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a708:	b25b      	sxtb	r3, r3
 800a70a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a70e:	d103      	bne.n	800a718 <xQueueGenericSend+0x16c>
 800a710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a712:	2200      	movs	r2, #0
 800a714:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a71a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a71e:	b25b      	sxtb	r3, r3
 800a720:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a724:	d103      	bne.n	800a72e <xQueueGenericSend+0x182>
 800a726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a728:	2200      	movs	r2, #0
 800a72a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a72e:	f001 fe69 	bl	800c404 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a732:	1d3a      	adds	r2, r7, #4
 800a734:	f107 0314 	add.w	r3, r7, #20
 800a738:	4611      	mov	r1, r2
 800a73a:	4618      	mov	r0, r3
 800a73c:	f001 f998 	bl	800ba70 <xTaskCheckForTimeOut>
 800a740:	4603      	mov	r3, r0
 800a742:	2b00      	cmp	r3, #0
 800a744:	d124      	bne.n	800a790 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a746:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a748:	f000 fcd2 	bl	800b0f0 <prvIsQueueFull>
 800a74c:	4603      	mov	r3, r0
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d018      	beq.n	800a784 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a754:	3310      	adds	r3, #16
 800a756:	687a      	ldr	r2, [r7, #4]
 800a758:	4611      	mov	r1, r2
 800a75a:	4618      	mov	r0, r3
 800a75c:	f001 f8ec 	bl	800b938 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a760:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a762:	f000 fc5d 	bl	800b020 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a766:	f000 ff31 	bl	800b5cc <xTaskResumeAll>
 800a76a:	4603      	mov	r3, r0
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	f47f af7c 	bne.w	800a66a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a772:	4b0c      	ldr	r3, [pc, #48]	; (800a7a4 <xQueueGenericSend+0x1f8>)
 800a774:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a778:	601a      	str	r2, [r3, #0]
 800a77a:	f3bf 8f4f 	dsb	sy
 800a77e:	f3bf 8f6f 	isb	sy
 800a782:	e772      	b.n	800a66a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a784:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a786:	f000 fc4b 	bl	800b020 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a78a:	f000 ff1f 	bl	800b5cc <xTaskResumeAll>
 800a78e:	e76c      	b.n	800a66a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a790:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a792:	f000 fc45 	bl	800b020 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a796:	f000 ff19 	bl	800b5cc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a79a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a79c:	4618      	mov	r0, r3
 800a79e:	3738      	adds	r7, #56	; 0x38
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	bd80      	pop	{r7, pc}
 800a7a4:	e000ed04 	.word	0xe000ed04

0800a7a8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b090      	sub	sp, #64	; 0x40
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	60f8      	str	r0, [r7, #12]
 800a7b0:	60b9      	str	r1, [r7, #8]
 800a7b2:	607a      	str	r2, [r7, #4]
 800a7b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a7ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d10a      	bne.n	800a7d6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a7c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7c4:	f383 8811 	msr	BASEPRI, r3
 800a7c8:	f3bf 8f6f 	isb	sy
 800a7cc:	f3bf 8f4f 	dsb	sy
 800a7d0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a7d2:	bf00      	nop
 800a7d4:	e7fe      	b.n	800a7d4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a7d6:	68bb      	ldr	r3, [r7, #8]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d103      	bne.n	800a7e4 <xQueueGenericSendFromISR+0x3c>
 800a7dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d101      	bne.n	800a7e8 <xQueueGenericSendFromISR+0x40>
 800a7e4:	2301      	movs	r3, #1
 800a7e6:	e000      	b.n	800a7ea <xQueueGenericSendFromISR+0x42>
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d10a      	bne.n	800a804 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a7ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7f2:	f383 8811 	msr	BASEPRI, r3
 800a7f6:	f3bf 8f6f 	isb	sy
 800a7fa:	f3bf 8f4f 	dsb	sy
 800a7fe:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a800:	bf00      	nop
 800a802:	e7fe      	b.n	800a802 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	2b02      	cmp	r3, #2
 800a808:	d103      	bne.n	800a812 <xQueueGenericSendFromISR+0x6a>
 800a80a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a80c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a80e:	2b01      	cmp	r3, #1
 800a810:	d101      	bne.n	800a816 <xQueueGenericSendFromISR+0x6e>
 800a812:	2301      	movs	r3, #1
 800a814:	e000      	b.n	800a818 <xQueueGenericSendFromISR+0x70>
 800a816:	2300      	movs	r3, #0
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d10a      	bne.n	800a832 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a81c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a820:	f383 8811 	msr	BASEPRI, r3
 800a824:	f3bf 8f6f 	isb	sy
 800a828:	f3bf 8f4f 	dsb	sy
 800a82c:	623b      	str	r3, [r7, #32]
}
 800a82e:	bf00      	nop
 800a830:	e7fe      	b.n	800a830 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a832:	f001 fe99 	bl	800c568 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a836:	f3ef 8211 	mrs	r2, BASEPRI
 800a83a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a83e:	f383 8811 	msr	BASEPRI, r3
 800a842:	f3bf 8f6f 	isb	sy
 800a846:	f3bf 8f4f 	dsb	sy
 800a84a:	61fa      	str	r2, [r7, #28]
 800a84c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a84e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a850:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a854:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a85a:	429a      	cmp	r2, r3
 800a85c:	d302      	bcc.n	800a864 <xQueueGenericSendFromISR+0xbc>
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	2b02      	cmp	r3, #2
 800a862:	d12f      	bne.n	800a8c4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a866:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a86a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a86e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a872:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a874:	683a      	ldr	r2, [r7, #0]
 800a876:	68b9      	ldr	r1, [r7, #8]
 800a878:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a87a:	f000 fb41 	bl	800af00 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a87e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a882:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a886:	d112      	bne.n	800a8ae <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a88a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d016      	beq.n	800a8be <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a892:	3324      	adds	r3, #36	; 0x24
 800a894:	4618      	mov	r0, r3
 800a896:	f001 f873 	bl	800b980 <xTaskRemoveFromEventList>
 800a89a:	4603      	mov	r3, r0
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d00e      	beq.n	800a8be <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d00b      	beq.n	800a8be <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	2201      	movs	r2, #1
 800a8aa:	601a      	str	r2, [r3, #0]
 800a8ac:	e007      	b.n	800a8be <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a8ae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a8b2:	3301      	adds	r3, #1
 800a8b4:	b2db      	uxtb	r3, r3
 800a8b6:	b25a      	sxtb	r2, r3
 800a8b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a8be:	2301      	movs	r3, #1
 800a8c0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a8c2:	e001      	b.n	800a8c8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a8c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8ca:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a8cc:	697b      	ldr	r3, [r7, #20]
 800a8ce:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a8d2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a8d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	3740      	adds	r7, #64	; 0x40
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	bd80      	pop	{r7, pc}

0800a8de <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a8de:	b580      	push	{r7, lr}
 800a8e0:	b08e      	sub	sp, #56	; 0x38
 800a8e2:	af00      	add	r7, sp, #0
 800a8e4:	6078      	str	r0, [r7, #4]
 800a8e6:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a8ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d10a      	bne.n	800a908 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800a8f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8f6:	f383 8811 	msr	BASEPRI, r3
 800a8fa:	f3bf 8f6f 	isb	sy
 800a8fe:	f3bf 8f4f 	dsb	sy
 800a902:	623b      	str	r3, [r7, #32]
}
 800a904:	bf00      	nop
 800a906:	e7fe      	b.n	800a906 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a90a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d00a      	beq.n	800a926 <xQueueGiveFromISR+0x48>
	__asm volatile
 800a910:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a914:	f383 8811 	msr	BASEPRI, r3
 800a918:	f3bf 8f6f 	isb	sy
 800a91c:	f3bf 8f4f 	dsb	sy
 800a920:	61fb      	str	r3, [r7, #28]
}
 800a922:	bf00      	nop
 800a924:	e7fe      	b.n	800a924 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d103      	bne.n	800a936 <xQueueGiveFromISR+0x58>
 800a92e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a930:	689b      	ldr	r3, [r3, #8]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d101      	bne.n	800a93a <xQueueGiveFromISR+0x5c>
 800a936:	2301      	movs	r3, #1
 800a938:	e000      	b.n	800a93c <xQueueGiveFromISR+0x5e>
 800a93a:	2300      	movs	r3, #0
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d10a      	bne.n	800a956 <xQueueGiveFromISR+0x78>
	__asm volatile
 800a940:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a944:	f383 8811 	msr	BASEPRI, r3
 800a948:	f3bf 8f6f 	isb	sy
 800a94c:	f3bf 8f4f 	dsb	sy
 800a950:	61bb      	str	r3, [r7, #24]
}
 800a952:	bf00      	nop
 800a954:	e7fe      	b.n	800a954 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a956:	f001 fe07 	bl	800c568 <vPortValidateInterruptPriority>
	__asm volatile
 800a95a:	f3ef 8211 	mrs	r2, BASEPRI
 800a95e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a962:	f383 8811 	msr	BASEPRI, r3
 800a966:	f3bf 8f6f 	isb	sy
 800a96a:	f3bf 8f4f 	dsb	sy
 800a96e:	617a      	str	r2, [r7, #20]
 800a970:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a972:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a974:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a97a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a97c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a97e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a980:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a982:	429a      	cmp	r2, r3
 800a984:	d22b      	bcs.n	800a9de <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a988:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a98c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a992:	1c5a      	adds	r2, r3, #1
 800a994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a996:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a998:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a99c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9a0:	d112      	bne.n	800a9c8 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a9a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d016      	beq.n	800a9d8 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a9aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9ac:	3324      	adds	r3, #36	; 0x24
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	f000 ffe6 	bl	800b980 <xTaskRemoveFromEventList>
 800a9b4:	4603      	mov	r3, r0
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d00e      	beq.n	800a9d8 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a9ba:	683b      	ldr	r3, [r7, #0]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d00b      	beq.n	800a9d8 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a9c0:	683b      	ldr	r3, [r7, #0]
 800a9c2:	2201      	movs	r2, #1
 800a9c4:	601a      	str	r2, [r3, #0]
 800a9c6:	e007      	b.n	800a9d8 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a9c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a9cc:	3301      	adds	r3, #1
 800a9ce:	b2db      	uxtb	r3, r3
 800a9d0:	b25a      	sxtb	r2, r3
 800a9d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a9d8:	2301      	movs	r3, #1
 800a9da:	637b      	str	r3, [r7, #52]	; 0x34
 800a9dc:	e001      	b.n	800a9e2 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a9de:	2300      	movs	r3, #0
 800a9e0:	637b      	str	r3, [r7, #52]	; 0x34
 800a9e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9e4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	f383 8811 	msr	BASEPRI, r3
}
 800a9ec:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a9ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	3738      	adds	r7, #56	; 0x38
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	bd80      	pop	{r7, pc}

0800a9f8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	b08c      	sub	sp, #48	; 0x30
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	60f8      	str	r0, [r7, #12]
 800aa00:	60b9      	str	r1, [r7, #8]
 800aa02:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800aa04:	2300      	movs	r3, #0
 800aa06:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800aa0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d10a      	bne.n	800aa28 <xQueueReceive+0x30>
	__asm volatile
 800aa12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa16:	f383 8811 	msr	BASEPRI, r3
 800aa1a:	f3bf 8f6f 	isb	sy
 800aa1e:	f3bf 8f4f 	dsb	sy
 800aa22:	623b      	str	r3, [r7, #32]
}
 800aa24:	bf00      	nop
 800aa26:	e7fe      	b.n	800aa26 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aa28:	68bb      	ldr	r3, [r7, #8]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d103      	bne.n	800aa36 <xQueueReceive+0x3e>
 800aa2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d101      	bne.n	800aa3a <xQueueReceive+0x42>
 800aa36:	2301      	movs	r3, #1
 800aa38:	e000      	b.n	800aa3c <xQueueReceive+0x44>
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d10a      	bne.n	800aa56 <xQueueReceive+0x5e>
	__asm volatile
 800aa40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa44:	f383 8811 	msr	BASEPRI, r3
 800aa48:	f3bf 8f6f 	isb	sy
 800aa4c:	f3bf 8f4f 	dsb	sy
 800aa50:	61fb      	str	r3, [r7, #28]
}
 800aa52:	bf00      	nop
 800aa54:	e7fe      	b.n	800aa54 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800aa56:	f001 f953 	bl	800bd00 <xTaskGetSchedulerState>
 800aa5a:	4603      	mov	r3, r0
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d102      	bne.n	800aa66 <xQueueReceive+0x6e>
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d101      	bne.n	800aa6a <xQueueReceive+0x72>
 800aa66:	2301      	movs	r3, #1
 800aa68:	e000      	b.n	800aa6c <xQueueReceive+0x74>
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d10a      	bne.n	800aa86 <xQueueReceive+0x8e>
	__asm volatile
 800aa70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa74:	f383 8811 	msr	BASEPRI, r3
 800aa78:	f3bf 8f6f 	isb	sy
 800aa7c:	f3bf 8f4f 	dsb	sy
 800aa80:	61bb      	str	r3, [r7, #24]
}
 800aa82:	bf00      	nop
 800aa84:	e7fe      	b.n	800aa84 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800aa86:	f001 fc8d 	bl	800c3a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aa8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa8e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aa90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d01f      	beq.n	800aad6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800aa96:	68b9      	ldr	r1, [r7, #8]
 800aa98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa9a:	f000 fa9b 	bl	800afd4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800aa9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaa0:	1e5a      	subs	r2, r3, #1
 800aaa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaa4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aaa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaa8:	691b      	ldr	r3, [r3, #16]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d00f      	beq.n	800aace <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aaae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aab0:	3310      	adds	r3, #16
 800aab2:	4618      	mov	r0, r3
 800aab4:	f000 ff64 	bl	800b980 <xTaskRemoveFromEventList>
 800aab8:	4603      	mov	r3, r0
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d007      	beq.n	800aace <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800aabe:	4b3d      	ldr	r3, [pc, #244]	; (800abb4 <xQueueReceive+0x1bc>)
 800aac0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aac4:	601a      	str	r2, [r3, #0]
 800aac6:	f3bf 8f4f 	dsb	sy
 800aaca:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800aace:	f001 fc99 	bl	800c404 <vPortExitCritical>
				return pdPASS;
 800aad2:	2301      	movs	r3, #1
 800aad4:	e069      	b.n	800abaa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d103      	bne.n	800aae4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800aadc:	f001 fc92 	bl	800c404 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800aae0:	2300      	movs	r3, #0
 800aae2:	e062      	b.n	800abaa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800aae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d106      	bne.n	800aaf8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800aaea:	f107 0310 	add.w	r3, r7, #16
 800aaee:	4618      	mov	r0, r3
 800aaf0:	f000 ffa8 	bl	800ba44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aaf4:	2301      	movs	r3, #1
 800aaf6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aaf8:	f001 fc84 	bl	800c404 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aafc:	f000 fd58 	bl	800b5b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ab00:	f001 fc50 	bl	800c3a4 <vPortEnterCritical>
 800ab04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab06:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ab0a:	b25b      	sxtb	r3, r3
 800ab0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab10:	d103      	bne.n	800ab1a <xQueueReceive+0x122>
 800ab12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab14:	2200      	movs	r2, #0
 800ab16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ab1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ab20:	b25b      	sxtb	r3, r3
 800ab22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab26:	d103      	bne.n	800ab30 <xQueueReceive+0x138>
 800ab28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ab30:	f001 fc68 	bl	800c404 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ab34:	1d3a      	adds	r2, r7, #4
 800ab36:	f107 0310 	add.w	r3, r7, #16
 800ab3a:	4611      	mov	r1, r2
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	f000 ff97 	bl	800ba70 <xTaskCheckForTimeOut>
 800ab42:	4603      	mov	r3, r0
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d123      	bne.n	800ab90 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ab48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab4a:	f000 fabb 	bl	800b0c4 <prvIsQueueEmpty>
 800ab4e:	4603      	mov	r3, r0
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d017      	beq.n	800ab84 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ab54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab56:	3324      	adds	r3, #36	; 0x24
 800ab58:	687a      	ldr	r2, [r7, #4]
 800ab5a:	4611      	mov	r1, r2
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	f000 feeb 	bl	800b938 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ab62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab64:	f000 fa5c 	bl	800b020 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ab68:	f000 fd30 	bl	800b5cc <xTaskResumeAll>
 800ab6c:	4603      	mov	r3, r0
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d189      	bne.n	800aa86 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800ab72:	4b10      	ldr	r3, [pc, #64]	; (800abb4 <xQueueReceive+0x1bc>)
 800ab74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab78:	601a      	str	r2, [r3, #0]
 800ab7a:	f3bf 8f4f 	dsb	sy
 800ab7e:	f3bf 8f6f 	isb	sy
 800ab82:	e780      	b.n	800aa86 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ab84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab86:	f000 fa4b 	bl	800b020 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ab8a:	f000 fd1f 	bl	800b5cc <xTaskResumeAll>
 800ab8e:	e77a      	b.n	800aa86 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ab90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab92:	f000 fa45 	bl	800b020 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ab96:	f000 fd19 	bl	800b5cc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ab9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab9c:	f000 fa92 	bl	800b0c4 <prvIsQueueEmpty>
 800aba0:	4603      	mov	r3, r0
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	f43f af6f 	beq.w	800aa86 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800aba8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800abaa:	4618      	mov	r0, r3
 800abac:	3730      	adds	r7, #48	; 0x30
 800abae:	46bd      	mov	sp, r7
 800abb0:	bd80      	pop	{r7, pc}
 800abb2:	bf00      	nop
 800abb4:	e000ed04 	.word	0xe000ed04

0800abb8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800abb8:	b580      	push	{r7, lr}
 800abba:	b08e      	sub	sp, #56	; 0x38
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
 800abc0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800abc2:	2300      	movs	r3, #0
 800abc4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800abca:	2300      	movs	r3, #0
 800abcc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800abce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d10a      	bne.n	800abea <xQueueSemaphoreTake+0x32>
	__asm volatile
 800abd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abd8:	f383 8811 	msr	BASEPRI, r3
 800abdc:	f3bf 8f6f 	isb	sy
 800abe0:	f3bf 8f4f 	dsb	sy
 800abe4:	623b      	str	r3, [r7, #32]
}
 800abe6:	bf00      	nop
 800abe8:	e7fe      	b.n	800abe8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800abea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d00a      	beq.n	800ac08 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800abf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abf6:	f383 8811 	msr	BASEPRI, r3
 800abfa:	f3bf 8f6f 	isb	sy
 800abfe:	f3bf 8f4f 	dsb	sy
 800ac02:	61fb      	str	r3, [r7, #28]
}
 800ac04:	bf00      	nop
 800ac06:	e7fe      	b.n	800ac06 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ac08:	f001 f87a 	bl	800bd00 <xTaskGetSchedulerState>
 800ac0c:	4603      	mov	r3, r0
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d102      	bne.n	800ac18 <xQueueSemaphoreTake+0x60>
 800ac12:	683b      	ldr	r3, [r7, #0]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d101      	bne.n	800ac1c <xQueueSemaphoreTake+0x64>
 800ac18:	2301      	movs	r3, #1
 800ac1a:	e000      	b.n	800ac1e <xQueueSemaphoreTake+0x66>
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d10a      	bne.n	800ac38 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800ac22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac26:	f383 8811 	msr	BASEPRI, r3
 800ac2a:	f3bf 8f6f 	isb	sy
 800ac2e:	f3bf 8f4f 	dsb	sy
 800ac32:	61bb      	str	r3, [r7, #24]
}
 800ac34:	bf00      	nop
 800ac36:	e7fe      	b.n	800ac36 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ac38:	f001 fbb4 	bl	800c3a4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800ac3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac40:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800ac42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d024      	beq.n	800ac92 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800ac48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac4a:	1e5a      	subs	r2, r3, #1
 800ac4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac4e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ac50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d104      	bne.n	800ac62 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800ac58:	f001 f9fa 	bl	800c050 <pvTaskIncrementMutexHeldCount>
 800ac5c:	4602      	mov	r2, r0
 800ac5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac60:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ac62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac64:	691b      	ldr	r3, [r3, #16]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d00f      	beq.n	800ac8a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ac6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac6c:	3310      	adds	r3, #16
 800ac6e:	4618      	mov	r0, r3
 800ac70:	f000 fe86 	bl	800b980 <xTaskRemoveFromEventList>
 800ac74:	4603      	mov	r3, r0
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d007      	beq.n	800ac8a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ac7a:	4b54      	ldr	r3, [pc, #336]	; (800adcc <xQueueSemaphoreTake+0x214>)
 800ac7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac80:	601a      	str	r2, [r3, #0]
 800ac82:	f3bf 8f4f 	dsb	sy
 800ac86:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ac8a:	f001 fbbb 	bl	800c404 <vPortExitCritical>
				return pdPASS;
 800ac8e:	2301      	movs	r3, #1
 800ac90:	e097      	b.n	800adc2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ac92:	683b      	ldr	r3, [r7, #0]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d111      	bne.n	800acbc <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800ac98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d00a      	beq.n	800acb4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800ac9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aca2:	f383 8811 	msr	BASEPRI, r3
 800aca6:	f3bf 8f6f 	isb	sy
 800acaa:	f3bf 8f4f 	dsb	sy
 800acae:	617b      	str	r3, [r7, #20]
}
 800acb0:	bf00      	nop
 800acb2:	e7fe      	b.n	800acb2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800acb4:	f001 fba6 	bl	800c404 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800acb8:	2300      	movs	r3, #0
 800acba:	e082      	b.n	800adc2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800acbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d106      	bne.n	800acd0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800acc2:	f107 030c 	add.w	r3, r7, #12
 800acc6:	4618      	mov	r0, r3
 800acc8:	f000 febc 	bl	800ba44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800accc:	2301      	movs	r3, #1
 800acce:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800acd0:	f001 fb98 	bl	800c404 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800acd4:	f000 fc6c 	bl	800b5b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800acd8:	f001 fb64 	bl	800c3a4 <vPortEnterCritical>
 800acdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acde:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ace2:	b25b      	sxtb	r3, r3
 800ace4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ace8:	d103      	bne.n	800acf2 <xQueueSemaphoreTake+0x13a>
 800acea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acec:	2200      	movs	r2, #0
 800acee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800acf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acf4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800acf8:	b25b      	sxtb	r3, r3
 800acfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acfe:	d103      	bne.n	800ad08 <xQueueSemaphoreTake+0x150>
 800ad00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad02:	2200      	movs	r2, #0
 800ad04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ad08:	f001 fb7c 	bl	800c404 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ad0c:	463a      	mov	r2, r7
 800ad0e:	f107 030c 	add.w	r3, r7, #12
 800ad12:	4611      	mov	r1, r2
 800ad14:	4618      	mov	r0, r3
 800ad16:	f000 feab 	bl	800ba70 <xTaskCheckForTimeOut>
 800ad1a:	4603      	mov	r3, r0
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d132      	bne.n	800ad86 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ad20:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ad22:	f000 f9cf 	bl	800b0c4 <prvIsQueueEmpty>
 800ad26:	4603      	mov	r3, r0
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d026      	beq.n	800ad7a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ad2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d109      	bne.n	800ad48 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800ad34:	f001 fb36 	bl	800c3a4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ad38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad3a:	689b      	ldr	r3, [r3, #8]
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	f000 fffd 	bl	800bd3c <xTaskPriorityInherit>
 800ad42:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800ad44:	f001 fb5e 	bl	800c404 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ad48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad4a:	3324      	adds	r3, #36	; 0x24
 800ad4c:	683a      	ldr	r2, [r7, #0]
 800ad4e:	4611      	mov	r1, r2
 800ad50:	4618      	mov	r0, r3
 800ad52:	f000 fdf1 	bl	800b938 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ad56:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ad58:	f000 f962 	bl	800b020 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ad5c:	f000 fc36 	bl	800b5cc <xTaskResumeAll>
 800ad60:	4603      	mov	r3, r0
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	f47f af68 	bne.w	800ac38 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800ad68:	4b18      	ldr	r3, [pc, #96]	; (800adcc <xQueueSemaphoreTake+0x214>)
 800ad6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad6e:	601a      	str	r2, [r3, #0]
 800ad70:	f3bf 8f4f 	dsb	sy
 800ad74:	f3bf 8f6f 	isb	sy
 800ad78:	e75e      	b.n	800ac38 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800ad7a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ad7c:	f000 f950 	bl	800b020 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ad80:	f000 fc24 	bl	800b5cc <xTaskResumeAll>
 800ad84:	e758      	b.n	800ac38 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800ad86:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ad88:	f000 f94a 	bl	800b020 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ad8c:	f000 fc1e 	bl	800b5cc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ad90:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ad92:	f000 f997 	bl	800b0c4 <prvIsQueueEmpty>
 800ad96:	4603      	mov	r3, r0
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	f43f af4d 	beq.w	800ac38 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800ad9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d00d      	beq.n	800adc0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800ada4:	f001 fafe 	bl	800c3a4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ada8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800adaa:	f000 f891 	bl	800aed0 <prvGetDisinheritPriorityAfterTimeout>
 800adae:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800adb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adb2:	689b      	ldr	r3, [r3, #8]
 800adb4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800adb6:	4618      	mov	r0, r3
 800adb8:	f001 f8bc 	bl	800bf34 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800adbc:	f001 fb22 	bl	800c404 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800adc0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800adc2:	4618      	mov	r0, r3
 800adc4:	3738      	adds	r7, #56	; 0x38
 800adc6:	46bd      	mov	sp, r7
 800adc8:	bd80      	pop	{r7, pc}
 800adca:	bf00      	nop
 800adcc:	e000ed04 	.word	0xe000ed04

0800add0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800add0:	b580      	push	{r7, lr}
 800add2:	b08e      	sub	sp, #56	; 0x38
 800add4:	af00      	add	r7, sp, #0
 800add6:	60f8      	str	r0, [r7, #12]
 800add8:	60b9      	str	r1, [r7, #8]
 800adda:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ade0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d10a      	bne.n	800adfc <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800ade6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adea:	f383 8811 	msr	BASEPRI, r3
 800adee:	f3bf 8f6f 	isb	sy
 800adf2:	f3bf 8f4f 	dsb	sy
 800adf6:	623b      	str	r3, [r7, #32]
}
 800adf8:	bf00      	nop
 800adfa:	e7fe      	b.n	800adfa <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800adfc:	68bb      	ldr	r3, [r7, #8]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d103      	bne.n	800ae0a <xQueueReceiveFromISR+0x3a>
 800ae02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d101      	bne.n	800ae0e <xQueueReceiveFromISR+0x3e>
 800ae0a:	2301      	movs	r3, #1
 800ae0c:	e000      	b.n	800ae10 <xQueueReceiveFromISR+0x40>
 800ae0e:	2300      	movs	r3, #0
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d10a      	bne.n	800ae2a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800ae14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae18:	f383 8811 	msr	BASEPRI, r3
 800ae1c:	f3bf 8f6f 	isb	sy
 800ae20:	f3bf 8f4f 	dsb	sy
 800ae24:	61fb      	str	r3, [r7, #28]
}
 800ae26:	bf00      	nop
 800ae28:	e7fe      	b.n	800ae28 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ae2a:	f001 fb9d 	bl	800c568 <vPortValidateInterruptPriority>
	__asm volatile
 800ae2e:	f3ef 8211 	mrs	r2, BASEPRI
 800ae32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae36:	f383 8811 	msr	BASEPRI, r3
 800ae3a:	f3bf 8f6f 	isb	sy
 800ae3e:	f3bf 8f4f 	dsb	sy
 800ae42:	61ba      	str	r2, [r7, #24]
 800ae44:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800ae46:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ae48:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ae4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae4e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ae50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d02f      	beq.n	800aeb6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800ae56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ae5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ae60:	68b9      	ldr	r1, [r7, #8]
 800ae62:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ae64:	f000 f8b6 	bl	800afd4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ae68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae6a:	1e5a      	subs	r2, r3, #1
 800ae6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae6e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ae70:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ae74:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae78:	d112      	bne.n	800aea0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ae7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae7c:	691b      	ldr	r3, [r3, #16]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d016      	beq.n	800aeb0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ae82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae84:	3310      	adds	r3, #16
 800ae86:	4618      	mov	r0, r3
 800ae88:	f000 fd7a 	bl	800b980 <xTaskRemoveFromEventList>
 800ae8c:	4603      	mov	r3, r0
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d00e      	beq.n	800aeb0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d00b      	beq.n	800aeb0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	2201      	movs	r2, #1
 800ae9c:	601a      	str	r2, [r3, #0]
 800ae9e:	e007      	b.n	800aeb0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800aea0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aea4:	3301      	adds	r3, #1
 800aea6:	b2db      	uxtb	r3, r3
 800aea8:	b25a      	sxtb	r2, r3
 800aeaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800aeb0:	2301      	movs	r3, #1
 800aeb2:	637b      	str	r3, [r7, #52]	; 0x34
 800aeb4:	e001      	b.n	800aeba <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	637b      	str	r3, [r7, #52]	; 0x34
 800aeba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aebc:	613b      	str	r3, [r7, #16]
	__asm volatile
 800aebe:	693b      	ldr	r3, [r7, #16]
 800aec0:	f383 8811 	msr	BASEPRI, r3
}
 800aec4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800aec6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800aec8:	4618      	mov	r0, r3
 800aeca:	3738      	adds	r7, #56	; 0x38
 800aecc:	46bd      	mov	sp, r7
 800aece:	bd80      	pop	{r7, pc}

0800aed0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800aed0:	b480      	push	{r7}
 800aed2:	b085      	sub	sp, #20
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d006      	beq.n	800aeee <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	f1c3 0307 	rsb	r3, r3, #7
 800aeea:	60fb      	str	r3, [r7, #12]
 800aeec:	e001      	b.n	800aef2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800aeee:	2300      	movs	r3, #0
 800aef0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800aef2:	68fb      	ldr	r3, [r7, #12]
	}
 800aef4:	4618      	mov	r0, r3
 800aef6:	3714      	adds	r7, #20
 800aef8:	46bd      	mov	sp, r7
 800aefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefe:	4770      	bx	lr

0800af00 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800af00:	b580      	push	{r7, lr}
 800af02:	b086      	sub	sp, #24
 800af04:	af00      	add	r7, sp, #0
 800af06:	60f8      	str	r0, [r7, #12]
 800af08:	60b9      	str	r1, [r7, #8]
 800af0a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800af0c:	2300      	movs	r3, #0
 800af0e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af14:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d10d      	bne.n	800af3a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d14d      	bne.n	800afc2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	689b      	ldr	r3, [r3, #8]
 800af2a:	4618      	mov	r0, r3
 800af2c:	f000 ff7c 	bl	800be28 <xTaskPriorityDisinherit>
 800af30:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	2200      	movs	r2, #0
 800af36:	609a      	str	r2, [r3, #8]
 800af38:	e043      	b.n	800afc2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d119      	bne.n	800af74 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	6858      	ldr	r0, [r3, #4]
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af48:	461a      	mov	r2, r3
 800af4a:	68b9      	ldr	r1, [r7, #8]
 800af4c:	f002 fae2 	bl	800d514 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	685a      	ldr	r2, [r3, #4]
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af58:	441a      	add	r2, r3
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	685a      	ldr	r2, [r3, #4]
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	689b      	ldr	r3, [r3, #8]
 800af66:	429a      	cmp	r2, r3
 800af68:	d32b      	bcc.n	800afc2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	681a      	ldr	r2, [r3, #0]
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	605a      	str	r2, [r3, #4]
 800af72:	e026      	b.n	800afc2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	68d8      	ldr	r0, [r3, #12]
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af7c:	461a      	mov	r2, r3
 800af7e:	68b9      	ldr	r1, [r7, #8]
 800af80:	f002 fac8 	bl	800d514 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	68da      	ldr	r2, [r3, #12]
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af8c:	425b      	negs	r3, r3
 800af8e:	441a      	add	r2, r3
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	68da      	ldr	r2, [r3, #12]
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	429a      	cmp	r2, r3
 800af9e:	d207      	bcs.n	800afb0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	689a      	ldr	r2, [r3, #8]
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afa8:	425b      	negs	r3, r3
 800afaa:	441a      	add	r2, r3
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	2b02      	cmp	r3, #2
 800afb4:	d105      	bne.n	800afc2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800afb6:	693b      	ldr	r3, [r7, #16]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d002      	beq.n	800afc2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800afbc:	693b      	ldr	r3, [r7, #16]
 800afbe:	3b01      	subs	r3, #1
 800afc0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800afc2:	693b      	ldr	r3, [r7, #16]
 800afc4:	1c5a      	adds	r2, r3, #1
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800afca:	697b      	ldr	r3, [r7, #20]
}
 800afcc:	4618      	mov	r0, r3
 800afce:	3718      	adds	r7, #24
 800afd0:	46bd      	mov	sp, r7
 800afd2:	bd80      	pop	{r7, pc}

0800afd4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b082      	sub	sp, #8
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
 800afdc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d018      	beq.n	800b018 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	68da      	ldr	r2, [r3, #12]
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afee:	441a      	add	r2, r3
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	68da      	ldr	r2, [r3, #12]
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	689b      	ldr	r3, [r3, #8]
 800affc:	429a      	cmp	r2, r3
 800affe:	d303      	bcc.n	800b008 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681a      	ldr	r2, [r3, #0]
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	68d9      	ldr	r1, [r3, #12]
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b010:	461a      	mov	r2, r3
 800b012:	6838      	ldr	r0, [r7, #0]
 800b014:	f002 fa7e 	bl	800d514 <memcpy>
	}
}
 800b018:	bf00      	nop
 800b01a:	3708      	adds	r7, #8
 800b01c:	46bd      	mov	sp, r7
 800b01e:	bd80      	pop	{r7, pc}

0800b020 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b084      	sub	sp, #16
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b028:	f001 f9bc 	bl	800c3a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b032:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b034:	e011      	b.n	800b05a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d012      	beq.n	800b064 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	3324      	adds	r3, #36	; 0x24
 800b042:	4618      	mov	r0, r3
 800b044:	f000 fc9c 	bl	800b980 <xTaskRemoveFromEventList>
 800b048:	4603      	mov	r3, r0
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d001      	beq.n	800b052 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b04e:	f000 fd71 	bl	800bb34 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b052:	7bfb      	ldrb	r3, [r7, #15]
 800b054:	3b01      	subs	r3, #1
 800b056:	b2db      	uxtb	r3, r3
 800b058:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b05a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	dce9      	bgt.n	800b036 <prvUnlockQueue+0x16>
 800b062:	e000      	b.n	800b066 <prvUnlockQueue+0x46>
					break;
 800b064:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	22ff      	movs	r2, #255	; 0xff
 800b06a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b06e:	f001 f9c9 	bl	800c404 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b072:	f001 f997 	bl	800c3a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b07c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b07e:	e011      	b.n	800b0a4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	691b      	ldr	r3, [r3, #16]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d012      	beq.n	800b0ae <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	3310      	adds	r3, #16
 800b08c:	4618      	mov	r0, r3
 800b08e:	f000 fc77 	bl	800b980 <xTaskRemoveFromEventList>
 800b092:	4603      	mov	r3, r0
 800b094:	2b00      	cmp	r3, #0
 800b096:	d001      	beq.n	800b09c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b098:	f000 fd4c 	bl	800bb34 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b09c:	7bbb      	ldrb	r3, [r7, #14]
 800b09e:	3b01      	subs	r3, #1
 800b0a0:	b2db      	uxtb	r3, r3
 800b0a2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b0a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	dce9      	bgt.n	800b080 <prvUnlockQueue+0x60>
 800b0ac:	e000      	b.n	800b0b0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b0ae:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	22ff      	movs	r2, #255	; 0xff
 800b0b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b0b8:	f001 f9a4 	bl	800c404 <vPortExitCritical>
}
 800b0bc:	bf00      	nop
 800b0be:	3710      	adds	r7, #16
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	bd80      	pop	{r7, pc}

0800b0c4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b084      	sub	sp, #16
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b0cc:	f001 f96a 	bl	800c3a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d102      	bne.n	800b0de <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b0d8:	2301      	movs	r3, #1
 800b0da:	60fb      	str	r3, [r7, #12]
 800b0dc:	e001      	b.n	800b0e2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b0de:	2300      	movs	r3, #0
 800b0e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b0e2:	f001 f98f 	bl	800c404 <vPortExitCritical>

	return xReturn;
 800b0e6:	68fb      	ldr	r3, [r7, #12]
}
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	3710      	adds	r7, #16
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	bd80      	pop	{r7, pc}

0800b0f0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b084      	sub	sp, #16
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b0f8:	f001 f954 	bl	800c3a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b104:	429a      	cmp	r2, r3
 800b106:	d102      	bne.n	800b10e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b108:	2301      	movs	r3, #1
 800b10a:	60fb      	str	r3, [r7, #12]
 800b10c:	e001      	b.n	800b112 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b10e:	2300      	movs	r3, #0
 800b110:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b112:	f001 f977 	bl	800c404 <vPortExitCritical>

	return xReturn;
 800b116:	68fb      	ldr	r3, [r7, #12]
}
 800b118:	4618      	mov	r0, r3
 800b11a:	3710      	adds	r7, #16
 800b11c:	46bd      	mov	sp, r7
 800b11e:	bd80      	pop	{r7, pc}

0800b120 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b120:	b580      	push	{r7, lr}
 800b122:	b08e      	sub	sp, #56	; 0x38
 800b124:	af04      	add	r7, sp, #16
 800b126:	60f8      	str	r0, [r7, #12]
 800b128:	60b9      	str	r1, [r7, #8]
 800b12a:	607a      	str	r2, [r7, #4]
 800b12c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b12e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b130:	2b00      	cmp	r3, #0
 800b132:	d10a      	bne.n	800b14a <xTaskCreateStatic+0x2a>
	__asm volatile
 800b134:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b138:	f383 8811 	msr	BASEPRI, r3
 800b13c:	f3bf 8f6f 	isb	sy
 800b140:	f3bf 8f4f 	dsb	sy
 800b144:	623b      	str	r3, [r7, #32]
}
 800b146:	bf00      	nop
 800b148:	e7fe      	b.n	800b148 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b14a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d10a      	bne.n	800b166 <xTaskCreateStatic+0x46>
	__asm volatile
 800b150:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b154:	f383 8811 	msr	BASEPRI, r3
 800b158:	f3bf 8f6f 	isb	sy
 800b15c:	f3bf 8f4f 	dsb	sy
 800b160:	61fb      	str	r3, [r7, #28]
}
 800b162:	bf00      	nop
 800b164:	e7fe      	b.n	800b164 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b166:	23b4      	movs	r3, #180	; 0xb4
 800b168:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b16a:	693b      	ldr	r3, [r7, #16]
 800b16c:	2bb4      	cmp	r3, #180	; 0xb4
 800b16e:	d00a      	beq.n	800b186 <xTaskCreateStatic+0x66>
	__asm volatile
 800b170:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b174:	f383 8811 	msr	BASEPRI, r3
 800b178:	f3bf 8f6f 	isb	sy
 800b17c:	f3bf 8f4f 	dsb	sy
 800b180:	61bb      	str	r3, [r7, #24]
}
 800b182:	bf00      	nop
 800b184:	e7fe      	b.n	800b184 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b186:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d01e      	beq.n	800b1cc <xTaskCreateStatic+0xac>
 800b18e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b190:	2b00      	cmp	r3, #0
 800b192:	d01b      	beq.n	800b1cc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b196:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b19a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b19c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b19e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1a0:	2202      	movs	r2, #2
 800b1a2:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	9303      	str	r3, [sp, #12]
 800b1aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1ac:	9302      	str	r3, [sp, #8]
 800b1ae:	f107 0314 	add.w	r3, r7, #20
 800b1b2:	9301      	str	r3, [sp, #4]
 800b1b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1b6:	9300      	str	r3, [sp, #0]
 800b1b8:	683b      	ldr	r3, [r7, #0]
 800b1ba:	687a      	ldr	r2, [r7, #4]
 800b1bc:	68b9      	ldr	r1, [r7, #8]
 800b1be:	68f8      	ldr	r0, [r7, #12]
 800b1c0:	f000 f850 	bl	800b264 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b1c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b1c6:	f000 f8eb 	bl	800b3a0 <prvAddNewTaskToReadyList>
 800b1ca:	e001      	b.n	800b1d0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b1d0:	697b      	ldr	r3, [r7, #20]
	}
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	3728      	adds	r7, #40	; 0x28
 800b1d6:	46bd      	mov	sp, r7
 800b1d8:	bd80      	pop	{r7, pc}

0800b1da <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b1da:	b580      	push	{r7, lr}
 800b1dc:	b08c      	sub	sp, #48	; 0x30
 800b1de:	af04      	add	r7, sp, #16
 800b1e0:	60f8      	str	r0, [r7, #12]
 800b1e2:	60b9      	str	r1, [r7, #8]
 800b1e4:	603b      	str	r3, [r7, #0]
 800b1e6:	4613      	mov	r3, r2
 800b1e8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b1ea:	88fb      	ldrh	r3, [r7, #6]
 800b1ec:	009b      	lsls	r3, r3, #2
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	f001 f9fa 	bl	800c5e8 <pvPortMalloc>
 800b1f4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b1f6:	697b      	ldr	r3, [r7, #20]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d00e      	beq.n	800b21a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b1fc:	20b4      	movs	r0, #180	; 0xb4
 800b1fe:	f001 f9f3 	bl	800c5e8 <pvPortMalloc>
 800b202:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b204:	69fb      	ldr	r3, [r7, #28]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d003      	beq.n	800b212 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b20a:	69fb      	ldr	r3, [r7, #28]
 800b20c:	697a      	ldr	r2, [r7, #20]
 800b20e:	631a      	str	r2, [r3, #48]	; 0x30
 800b210:	e005      	b.n	800b21e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b212:	6978      	ldr	r0, [r7, #20]
 800b214:	f001 fab4 	bl	800c780 <vPortFree>
 800b218:	e001      	b.n	800b21e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b21a:	2300      	movs	r3, #0
 800b21c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b21e:	69fb      	ldr	r3, [r7, #28]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d017      	beq.n	800b254 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b224:	69fb      	ldr	r3, [r7, #28]
 800b226:	2200      	movs	r2, #0
 800b228:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b22c:	88fa      	ldrh	r2, [r7, #6]
 800b22e:	2300      	movs	r3, #0
 800b230:	9303      	str	r3, [sp, #12]
 800b232:	69fb      	ldr	r3, [r7, #28]
 800b234:	9302      	str	r3, [sp, #8]
 800b236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b238:	9301      	str	r3, [sp, #4]
 800b23a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b23c:	9300      	str	r3, [sp, #0]
 800b23e:	683b      	ldr	r3, [r7, #0]
 800b240:	68b9      	ldr	r1, [r7, #8]
 800b242:	68f8      	ldr	r0, [r7, #12]
 800b244:	f000 f80e 	bl	800b264 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b248:	69f8      	ldr	r0, [r7, #28]
 800b24a:	f000 f8a9 	bl	800b3a0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b24e:	2301      	movs	r3, #1
 800b250:	61bb      	str	r3, [r7, #24]
 800b252:	e002      	b.n	800b25a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b254:	f04f 33ff 	mov.w	r3, #4294967295
 800b258:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b25a:	69bb      	ldr	r3, [r7, #24]
	}
 800b25c:	4618      	mov	r0, r3
 800b25e:	3720      	adds	r7, #32
 800b260:	46bd      	mov	sp, r7
 800b262:	bd80      	pop	{r7, pc}

0800b264 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b264:	b580      	push	{r7, lr}
 800b266:	b088      	sub	sp, #32
 800b268:	af00      	add	r7, sp, #0
 800b26a:	60f8      	str	r0, [r7, #12]
 800b26c:	60b9      	str	r1, [r7, #8]
 800b26e:	607a      	str	r2, [r7, #4]
 800b270:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b274:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b27c:	3b01      	subs	r3, #1
 800b27e:	009b      	lsls	r3, r3, #2
 800b280:	4413      	add	r3, r2
 800b282:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b284:	69bb      	ldr	r3, [r7, #24]
 800b286:	f023 0307 	bic.w	r3, r3, #7
 800b28a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b28c:	69bb      	ldr	r3, [r7, #24]
 800b28e:	f003 0307 	and.w	r3, r3, #7
 800b292:	2b00      	cmp	r3, #0
 800b294:	d00a      	beq.n	800b2ac <prvInitialiseNewTask+0x48>
	__asm volatile
 800b296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b29a:	f383 8811 	msr	BASEPRI, r3
 800b29e:	f3bf 8f6f 	isb	sy
 800b2a2:	f3bf 8f4f 	dsb	sy
 800b2a6:	617b      	str	r3, [r7, #20]
}
 800b2a8:	bf00      	nop
 800b2aa:	e7fe      	b.n	800b2aa <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b2ac:	68bb      	ldr	r3, [r7, #8]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d01f      	beq.n	800b2f2 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	61fb      	str	r3, [r7, #28]
 800b2b6:	e012      	b.n	800b2de <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b2b8:	68ba      	ldr	r2, [r7, #8]
 800b2ba:	69fb      	ldr	r3, [r7, #28]
 800b2bc:	4413      	add	r3, r2
 800b2be:	7819      	ldrb	r1, [r3, #0]
 800b2c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b2c2:	69fb      	ldr	r3, [r7, #28]
 800b2c4:	4413      	add	r3, r2
 800b2c6:	3334      	adds	r3, #52	; 0x34
 800b2c8:	460a      	mov	r2, r1
 800b2ca:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b2cc:	68ba      	ldr	r2, [r7, #8]
 800b2ce:	69fb      	ldr	r3, [r7, #28]
 800b2d0:	4413      	add	r3, r2
 800b2d2:	781b      	ldrb	r3, [r3, #0]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d006      	beq.n	800b2e6 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b2d8:	69fb      	ldr	r3, [r7, #28]
 800b2da:	3301      	adds	r3, #1
 800b2dc:	61fb      	str	r3, [r7, #28]
 800b2de:	69fb      	ldr	r3, [r7, #28]
 800b2e0:	2b0f      	cmp	r3, #15
 800b2e2:	d9e9      	bls.n	800b2b8 <prvInitialiseNewTask+0x54>
 800b2e4:	e000      	b.n	800b2e8 <prvInitialiseNewTask+0x84>
			{
				break;
 800b2e6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b2e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2ea:	2200      	movs	r2, #0
 800b2ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b2f0:	e003      	b.n	800b2fa <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b2f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b2fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2fc:	2b06      	cmp	r3, #6
 800b2fe:	d901      	bls.n	800b304 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b300:	2306      	movs	r3, #6
 800b302:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b306:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b308:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b30a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b30c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b30e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800b310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b312:	2200      	movs	r2, #0
 800b314:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b318:	3304      	adds	r3, #4
 800b31a:	4618      	mov	r0, r3
 800b31c:	f7fe ff2c 	bl	800a178 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b322:	3318      	adds	r3, #24
 800b324:	4618      	mov	r0, r3
 800b326:	f7fe ff27 	bl	800a178 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b32a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b32c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b32e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b332:	f1c3 0207 	rsb	r2, r3, #7
 800b336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b338:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b33a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b33c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b33e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b342:	2200      	movs	r2, #0
 800b344:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b34a:	2200      	movs	r2, #0
 800b34c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b352:	334c      	adds	r3, #76	; 0x4c
 800b354:	2260      	movs	r2, #96	; 0x60
 800b356:	2100      	movs	r1, #0
 800b358:	4618      	mov	r0, r3
 800b35a:	f002 f8e9 	bl	800d530 <memset>
 800b35e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b360:	4a0c      	ldr	r2, [pc, #48]	; (800b394 <prvInitialiseNewTask+0x130>)
 800b362:	651a      	str	r2, [r3, #80]	; 0x50
 800b364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b366:	4a0c      	ldr	r2, [pc, #48]	; (800b398 <prvInitialiseNewTask+0x134>)
 800b368:	655a      	str	r2, [r3, #84]	; 0x54
 800b36a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b36c:	4a0b      	ldr	r2, [pc, #44]	; (800b39c <prvInitialiseNewTask+0x138>)
 800b36e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b370:	683a      	ldr	r2, [r7, #0]
 800b372:	68f9      	ldr	r1, [r7, #12]
 800b374:	69b8      	ldr	r0, [r7, #24]
 800b376:	f000 fee5 	bl	800c144 <pxPortInitialiseStack>
 800b37a:	4602      	mov	r2, r0
 800b37c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b37e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b382:	2b00      	cmp	r3, #0
 800b384:	d002      	beq.n	800b38c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b388:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b38a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b38c:	bf00      	nop
 800b38e:	3720      	adds	r7, #32
 800b390:	46bd      	mov	sp, r7
 800b392:	bd80      	pop	{r7, pc}
 800b394:	0800e010 	.word	0x0800e010
 800b398:	0800e030 	.word	0x0800e030
 800b39c:	0800dff0 	.word	0x0800dff0

0800b3a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b082      	sub	sp, #8
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b3a8:	f000 fffc 	bl	800c3a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b3ac:	4b2a      	ldr	r3, [pc, #168]	; (800b458 <prvAddNewTaskToReadyList+0xb8>)
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	3301      	adds	r3, #1
 800b3b2:	4a29      	ldr	r2, [pc, #164]	; (800b458 <prvAddNewTaskToReadyList+0xb8>)
 800b3b4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b3b6:	4b29      	ldr	r3, [pc, #164]	; (800b45c <prvAddNewTaskToReadyList+0xbc>)
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d109      	bne.n	800b3d2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b3be:	4a27      	ldr	r2, [pc, #156]	; (800b45c <prvAddNewTaskToReadyList+0xbc>)
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b3c4:	4b24      	ldr	r3, [pc, #144]	; (800b458 <prvAddNewTaskToReadyList+0xb8>)
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	2b01      	cmp	r3, #1
 800b3ca:	d110      	bne.n	800b3ee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b3cc:	f000 fbd6 	bl	800bb7c <prvInitialiseTaskLists>
 800b3d0:	e00d      	b.n	800b3ee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b3d2:	4b23      	ldr	r3, [pc, #140]	; (800b460 <prvAddNewTaskToReadyList+0xc0>)
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d109      	bne.n	800b3ee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b3da:	4b20      	ldr	r3, [pc, #128]	; (800b45c <prvAddNewTaskToReadyList+0xbc>)
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3e4:	429a      	cmp	r2, r3
 800b3e6:	d802      	bhi.n	800b3ee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b3e8:	4a1c      	ldr	r2, [pc, #112]	; (800b45c <prvAddNewTaskToReadyList+0xbc>)
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b3ee:	4b1d      	ldr	r3, [pc, #116]	; (800b464 <prvAddNewTaskToReadyList+0xc4>)
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	3301      	adds	r3, #1
 800b3f4:	4a1b      	ldr	r2, [pc, #108]	; (800b464 <prvAddNewTaskToReadyList+0xc4>)
 800b3f6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3fc:	2201      	movs	r2, #1
 800b3fe:	409a      	lsls	r2, r3
 800b400:	4b19      	ldr	r3, [pc, #100]	; (800b468 <prvAddNewTaskToReadyList+0xc8>)
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	4313      	orrs	r3, r2
 800b406:	4a18      	ldr	r2, [pc, #96]	; (800b468 <prvAddNewTaskToReadyList+0xc8>)
 800b408:	6013      	str	r3, [r2, #0]
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b40e:	4613      	mov	r3, r2
 800b410:	009b      	lsls	r3, r3, #2
 800b412:	4413      	add	r3, r2
 800b414:	009b      	lsls	r3, r3, #2
 800b416:	4a15      	ldr	r2, [pc, #84]	; (800b46c <prvAddNewTaskToReadyList+0xcc>)
 800b418:	441a      	add	r2, r3
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	3304      	adds	r3, #4
 800b41e:	4619      	mov	r1, r3
 800b420:	4610      	mov	r0, r2
 800b422:	f7fe feb6 	bl	800a192 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b426:	f000 ffed 	bl	800c404 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b42a:	4b0d      	ldr	r3, [pc, #52]	; (800b460 <prvAddNewTaskToReadyList+0xc0>)
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d00e      	beq.n	800b450 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b432:	4b0a      	ldr	r3, [pc, #40]	; (800b45c <prvAddNewTaskToReadyList+0xbc>)
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b43c:	429a      	cmp	r2, r3
 800b43e:	d207      	bcs.n	800b450 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b440:	4b0b      	ldr	r3, [pc, #44]	; (800b470 <prvAddNewTaskToReadyList+0xd0>)
 800b442:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b446:	601a      	str	r2, [r3, #0]
 800b448:	f3bf 8f4f 	dsb	sy
 800b44c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b450:	bf00      	nop
 800b452:	3708      	adds	r7, #8
 800b454:	46bd      	mov	sp, r7
 800b456:	bd80      	pop	{r7, pc}
 800b458:	20000694 	.word	0x20000694
 800b45c:	20000594 	.word	0x20000594
 800b460:	200006a0 	.word	0x200006a0
 800b464:	200006b0 	.word	0x200006b0
 800b468:	2000069c 	.word	0x2000069c
 800b46c:	20000598 	.word	0x20000598
 800b470:	e000ed04 	.word	0xe000ed04

0800b474 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b474:	b580      	push	{r7, lr}
 800b476:	b084      	sub	sp, #16
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b47c:	2300      	movs	r3, #0
 800b47e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	2b00      	cmp	r3, #0
 800b484:	d017      	beq.n	800b4b6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b486:	4b13      	ldr	r3, [pc, #76]	; (800b4d4 <vTaskDelay+0x60>)
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d00a      	beq.n	800b4a4 <vTaskDelay+0x30>
	__asm volatile
 800b48e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b492:	f383 8811 	msr	BASEPRI, r3
 800b496:	f3bf 8f6f 	isb	sy
 800b49a:	f3bf 8f4f 	dsb	sy
 800b49e:	60bb      	str	r3, [r7, #8]
}
 800b4a0:	bf00      	nop
 800b4a2:	e7fe      	b.n	800b4a2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b4a4:	f000 f884 	bl	800b5b0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b4a8:	2100      	movs	r1, #0
 800b4aa:	6878      	ldr	r0, [r7, #4]
 800b4ac:	f000 fde4 	bl	800c078 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b4b0:	f000 f88c 	bl	800b5cc <xTaskResumeAll>
 800b4b4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d107      	bne.n	800b4cc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b4bc:	4b06      	ldr	r3, [pc, #24]	; (800b4d8 <vTaskDelay+0x64>)
 800b4be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4c2:	601a      	str	r2, [r3, #0]
 800b4c4:	f3bf 8f4f 	dsb	sy
 800b4c8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b4cc:	bf00      	nop
 800b4ce:	3710      	adds	r7, #16
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	bd80      	pop	{r7, pc}
 800b4d4:	200006bc 	.word	0x200006bc
 800b4d8:	e000ed04 	.word	0xe000ed04

0800b4dc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b08a      	sub	sp, #40	; 0x28
 800b4e0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b4ea:	463a      	mov	r2, r7
 800b4ec:	1d39      	adds	r1, r7, #4
 800b4ee:	f107 0308 	add.w	r3, r7, #8
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	f7f5 f84e 	bl	8000594 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b4f8:	6839      	ldr	r1, [r7, #0]
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	68ba      	ldr	r2, [r7, #8]
 800b4fe:	9202      	str	r2, [sp, #8]
 800b500:	9301      	str	r3, [sp, #4]
 800b502:	2300      	movs	r3, #0
 800b504:	9300      	str	r3, [sp, #0]
 800b506:	2300      	movs	r3, #0
 800b508:	460a      	mov	r2, r1
 800b50a:	4921      	ldr	r1, [pc, #132]	; (800b590 <vTaskStartScheduler+0xb4>)
 800b50c:	4821      	ldr	r0, [pc, #132]	; (800b594 <vTaskStartScheduler+0xb8>)
 800b50e:	f7ff fe07 	bl	800b120 <xTaskCreateStatic>
 800b512:	4603      	mov	r3, r0
 800b514:	4a20      	ldr	r2, [pc, #128]	; (800b598 <vTaskStartScheduler+0xbc>)
 800b516:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b518:	4b1f      	ldr	r3, [pc, #124]	; (800b598 <vTaskStartScheduler+0xbc>)
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d002      	beq.n	800b526 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b520:	2301      	movs	r3, #1
 800b522:	617b      	str	r3, [r7, #20]
 800b524:	e001      	b.n	800b52a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b526:	2300      	movs	r3, #0
 800b528:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b52a:	697b      	ldr	r3, [r7, #20]
 800b52c:	2b01      	cmp	r3, #1
 800b52e:	d11b      	bne.n	800b568 <vTaskStartScheduler+0x8c>
	__asm volatile
 800b530:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b534:	f383 8811 	msr	BASEPRI, r3
 800b538:	f3bf 8f6f 	isb	sy
 800b53c:	f3bf 8f4f 	dsb	sy
 800b540:	613b      	str	r3, [r7, #16]
}
 800b542:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b544:	4b15      	ldr	r3, [pc, #84]	; (800b59c <vTaskStartScheduler+0xc0>)
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	334c      	adds	r3, #76	; 0x4c
 800b54a:	4a15      	ldr	r2, [pc, #84]	; (800b5a0 <vTaskStartScheduler+0xc4>)
 800b54c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b54e:	4b15      	ldr	r3, [pc, #84]	; (800b5a4 <vTaskStartScheduler+0xc8>)
 800b550:	f04f 32ff 	mov.w	r2, #4294967295
 800b554:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b556:	4b14      	ldr	r3, [pc, #80]	; (800b5a8 <vTaskStartScheduler+0xcc>)
 800b558:	2201      	movs	r2, #1
 800b55a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b55c:	4b13      	ldr	r3, [pc, #76]	; (800b5ac <vTaskStartScheduler+0xd0>)
 800b55e:	2200      	movs	r2, #0
 800b560:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b562:	f000 fe7d 	bl	800c260 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b566:	e00e      	b.n	800b586 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b568:	697b      	ldr	r3, [r7, #20]
 800b56a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b56e:	d10a      	bne.n	800b586 <vTaskStartScheduler+0xaa>
	__asm volatile
 800b570:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b574:	f383 8811 	msr	BASEPRI, r3
 800b578:	f3bf 8f6f 	isb	sy
 800b57c:	f3bf 8f4f 	dsb	sy
 800b580:	60fb      	str	r3, [r7, #12]
}
 800b582:	bf00      	nop
 800b584:	e7fe      	b.n	800b584 <vTaskStartScheduler+0xa8>
}
 800b586:	bf00      	nop
 800b588:	3718      	adds	r7, #24
 800b58a:	46bd      	mov	sp, r7
 800b58c:	bd80      	pop	{r7, pc}
 800b58e:	bf00      	nop
 800b590:	0800df8c 	.word	0x0800df8c
 800b594:	0800bb4d 	.word	0x0800bb4d
 800b598:	200006b8 	.word	0x200006b8
 800b59c:	20000594 	.word	0x20000594
 800b5a0:	20000100 	.word	0x20000100
 800b5a4:	200006b4 	.word	0x200006b4
 800b5a8:	200006a0 	.word	0x200006a0
 800b5ac:	20000698 	.word	0x20000698

0800b5b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b5b0:	b480      	push	{r7}
 800b5b2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b5b4:	4b04      	ldr	r3, [pc, #16]	; (800b5c8 <vTaskSuspendAll+0x18>)
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	3301      	adds	r3, #1
 800b5ba:	4a03      	ldr	r2, [pc, #12]	; (800b5c8 <vTaskSuspendAll+0x18>)
 800b5bc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b5be:	bf00      	nop
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c6:	4770      	bx	lr
 800b5c8:	200006bc 	.word	0x200006bc

0800b5cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	b084      	sub	sp, #16
 800b5d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b5da:	4b41      	ldr	r3, [pc, #260]	; (800b6e0 <xTaskResumeAll+0x114>)
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d10a      	bne.n	800b5f8 <xTaskResumeAll+0x2c>
	__asm volatile
 800b5e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5e6:	f383 8811 	msr	BASEPRI, r3
 800b5ea:	f3bf 8f6f 	isb	sy
 800b5ee:	f3bf 8f4f 	dsb	sy
 800b5f2:	603b      	str	r3, [r7, #0]
}
 800b5f4:	bf00      	nop
 800b5f6:	e7fe      	b.n	800b5f6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b5f8:	f000 fed4 	bl	800c3a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b5fc:	4b38      	ldr	r3, [pc, #224]	; (800b6e0 <xTaskResumeAll+0x114>)
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	3b01      	subs	r3, #1
 800b602:	4a37      	ldr	r2, [pc, #220]	; (800b6e0 <xTaskResumeAll+0x114>)
 800b604:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b606:	4b36      	ldr	r3, [pc, #216]	; (800b6e0 <xTaskResumeAll+0x114>)
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d161      	bne.n	800b6d2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b60e:	4b35      	ldr	r3, [pc, #212]	; (800b6e4 <xTaskResumeAll+0x118>)
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	2b00      	cmp	r3, #0
 800b614:	d05d      	beq.n	800b6d2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b616:	e02e      	b.n	800b676 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b618:	4b33      	ldr	r3, [pc, #204]	; (800b6e8 <xTaskResumeAll+0x11c>)
 800b61a:	68db      	ldr	r3, [r3, #12]
 800b61c:	68db      	ldr	r3, [r3, #12]
 800b61e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	3318      	adds	r3, #24
 800b624:	4618      	mov	r0, r3
 800b626:	f7fe fe11 	bl	800a24c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	3304      	adds	r3, #4
 800b62e:	4618      	mov	r0, r3
 800b630:	f7fe fe0c 	bl	800a24c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b638:	2201      	movs	r2, #1
 800b63a:	409a      	lsls	r2, r3
 800b63c:	4b2b      	ldr	r3, [pc, #172]	; (800b6ec <xTaskResumeAll+0x120>)
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	4313      	orrs	r3, r2
 800b642:	4a2a      	ldr	r2, [pc, #168]	; (800b6ec <xTaskResumeAll+0x120>)
 800b644:	6013      	str	r3, [r2, #0]
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b64a:	4613      	mov	r3, r2
 800b64c:	009b      	lsls	r3, r3, #2
 800b64e:	4413      	add	r3, r2
 800b650:	009b      	lsls	r3, r3, #2
 800b652:	4a27      	ldr	r2, [pc, #156]	; (800b6f0 <xTaskResumeAll+0x124>)
 800b654:	441a      	add	r2, r3
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	3304      	adds	r3, #4
 800b65a:	4619      	mov	r1, r3
 800b65c:	4610      	mov	r0, r2
 800b65e:	f7fe fd98 	bl	800a192 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b666:	4b23      	ldr	r3, [pc, #140]	; (800b6f4 <xTaskResumeAll+0x128>)
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b66c:	429a      	cmp	r2, r3
 800b66e:	d302      	bcc.n	800b676 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800b670:	4b21      	ldr	r3, [pc, #132]	; (800b6f8 <xTaskResumeAll+0x12c>)
 800b672:	2201      	movs	r2, #1
 800b674:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b676:	4b1c      	ldr	r3, [pc, #112]	; (800b6e8 <xTaskResumeAll+0x11c>)
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d1cc      	bne.n	800b618 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	2b00      	cmp	r3, #0
 800b682:	d001      	beq.n	800b688 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b684:	f000 fb1c 	bl	800bcc0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b688:	4b1c      	ldr	r3, [pc, #112]	; (800b6fc <xTaskResumeAll+0x130>)
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	2b00      	cmp	r3, #0
 800b692:	d010      	beq.n	800b6b6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b694:	f000 f836 	bl	800b704 <xTaskIncrementTick>
 800b698:	4603      	mov	r3, r0
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d002      	beq.n	800b6a4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800b69e:	4b16      	ldr	r3, [pc, #88]	; (800b6f8 <xTaskResumeAll+0x12c>)
 800b6a0:	2201      	movs	r2, #1
 800b6a2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	3b01      	subs	r3, #1
 800b6a8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d1f1      	bne.n	800b694 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800b6b0:	4b12      	ldr	r3, [pc, #72]	; (800b6fc <xTaskResumeAll+0x130>)
 800b6b2:	2200      	movs	r2, #0
 800b6b4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b6b6:	4b10      	ldr	r3, [pc, #64]	; (800b6f8 <xTaskResumeAll+0x12c>)
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d009      	beq.n	800b6d2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b6be:	2301      	movs	r3, #1
 800b6c0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b6c2:	4b0f      	ldr	r3, [pc, #60]	; (800b700 <xTaskResumeAll+0x134>)
 800b6c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6c8:	601a      	str	r2, [r3, #0]
 800b6ca:	f3bf 8f4f 	dsb	sy
 800b6ce:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b6d2:	f000 fe97 	bl	800c404 <vPortExitCritical>

	return xAlreadyYielded;
 800b6d6:	68bb      	ldr	r3, [r7, #8]
}
 800b6d8:	4618      	mov	r0, r3
 800b6da:	3710      	adds	r7, #16
 800b6dc:	46bd      	mov	sp, r7
 800b6de:	bd80      	pop	{r7, pc}
 800b6e0:	200006bc 	.word	0x200006bc
 800b6e4:	20000694 	.word	0x20000694
 800b6e8:	20000654 	.word	0x20000654
 800b6ec:	2000069c 	.word	0x2000069c
 800b6f0:	20000598 	.word	0x20000598
 800b6f4:	20000594 	.word	0x20000594
 800b6f8:	200006a8 	.word	0x200006a8
 800b6fc:	200006a4 	.word	0x200006a4
 800b700:	e000ed04 	.word	0xe000ed04

0800b704 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b704:	b580      	push	{r7, lr}
 800b706:	b086      	sub	sp, #24
 800b708:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b70a:	2300      	movs	r3, #0
 800b70c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b70e:	4b4e      	ldr	r3, [pc, #312]	; (800b848 <xTaskIncrementTick+0x144>)
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	2b00      	cmp	r3, #0
 800b714:	f040 808e 	bne.w	800b834 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b718:	4b4c      	ldr	r3, [pc, #304]	; (800b84c <xTaskIncrementTick+0x148>)
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	3301      	adds	r3, #1
 800b71e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b720:	4a4a      	ldr	r2, [pc, #296]	; (800b84c <xTaskIncrementTick+0x148>)
 800b722:	693b      	ldr	r3, [r7, #16]
 800b724:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b726:	693b      	ldr	r3, [r7, #16]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d120      	bne.n	800b76e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b72c:	4b48      	ldr	r3, [pc, #288]	; (800b850 <xTaskIncrementTick+0x14c>)
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	2b00      	cmp	r3, #0
 800b734:	d00a      	beq.n	800b74c <xTaskIncrementTick+0x48>
	__asm volatile
 800b736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b73a:	f383 8811 	msr	BASEPRI, r3
 800b73e:	f3bf 8f6f 	isb	sy
 800b742:	f3bf 8f4f 	dsb	sy
 800b746:	603b      	str	r3, [r7, #0]
}
 800b748:	bf00      	nop
 800b74a:	e7fe      	b.n	800b74a <xTaskIncrementTick+0x46>
 800b74c:	4b40      	ldr	r3, [pc, #256]	; (800b850 <xTaskIncrementTick+0x14c>)
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	60fb      	str	r3, [r7, #12]
 800b752:	4b40      	ldr	r3, [pc, #256]	; (800b854 <xTaskIncrementTick+0x150>)
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	4a3e      	ldr	r2, [pc, #248]	; (800b850 <xTaskIncrementTick+0x14c>)
 800b758:	6013      	str	r3, [r2, #0]
 800b75a:	4a3e      	ldr	r2, [pc, #248]	; (800b854 <xTaskIncrementTick+0x150>)
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	6013      	str	r3, [r2, #0]
 800b760:	4b3d      	ldr	r3, [pc, #244]	; (800b858 <xTaskIncrementTick+0x154>)
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	3301      	adds	r3, #1
 800b766:	4a3c      	ldr	r2, [pc, #240]	; (800b858 <xTaskIncrementTick+0x154>)
 800b768:	6013      	str	r3, [r2, #0]
 800b76a:	f000 faa9 	bl	800bcc0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b76e:	4b3b      	ldr	r3, [pc, #236]	; (800b85c <xTaskIncrementTick+0x158>)
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	693a      	ldr	r2, [r7, #16]
 800b774:	429a      	cmp	r2, r3
 800b776:	d348      	bcc.n	800b80a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b778:	4b35      	ldr	r3, [pc, #212]	; (800b850 <xTaskIncrementTick+0x14c>)
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d104      	bne.n	800b78c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b782:	4b36      	ldr	r3, [pc, #216]	; (800b85c <xTaskIncrementTick+0x158>)
 800b784:	f04f 32ff 	mov.w	r2, #4294967295
 800b788:	601a      	str	r2, [r3, #0]
					break;
 800b78a:	e03e      	b.n	800b80a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b78c:	4b30      	ldr	r3, [pc, #192]	; (800b850 <xTaskIncrementTick+0x14c>)
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	68db      	ldr	r3, [r3, #12]
 800b792:	68db      	ldr	r3, [r3, #12]
 800b794:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b796:	68bb      	ldr	r3, [r7, #8]
 800b798:	685b      	ldr	r3, [r3, #4]
 800b79a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b79c:	693a      	ldr	r2, [r7, #16]
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	429a      	cmp	r2, r3
 800b7a2:	d203      	bcs.n	800b7ac <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b7a4:	4a2d      	ldr	r2, [pc, #180]	; (800b85c <xTaskIncrementTick+0x158>)
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b7aa:	e02e      	b.n	800b80a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b7ac:	68bb      	ldr	r3, [r7, #8]
 800b7ae:	3304      	adds	r3, #4
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	f7fe fd4b 	bl	800a24c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b7b6:	68bb      	ldr	r3, [r7, #8]
 800b7b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d004      	beq.n	800b7c8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b7be:	68bb      	ldr	r3, [r7, #8]
 800b7c0:	3318      	adds	r3, #24
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	f7fe fd42 	bl	800a24c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b7c8:	68bb      	ldr	r3, [r7, #8]
 800b7ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7cc:	2201      	movs	r2, #1
 800b7ce:	409a      	lsls	r2, r3
 800b7d0:	4b23      	ldr	r3, [pc, #140]	; (800b860 <xTaskIncrementTick+0x15c>)
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	4313      	orrs	r3, r2
 800b7d6:	4a22      	ldr	r2, [pc, #136]	; (800b860 <xTaskIncrementTick+0x15c>)
 800b7d8:	6013      	str	r3, [r2, #0]
 800b7da:	68bb      	ldr	r3, [r7, #8]
 800b7dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7de:	4613      	mov	r3, r2
 800b7e0:	009b      	lsls	r3, r3, #2
 800b7e2:	4413      	add	r3, r2
 800b7e4:	009b      	lsls	r3, r3, #2
 800b7e6:	4a1f      	ldr	r2, [pc, #124]	; (800b864 <xTaskIncrementTick+0x160>)
 800b7e8:	441a      	add	r2, r3
 800b7ea:	68bb      	ldr	r3, [r7, #8]
 800b7ec:	3304      	adds	r3, #4
 800b7ee:	4619      	mov	r1, r3
 800b7f0:	4610      	mov	r0, r2
 800b7f2:	f7fe fcce 	bl	800a192 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b7f6:	68bb      	ldr	r3, [r7, #8]
 800b7f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7fa:	4b1b      	ldr	r3, [pc, #108]	; (800b868 <xTaskIncrementTick+0x164>)
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b800:	429a      	cmp	r2, r3
 800b802:	d3b9      	bcc.n	800b778 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b804:	2301      	movs	r3, #1
 800b806:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b808:	e7b6      	b.n	800b778 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b80a:	4b17      	ldr	r3, [pc, #92]	; (800b868 <xTaskIncrementTick+0x164>)
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b810:	4914      	ldr	r1, [pc, #80]	; (800b864 <xTaskIncrementTick+0x160>)
 800b812:	4613      	mov	r3, r2
 800b814:	009b      	lsls	r3, r3, #2
 800b816:	4413      	add	r3, r2
 800b818:	009b      	lsls	r3, r3, #2
 800b81a:	440b      	add	r3, r1
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	2b01      	cmp	r3, #1
 800b820:	d901      	bls.n	800b826 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800b822:	2301      	movs	r3, #1
 800b824:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b826:	4b11      	ldr	r3, [pc, #68]	; (800b86c <xTaskIncrementTick+0x168>)
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d007      	beq.n	800b83e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800b82e:	2301      	movs	r3, #1
 800b830:	617b      	str	r3, [r7, #20]
 800b832:	e004      	b.n	800b83e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b834:	4b0e      	ldr	r3, [pc, #56]	; (800b870 <xTaskIncrementTick+0x16c>)
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	3301      	adds	r3, #1
 800b83a:	4a0d      	ldr	r2, [pc, #52]	; (800b870 <xTaskIncrementTick+0x16c>)
 800b83c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b83e:	697b      	ldr	r3, [r7, #20]
}
 800b840:	4618      	mov	r0, r3
 800b842:	3718      	adds	r7, #24
 800b844:	46bd      	mov	sp, r7
 800b846:	bd80      	pop	{r7, pc}
 800b848:	200006bc 	.word	0x200006bc
 800b84c:	20000698 	.word	0x20000698
 800b850:	2000064c 	.word	0x2000064c
 800b854:	20000650 	.word	0x20000650
 800b858:	200006ac 	.word	0x200006ac
 800b85c:	200006b4 	.word	0x200006b4
 800b860:	2000069c 	.word	0x2000069c
 800b864:	20000598 	.word	0x20000598
 800b868:	20000594 	.word	0x20000594
 800b86c:	200006a8 	.word	0x200006a8
 800b870:	200006a4 	.word	0x200006a4

0800b874 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b874:	b480      	push	{r7}
 800b876:	b087      	sub	sp, #28
 800b878:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b87a:	4b29      	ldr	r3, [pc, #164]	; (800b920 <vTaskSwitchContext+0xac>)
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d003      	beq.n	800b88a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b882:	4b28      	ldr	r3, [pc, #160]	; (800b924 <vTaskSwitchContext+0xb0>)
 800b884:	2201      	movs	r2, #1
 800b886:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b888:	e044      	b.n	800b914 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800b88a:	4b26      	ldr	r3, [pc, #152]	; (800b924 <vTaskSwitchContext+0xb0>)
 800b88c:	2200      	movs	r2, #0
 800b88e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b890:	4b25      	ldr	r3, [pc, #148]	; (800b928 <vTaskSwitchContext+0xb4>)
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	fab3 f383 	clz	r3, r3
 800b89c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800b89e:	7afb      	ldrb	r3, [r7, #11]
 800b8a0:	f1c3 031f 	rsb	r3, r3, #31
 800b8a4:	617b      	str	r3, [r7, #20]
 800b8a6:	4921      	ldr	r1, [pc, #132]	; (800b92c <vTaskSwitchContext+0xb8>)
 800b8a8:	697a      	ldr	r2, [r7, #20]
 800b8aa:	4613      	mov	r3, r2
 800b8ac:	009b      	lsls	r3, r3, #2
 800b8ae:	4413      	add	r3, r2
 800b8b0:	009b      	lsls	r3, r3, #2
 800b8b2:	440b      	add	r3, r1
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d10a      	bne.n	800b8d0 <vTaskSwitchContext+0x5c>
	__asm volatile
 800b8ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8be:	f383 8811 	msr	BASEPRI, r3
 800b8c2:	f3bf 8f6f 	isb	sy
 800b8c6:	f3bf 8f4f 	dsb	sy
 800b8ca:	607b      	str	r3, [r7, #4]
}
 800b8cc:	bf00      	nop
 800b8ce:	e7fe      	b.n	800b8ce <vTaskSwitchContext+0x5a>
 800b8d0:	697a      	ldr	r2, [r7, #20]
 800b8d2:	4613      	mov	r3, r2
 800b8d4:	009b      	lsls	r3, r3, #2
 800b8d6:	4413      	add	r3, r2
 800b8d8:	009b      	lsls	r3, r3, #2
 800b8da:	4a14      	ldr	r2, [pc, #80]	; (800b92c <vTaskSwitchContext+0xb8>)
 800b8dc:	4413      	add	r3, r2
 800b8de:	613b      	str	r3, [r7, #16]
 800b8e0:	693b      	ldr	r3, [r7, #16]
 800b8e2:	685b      	ldr	r3, [r3, #4]
 800b8e4:	685a      	ldr	r2, [r3, #4]
 800b8e6:	693b      	ldr	r3, [r7, #16]
 800b8e8:	605a      	str	r2, [r3, #4]
 800b8ea:	693b      	ldr	r3, [r7, #16]
 800b8ec:	685a      	ldr	r2, [r3, #4]
 800b8ee:	693b      	ldr	r3, [r7, #16]
 800b8f0:	3308      	adds	r3, #8
 800b8f2:	429a      	cmp	r2, r3
 800b8f4:	d104      	bne.n	800b900 <vTaskSwitchContext+0x8c>
 800b8f6:	693b      	ldr	r3, [r7, #16]
 800b8f8:	685b      	ldr	r3, [r3, #4]
 800b8fa:	685a      	ldr	r2, [r3, #4]
 800b8fc:	693b      	ldr	r3, [r7, #16]
 800b8fe:	605a      	str	r2, [r3, #4]
 800b900:	693b      	ldr	r3, [r7, #16]
 800b902:	685b      	ldr	r3, [r3, #4]
 800b904:	68db      	ldr	r3, [r3, #12]
 800b906:	4a0a      	ldr	r2, [pc, #40]	; (800b930 <vTaskSwitchContext+0xbc>)
 800b908:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b90a:	4b09      	ldr	r3, [pc, #36]	; (800b930 <vTaskSwitchContext+0xbc>)
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	334c      	adds	r3, #76	; 0x4c
 800b910:	4a08      	ldr	r2, [pc, #32]	; (800b934 <vTaskSwitchContext+0xc0>)
 800b912:	6013      	str	r3, [r2, #0]
}
 800b914:	bf00      	nop
 800b916:	371c      	adds	r7, #28
 800b918:	46bd      	mov	sp, r7
 800b91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b91e:	4770      	bx	lr
 800b920:	200006bc 	.word	0x200006bc
 800b924:	200006a8 	.word	0x200006a8
 800b928:	2000069c 	.word	0x2000069c
 800b92c:	20000598 	.word	0x20000598
 800b930:	20000594 	.word	0x20000594
 800b934:	20000100 	.word	0x20000100

0800b938 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b938:	b580      	push	{r7, lr}
 800b93a:	b084      	sub	sp, #16
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
 800b940:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d10a      	bne.n	800b95e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b94c:	f383 8811 	msr	BASEPRI, r3
 800b950:	f3bf 8f6f 	isb	sy
 800b954:	f3bf 8f4f 	dsb	sy
 800b958:	60fb      	str	r3, [r7, #12]
}
 800b95a:	bf00      	nop
 800b95c:	e7fe      	b.n	800b95c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b95e:	4b07      	ldr	r3, [pc, #28]	; (800b97c <vTaskPlaceOnEventList+0x44>)
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	3318      	adds	r3, #24
 800b964:	4619      	mov	r1, r3
 800b966:	6878      	ldr	r0, [r7, #4]
 800b968:	f7fe fc37 	bl	800a1da <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b96c:	2101      	movs	r1, #1
 800b96e:	6838      	ldr	r0, [r7, #0]
 800b970:	f000 fb82 	bl	800c078 <prvAddCurrentTaskToDelayedList>
}
 800b974:	bf00      	nop
 800b976:	3710      	adds	r7, #16
 800b978:	46bd      	mov	sp, r7
 800b97a:	bd80      	pop	{r7, pc}
 800b97c:	20000594 	.word	0x20000594

0800b980 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b980:	b580      	push	{r7, lr}
 800b982:	b086      	sub	sp, #24
 800b984:	af00      	add	r7, sp, #0
 800b986:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	68db      	ldr	r3, [r3, #12]
 800b98c:	68db      	ldr	r3, [r3, #12]
 800b98e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b990:	693b      	ldr	r3, [r7, #16]
 800b992:	2b00      	cmp	r3, #0
 800b994:	d10a      	bne.n	800b9ac <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b99a:	f383 8811 	msr	BASEPRI, r3
 800b99e:	f3bf 8f6f 	isb	sy
 800b9a2:	f3bf 8f4f 	dsb	sy
 800b9a6:	60fb      	str	r3, [r7, #12]
}
 800b9a8:	bf00      	nop
 800b9aa:	e7fe      	b.n	800b9aa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b9ac:	693b      	ldr	r3, [r7, #16]
 800b9ae:	3318      	adds	r3, #24
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	f7fe fc4b 	bl	800a24c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b9b6:	4b1d      	ldr	r3, [pc, #116]	; (800ba2c <xTaskRemoveFromEventList+0xac>)
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d11c      	bne.n	800b9f8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b9be:	693b      	ldr	r3, [r7, #16]
 800b9c0:	3304      	adds	r3, #4
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	f7fe fc42 	bl	800a24c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b9c8:	693b      	ldr	r3, [r7, #16]
 800b9ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9cc:	2201      	movs	r2, #1
 800b9ce:	409a      	lsls	r2, r3
 800b9d0:	4b17      	ldr	r3, [pc, #92]	; (800ba30 <xTaskRemoveFromEventList+0xb0>)
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	4313      	orrs	r3, r2
 800b9d6:	4a16      	ldr	r2, [pc, #88]	; (800ba30 <xTaskRemoveFromEventList+0xb0>)
 800b9d8:	6013      	str	r3, [r2, #0]
 800b9da:	693b      	ldr	r3, [r7, #16]
 800b9dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9de:	4613      	mov	r3, r2
 800b9e0:	009b      	lsls	r3, r3, #2
 800b9e2:	4413      	add	r3, r2
 800b9e4:	009b      	lsls	r3, r3, #2
 800b9e6:	4a13      	ldr	r2, [pc, #76]	; (800ba34 <xTaskRemoveFromEventList+0xb4>)
 800b9e8:	441a      	add	r2, r3
 800b9ea:	693b      	ldr	r3, [r7, #16]
 800b9ec:	3304      	adds	r3, #4
 800b9ee:	4619      	mov	r1, r3
 800b9f0:	4610      	mov	r0, r2
 800b9f2:	f7fe fbce 	bl	800a192 <vListInsertEnd>
 800b9f6:	e005      	b.n	800ba04 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b9f8:	693b      	ldr	r3, [r7, #16]
 800b9fa:	3318      	adds	r3, #24
 800b9fc:	4619      	mov	r1, r3
 800b9fe:	480e      	ldr	r0, [pc, #56]	; (800ba38 <xTaskRemoveFromEventList+0xb8>)
 800ba00:	f7fe fbc7 	bl	800a192 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ba04:	693b      	ldr	r3, [r7, #16]
 800ba06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba08:	4b0c      	ldr	r3, [pc, #48]	; (800ba3c <xTaskRemoveFromEventList+0xbc>)
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba0e:	429a      	cmp	r2, r3
 800ba10:	d905      	bls.n	800ba1e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ba12:	2301      	movs	r3, #1
 800ba14:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ba16:	4b0a      	ldr	r3, [pc, #40]	; (800ba40 <xTaskRemoveFromEventList+0xc0>)
 800ba18:	2201      	movs	r2, #1
 800ba1a:	601a      	str	r2, [r3, #0]
 800ba1c:	e001      	b.n	800ba22 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800ba1e:	2300      	movs	r3, #0
 800ba20:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ba22:	697b      	ldr	r3, [r7, #20]
}
 800ba24:	4618      	mov	r0, r3
 800ba26:	3718      	adds	r7, #24
 800ba28:	46bd      	mov	sp, r7
 800ba2a:	bd80      	pop	{r7, pc}
 800ba2c:	200006bc 	.word	0x200006bc
 800ba30:	2000069c 	.word	0x2000069c
 800ba34:	20000598 	.word	0x20000598
 800ba38:	20000654 	.word	0x20000654
 800ba3c:	20000594 	.word	0x20000594
 800ba40:	200006a8 	.word	0x200006a8

0800ba44 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ba44:	b480      	push	{r7}
 800ba46:	b083      	sub	sp, #12
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ba4c:	4b06      	ldr	r3, [pc, #24]	; (800ba68 <vTaskInternalSetTimeOutState+0x24>)
 800ba4e:	681a      	ldr	r2, [r3, #0]
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ba54:	4b05      	ldr	r3, [pc, #20]	; (800ba6c <vTaskInternalSetTimeOutState+0x28>)
 800ba56:	681a      	ldr	r2, [r3, #0]
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	605a      	str	r2, [r3, #4]
}
 800ba5c:	bf00      	nop
 800ba5e:	370c      	adds	r7, #12
 800ba60:	46bd      	mov	sp, r7
 800ba62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba66:	4770      	bx	lr
 800ba68:	200006ac 	.word	0x200006ac
 800ba6c:	20000698 	.word	0x20000698

0800ba70 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ba70:	b580      	push	{r7, lr}
 800ba72:	b088      	sub	sp, #32
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	6078      	str	r0, [r7, #4]
 800ba78:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d10a      	bne.n	800ba96 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800ba80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba84:	f383 8811 	msr	BASEPRI, r3
 800ba88:	f3bf 8f6f 	isb	sy
 800ba8c:	f3bf 8f4f 	dsb	sy
 800ba90:	613b      	str	r3, [r7, #16]
}
 800ba92:	bf00      	nop
 800ba94:	e7fe      	b.n	800ba94 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ba96:	683b      	ldr	r3, [r7, #0]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d10a      	bne.n	800bab2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800ba9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baa0:	f383 8811 	msr	BASEPRI, r3
 800baa4:	f3bf 8f6f 	isb	sy
 800baa8:	f3bf 8f4f 	dsb	sy
 800baac:	60fb      	str	r3, [r7, #12]
}
 800baae:	bf00      	nop
 800bab0:	e7fe      	b.n	800bab0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800bab2:	f000 fc77 	bl	800c3a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bab6:	4b1d      	ldr	r3, [pc, #116]	; (800bb2c <xTaskCheckForTimeOut+0xbc>)
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	685b      	ldr	r3, [r3, #4]
 800bac0:	69ba      	ldr	r2, [r7, #24]
 800bac2:	1ad3      	subs	r3, r2, r3
 800bac4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bac6:	683b      	ldr	r3, [r7, #0]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bace:	d102      	bne.n	800bad6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bad0:	2300      	movs	r3, #0
 800bad2:	61fb      	str	r3, [r7, #28]
 800bad4:	e023      	b.n	800bb1e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	681a      	ldr	r2, [r3, #0]
 800bada:	4b15      	ldr	r3, [pc, #84]	; (800bb30 <xTaskCheckForTimeOut+0xc0>)
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	429a      	cmp	r2, r3
 800bae0:	d007      	beq.n	800baf2 <xTaskCheckForTimeOut+0x82>
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	685b      	ldr	r3, [r3, #4]
 800bae6:	69ba      	ldr	r2, [r7, #24]
 800bae8:	429a      	cmp	r2, r3
 800baea:	d302      	bcc.n	800baf2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800baec:	2301      	movs	r3, #1
 800baee:	61fb      	str	r3, [r7, #28]
 800baf0:	e015      	b.n	800bb1e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800baf2:	683b      	ldr	r3, [r7, #0]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	697a      	ldr	r2, [r7, #20]
 800baf8:	429a      	cmp	r2, r3
 800bafa:	d20b      	bcs.n	800bb14 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bafc:	683b      	ldr	r3, [r7, #0]
 800bafe:	681a      	ldr	r2, [r3, #0]
 800bb00:	697b      	ldr	r3, [r7, #20]
 800bb02:	1ad2      	subs	r2, r2, r3
 800bb04:	683b      	ldr	r3, [r7, #0]
 800bb06:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bb08:	6878      	ldr	r0, [r7, #4]
 800bb0a:	f7ff ff9b 	bl	800ba44 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bb0e:	2300      	movs	r3, #0
 800bb10:	61fb      	str	r3, [r7, #28]
 800bb12:	e004      	b.n	800bb1e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800bb14:	683b      	ldr	r3, [r7, #0]
 800bb16:	2200      	movs	r2, #0
 800bb18:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bb1a:	2301      	movs	r3, #1
 800bb1c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bb1e:	f000 fc71 	bl	800c404 <vPortExitCritical>

	return xReturn;
 800bb22:	69fb      	ldr	r3, [r7, #28]
}
 800bb24:	4618      	mov	r0, r3
 800bb26:	3720      	adds	r7, #32
 800bb28:	46bd      	mov	sp, r7
 800bb2a:	bd80      	pop	{r7, pc}
 800bb2c:	20000698 	.word	0x20000698
 800bb30:	200006ac 	.word	0x200006ac

0800bb34 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bb34:	b480      	push	{r7}
 800bb36:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bb38:	4b03      	ldr	r3, [pc, #12]	; (800bb48 <vTaskMissedYield+0x14>)
 800bb3a:	2201      	movs	r2, #1
 800bb3c:	601a      	str	r2, [r3, #0]
}
 800bb3e:	bf00      	nop
 800bb40:	46bd      	mov	sp, r7
 800bb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb46:	4770      	bx	lr
 800bb48:	200006a8 	.word	0x200006a8

0800bb4c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b082      	sub	sp, #8
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bb54:	f000 f852 	bl	800bbfc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bb58:	4b06      	ldr	r3, [pc, #24]	; (800bb74 <prvIdleTask+0x28>)
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	2b01      	cmp	r3, #1
 800bb5e:	d9f9      	bls.n	800bb54 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bb60:	4b05      	ldr	r3, [pc, #20]	; (800bb78 <prvIdleTask+0x2c>)
 800bb62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb66:	601a      	str	r2, [r3, #0]
 800bb68:	f3bf 8f4f 	dsb	sy
 800bb6c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bb70:	e7f0      	b.n	800bb54 <prvIdleTask+0x8>
 800bb72:	bf00      	nop
 800bb74:	20000598 	.word	0x20000598
 800bb78:	e000ed04 	.word	0xe000ed04

0800bb7c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	b082      	sub	sp, #8
 800bb80:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bb82:	2300      	movs	r3, #0
 800bb84:	607b      	str	r3, [r7, #4]
 800bb86:	e00c      	b.n	800bba2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bb88:	687a      	ldr	r2, [r7, #4]
 800bb8a:	4613      	mov	r3, r2
 800bb8c:	009b      	lsls	r3, r3, #2
 800bb8e:	4413      	add	r3, r2
 800bb90:	009b      	lsls	r3, r3, #2
 800bb92:	4a12      	ldr	r2, [pc, #72]	; (800bbdc <prvInitialiseTaskLists+0x60>)
 800bb94:	4413      	add	r3, r2
 800bb96:	4618      	mov	r0, r3
 800bb98:	f7fe face 	bl	800a138 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	3301      	adds	r3, #1
 800bba0:	607b      	str	r3, [r7, #4]
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	2b06      	cmp	r3, #6
 800bba6:	d9ef      	bls.n	800bb88 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bba8:	480d      	ldr	r0, [pc, #52]	; (800bbe0 <prvInitialiseTaskLists+0x64>)
 800bbaa:	f7fe fac5 	bl	800a138 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bbae:	480d      	ldr	r0, [pc, #52]	; (800bbe4 <prvInitialiseTaskLists+0x68>)
 800bbb0:	f7fe fac2 	bl	800a138 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bbb4:	480c      	ldr	r0, [pc, #48]	; (800bbe8 <prvInitialiseTaskLists+0x6c>)
 800bbb6:	f7fe fabf 	bl	800a138 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bbba:	480c      	ldr	r0, [pc, #48]	; (800bbec <prvInitialiseTaskLists+0x70>)
 800bbbc:	f7fe fabc 	bl	800a138 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bbc0:	480b      	ldr	r0, [pc, #44]	; (800bbf0 <prvInitialiseTaskLists+0x74>)
 800bbc2:	f7fe fab9 	bl	800a138 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bbc6:	4b0b      	ldr	r3, [pc, #44]	; (800bbf4 <prvInitialiseTaskLists+0x78>)
 800bbc8:	4a05      	ldr	r2, [pc, #20]	; (800bbe0 <prvInitialiseTaskLists+0x64>)
 800bbca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bbcc:	4b0a      	ldr	r3, [pc, #40]	; (800bbf8 <prvInitialiseTaskLists+0x7c>)
 800bbce:	4a05      	ldr	r2, [pc, #20]	; (800bbe4 <prvInitialiseTaskLists+0x68>)
 800bbd0:	601a      	str	r2, [r3, #0]
}
 800bbd2:	bf00      	nop
 800bbd4:	3708      	adds	r7, #8
 800bbd6:	46bd      	mov	sp, r7
 800bbd8:	bd80      	pop	{r7, pc}
 800bbda:	bf00      	nop
 800bbdc:	20000598 	.word	0x20000598
 800bbe0:	20000624 	.word	0x20000624
 800bbe4:	20000638 	.word	0x20000638
 800bbe8:	20000654 	.word	0x20000654
 800bbec:	20000668 	.word	0x20000668
 800bbf0:	20000680 	.word	0x20000680
 800bbf4:	2000064c 	.word	0x2000064c
 800bbf8:	20000650 	.word	0x20000650

0800bbfc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bbfc:	b580      	push	{r7, lr}
 800bbfe:	b082      	sub	sp, #8
 800bc00:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bc02:	e019      	b.n	800bc38 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bc04:	f000 fbce 	bl	800c3a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc08:	4b10      	ldr	r3, [pc, #64]	; (800bc4c <prvCheckTasksWaitingTermination+0x50>)
 800bc0a:	68db      	ldr	r3, [r3, #12]
 800bc0c:	68db      	ldr	r3, [r3, #12]
 800bc0e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	3304      	adds	r3, #4
 800bc14:	4618      	mov	r0, r3
 800bc16:	f7fe fb19 	bl	800a24c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bc1a:	4b0d      	ldr	r3, [pc, #52]	; (800bc50 <prvCheckTasksWaitingTermination+0x54>)
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	3b01      	subs	r3, #1
 800bc20:	4a0b      	ldr	r2, [pc, #44]	; (800bc50 <prvCheckTasksWaitingTermination+0x54>)
 800bc22:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bc24:	4b0b      	ldr	r3, [pc, #44]	; (800bc54 <prvCheckTasksWaitingTermination+0x58>)
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	3b01      	subs	r3, #1
 800bc2a:	4a0a      	ldr	r2, [pc, #40]	; (800bc54 <prvCheckTasksWaitingTermination+0x58>)
 800bc2c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bc2e:	f000 fbe9 	bl	800c404 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bc32:	6878      	ldr	r0, [r7, #4]
 800bc34:	f000 f810 	bl	800bc58 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bc38:	4b06      	ldr	r3, [pc, #24]	; (800bc54 <prvCheckTasksWaitingTermination+0x58>)
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d1e1      	bne.n	800bc04 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bc40:	bf00      	nop
 800bc42:	bf00      	nop
 800bc44:	3708      	adds	r7, #8
 800bc46:	46bd      	mov	sp, r7
 800bc48:	bd80      	pop	{r7, pc}
 800bc4a:	bf00      	nop
 800bc4c:	20000668 	.word	0x20000668
 800bc50:	20000694 	.word	0x20000694
 800bc54:	2000067c 	.word	0x2000067c

0800bc58 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	b084      	sub	sp, #16
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	334c      	adds	r3, #76	; 0x4c
 800bc64:	4618      	mov	r0, r3
 800bc66:	f001 fd0d 	bl	800d684 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d108      	bne.n	800bc86 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc78:	4618      	mov	r0, r3
 800bc7a:	f000 fd81 	bl	800c780 <vPortFree>
				vPortFree( pxTCB );
 800bc7e:	6878      	ldr	r0, [r7, #4]
 800bc80:	f000 fd7e 	bl	800c780 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bc84:	e018      	b.n	800bcb8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800bc8c:	2b01      	cmp	r3, #1
 800bc8e:	d103      	bne.n	800bc98 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800bc90:	6878      	ldr	r0, [r7, #4]
 800bc92:	f000 fd75 	bl	800c780 <vPortFree>
	}
 800bc96:	e00f      	b.n	800bcb8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800bc9e:	2b02      	cmp	r3, #2
 800bca0:	d00a      	beq.n	800bcb8 <prvDeleteTCB+0x60>
	__asm volatile
 800bca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bca6:	f383 8811 	msr	BASEPRI, r3
 800bcaa:	f3bf 8f6f 	isb	sy
 800bcae:	f3bf 8f4f 	dsb	sy
 800bcb2:	60fb      	str	r3, [r7, #12]
}
 800bcb4:	bf00      	nop
 800bcb6:	e7fe      	b.n	800bcb6 <prvDeleteTCB+0x5e>
	}
 800bcb8:	bf00      	nop
 800bcba:	3710      	adds	r7, #16
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	bd80      	pop	{r7, pc}

0800bcc0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bcc0:	b480      	push	{r7}
 800bcc2:	b083      	sub	sp, #12
 800bcc4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bcc6:	4b0c      	ldr	r3, [pc, #48]	; (800bcf8 <prvResetNextTaskUnblockTime+0x38>)
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d104      	bne.n	800bcda <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bcd0:	4b0a      	ldr	r3, [pc, #40]	; (800bcfc <prvResetNextTaskUnblockTime+0x3c>)
 800bcd2:	f04f 32ff 	mov.w	r2, #4294967295
 800bcd6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bcd8:	e008      	b.n	800bcec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bcda:	4b07      	ldr	r3, [pc, #28]	; (800bcf8 <prvResetNextTaskUnblockTime+0x38>)
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	68db      	ldr	r3, [r3, #12]
 800bce0:	68db      	ldr	r3, [r3, #12]
 800bce2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	685b      	ldr	r3, [r3, #4]
 800bce8:	4a04      	ldr	r2, [pc, #16]	; (800bcfc <prvResetNextTaskUnblockTime+0x3c>)
 800bcea:	6013      	str	r3, [r2, #0]
}
 800bcec:	bf00      	nop
 800bcee:	370c      	adds	r7, #12
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf6:	4770      	bx	lr
 800bcf8:	2000064c 	.word	0x2000064c
 800bcfc:	200006b4 	.word	0x200006b4

0800bd00 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bd00:	b480      	push	{r7}
 800bd02:	b083      	sub	sp, #12
 800bd04:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bd06:	4b0b      	ldr	r3, [pc, #44]	; (800bd34 <xTaskGetSchedulerState+0x34>)
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d102      	bne.n	800bd14 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bd0e:	2301      	movs	r3, #1
 800bd10:	607b      	str	r3, [r7, #4]
 800bd12:	e008      	b.n	800bd26 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bd14:	4b08      	ldr	r3, [pc, #32]	; (800bd38 <xTaskGetSchedulerState+0x38>)
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d102      	bne.n	800bd22 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bd1c:	2302      	movs	r3, #2
 800bd1e:	607b      	str	r3, [r7, #4]
 800bd20:	e001      	b.n	800bd26 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bd22:	2300      	movs	r3, #0
 800bd24:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bd26:	687b      	ldr	r3, [r7, #4]
	}
 800bd28:	4618      	mov	r0, r3
 800bd2a:	370c      	adds	r7, #12
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd32:	4770      	bx	lr
 800bd34:	200006a0 	.word	0x200006a0
 800bd38:	200006bc 	.word	0x200006bc

0800bd3c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	b084      	sub	sp, #16
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800bd48:	2300      	movs	r3, #0
 800bd4a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d05e      	beq.n	800be10 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800bd52:	68bb      	ldr	r3, [r7, #8]
 800bd54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd56:	4b31      	ldr	r3, [pc, #196]	; (800be1c <xTaskPriorityInherit+0xe0>)
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd5c:	429a      	cmp	r2, r3
 800bd5e:	d24e      	bcs.n	800bdfe <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bd60:	68bb      	ldr	r3, [r7, #8]
 800bd62:	699b      	ldr	r3, [r3, #24]
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	db06      	blt.n	800bd76 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd68:	4b2c      	ldr	r3, [pc, #176]	; (800be1c <xTaskPriorityInherit+0xe0>)
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd6e:	f1c3 0207 	rsb	r2, r3, #7
 800bd72:	68bb      	ldr	r3, [r7, #8]
 800bd74:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800bd76:	68bb      	ldr	r3, [r7, #8]
 800bd78:	6959      	ldr	r1, [r3, #20]
 800bd7a:	68bb      	ldr	r3, [r7, #8]
 800bd7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd7e:	4613      	mov	r3, r2
 800bd80:	009b      	lsls	r3, r3, #2
 800bd82:	4413      	add	r3, r2
 800bd84:	009b      	lsls	r3, r3, #2
 800bd86:	4a26      	ldr	r2, [pc, #152]	; (800be20 <xTaskPriorityInherit+0xe4>)
 800bd88:	4413      	add	r3, r2
 800bd8a:	4299      	cmp	r1, r3
 800bd8c:	d12f      	bne.n	800bdee <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bd8e:	68bb      	ldr	r3, [r7, #8]
 800bd90:	3304      	adds	r3, #4
 800bd92:	4618      	mov	r0, r3
 800bd94:	f7fe fa5a 	bl	800a24c <uxListRemove>
 800bd98:	4603      	mov	r3, r0
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d10a      	bne.n	800bdb4 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800bd9e:	68bb      	ldr	r3, [r7, #8]
 800bda0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bda2:	2201      	movs	r2, #1
 800bda4:	fa02 f303 	lsl.w	r3, r2, r3
 800bda8:	43da      	mvns	r2, r3
 800bdaa:	4b1e      	ldr	r3, [pc, #120]	; (800be24 <xTaskPriorityInherit+0xe8>)
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	4013      	ands	r3, r2
 800bdb0:	4a1c      	ldr	r2, [pc, #112]	; (800be24 <xTaskPriorityInherit+0xe8>)
 800bdb2:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bdb4:	4b19      	ldr	r3, [pc, #100]	; (800be1c <xTaskPriorityInherit+0xe0>)
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdba:	68bb      	ldr	r3, [r7, #8]
 800bdbc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800bdbe:	68bb      	ldr	r3, [r7, #8]
 800bdc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdc2:	2201      	movs	r2, #1
 800bdc4:	409a      	lsls	r2, r3
 800bdc6:	4b17      	ldr	r3, [pc, #92]	; (800be24 <xTaskPriorityInherit+0xe8>)
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	4313      	orrs	r3, r2
 800bdcc:	4a15      	ldr	r2, [pc, #84]	; (800be24 <xTaskPriorityInherit+0xe8>)
 800bdce:	6013      	str	r3, [r2, #0]
 800bdd0:	68bb      	ldr	r3, [r7, #8]
 800bdd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdd4:	4613      	mov	r3, r2
 800bdd6:	009b      	lsls	r3, r3, #2
 800bdd8:	4413      	add	r3, r2
 800bdda:	009b      	lsls	r3, r3, #2
 800bddc:	4a10      	ldr	r2, [pc, #64]	; (800be20 <xTaskPriorityInherit+0xe4>)
 800bdde:	441a      	add	r2, r3
 800bde0:	68bb      	ldr	r3, [r7, #8]
 800bde2:	3304      	adds	r3, #4
 800bde4:	4619      	mov	r1, r3
 800bde6:	4610      	mov	r0, r2
 800bde8:	f7fe f9d3 	bl	800a192 <vListInsertEnd>
 800bdec:	e004      	b.n	800bdf8 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bdee:	4b0b      	ldr	r3, [pc, #44]	; (800be1c <xTaskPriorityInherit+0xe0>)
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdf4:	68bb      	ldr	r3, [r7, #8]
 800bdf6:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800bdf8:	2301      	movs	r3, #1
 800bdfa:	60fb      	str	r3, [r7, #12]
 800bdfc:	e008      	b.n	800be10 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800bdfe:	68bb      	ldr	r3, [r7, #8]
 800be00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800be02:	4b06      	ldr	r3, [pc, #24]	; (800be1c <xTaskPriorityInherit+0xe0>)
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be08:	429a      	cmp	r2, r3
 800be0a:	d201      	bcs.n	800be10 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800be0c:	2301      	movs	r3, #1
 800be0e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800be10:	68fb      	ldr	r3, [r7, #12]
	}
 800be12:	4618      	mov	r0, r3
 800be14:	3710      	adds	r7, #16
 800be16:	46bd      	mov	sp, r7
 800be18:	bd80      	pop	{r7, pc}
 800be1a:	bf00      	nop
 800be1c:	20000594 	.word	0x20000594
 800be20:	20000598 	.word	0x20000598
 800be24:	2000069c 	.word	0x2000069c

0800be28 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800be28:	b580      	push	{r7, lr}
 800be2a:	b086      	sub	sp, #24
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800be34:	2300      	movs	r3, #0
 800be36:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d06e      	beq.n	800bf1c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800be3e:	4b3a      	ldr	r3, [pc, #232]	; (800bf28 <xTaskPriorityDisinherit+0x100>)
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	693a      	ldr	r2, [r7, #16]
 800be44:	429a      	cmp	r2, r3
 800be46:	d00a      	beq.n	800be5e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800be48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be4c:	f383 8811 	msr	BASEPRI, r3
 800be50:	f3bf 8f6f 	isb	sy
 800be54:	f3bf 8f4f 	dsb	sy
 800be58:	60fb      	str	r3, [r7, #12]
}
 800be5a:	bf00      	nop
 800be5c:	e7fe      	b.n	800be5c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800be5e:	693b      	ldr	r3, [r7, #16]
 800be60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800be62:	2b00      	cmp	r3, #0
 800be64:	d10a      	bne.n	800be7c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800be66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be6a:	f383 8811 	msr	BASEPRI, r3
 800be6e:	f3bf 8f6f 	isb	sy
 800be72:	f3bf 8f4f 	dsb	sy
 800be76:	60bb      	str	r3, [r7, #8]
}
 800be78:	bf00      	nop
 800be7a:	e7fe      	b.n	800be7a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800be7c:	693b      	ldr	r3, [r7, #16]
 800be7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800be80:	1e5a      	subs	r2, r3, #1
 800be82:	693b      	ldr	r3, [r7, #16]
 800be84:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800be86:	693b      	ldr	r3, [r7, #16]
 800be88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be8a:	693b      	ldr	r3, [r7, #16]
 800be8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be8e:	429a      	cmp	r2, r3
 800be90:	d044      	beq.n	800bf1c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800be92:	693b      	ldr	r3, [r7, #16]
 800be94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800be96:	2b00      	cmp	r3, #0
 800be98:	d140      	bne.n	800bf1c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800be9a:	693b      	ldr	r3, [r7, #16]
 800be9c:	3304      	adds	r3, #4
 800be9e:	4618      	mov	r0, r3
 800bea0:	f7fe f9d4 	bl	800a24c <uxListRemove>
 800bea4:	4603      	mov	r3, r0
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d115      	bne.n	800bed6 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800beaa:	693b      	ldr	r3, [r7, #16]
 800beac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800beae:	491f      	ldr	r1, [pc, #124]	; (800bf2c <xTaskPriorityDisinherit+0x104>)
 800beb0:	4613      	mov	r3, r2
 800beb2:	009b      	lsls	r3, r3, #2
 800beb4:	4413      	add	r3, r2
 800beb6:	009b      	lsls	r3, r3, #2
 800beb8:	440b      	add	r3, r1
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d10a      	bne.n	800bed6 <xTaskPriorityDisinherit+0xae>
 800bec0:	693b      	ldr	r3, [r7, #16]
 800bec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bec4:	2201      	movs	r2, #1
 800bec6:	fa02 f303 	lsl.w	r3, r2, r3
 800beca:	43da      	mvns	r2, r3
 800becc:	4b18      	ldr	r3, [pc, #96]	; (800bf30 <xTaskPriorityDisinherit+0x108>)
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	4013      	ands	r3, r2
 800bed2:	4a17      	ldr	r2, [pc, #92]	; (800bf30 <xTaskPriorityDisinherit+0x108>)
 800bed4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bed6:	693b      	ldr	r3, [r7, #16]
 800bed8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800beda:	693b      	ldr	r3, [r7, #16]
 800bedc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bede:	693b      	ldr	r3, [r7, #16]
 800bee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bee2:	f1c3 0207 	rsb	r2, r3, #7
 800bee6:	693b      	ldr	r3, [r7, #16]
 800bee8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800beea:	693b      	ldr	r3, [r7, #16]
 800beec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beee:	2201      	movs	r2, #1
 800bef0:	409a      	lsls	r2, r3
 800bef2:	4b0f      	ldr	r3, [pc, #60]	; (800bf30 <xTaskPriorityDisinherit+0x108>)
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	4313      	orrs	r3, r2
 800bef8:	4a0d      	ldr	r2, [pc, #52]	; (800bf30 <xTaskPriorityDisinherit+0x108>)
 800befa:	6013      	str	r3, [r2, #0]
 800befc:	693b      	ldr	r3, [r7, #16]
 800befe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf00:	4613      	mov	r3, r2
 800bf02:	009b      	lsls	r3, r3, #2
 800bf04:	4413      	add	r3, r2
 800bf06:	009b      	lsls	r3, r3, #2
 800bf08:	4a08      	ldr	r2, [pc, #32]	; (800bf2c <xTaskPriorityDisinherit+0x104>)
 800bf0a:	441a      	add	r2, r3
 800bf0c:	693b      	ldr	r3, [r7, #16]
 800bf0e:	3304      	adds	r3, #4
 800bf10:	4619      	mov	r1, r3
 800bf12:	4610      	mov	r0, r2
 800bf14:	f7fe f93d 	bl	800a192 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bf18:	2301      	movs	r3, #1
 800bf1a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bf1c:	697b      	ldr	r3, [r7, #20]
	}
 800bf1e:	4618      	mov	r0, r3
 800bf20:	3718      	adds	r7, #24
 800bf22:	46bd      	mov	sp, r7
 800bf24:	bd80      	pop	{r7, pc}
 800bf26:	bf00      	nop
 800bf28:	20000594 	.word	0x20000594
 800bf2c:	20000598 	.word	0x20000598
 800bf30:	2000069c 	.word	0x2000069c

0800bf34 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800bf34:	b580      	push	{r7, lr}
 800bf36:	b088      	sub	sp, #32
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	6078      	str	r0, [r7, #4]
 800bf3c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800bf42:	2301      	movs	r3, #1
 800bf44:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d077      	beq.n	800c03c <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800bf4c:	69bb      	ldr	r3, [r7, #24]
 800bf4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d10a      	bne.n	800bf6a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800bf54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf58:	f383 8811 	msr	BASEPRI, r3
 800bf5c:	f3bf 8f6f 	isb	sy
 800bf60:	f3bf 8f4f 	dsb	sy
 800bf64:	60fb      	str	r3, [r7, #12]
}
 800bf66:	bf00      	nop
 800bf68:	e7fe      	b.n	800bf68 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800bf6a:	69bb      	ldr	r3, [r7, #24]
 800bf6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf6e:	683a      	ldr	r2, [r7, #0]
 800bf70:	429a      	cmp	r2, r3
 800bf72:	d902      	bls.n	800bf7a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800bf74:	683b      	ldr	r3, [r7, #0]
 800bf76:	61fb      	str	r3, [r7, #28]
 800bf78:	e002      	b.n	800bf80 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800bf7a:	69bb      	ldr	r3, [r7, #24]
 800bf7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf7e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800bf80:	69bb      	ldr	r3, [r7, #24]
 800bf82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf84:	69fa      	ldr	r2, [r7, #28]
 800bf86:	429a      	cmp	r2, r3
 800bf88:	d058      	beq.n	800c03c <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800bf8a:	69bb      	ldr	r3, [r7, #24]
 800bf8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bf8e:	697a      	ldr	r2, [r7, #20]
 800bf90:	429a      	cmp	r2, r3
 800bf92:	d153      	bne.n	800c03c <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800bf94:	4b2b      	ldr	r3, [pc, #172]	; (800c044 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	69ba      	ldr	r2, [r7, #24]
 800bf9a:	429a      	cmp	r2, r3
 800bf9c:	d10a      	bne.n	800bfb4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800bf9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfa2:	f383 8811 	msr	BASEPRI, r3
 800bfa6:	f3bf 8f6f 	isb	sy
 800bfaa:	f3bf 8f4f 	dsb	sy
 800bfae:	60bb      	str	r3, [r7, #8]
}
 800bfb0:	bf00      	nop
 800bfb2:	e7fe      	b.n	800bfb2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800bfb4:	69bb      	ldr	r3, [r7, #24]
 800bfb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfb8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800bfba:	69bb      	ldr	r3, [r7, #24]
 800bfbc:	69fa      	ldr	r2, [r7, #28]
 800bfbe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bfc0:	69bb      	ldr	r3, [r7, #24]
 800bfc2:	699b      	ldr	r3, [r3, #24]
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	db04      	blt.n	800bfd2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bfc8:	69fb      	ldr	r3, [r7, #28]
 800bfca:	f1c3 0207 	rsb	r2, r3, #7
 800bfce:	69bb      	ldr	r3, [r7, #24]
 800bfd0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800bfd2:	69bb      	ldr	r3, [r7, #24]
 800bfd4:	6959      	ldr	r1, [r3, #20]
 800bfd6:	693a      	ldr	r2, [r7, #16]
 800bfd8:	4613      	mov	r3, r2
 800bfda:	009b      	lsls	r3, r3, #2
 800bfdc:	4413      	add	r3, r2
 800bfde:	009b      	lsls	r3, r3, #2
 800bfe0:	4a19      	ldr	r2, [pc, #100]	; (800c048 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800bfe2:	4413      	add	r3, r2
 800bfe4:	4299      	cmp	r1, r3
 800bfe6:	d129      	bne.n	800c03c <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bfe8:	69bb      	ldr	r3, [r7, #24]
 800bfea:	3304      	adds	r3, #4
 800bfec:	4618      	mov	r0, r3
 800bfee:	f7fe f92d 	bl	800a24c <uxListRemove>
 800bff2:	4603      	mov	r3, r0
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d10a      	bne.n	800c00e <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800bff8:	69bb      	ldr	r3, [r7, #24]
 800bffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bffc:	2201      	movs	r2, #1
 800bffe:	fa02 f303 	lsl.w	r3, r2, r3
 800c002:	43da      	mvns	r2, r3
 800c004:	4b11      	ldr	r3, [pc, #68]	; (800c04c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	4013      	ands	r3, r2
 800c00a:	4a10      	ldr	r2, [pc, #64]	; (800c04c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800c00c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c00e:	69bb      	ldr	r3, [r7, #24]
 800c010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c012:	2201      	movs	r2, #1
 800c014:	409a      	lsls	r2, r3
 800c016:	4b0d      	ldr	r3, [pc, #52]	; (800c04c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	4313      	orrs	r3, r2
 800c01c:	4a0b      	ldr	r2, [pc, #44]	; (800c04c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800c01e:	6013      	str	r3, [r2, #0]
 800c020:	69bb      	ldr	r3, [r7, #24]
 800c022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c024:	4613      	mov	r3, r2
 800c026:	009b      	lsls	r3, r3, #2
 800c028:	4413      	add	r3, r2
 800c02a:	009b      	lsls	r3, r3, #2
 800c02c:	4a06      	ldr	r2, [pc, #24]	; (800c048 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800c02e:	441a      	add	r2, r3
 800c030:	69bb      	ldr	r3, [r7, #24]
 800c032:	3304      	adds	r3, #4
 800c034:	4619      	mov	r1, r3
 800c036:	4610      	mov	r0, r2
 800c038:	f7fe f8ab 	bl	800a192 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c03c:	bf00      	nop
 800c03e:	3720      	adds	r7, #32
 800c040:	46bd      	mov	sp, r7
 800c042:	bd80      	pop	{r7, pc}
 800c044:	20000594 	.word	0x20000594
 800c048:	20000598 	.word	0x20000598
 800c04c:	2000069c 	.word	0x2000069c

0800c050 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800c050:	b480      	push	{r7}
 800c052:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c054:	4b07      	ldr	r3, [pc, #28]	; (800c074 <pvTaskIncrementMutexHeldCount+0x24>)
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d004      	beq.n	800c066 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c05c:	4b05      	ldr	r3, [pc, #20]	; (800c074 <pvTaskIncrementMutexHeldCount+0x24>)
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c062:	3201      	adds	r2, #1
 800c064:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800c066:	4b03      	ldr	r3, [pc, #12]	; (800c074 <pvTaskIncrementMutexHeldCount+0x24>)
 800c068:	681b      	ldr	r3, [r3, #0]
	}
 800c06a:	4618      	mov	r0, r3
 800c06c:	46bd      	mov	sp, r7
 800c06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c072:	4770      	bx	lr
 800c074:	20000594 	.word	0x20000594

0800c078 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	b084      	sub	sp, #16
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]
 800c080:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c082:	4b29      	ldr	r3, [pc, #164]	; (800c128 <prvAddCurrentTaskToDelayedList+0xb0>)
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c088:	4b28      	ldr	r3, [pc, #160]	; (800c12c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	3304      	adds	r3, #4
 800c08e:	4618      	mov	r0, r3
 800c090:	f7fe f8dc 	bl	800a24c <uxListRemove>
 800c094:	4603      	mov	r3, r0
 800c096:	2b00      	cmp	r3, #0
 800c098:	d10b      	bne.n	800c0b2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800c09a:	4b24      	ldr	r3, [pc, #144]	; (800c12c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0a0:	2201      	movs	r2, #1
 800c0a2:	fa02 f303 	lsl.w	r3, r2, r3
 800c0a6:	43da      	mvns	r2, r3
 800c0a8:	4b21      	ldr	r3, [pc, #132]	; (800c130 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	4013      	ands	r3, r2
 800c0ae:	4a20      	ldr	r2, [pc, #128]	; (800c130 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c0b0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0b8:	d10a      	bne.n	800c0d0 <prvAddCurrentTaskToDelayedList+0x58>
 800c0ba:	683b      	ldr	r3, [r7, #0]
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d007      	beq.n	800c0d0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c0c0:	4b1a      	ldr	r3, [pc, #104]	; (800c12c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	3304      	adds	r3, #4
 800c0c6:	4619      	mov	r1, r3
 800c0c8:	481a      	ldr	r0, [pc, #104]	; (800c134 <prvAddCurrentTaskToDelayedList+0xbc>)
 800c0ca:	f7fe f862 	bl	800a192 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c0ce:	e026      	b.n	800c11e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c0d0:	68fa      	ldr	r2, [r7, #12]
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	4413      	add	r3, r2
 800c0d6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c0d8:	4b14      	ldr	r3, [pc, #80]	; (800c12c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	68ba      	ldr	r2, [r7, #8]
 800c0de:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c0e0:	68ba      	ldr	r2, [r7, #8]
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	429a      	cmp	r2, r3
 800c0e6:	d209      	bcs.n	800c0fc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c0e8:	4b13      	ldr	r3, [pc, #76]	; (800c138 <prvAddCurrentTaskToDelayedList+0xc0>)
 800c0ea:	681a      	ldr	r2, [r3, #0]
 800c0ec:	4b0f      	ldr	r3, [pc, #60]	; (800c12c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	3304      	adds	r3, #4
 800c0f2:	4619      	mov	r1, r3
 800c0f4:	4610      	mov	r0, r2
 800c0f6:	f7fe f870 	bl	800a1da <vListInsert>
}
 800c0fa:	e010      	b.n	800c11e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c0fc:	4b0f      	ldr	r3, [pc, #60]	; (800c13c <prvAddCurrentTaskToDelayedList+0xc4>)
 800c0fe:	681a      	ldr	r2, [r3, #0]
 800c100:	4b0a      	ldr	r3, [pc, #40]	; (800c12c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	3304      	adds	r3, #4
 800c106:	4619      	mov	r1, r3
 800c108:	4610      	mov	r0, r2
 800c10a:	f7fe f866 	bl	800a1da <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c10e:	4b0c      	ldr	r3, [pc, #48]	; (800c140 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	68ba      	ldr	r2, [r7, #8]
 800c114:	429a      	cmp	r2, r3
 800c116:	d202      	bcs.n	800c11e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c118:	4a09      	ldr	r2, [pc, #36]	; (800c140 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c11a:	68bb      	ldr	r3, [r7, #8]
 800c11c:	6013      	str	r3, [r2, #0]
}
 800c11e:	bf00      	nop
 800c120:	3710      	adds	r7, #16
 800c122:	46bd      	mov	sp, r7
 800c124:	bd80      	pop	{r7, pc}
 800c126:	bf00      	nop
 800c128:	20000698 	.word	0x20000698
 800c12c:	20000594 	.word	0x20000594
 800c130:	2000069c 	.word	0x2000069c
 800c134:	20000680 	.word	0x20000680
 800c138:	20000650 	.word	0x20000650
 800c13c:	2000064c 	.word	0x2000064c
 800c140:	200006b4 	.word	0x200006b4

0800c144 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c144:	b480      	push	{r7}
 800c146:	b085      	sub	sp, #20
 800c148:	af00      	add	r7, sp, #0
 800c14a:	60f8      	str	r0, [r7, #12]
 800c14c:	60b9      	str	r1, [r7, #8]
 800c14e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	3b04      	subs	r3, #4
 800c154:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c15c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	3b04      	subs	r3, #4
 800c162:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c164:	68bb      	ldr	r3, [r7, #8]
 800c166:	f023 0201 	bic.w	r2, r3, #1
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	3b04      	subs	r3, #4
 800c172:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c174:	4a0c      	ldr	r2, [pc, #48]	; (800c1a8 <pxPortInitialiseStack+0x64>)
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	3b14      	subs	r3, #20
 800c17e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c180:	687a      	ldr	r2, [r7, #4]
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	3b04      	subs	r3, #4
 800c18a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	f06f 0202 	mvn.w	r2, #2
 800c192:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	3b20      	subs	r3, #32
 800c198:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c19a:	68fb      	ldr	r3, [r7, #12]
}
 800c19c:	4618      	mov	r0, r3
 800c19e:	3714      	adds	r7, #20
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a6:	4770      	bx	lr
 800c1a8:	0800c1ad 	.word	0x0800c1ad

0800c1ac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c1ac:	b480      	push	{r7}
 800c1ae:	b085      	sub	sp, #20
 800c1b0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c1b6:	4b12      	ldr	r3, [pc, #72]	; (800c200 <prvTaskExitError+0x54>)
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1be:	d00a      	beq.n	800c1d6 <prvTaskExitError+0x2a>
	__asm volatile
 800c1c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1c4:	f383 8811 	msr	BASEPRI, r3
 800c1c8:	f3bf 8f6f 	isb	sy
 800c1cc:	f3bf 8f4f 	dsb	sy
 800c1d0:	60fb      	str	r3, [r7, #12]
}
 800c1d2:	bf00      	nop
 800c1d4:	e7fe      	b.n	800c1d4 <prvTaskExitError+0x28>
	__asm volatile
 800c1d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1da:	f383 8811 	msr	BASEPRI, r3
 800c1de:	f3bf 8f6f 	isb	sy
 800c1e2:	f3bf 8f4f 	dsb	sy
 800c1e6:	60bb      	str	r3, [r7, #8]
}
 800c1e8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c1ea:	bf00      	nop
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d0fc      	beq.n	800c1ec <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c1f2:	bf00      	nop
 800c1f4:	bf00      	nop
 800c1f6:	3714      	adds	r7, #20
 800c1f8:	46bd      	mov	sp, r7
 800c1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1fe:	4770      	bx	lr
 800c200:	20000098 	.word	0x20000098
	...

0800c210 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c210:	4b07      	ldr	r3, [pc, #28]	; (800c230 <pxCurrentTCBConst2>)
 800c212:	6819      	ldr	r1, [r3, #0]
 800c214:	6808      	ldr	r0, [r1, #0]
 800c216:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c21a:	f380 8809 	msr	PSP, r0
 800c21e:	f3bf 8f6f 	isb	sy
 800c222:	f04f 0000 	mov.w	r0, #0
 800c226:	f380 8811 	msr	BASEPRI, r0
 800c22a:	4770      	bx	lr
 800c22c:	f3af 8000 	nop.w

0800c230 <pxCurrentTCBConst2>:
 800c230:	20000594 	.word	0x20000594
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c234:	bf00      	nop
 800c236:	bf00      	nop

0800c238 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c238:	4808      	ldr	r0, [pc, #32]	; (800c25c <prvPortStartFirstTask+0x24>)
 800c23a:	6800      	ldr	r0, [r0, #0]
 800c23c:	6800      	ldr	r0, [r0, #0]
 800c23e:	f380 8808 	msr	MSP, r0
 800c242:	f04f 0000 	mov.w	r0, #0
 800c246:	f380 8814 	msr	CONTROL, r0
 800c24a:	b662      	cpsie	i
 800c24c:	b661      	cpsie	f
 800c24e:	f3bf 8f4f 	dsb	sy
 800c252:	f3bf 8f6f 	isb	sy
 800c256:	df00      	svc	0
 800c258:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c25a:	bf00      	nop
 800c25c:	e000ed08 	.word	0xe000ed08

0800c260 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c260:	b580      	push	{r7, lr}
 800c262:	b086      	sub	sp, #24
 800c264:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c266:	4b46      	ldr	r3, [pc, #280]	; (800c380 <xPortStartScheduler+0x120>)
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	4a46      	ldr	r2, [pc, #280]	; (800c384 <xPortStartScheduler+0x124>)
 800c26c:	4293      	cmp	r3, r2
 800c26e:	d10a      	bne.n	800c286 <xPortStartScheduler+0x26>
	__asm volatile
 800c270:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c274:	f383 8811 	msr	BASEPRI, r3
 800c278:	f3bf 8f6f 	isb	sy
 800c27c:	f3bf 8f4f 	dsb	sy
 800c280:	613b      	str	r3, [r7, #16]
}
 800c282:	bf00      	nop
 800c284:	e7fe      	b.n	800c284 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c286:	4b3e      	ldr	r3, [pc, #248]	; (800c380 <xPortStartScheduler+0x120>)
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	4a3f      	ldr	r2, [pc, #252]	; (800c388 <xPortStartScheduler+0x128>)
 800c28c:	4293      	cmp	r3, r2
 800c28e:	d10a      	bne.n	800c2a6 <xPortStartScheduler+0x46>
	__asm volatile
 800c290:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c294:	f383 8811 	msr	BASEPRI, r3
 800c298:	f3bf 8f6f 	isb	sy
 800c29c:	f3bf 8f4f 	dsb	sy
 800c2a0:	60fb      	str	r3, [r7, #12]
}
 800c2a2:	bf00      	nop
 800c2a4:	e7fe      	b.n	800c2a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c2a6:	4b39      	ldr	r3, [pc, #228]	; (800c38c <xPortStartScheduler+0x12c>)
 800c2a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c2aa:	697b      	ldr	r3, [r7, #20]
 800c2ac:	781b      	ldrb	r3, [r3, #0]
 800c2ae:	b2db      	uxtb	r3, r3
 800c2b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c2b2:	697b      	ldr	r3, [r7, #20]
 800c2b4:	22ff      	movs	r2, #255	; 0xff
 800c2b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c2b8:	697b      	ldr	r3, [r7, #20]
 800c2ba:	781b      	ldrb	r3, [r3, #0]
 800c2bc:	b2db      	uxtb	r3, r3
 800c2be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c2c0:	78fb      	ldrb	r3, [r7, #3]
 800c2c2:	b2db      	uxtb	r3, r3
 800c2c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c2c8:	b2da      	uxtb	r2, r3
 800c2ca:	4b31      	ldr	r3, [pc, #196]	; (800c390 <xPortStartScheduler+0x130>)
 800c2cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c2ce:	4b31      	ldr	r3, [pc, #196]	; (800c394 <xPortStartScheduler+0x134>)
 800c2d0:	2207      	movs	r2, #7
 800c2d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c2d4:	e009      	b.n	800c2ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c2d6:	4b2f      	ldr	r3, [pc, #188]	; (800c394 <xPortStartScheduler+0x134>)
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	3b01      	subs	r3, #1
 800c2dc:	4a2d      	ldr	r2, [pc, #180]	; (800c394 <xPortStartScheduler+0x134>)
 800c2de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c2e0:	78fb      	ldrb	r3, [r7, #3]
 800c2e2:	b2db      	uxtb	r3, r3
 800c2e4:	005b      	lsls	r3, r3, #1
 800c2e6:	b2db      	uxtb	r3, r3
 800c2e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c2ea:	78fb      	ldrb	r3, [r7, #3]
 800c2ec:	b2db      	uxtb	r3, r3
 800c2ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c2f2:	2b80      	cmp	r3, #128	; 0x80
 800c2f4:	d0ef      	beq.n	800c2d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c2f6:	4b27      	ldr	r3, [pc, #156]	; (800c394 <xPortStartScheduler+0x134>)
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	f1c3 0307 	rsb	r3, r3, #7
 800c2fe:	2b04      	cmp	r3, #4
 800c300:	d00a      	beq.n	800c318 <xPortStartScheduler+0xb8>
	__asm volatile
 800c302:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c306:	f383 8811 	msr	BASEPRI, r3
 800c30a:	f3bf 8f6f 	isb	sy
 800c30e:	f3bf 8f4f 	dsb	sy
 800c312:	60bb      	str	r3, [r7, #8]
}
 800c314:	bf00      	nop
 800c316:	e7fe      	b.n	800c316 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c318:	4b1e      	ldr	r3, [pc, #120]	; (800c394 <xPortStartScheduler+0x134>)
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	021b      	lsls	r3, r3, #8
 800c31e:	4a1d      	ldr	r2, [pc, #116]	; (800c394 <xPortStartScheduler+0x134>)
 800c320:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c322:	4b1c      	ldr	r3, [pc, #112]	; (800c394 <xPortStartScheduler+0x134>)
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c32a:	4a1a      	ldr	r2, [pc, #104]	; (800c394 <xPortStartScheduler+0x134>)
 800c32c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	b2da      	uxtb	r2, r3
 800c332:	697b      	ldr	r3, [r7, #20]
 800c334:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c336:	4b18      	ldr	r3, [pc, #96]	; (800c398 <xPortStartScheduler+0x138>)
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	4a17      	ldr	r2, [pc, #92]	; (800c398 <xPortStartScheduler+0x138>)
 800c33c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c340:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c342:	4b15      	ldr	r3, [pc, #84]	; (800c398 <xPortStartScheduler+0x138>)
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	4a14      	ldr	r2, [pc, #80]	; (800c398 <xPortStartScheduler+0x138>)
 800c348:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c34c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c34e:	f000 f8dd 	bl	800c50c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c352:	4b12      	ldr	r3, [pc, #72]	; (800c39c <xPortStartScheduler+0x13c>)
 800c354:	2200      	movs	r2, #0
 800c356:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c358:	f000 f8fc 	bl	800c554 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c35c:	4b10      	ldr	r3, [pc, #64]	; (800c3a0 <xPortStartScheduler+0x140>)
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	4a0f      	ldr	r2, [pc, #60]	; (800c3a0 <xPortStartScheduler+0x140>)
 800c362:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c366:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c368:	f7ff ff66 	bl	800c238 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c36c:	f7ff fa82 	bl	800b874 <vTaskSwitchContext>
	prvTaskExitError();
 800c370:	f7ff ff1c 	bl	800c1ac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c374:	2300      	movs	r3, #0
}
 800c376:	4618      	mov	r0, r3
 800c378:	3718      	adds	r7, #24
 800c37a:	46bd      	mov	sp, r7
 800c37c:	bd80      	pop	{r7, pc}
 800c37e:	bf00      	nop
 800c380:	e000ed00 	.word	0xe000ed00
 800c384:	410fc271 	.word	0x410fc271
 800c388:	410fc270 	.word	0x410fc270
 800c38c:	e000e400 	.word	0xe000e400
 800c390:	200006c0 	.word	0x200006c0
 800c394:	200006c4 	.word	0x200006c4
 800c398:	e000ed20 	.word	0xe000ed20
 800c39c:	20000098 	.word	0x20000098
 800c3a0:	e000ef34 	.word	0xe000ef34

0800c3a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c3a4:	b480      	push	{r7}
 800c3a6:	b083      	sub	sp, #12
 800c3a8:	af00      	add	r7, sp, #0
	__asm volatile
 800c3aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3ae:	f383 8811 	msr	BASEPRI, r3
 800c3b2:	f3bf 8f6f 	isb	sy
 800c3b6:	f3bf 8f4f 	dsb	sy
 800c3ba:	607b      	str	r3, [r7, #4]
}
 800c3bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c3be:	4b0f      	ldr	r3, [pc, #60]	; (800c3fc <vPortEnterCritical+0x58>)
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	3301      	adds	r3, #1
 800c3c4:	4a0d      	ldr	r2, [pc, #52]	; (800c3fc <vPortEnterCritical+0x58>)
 800c3c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c3c8:	4b0c      	ldr	r3, [pc, #48]	; (800c3fc <vPortEnterCritical+0x58>)
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	2b01      	cmp	r3, #1
 800c3ce:	d10f      	bne.n	800c3f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c3d0:	4b0b      	ldr	r3, [pc, #44]	; (800c400 <vPortEnterCritical+0x5c>)
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	b2db      	uxtb	r3, r3
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d00a      	beq.n	800c3f0 <vPortEnterCritical+0x4c>
	__asm volatile
 800c3da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3de:	f383 8811 	msr	BASEPRI, r3
 800c3e2:	f3bf 8f6f 	isb	sy
 800c3e6:	f3bf 8f4f 	dsb	sy
 800c3ea:	603b      	str	r3, [r7, #0]
}
 800c3ec:	bf00      	nop
 800c3ee:	e7fe      	b.n	800c3ee <vPortEnterCritical+0x4a>
	}
}
 800c3f0:	bf00      	nop
 800c3f2:	370c      	adds	r7, #12
 800c3f4:	46bd      	mov	sp, r7
 800c3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3fa:	4770      	bx	lr
 800c3fc:	20000098 	.word	0x20000098
 800c400:	e000ed04 	.word	0xe000ed04

0800c404 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c404:	b480      	push	{r7}
 800c406:	b083      	sub	sp, #12
 800c408:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c40a:	4b12      	ldr	r3, [pc, #72]	; (800c454 <vPortExitCritical+0x50>)
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d10a      	bne.n	800c428 <vPortExitCritical+0x24>
	__asm volatile
 800c412:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c416:	f383 8811 	msr	BASEPRI, r3
 800c41a:	f3bf 8f6f 	isb	sy
 800c41e:	f3bf 8f4f 	dsb	sy
 800c422:	607b      	str	r3, [r7, #4]
}
 800c424:	bf00      	nop
 800c426:	e7fe      	b.n	800c426 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c428:	4b0a      	ldr	r3, [pc, #40]	; (800c454 <vPortExitCritical+0x50>)
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	3b01      	subs	r3, #1
 800c42e:	4a09      	ldr	r2, [pc, #36]	; (800c454 <vPortExitCritical+0x50>)
 800c430:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c432:	4b08      	ldr	r3, [pc, #32]	; (800c454 <vPortExitCritical+0x50>)
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	2b00      	cmp	r3, #0
 800c438:	d105      	bne.n	800c446 <vPortExitCritical+0x42>
 800c43a:	2300      	movs	r3, #0
 800c43c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c43e:	683b      	ldr	r3, [r7, #0]
 800c440:	f383 8811 	msr	BASEPRI, r3
}
 800c444:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c446:	bf00      	nop
 800c448:	370c      	adds	r7, #12
 800c44a:	46bd      	mov	sp, r7
 800c44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c450:	4770      	bx	lr
 800c452:	bf00      	nop
 800c454:	20000098 	.word	0x20000098
	...

0800c460 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c460:	f3ef 8009 	mrs	r0, PSP
 800c464:	f3bf 8f6f 	isb	sy
 800c468:	4b15      	ldr	r3, [pc, #84]	; (800c4c0 <pxCurrentTCBConst>)
 800c46a:	681a      	ldr	r2, [r3, #0]
 800c46c:	f01e 0f10 	tst.w	lr, #16
 800c470:	bf08      	it	eq
 800c472:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c476:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c47a:	6010      	str	r0, [r2, #0]
 800c47c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c480:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c484:	f380 8811 	msr	BASEPRI, r0
 800c488:	f3bf 8f4f 	dsb	sy
 800c48c:	f3bf 8f6f 	isb	sy
 800c490:	f7ff f9f0 	bl	800b874 <vTaskSwitchContext>
 800c494:	f04f 0000 	mov.w	r0, #0
 800c498:	f380 8811 	msr	BASEPRI, r0
 800c49c:	bc09      	pop	{r0, r3}
 800c49e:	6819      	ldr	r1, [r3, #0]
 800c4a0:	6808      	ldr	r0, [r1, #0]
 800c4a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4a6:	f01e 0f10 	tst.w	lr, #16
 800c4aa:	bf08      	it	eq
 800c4ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c4b0:	f380 8809 	msr	PSP, r0
 800c4b4:	f3bf 8f6f 	isb	sy
 800c4b8:	4770      	bx	lr
 800c4ba:	bf00      	nop
 800c4bc:	f3af 8000 	nop.w

0800c4c0 <pxCurrentTCBConst>:
 800c4c0:	20000594 	.word	0x20000594
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c4c4:	bf00      	nop
 800c4c6:	bf00      	nop

0800c4c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c4c8:	b580      	push	{r7, lr}
 800c4ca:	b082      	sub	sp, #8
 800c4cc:	af00      	add	r7, sp, #0
	__asm volatile
 800c4ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4d2:	f383 8811 	msr	BASEPRI, r3
 800c4d6:	f3bf 8f6f 	isb	sy
 800c4da:	f3bf 8f4f 	dsb	sy
 800c4de:	607b      	str	r3, [r7, #4]
}
 800c4e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c4e2:	f7ff f90f 	bl	800b704 <xTaskIncrementTick>
 800c4e6:	4603      	mov	r3, r0
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d003      	beq.n	800c4f4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c4ec:	4b06      	ldr	r3, [pc, #24]	; (800c508 <SysTick_Handler+0x40>)
 800c4ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4f2:	601a      	str	r2, [r3, #0]
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c4f8:	683b      	ldr	r3, [r7, #0]
 800c4fa:	f383 8811 	msr	BASEPRI, r3
}
 800c4fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c500:	bf00      	nop
 800c502:	3708      	adds	r7, #8
 800c504:	46bd      	mov	sp, r7
 800c506:	bd80      	pop	{r7, pc}
 800c508:	e000ed04 	.word	0xe000ed04

0800c50c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c50c:	b480      	push	{r7}
 800c50e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c510:	4b0b      	ldr	r3, [pc, #44]	; (800c540 <vPortSetupTimerInterrupt+0x34>)
 800c512:	2200      	movs	r2, #0
 800c514:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c516:	4b0b      	ldr	r3, [pc, #44]	; (800c544 <vPortSetupTimerInterrupt+0x38>)
 800c518:	2200      	movs	r2, #0
 800c51a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c51c:	4b0a      	ldr	r3, [pc, #40]	; (800c548 <vPortSetupTimerInterrupt+0x3c>)
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	4a0a      	ldr	r2, [pc, #40]	; (800c54c <vPortSetupTimerInterrupt+0x40>)
 800c522:	fba2 2303 	umull	r2, r3, r2, r3
 800c526:	099b      	lsrs	r3, r3, #6
 800c528:	4a09      	ldr	r2, [pc, #36]	; (800c550 <vPortSetupTimerInterrupt+0x44>)
 800c52a:	3b01      	subs	r3, #1
 800c52c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c52e:	4b04      	ldr	r3, [pc, #16]	; (800c540 <vPortSetupTimerInterrupt+0x34>)
 800c530:	2207      	movs	r2, #7
 800c532:	601a      	str	r2, [r3, #0]
}
 800c534:	bf00      	nop
 800c536:	46bd      	mov	sp, r7
 800c538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c53c:	4770      	bx	lr
 800c53e:	bf00      	nop
 800c540:	e000e010 	.word	0xe000e010
 800c544:	e000e018 	.word	0xe000e018
 800c548:	20000000 	.word	0x20000000
 800c54c:	10624dd3 	.word	0x10624dd3
 800c550:	e000e014 	.word	0xe000e014

0800c554 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c554:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c564 <vPortEnableVFP+0x10>
 800c558:	6801      	ldr	r1, [r0, #0]
 800c55a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c55e:	6001      	str	r1, [r0, #0]
 800c560:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c562:	bf00      	nop
 800c564:	e000ed88 	.word	0xe000ed88

0800c568 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c568:	b480      	push	{r7}
 800c56a:	b085      	sub	sp, #20
 800c56c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c56e:	f3ef 8305 	mrs	r3, IPSR
 800c572:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	2b0f      	cmp	r3, #15
 800c578:	d914      	bls.n	800c5a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c57a:	4a17      	ldr	r2, [pc, #92]	; (800c5d8 <vPortValidateInterruptPriority+0x70>)
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	4413      	add	r3, r2
 800c580:	781b      	ldrb	r3, [r3, #0]
 800c582:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c584:	4b15      	ldr	r3, [pc, #84]	; (800c5dc <vPortValidateInterruptPriority+0x74>)
 800c586:	781b      	ldrb	r3, [r3, #0]
 800c588:	7afa      	ldrb	r2, [r7, #11]
 800c58a:	429a      	cmp	r2, r3
 800c58c:	d20a      	bcs.n	800c5a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c58e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c592:	f383 8811 	msr	BASEPRI, r3
 800c596:	f3bf 8f6f 	isb	sy
 800c59a:	f3bf 8f4f 	dsb	sy
 800c59e:	607b      	str	r3, [r7, #4]
}
 800c5a0:	bf00      	nop
 800c5a2:	e7fe      	b.n	800c5a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c5a4:	4b0e      	ldr	r3, [pc, #56]	; (800c5e0 <vPortValidateInterruptPriority+0x78>)
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c5ac:	4b0d      	ldr	r3, [pc, #52]	; (800c5e4 <vPortValidateInterruptPriority+0x7c>)
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	429a      	cmp	r2, r3
 800c5b2:	d90a      	bls.n	800c5ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c5b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5b8:	f383 8811 	msr	BASEPRI, r3
 800c5bc:	f3bf 8f6f 	isb	sy
 800c5c0:	f3bf 8f4f 	dsb	sy
 800c5c4:	603b      	str	r3, [r7, #0]
}
 800c5c6:	bf00      	nop
 800c5c8:	e7fe      	b.n	800c5c8 <vPortValidateInterruptPriority+0x60>
	}
 800c5ca:	bf00      	nop
 800c5cc:	3714      	adds	r7, #20
 800c5ce:	46bd      	mov	sp, r7
 800c5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d4:	4770      	bx	lr
 800c5d6:	bf00      	nop
 800c5d8:	e000e3f0 	.word	0xe000e3f0
 800c5dc:	200006c0 	.word	0x200006c0
 800c5e0:	e000ed0c 	.word	0xe000ed0c
 800c5e4:	200006c4 	.word	0x200006c4

0800c5e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c5e8:	b580      	push	{r7, lr}
 800c5ea:	b08a      	sub	sp, #40	; 0x28
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c5f4:	f7fe ffdc 	bl	800b5b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c5f8:	4b5b      	ldr	r3, [pc, #364]	; (800c768 <pvPortMalloc+0x180>)
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d101      	bne.n	800c604 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c600:	f000 f920 	bl	800c844 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c604:	4b59      	ldr	r3, [pc, #356]	; (800c76c <pvPortMalloc+0x184>)
 800c606:	681a      	ldr	r2, [r3, #0]
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	4013      	ands	r3, r2
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	f040 8093 	bne.w	800c738 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	2b00      	cmp	r3, #0
 800c616:	d01d      	beq.n	800c654 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c618:	2208      	movs	r2, #8
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	4413      	add	r3, r2
 800c61e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	f003 0307 	and.w	r3, r3, #7
 800c626:	2b00      	cmp	r3, #0
 800c628:	d014      	beq.n	800c654 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	f023 0307 	bic.w	r3, r3, #7
 800c630:	3308      	adds	r3, #8
 800c632:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	f003 0307 	and.w	r3, r3, #7
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d00a      	beq.n	800c654 <pvPortMalloc+0x6c>
	__asm volatile
 800c63e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c642:	f383 8811 	msr	BASEPRI, r3
 800c646:	f3bf 8f6f 	isb	sy
 800c64a:	f3bf 8f4f 	dsb	sy
 800c64e:	617b      	str	r3, [r7, #20]
}
 800c650:	bf00      	nop
 800c652:	e7fe      	b.n	800c652 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d06e      	beq.n	800c738 <pvPortMalloc+0x150>
 800c65a:	4b45      	ldr	r3, [pc, #276]	; (800c770 <pvPortMalloc+0x188>)
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	687a      	ldr	r2, [r7, #4]
 800c660:	429a      	cmp	r2, r3
 800c662:	d869      	bhi.n	800c738 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c664:	4b43      	ldr	r3, [pc, #268]	; (800c774 <pvPortMalloc+0x18c>)
 800c666:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c668:	4b42      	ldr	r3, [pc, #264]	; (800c774 <pvPortMalloc+0x18c>)
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c66e:	e004      	b.n	800c67a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c672:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c67a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c67c:	685b      	ldr	r3, [r3, #4]
 800c67e:	687a      	ldr	r2, [r7, #4]
 800c680:	429a      	cmp	r2, r3
 800c682:	d903      	bls.n	800c68c <pvPortMalloc+0xa4>
 800c684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d1f1      	bne.n	800c670 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c68c:	4b36      	ldr	r3, [pc, #216]	; (800c768 <pvPortMalloc+0x180>)
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c692:	429a      	cmp	r2, r3
 800c694:	d050      	beq.n	800c738 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c696:	6a3b      	ldr	r3, [r7, #32]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	2208      	movs	r2, #8
 800c69c:	4413      	add	r3, r2
 800c69e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c6a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6a2:	681a      	ldr	r2, [r3, #0]
 800c6a4:	6a3b      	ldr	r3, [r7, #32]
 800c6a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c6a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6aa:	685a      	ldr	r2, [r3, #4]
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	1ad2      	subs	r2, r2, r3
 800c6b0:	2308      	movs	r3, #8
 800c6b2:	005b      	lsls	r3, r3, #1
 800c6b4:	429a      	cmp	r2, r3
 800c6b6:	d91f      	bls.n	800c6f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c6b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	4413      	add	r3, r2
 800c6be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c6c0:	69bb      	ldr	r3, [r7, #24]
 800c6c2:	f003 0307 	and.w	r3, r3, #7
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d00a      	beq.n	800c6e0 <pvPortMalloc+0xf8>
	__asm volatile
 800c6ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6ce:	f383 8811 	msr	BASEPRI, r3
 800c6d2:	f3bf 8f6f 	isb	sy
 800c6d6:	f3bf 8f4f 	dsb	sy
 800c6da:	613b      	str	r3, [r7, #16]
}
 800c6dc:	bf00      	nop
 800c6de:	e7fe      	b.n	800c6de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c6e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6e2:	685a      	ldr	r2, [r3, #4]
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	1ad2      	subs	r2, r2, r3
 800c6e8:	69bb      	ldr	r3, [r7, #24]
 800c6ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c6ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6ee:	687a      	ldr	r2, [r7, #4]
 800c6f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c6f2:	69b8      	ldr	r0, [r7, #24]
 800c6f4:	f000 f908 	bl	800c908 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c6f8:	4b1d      	ldr	r3, [pc, #116]	; (800c770 <pvPortMalloc+0x188>)
 800c6fa:	681a      	ldr	r2, [r3, #0]
 800c6fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6fe:	685b      	ldr	r3, [r3, #4]
 800c700:	1ad3      	subs	r3, r2, r3
 800c702:	4a1b      	ldr	r2, [pc, #108]	; (800c770 <pvPortMalloc+0x188>)
 800c704:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c706:	4b1a      	ldr	r3, [pc, #104]	; (800c770 <pvPortMalloc+0x188>)
 800c708:	681a      	ldr	r2, [r3, #0]
 800c70a:	4b1b      	ldr	r3, [pc, #108]	; (800c778 <pvPortMalloc+0x190>)
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	429a      	cmp	r2, r3
 800c710:	d203      	bcs.n	800c71a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c712:	4b17      	ldr	r3, [pc, #92]	; (800c770 <pvPortMalloc+0x188>)
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	4a18      	ldr	r2, [pc, #96]	; (800c778 <pvPortMalloc+0x190>)
 800c718:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c71a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c71c:	685a      	ldr	r2, [r3, #4]
 800c71e:	4b13      	ldr	r3, [pc, #76]	; (800c76c <pvPortMalloc+0x184>)
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	431a      	orrs	r2, r3
 800c724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c726:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c72a:	2200      	movs	r2, #0
 800c72c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c72e:	4b13      	ldr	r3, [pc, #76]	; (800c77c <pvPortMalloc+0x194>)
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	3301      	adds	r3, #1
 800c734:	4a11      	ldr	r2, [pc, #68]	; (800c77c <pvPortMalloc+0x194>)
 800c736:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c738:	f7fe ff48 	bl	800b5cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c73c:	69fb      	ldr	r3, [r7, #28]
 800c73e:	f003 0307 	and.w	r3, r3, #7
 800c742:	2b00      	cmp	r3, #0
 800c744:	d00a      	beq.n	800c75c <pvPortMalloc+0x174>
	__asm volatile
 800c746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c74a:	f383 8811 	msr	BASEPRI, r3
 800c74e:	f3bf 8f6f 	isb	sy
 800c752:	f3bf 8f4f 	dsb	sy
 800c756:	60fb      	str	r3, [r7, #12]
}
 800c758:	bf00      	nop
 800c75a:	e7fe      	b.n	800c75a <pvPortMalloc+0x172>
	return pvReturn;
 800c75c:	69fb      	ldr	r3, [r7, #28]
}
 800c75e:	4618      	mov	r0, r3
 800c760:	3728      	adds	r7, #40	; 0x28
 800c762:	46bd      	mov	sp, r7
 800c764:	bd80      	pop	{r7, pc}
 800c766:	bf00      	nop
 800c768:	200042d0 	.word	0x200042d0
 800c76c:	200042e4 	.word	0x200042e4
 800c770:	200042d4 	.word	0x200042d4
 800c774:	200042c8 	.word	0x200042c8
 800c778:	200042d8 	.word	0x200042d8
 800c77c:	200042dc 	.word	0x200042dc

0800c780 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c780:	b580      	push	{r7, lr}
 800c782:	b086      	sub	sp, #24
 800c784:	af00      	add	r7, sp, #0
 800c786:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d04d      	beq.n	800c82e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c792:	2308      	movs	r3, #8
 800c794:	425b      	negs	r3, r3
 800c796:	697a      	ldr	r2, [r7, #20]
 800c798:	4413      	add	r3, r2
 800c79a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c79c:	697b      	ldr	r3, [r7, #20]
 800c79e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c7a0:	693b      	ldr	r3, [r7, #16]
 800c7a2:	685a      	ldr	r2, [r3, #4]
 800c7a4:	4b24      	ldr	r3, [pc, #144]	; (800c838 <vPortFree+0xb8>)
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	4013      	ands	r3, r2
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d10a      	bne.n	800c7c4 <vPortFree+0x44>
	__asm volatile
 800c7ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7b2:	f383 8811 	msr	BASEPRI, r3
 800c7b6:	f3bf 8f6f 	isb	sy
 800c7ba:	f3bf 8f4f 	dsb	sy
 800c7be:	60fb      	str	r3, [r7, #12]
}
 800c7c0:	bf00      	nop
 800c7c2:	e7fe      	b.n	800c7c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c7c4:	693b      	ldr	r3, [r7, #16]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d00a      	beq.n	800c7e2 <vPortFree+0x62>
	__asm volatile
 800c7cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7d0:	f383 8811 	msr	BASEPRI, r3
 800c7d4:	f3bf 8f6f 	isb	sy
 800c7d8:	f3bf 8f4f 	dsb	sy
 800c7dc:	60bb      	str	r3, [r7, #8]
}
 800c7de:	bf00      	nop
 800c7e0:	e7fe      	b.n	800c7e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c7e2:	693b      	ldr	r3, [r7, #16]
 800c7e4:	685a      	ldr	r2, [r3, #4]
 800c7e6:	4b14      	ldr	r3, [pc, #80]	; (800c838 <vPortFree+0xb8>)
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	4013      	ands	r3, r2
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d01e      	beq.n	800c82e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c7f0:	693b      	ldr	r3, [r7, #16]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d11a      	bne.n	800c82e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c7f8:	693b      	ldr	r3, [r7, #16]
 800c7fa:	685a      	ldr	r2, [r3, #4]
 800c7fc:	4b0e      	ldr	r3, [pc, #56]	; (800c838 <vPortFree+0xb8>)
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	43db      	mvns	r3, r3
 800c802:	401a      	ands	r2, r3
 800c804:	693b      	ldr	r3, [r7, #16]
 800c806:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c808:	f7fe fed2 	bl	800b5b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c80c:	693b      	ldr	r3, [r7, #16]
 800c80e:	685a      	ldr	r2, [r3, #4]
 800c810:	4b0a      	ldr	r3, [pc, #40]	; (800c83c <vPortFree+0xbc>)
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	4413      	add	r3, r2
 800c816:	4a09      	ldr	r2, [pc, #36]	; (800c83c <vPortFree+0xbc>)
 800c818:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c81a:	6938      	ldr	r0, [r7, #16]
 800c81c:	f000 f874 	bl	800c908 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c820:	4b07      	ldr	r3, [pc, #28]	; (800c840 <vPortFree+0xc0>)
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	3301      	adds	r3, #1
 800c826:	4a06      	ldr	r2, [pc, #24]	; (800c840 <vPortFree+0xc0>)
 800c828:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c82a:	f7fe fecf 	bl	800b5cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c82e:	bf00      	nop
 800c830:	3718      	adds	r7, #24
 800c832:	46bd      	mov	sp, r7
 800c834:	bd80      	pop	{r7, pc}
 800c836:	bf00      	nop
 800c838:	200042e4 	.word	0x200042e4
 800c83c:	200042d4 	.word	0x200042d4
 800c840:	200042e0 	.word	0x200042e0

0800c844 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c844:	b480      	push	{r7}
 800c846:	b085      	sub	sp, #20
 800c848:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c84a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c84e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c850:	4b27      	ldr	r3, [pc, #156]	; (800c8f0 <prvHeapInit+0xac>)
 800c852:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	f003 0307 	and.w	r3, r3, #7
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d00c      	beq.n	800c878 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	3307      	adds	r3, #7
 800c862:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	f023 0307 	bic.w	r3, r3, #7
 800c86a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c86c:	68ba      	ldr	r2, [r7, #8]
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	1ad3      	subs	r3, r2, r3
 800c872:	4a1f      	ldr	r2, [pc, #124]	; (800c8f0 <prvHeapInit+0xac>)
 800c874:	4413      	add	r3, r2
 800c876:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c87c:	4a1d      	ldr	r2, [pc, #116]	; (800c8f4 <prvHeapInit+0xb0>)
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c882:	4b1c      	ldr	r3, [pc, #112]	; (800c8f4 <prvHeapInit+0xb0>)
 800c884:	2200      	movs	r2, #0
 800c886:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	68ba      	ldr	r2, [r7, #8]
 800c88c:	4413      	add	r3, r2
 800c88e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c890:	2208      	movs	r2, #8
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	1a9b      	subs	r3, r3, r2
 800c896:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	f023 0307 	bic.w	r3, r3, #7
 800c89e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	4a15      	ldr	r2, [pc, #84]	; (800c8f8 <prvHeapInit+0xb4>)
 800c8a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c8a6:	4b14      	ldr	r3, [pc, #80]	; (800c8f8 <prvHeapInit+0xb4>)
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	2200      	movs	r2, #0
 800c8ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c8ae:	4b12      	ldr	r3, [pc, #72]	; (800c8f8 <prvHeapInit+0xb4>)
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	2200      	movs	r2, #0
 800c8b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c8ba:	683b      	ldr	r3, [r7, #0]
 800c8bc:	68fa      	ldr	r2, [r7, #12]
 800c8be:	1ad2      	subs	r2, r2, r3
 800c8c0:	683b      	ldr	r3, [r7, #0]
 800c8c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c8c4:	4b0c      	ldr	r3, [pc, #48]	; (800c8f8 <prvHeapInit+0xb4>)
 800c8c6:	681a      	ldr	r2, [r3, #0]
 800c8c8:	683b      	ldr	r3, [r7, #0]
 800c8ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c8cc:	683b      	ldr	r3, [r7, #0]
 800c8ce:	685b      	ldr	r3, [r3, #4]
 800c8d0:	4a0a      	ldr	r2, [pc, #40]	; (800c8fc <prvHeapInit+0xb8>)
 800c8d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c8d4:	683b      	ldr	r3, [r7, #0]
 800c8d6:	685b      	ldr	r3, [r3, #4]
 800c8d8:	4a09      	ldr	r2, [pc, #36]	; (800c900 <prvHeapInit+0xbc>)
 800c8da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c8dc:	4b09      	ldr	r3, [pc, #36]	; (800c904 <prvHeapInit+0xc0>)
 800c8de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c8e2:	601a      	str	r2, [r3, #0]
}
 800c8e4:	bf00      	nop
 800c8e6:	3714      	adds	r7, #20
 800c8e8:	46bd      	mov	sp, r7
 800c8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ee:	4770      	bx	lr
 800c8f0:	200006c8 	.word	0x200006c8
 800c8f4:	200042c8 	.word	0x200042c8
 800c8f8:	200042d0 	.word	0x200042d0
 800c8fc:	200042d8 	.word	0x200042d8
 800c900:	200042d4 	.word	0x200042d4
 800c904:	200042e4 	.word	0x200042e4

0800c908 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c908:	b480      	push	{r7}
 800c90a:	b085      	sub	sp, #20
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c910:	4b28      	ldr	r3, [pc, #160]	; (800c9b4 <prvInsertBlockIntoFreeList+0xac>)
 800c912:	60fb      	str	r3, [r7, #12]
 800c914:	e002      	b.n	800c91c <prvInsertBlockIntoFreeList+0x14>
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	60fb      	str	r3, [r7, #12]
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	687a      	ldr	r2, [r7, #4]
 800c922:	429a      	cmp	r2, r3
 800c924:	d8f7      	bhi.n	800c916 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	685b      	ldr	r3, [r3, #4]
 800c92e:	68ba      	ldr	r2, [r7, #8]
 800c930:	4413      	add	r3, r2
 800c932:	687a      	ldr	r2, [r7, #4]
 800c934:	429a      	cmp	r2, r3
 800c936:	d108      	bne.n	800c94a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	685a      	ldr	r2, [r3, #4]
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	685b      	ldr	r3, [r3, #4]
 800c940:	441a      	add	r2, r3
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	685b      	ldr	r3, [r3, #4]
 800c952:	68ba      	ldr	r2, [r7, #8]
 800c954:	441a      	add	r2, r3
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	429a      	cmp	r2, r3
 800c95c:	d118      	bne.n	800c990 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	681a      	ldr	r2, [r3, #0]
 800c962:	4b15      	ldr	r3, [pc, #84]	; (800c9b8 <prvInsertBlockIntoFreeList+0xb0>)
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	429a      	cmp	r2, r3
 800c968:	d00d      	beq.n	800c986 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	685a      	ldr	r2, [r3, #4]
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	685b      	ldr	r3, [r3, #4]
 800c974:	441a      	add	r2, r3
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	681a      	ldr	r2, [r3, #0]
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	601a      	str	r2, [r3, #0]
 800c984:	e008      	b.n	800c998 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c986:	4b0c      	ldr	r3, [pc, #48]	; (800c9b8 <prvInsertBlockIntoFreeList+0xb0>)
 800c988:	681a      	ldr	r2, [r3, #0]
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	601a      	str	r2, [r3, #0]
 800c98e:	e003      	b.n	800c998 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	681a      	ldr	r2, [r3, #0]
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c998:	68fa      	ldr	r2, [r7, #12]
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	429a      	cmp	r2, r3
 800c99e:	d002      	beq.n	800c9a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	687a      	ldr	r2, [r7, #4]
 800c9a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c9a6:	bf00      	nop
 800c9a8:	3714      	adds	r7, #20
 800c9aa:	46bd      	mov	sp, r7
 800c9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b0:	4770      	bx	lr
 800c9b2:	bf00      	nop
 800c9b4:	200042c8 	.word	0x200042c8
 800c9b8:	200042d0 	.word	0x200042d0

0800c9bc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c9bc:	b580      	push	{r7, lr}
 800c9be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c9c0:	2200      	movs	r2, #0
 800c9c2:	4912      	ldr	r1, [pc, #72]	; (800ca0c <MX_USB_DEVICE_Init+0x50>)
 800c9c4:	4812      	ldr	r0, [pc, #72]	; (800ca10 <MX_USB_DEVICE_Init+0x54>)
 800c9c6:	f7fb febb 	bl	8008740 <USBD_Init>
 800c9ca:	4603      	mov	r3, r0
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d001      	beq.n	800c9d4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c9d0:	f7f4 f926 	bl	8000c20 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c9d4:	490f      	ldr	r1, [pc, #60]	; (800ca14 <MX_USB_DEVICE_Init+0x58>)
 800c9d6:	480e      	ldr	r0, [pc, #56]	; (800ca10 <MX_USB_DEVICE_Init+0x54>)
 800c9d8:	f7fb fee2 	bl	80087a0 <USBD_RegisterClass>
 800c9dc:	4603      	mov	r3, r0
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d001      	beq.n	800c9e6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c9e2:	f7f4 f91d 	bl	8000c20 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c9e6:	490c      	ldr	r1, [pc, #48]	; (800ca18 <MX_USB_DEVICE_Init+0x5c>)
 800c9e8:	4809      	ldr	r0, [pc, #36]	; (800ca10 <MX_USB_DEVICE_Init+0x54>)
 800c9ea:	f7fb fdd3 	bl	8008594 <USBD_CDC_RegisterInterface>
 800c9ee:	4603      	mov	r3, r0
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d001      	beq.n	800c9f8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c9f4:	f7f4 f914 	bl	8000c20 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c9f8:	4805      	ldr	r0, [pc, #20]	; (800ca10 <MX_USB_DEVICE_Init+0x54>)
 800c9fa:	f7fb ff07 	bl	800880c <USBD_Start>
 800c9fe:	4603      	mov	r3, r0
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d001      	beq.n	800ca08 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ca04:	f7f4 f90c 	bl	8000c20 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ca08:	bf00      	nop
 800ca0a:	bd80      	pop	{r7, pc}
 800ca0c:	200000b0 	.word	0x200000b0
 800ca10:	200042e8 	.word	0x200042e8
 800ca14:	20000018 	.word	0x20000018
 800ca18:	2000009c 	.word	0x2000009c

0800ca1c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ca1c:	b580      	push	{r7, lr}
 800ca1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ca20:	2200      	movs	r2, #0
 800ca22:	4905      	ldr	r1, [pc, #20]	; (800ca38 <CDC_Init_FS+0x1c>)
 800ca24:	4805      	ldr	r0, [pc, #20]	; (800ca3c <CDC_Init_FS+0x20>)
 800ca26:	f7fb fdcf 	bl	80085c8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ca2a:	4905      	ldr	r1, [pc, #20]	; (800ca40 <CDC_Init_FS+0x24>)
 800ca2c:	4803      	ldr	r0, [pc, #12]	; (800ca3c <CDC_Init_FS+0x20>)
 800ca2e:	f7fb fded 	bl	800860c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ca32:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ca34:	4618      	mov	r0, r3
 800ca36:	bd80      	pop	{r7, pc}
 800ca38:	200049c4 	.word	0x200049c4
 800ca3c:	200042e8 	.word	0x200042e8
 800ca40:	200045c4 	.word	0x200045c4

0800ca44 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ca44:	b480      	push	{r7}
 800ca46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ca48:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	46bd      	mov	sp, r7
 800ca4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca52:	4770      	bx	lr

0800ca54 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ca54:	b480      	push	{r7}
 800ca56:	b083      	sub	sp, #12
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	4603      	mov	r3, r0
 800ca5c:	6039      	str	r1, [r7, #0]
 800ca5e:	71fb      	strb	r3, [r7, #7]
 800ca60:	4613      	mov	r3, r2
 800ca62:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ca64:	79fb      	ldrb	r3, [r7, #7]
 800ca66:	2b23      	cmp	r3, #35	; 0x23
 800ca68:	d84a      	bhi.n	800cb00 <CDC_Control_FS+0xac>
 800ca6a:	a201      	add	r2, pc, #4	; (adr r2, 800ca70 <CDC_Control_FS+0x1c>)
 800ca6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca70:	0800cb01 	.word	0x0800cb01
 800ca74:	0800cb01 	.word	0x0800cb01
 800ca78:	0800cb01 	.word	0x0800cb01
 800ca7c:	0800cb01 	.word	0x0800cb01
 800ca80:	0800cb01 	.word	0x0800cb01
 800ca84:	0800cb01 	.word	0x0800cb01
 800ca88:	0800cb01 	.word	0x0800cb01
 800ca8c:	0800cb01 	.word	0x0800cb01
 800ca90:	0800cb01 	.word	0x0800cb01
 800ca94:	0800cb01 	.word	0x0800cb01
 800ca98:	0800cb01 	.word	0x0800cb01
 800ca9c:	0800cb01 	.word	0x0800cb01
 800caa0:	0800cb01 	.word	0x0800cb01
 800caa4:	0800cb01 	.word	0x0800cb01
 800caa8:	0800cb01 	.word	0x0800cb01
 800caac:	0800cb01 	.word	0x0800cb01
 800cab0:	0800cb01 	.word	0x0800cb01
 800cab4:	0800cb01 	.word	0x0800cb01
 800cab8:	0800cb01 	.word	0x0800cb01
 800cabc:	0800cb01 	.word	0x0800cb01
 800cac0:	0800cb01 	.word	0x0800cb01
 800cac4:	0800cb01 	.word	0x0800cb01
 800cac8:	0800cb01 	.word	0x0800cb01
 800cacc:	0800cb01 	.word	0x0800cb01
 800cad0:	0800cb01 	.word	0x0800cb01
 800cad4:	0800cb01 	.word	0x0800cb01
 800cad8:	0800cb01 	.word	0x0800cb01
 800cadc:	0800cb01 	.word	0x0800cb01
 800cae0:	0800cb01 	.word	0x0800cb01
 800cae4:	0800cb01 	.word	0x0800cb01
 800cae8:	0800cb01 	.word	0x0800cb01
 800caec:	0800cb01 	.word	0x0800cb01
 800caf0:	0800cb01 	.word	0x0800cb01
 800caf4:	0800cb01 	.word	0x0800cb01
 800caf8:	0800cb01 	.word	0x0800cb01
 800cafc:	0800cb01 	.word	0x0800cb01
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800cb00:	bf00      	nop
  }

  return (USBD_OK);
 800cb02:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800cb04:	4618      	mov	r0, r3
 800cb06:	370c      	adds	r7, #12
 800cb08:	46bd      	mov	sp, r7
 800cb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb0e:	4770      	bx	lr

0800cb10 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800cb10:	b580      	push	{r7, lr}
 800cb12:	b082      	sub	sp, #8
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	6078      	str	r0, [r7, #4]
 800cb18:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800cb1a:	6879      	ldr	r1, [r7, #4]
 800cb1c:	4805      	ldr	r0, [pc, #20]	; (800cb34 <CDC_Receive_FS+0x24>)
 800cb1e:	f7fb fd75 	bl	800860c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800cb22:	4804      	ldr	r0, [pc, #16]	; (800cb34 <CDC_Receive_FS+0x24>)
 800cb24:	f7fb fdd6 	bl	80086d4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800cb28:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800cb2a:	4618      	mov	r0, r3
 800cb2c:	3708      	adds	r7, #8
 800cb2e:	46bd      	mov	sp, r7
 800cb30:	bd80      	pop	{r7, pc}
 800cb32:	bf00      	nop
 800cb34:	200042e8 	.word	0x200042e8

0800cb38 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	b084      	sub	sp, #16
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	6078      	str	r0, [r7, #4]
 800cb40:	460b      	mov	r3, r1
 800cb42:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800cb44:	2300      	movs	r3, #0
 800cb46:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800cb48:	4b0d      	ldr	r3, [pc, #52]	; (800cb80 <CDC_Transmit_FS+0x48>)
 800cb4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cb4e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800cb50:	68bb      	ldr	r3, [r7, #8]
 800cb52:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d001      	beq.n	800cb5e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800cb5a:	2301      	movs	r3, #1
 800cb5c:	e00b      	b.n	800cb76 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800cb5e:	887b      	ldrh	r3, [r7, #2]
 800cb60:	461a      	mov	r2, r3
 800cb62:	6879      	ldr	r1, [r7, #4]
 800cb64:	4806      	ldr	r0, [pc, #24]	; (800cb80 <CDC_Transmit_FS+0x48>)
 800cb66:	f7fb fd2f 	bl	80085c8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800cb6a:	4805      	ldr	r0, [pc, #20]	; (800cb80 <CDC_Transmit_FS+0x48>)
 800cb6c:	f7fb fd6c 	bl	8008648 <USBD_CDC_TransmitPacket>
 800cb70:	4603      	mov	r3, r0
 800cb72:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800cb74:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb76:	4618      	mov	r0, r3
 800cb78:	3710      	adds	r7, #16
 800cb7a:	46bd      	mov	sp, r7
 800cb7c:	bd80      	pop	{r7, pc}
 800cb7e:	bf00      	nop
 800cb80:	200042e8 	.word	0x200042e8

0800cb84 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800cb84:	b480      	push	{r7}
 800cb86:	b087      	sub	sp, #28
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	60f8      	str	r0, [r7, #12]
 800cb8c:	60b9      	str	r1, [r7, #8]
 800cb8e:	4613      	mov	r3, r2
 800cb90:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800cb92:	2300      	movs	r3, #0
 800cb94:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800cb96:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	371c      	adds	r7, #28
 800cb9e:	46bd      	mov	sp, r7
 800cba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba4:	4770      	bx	lr
	...

0800cba8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cba8:	b480      	push	{r7}
 800cbaa:	b083      	sub	sp, #12
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	4603      	mov	r3, r0
 800cbb0:	6039      	str	r1, [r7, #0]
 800cbb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800cbb4:	683b      	ldr	r3, [r7, #0]
 800cbb6:	2212      	movs	r2, #18
 800cbb8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800cbba:	4b03      	ldr	r3, [pc, #12]	; (800cbc8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800cbbc:	4618      	mov	r0, r3
 800cbbe:	370c      	adds	r7, #12
 800cbc0:	46bd      	mov	sp, r7
 800cbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc6:	4770      	bx	lr
 800cbc8:	200000cc 	.word	0x200000cc

0800cbcc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cbcc:	b480      	push	{r7}
 800cbce:	b083      	sub	sp, #12
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	4603      	mov	r3, r0
 800cbd4:	6039      	str	r1, [r7, #0]
 800cbd6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cbd8:	683b      	ldr	r3, [r7, #0]
 800cbda:	2204      	movs	r2, #4
 800cbdc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cbde:	4b03      	ldr	r3, [pc, #12]	; (800cbec <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	370c      	adds	r7, #12
 800cbe4:	46bd      	mov	sp, r7
 800cbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbea:	4770      	bx	lr
 800cbec:	200000e0 	.word	0x200000e0

0800cbf0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cbf0:	b580      	push	{r7, lr}
 800cbf2:	b082      	sub	sp, #8
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	4603      	mov	r3, r0
 800cbf8:	6039      	str	r1, [r7, #0]
 800cbfa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cbfc:	79fb      	ldrb	r3, [r7, #7]
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d105      	bne.n	800cc0e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cc02:	683a      	ldr	r2, [r7, #0]
 800cc04:	4907      	ldr	r1, [pc, #28]	; (800cc24 <USBD_FS_ProductStrDescriptor+0x34>)
 800cc06:	4808      	ldr	r0, [pc, #32]	; (800cc28 <USBD_FS_ProductStrDescriptor+0x38>)
 800cc08:	f7fc ffac 	bl	8009b64 <USBD_GetString>
 800cc0c:	e004      	b.n	800cc18 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cc0e:	683a      	ldr	r2, [r7, #0]
 800cc10:	4904      	ldr	r1, [pc, #16]	; (800cc24 <USBD_FS_ProductStrDescriptor+0x34>)
 800cc12:	4805      	ldr	r0, [pc, #20]	; (800cc28 <USBD_FS_ProductStrDescriptor+0x38>)
 800cc14:	f7fc ffa6 	bl	8009b64 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cc18:	4b02      	ldr	r3, [pc, #8]	; (800cc24 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	3708      	adds	r7, #8
 800cc1e:	46bd      	mov	sp, r7
 800cc20:	bd80      	pop	{r7, pc}
 800cc22:	bf00      	nop
 800cc24:	20004dc4 	.word	0x20004dc4
 800cc28:	0800df94 	.word	0x0800df94

0800cc2c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc2c:	b580      	push	{r7, lr}
 800cc2e:	b082      	sub	sp, #8
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	4603      	mov	r3, r0
 800cc34:	6039      	str	r1, [r7, #0]
 800cc36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800cc38:	683a      	ldr	r2, [r7, #0]
 800cc3a:	4904      	ldr	r1, [pc, #16]	; (800cc4c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800cc3c:	4804      	ldr	r0, [pc, #16]	; (800cc50 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800cc3e:	f7fc ff91 	bl	8009b64 <USBD_GetString>
  return USBD_StrDesc;
 800cc42:	4b02      	ldr	r3, [pc, #8]	; (800cc4c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800cc44:	4618      	mov	r0, r3
 800cc46:	3708      	adds	r7, #8
 800cc48:	46bd      	mov	sp, r7
 800cc4a:	bd80      	pop	{r7, pc}
 800cc4c:	20004dc4 	.word	0x20004dc4
 800cc50:	0800dfa8 	.word	0x0800dfa8

0800cc54 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc54:	b580      	push	{r7, lr}
 800cc56:	b082      	sub	sp, #8
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	4603      	mov	r3, r0
 800cc5c:	6039      	str	r1, [r7, #0]
 800cc5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800cc60:	683b      	ldr	r3, [r7, #0]
 800cc62:	221a      	movs	r2, #26
 800cc64:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800cc66:	f000 f843 	bl	800ccf0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800cc6a:	4b02      	ldr	r3, [pc, #8]	; (800cc74 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800cc6c:	4618      	mov	r0, r3
 800cc6e:	3708      	adds	r7, #8
 800cc70:	46bd      	mov	sp, r7
 800cc72:	bd80      	pop	{r7, pc}
 800cc74:	200000e4 	.word	0x200000e4

0800cc78 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc78:	b580      	push	{r7, lr}
 800cc7a:	b082      	sub	sp, #8
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	4603      	mov	r3, r0
 800cc80:	6039      	str	r1, [r7, #0]
 800cc82:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800cc84:	79fb      	ldrb	r3, [r7, #7]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d105      	bne.n	800cc96 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cc8a:	683a      	ldr	r2, [r7, #0]
 800cc8c:	4907      	ldr	r1, [pc, #28]	; (800ccac <USBD_FS_ConfigStrDescriptor+0x34>)
 800cc8e:	4808      	ldr	r0, [pc, #32]	; (800ccb0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cc90:	f7fc ff68 	bl	8009b64 <USBD_GetString>
 800cc94:	e004      	b.n	800cca0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cc96:	683a      	ldr	r2, [r7, #0]
 800cc98:	4904      	ldr	r1, [pc, #16]	; (800ccac <USBD_FS_ConfigStrDescriptor+0x34>)
 800cc9a:	4805      	ldr	r0, [pc, #20]	; (800ccb0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cc9c:	f7fc ff62 	bl	8009b64 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cca0:	4b02      	ldr	r3, [pc, #8]	; (800ccac <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800cca2:	4618      	mov	r0, r3
 800cca4:	3708      	adds	r7, #8
 800cca6:	46bd      	mov	sp, r7
 800cca8:	bd80      	pop	{r7, pc}
 800ccaa:	bf00      	nop
 800ccac:	20004dc4 	.word	0x20004dc4
 800ccb0:	0800dfbc 	.word	0x0800dfbc

0800ccb4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ccb4:	b580      	push	{r7, lr}
 800ccb6:	b082      	sub	sp, #8
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	4603      	mov	r3, r0
 800ccbc:	6039      	str	r1, [r7, #0]
 800ccbe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ccc0:	79fb      	ldrb	r3, [r7, #7]
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d105      	bne.n	800ccd2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ccc6:	683a      	ldr	r2, [r7, #0]
 800ccc8:	4907      	ldr	r1, [pc, #28]	; (800cce8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ccca:	4808      	ldr	r0, [pc, #32]	; (800ccec <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cccc:	f7fc ff4a 	bl	8009b64 <USBD_GetString>
 800ccd0:	e004      	b.n	800ccdc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ccd2:	683a      	ldr	r2, [r7, #0]
 800ccd4:	4904      	ldr	r1, [pc, #16]	; (800cce8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ccd6:	4805      	ldr	r0, [pc, #20]	; (800ccec <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ccd8:	f7fc ff44 	bl	8009b64 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ccdc:	4b02      	ldr	r3, [pc, #8]	; (800cce8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ccde:	4618      	mov	r0, r3
 800cce0:	3708      	adds	r7, #8
 800cce2:	46bd      	mov	sp, r7
 800cce4:	bd80      	pop	{r7, pc}
 800cce6:	bf00      	nop
 800cce8:	20004dc4 	.word	0x20004dc4
 800ccec:	0800dfc8 	.word	0x0800dfc8

0800ccf0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ccf0:	b580      	push	{r7, lr}
 800ccf2:	b084      	sub	sp, #16
 800ccf4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ccf6:	4b0f      	ldr	r3, [pc, #60]	; (800cd34 <Get_SerialNum+0x44>)
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ccfc:	4b0e      	ldr	r3, [pc, #56]	; (800cd38 <Get_SerialNum+0x48>)
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800cd02:	4b0e      	ldr	r3, [pc, #56]	; (800cd3c <Get_SerialNum+0x4c>)
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cd08:	68fa      	ldr	r2, [r7, #12]
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	4413      	add	r3, r2
 800cd0e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d009      	beq.n	800cd2a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cd16:	2208      	movs	r2, #8
 800cd18:	4909      	ldr	r1, [pc, #36]	; (800cd40 <Get_SerialNum+0x50>)
 800cd1a:	68f8      	ldr	r0, [r7, #12]
 800cd1c:	f000 f814 	bl	800cd48 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cd20:	2204      	movs	r2, #4
 800cd22:	4908      	ldr	r1, [pc, #32]	; (800cd44 <Get_SerialNum+0x54>)
 800cd24:	68b8      	ldr	r0, [r7, #8]
 800cd26:	f000 f80f 	bl	800cd48 <IntToUnicode>
  }
}
 800cd2a:	bf00      	nop
 800cd2c:	3710      	adds	r7, #16
 800cd2e:	46bd      	mov	sp, r7
 800cd30:	bd80      	pop	{r7, pc}
 800cd32:	bf00      	nop
 800cd34:	1fff7a10 	.word	0x1fff7a10
 800cd38:	1fff7a14 	.word	0x1fff7a14
 800cd3c:	1fff7a18 	.word	0x1fff7a18
 800cd40:	200000e6 	.word	0x200000e6
 800cd44:	200000f6 	.word	0x200000f6

0800cd48 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cd48:	b480      	push	{r7}
 800cd4a:	b087      	sub	sp, #28
 800cd4c:	af00      	add	r7, sp, #0
 800cd4e:	60f8      	str	r0, [r7, #12]
 800cd50:	60b9      	str	r1, [r7, #8]
 800cd52:	4613      	mov	r3, r2
 800cd54:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800cd56:	2300      	movs	r3, #0
 800cd58:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800cd5a:	2300      	movs	r3, #0
 800cd5c:	75fb      	strb	r3, [r7, #23]
 800cd5e:	e027      	b.n	800cdb0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	0f1b      	lsrs	r3, r3, #28
 800cd64:	2b09      	cmp	r3, #9
 800cd66:	d80b      	bhi.n	800cd80 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	0f1b      	lsrs	r3, r3, #28
 800cd6c:	b2da      	uxtb	r2, r3
 800cd6e:	7dfb      	ldrb	r3, [r7, #23]
 800cd70:	005b      	lsls	r3, r3, #1
 800cd72:	4619      	mov	r1, r3
 800cd74:	68bb      	ldr	r3, [r7, #8]
 800cd76:	440b      	add	r3, r1
 800cd78:	3230      	adds	r2, #48	; 0x30
 800cd7a:	b2d2      	uxtb	r2, r2
 800cd7c:	701a      	strb	r2, [r3, #0]
 800cd7e:	e00a      	b.n	800cd96 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	0f1b      	lsrs	r3, r3, #28
 800cd84:	b2da      	uxtb	r2, r3
 800cd86:	7dfb      	ldrb	r3, [r7, #23]
 800cd88:	005b      	lsls	r3, r3, #1
 800cd8a:	4619      	mov	r1, r3
 800cd8c:	68bb      	ldr	r3, [r7, #8]
 800cd8e:	440b      	add	r3, r1
 800cd90:	3237      	adds	r2, #55	; 0x37
 800cd92:	b2d2      	uxtb	r2, r2
 800cd94:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	011b      	lsls	r3, r3, #4
 800cd9a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800cd9c:	7dfb      	ldrb	r3, [r7, #23]
 800cd9e:	005b      	lsls	r3, r3, #1
 800cda0:	3301      	adds	r3, #1
 800cda2:	68ba      	ldr	r2, [r7, #8]
 800cda4:	4413      	add	r3, r2
 800cda6:	2200      	movs	r2, #0
 800cda8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800cdaa:	7dfb      	ldrb	r3, [r7, #23]
 800cdac:	3301      	adds	r3, #1
 800cdae:	75fb      	strb	r3, [r7, #23]
 800cdb0:	7dfa      	ldrb	r2, [r7, #23]
 800cdb2:	79fb      	ldrb	r3, [r7, #7]
 800cdb4:	429a      	cmp	r2, r3
 800cdb6:	d3d3      	bcc.n	800cd60 <IntToUnicode+0x18>
  }
}
 800cdb8:	bf00      	nop
 800cdba:	bf00      	nop
 800cdbc:	371c      	adds	r7, #28
 800cdbe:	46bd      	mov	sp, r7
 800cdc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc4:	4770      	bx	lr
	...

0800cdc8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800cdc8:	b580      	push	{r7, lr}
 800cdca:	b08a      	sub	sp, #40	; 0x28
 800cdcc:	af00      	add	r7, sp, #0
 800cdce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cdd0:	f107 0314 	add.w	r3, r7, #20
 800cdd4:	2200      	movs	r2, #0
 800cdd6:	601a      	str	r2, [r3, #0]
 800cdd8:	605a      	str	r2, [r3, #4]
 800cdda:	609a      	str	r2, [r3, #8]
 800cddc:	60da      	str	r2, [r3, #12]
 800cdde:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cde8:	d13a      	bne.n	800ce60 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cdea:	2300      	movs	r3, #0
 800cdec:	613b      	str	r3, [r7, #16]
 800cdee:	4b1e      	ldr	r3, [pc, #120]	; (800ce68 <HAL_PCD_MspInit+0xa0>)
 800cdf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdf2:	4a1d      	ldr	r2, [pc, #116]	; (800ce68 <HAL_PCD_MspInit+0xa0>)
 800cdf4:	f043 0301 	orr.w	r3, r3, #1
 800cdf8:	6313      	str	r3, [r2, #48]	; 0x30
 800cdfa:	4b1b      	ldr	r3, [pc, #108]	; (800ce68 <HAL_PCD_MspInit+0xa0>)
 800cdfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdfe:	f003 0301 	and.w	r3, r3, #1
 800ce02:	613b      	str	r3, [r7, #16]
 800ce04:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ce06:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800ce0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ce0c:	2302      	movs	r3, #2
 800ce0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ce10:	2300      	movs	r3, #0
 800ce12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ce14:	2303      	movs	r3, #3
 800ce16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ce18:	230a      	movs	r3, #10
 800ce1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ce1c:	f107 0314 	add.w	r3, r7, #20
 800ce20:	4619      	mov	r1, r3
 800ce22:	4812      	ldr	r0, [pc, #72]	; (800ce6c <HAL_PCD_MspInit+0xa4>)
 800ce24:	f7f4 fab6 	bl	8001394 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ce28:	4b0f      	ldr	r3, [pc, #60]	; (800ce68 <HAL_PCD_MspInit+0xa0>)
 800ce2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce2c:	4a0e      	ldr	r2, [pc, #56]	; (800ce68 <HAL_PCD_MspInit+0xa0>)
 800ce2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce32:	6353      	str	r3, [r2, #52]	; 0x34
 800ce34:	2300      	movs	r3, #0
 800ce36:	60fb      	str	r3, [r7, #12]
 800ce38:	4b0b      	ldr	r3, [pc, #44]	; (800ce68 <HAL_PCD_MspInit+0xa0>)
 800ce3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce3c:	4a0a      	ldr	r2, [pc, #40]	; (800ce68 <HAL_PCD_MspInit+0xa0>)
 800ce3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ce42:	6453      	str	r3, [r2, #68]	; 0x44
 800ce44:	4b08      	ldr	r3, [pc, #32]	; (800ce68 <HAL_PCD_MspInit+0xa0>)
 800ce46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ce4c:	60fb      	str	r3, [r7, #12]
 800ce4e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800ce50:	2200      	movs	r2, #0
 800ce52:	2105      	movs	r1, #5
 800ce54:	2043      	movs	r0, #67	; 0x43
 800ce56:	f7f4 fa43 	bl	80012e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ce5a:	2043      	movs	r0, #67	; 0x43
 800ce5c:	f7f4 fa5c 	bl	8001318 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ce60:	bf00      	nop
 800ce62:	3728      	adds	r7, #40	; 0x28
 800ce64:	46bd      	mov	sp, r7
 800ce66:	bd80      	pop	{r7, pc}
 800ce68:	40023800 	.word	0x40023800
 800ce6c:	40020000 	.word	0x40020000

0800ce70 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce70:	b580      	push	{r7, lr}
 800ce72:	b082      	sub	sp, #8
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800ce84:	4619      	mov	r1, r3
 800ce86:	4610      	mov	r0, r2
 800ce88:	f7fb fd0d 	bl	80088a6 <USBD_LL_SetupStage>
}
 800ce8c:	bf00      	nop
 800ce8e:	3708      	adds	r7, #8
 800ce90:	46bd      	mov	sp, r7
 800ce92:	bd80      	pop	{r7, pc}

0800ce94 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce94:	b580      	push	{r7, lr}
 800ce96:	b082      	sub	sp, #8
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	6078      	str	r0, [r7, #4]
 800ce9c:	460b      	mov	r3, r1
 800ce9e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800cea6:	78fa      	ldrb	r2, [r7, #3]
 800cea8:	6879      	ldr	r1, [r7, #4]
 800ceaa:	4613      	mov	r3, r2
 800ceac:	00db      	lsls	r3, r3, #3
 800ceae:	4413      	add	r3, r2
 800ceb0:	009b      	lsls	r3, r3, #2
 800ceb2:	440b      	add	r3, r1
 800ceb4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800ceb8:	681a      	ldr	r2, [r3, #0]
 800ceba:	78fb      	ldrb	r3, [r7, #3]
 800cebc:	4619      	mov	r1, r3
 800cebe:	f7fb fd47 	bl	8008950 <USBD_LL_DataOutStage>
}
 800cec2:	bf00      	nop
 800cec4:	3708      	adds	r7, #8
 800cec6:	46bd      	mov	sp, r7
 800cec8:	bd80      	pop	{r7, pc}

0800ceca <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ceca:	b580      	push	{r7, lr}
 800cecc:	b082      	sub	sp, #8
 800cece:	af00      	add	r7, sp, #0
 800ced0:	6078      	str	r0, [r7, #4]
 800ced2:	460b      	mov	r3, r1
 800ced4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800cedc:	78fa      	ldrb	r2, [r7, #3]
 800cede:	6879      	ldr	r1, [r7, #4]
 800cee0:	4613      	mov	r3, r2
 800cee2:	00db      	lsls	r3, r3, #3
 800cee4:	4413      	add	r3, r2
 800cee6:	009b      	lsls	r3, r3, #2
 800cee8:	440b      	add	r3, r1
 800ceea:	334c      	adds	r3, #76	; 0x4c
 800ceec:	681a      	ldr	r2, [r3, #0]
 800ceee:	78fb      	ldrb	r3, [r7, #3]
 800cef0:	4619      	mov	r1, r3
 800cef2:	f7fb fde0 	bl	8008ab6 <USBD_LL_DataInStage>
}
 800cef6:	bf00      	nop
 800cef8:	3708      	adds	r7, #8
 800cefa:	46bd      	mov	sp, r7
 800cefc:	bd80      	pop	{r7, pc}

0800cefe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cefe:	b580      	push	{r7, lr}
 800cf00:	b082      	sub	sp, #8
 800cf02:	af00      	add	r7, sp, #0
 800cf04:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800cf0c:	4618      	mov	r0, r3
 800cf0e:	f7fb ff14 	bl	8008d3a <USBD_LL_SOF>
}
 800cf12:	bf00      	nop
 800cf14:	3708      	adds	r7, #8
 800cf16:	46bd      	mov	sp, r7
 800cf18:	bd80      	pop	{r7, pc}

0800cf1a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf1a:	b580      	push	{r7, lr}
 800cf1c:	b084      	sub	sp, #16
 800cf1e:	af00      	add	r7, sp, #0
 800cf20:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800cf22:	2301      	movs	r3, #1
 800cf24:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	68db      	ldr	r3, [r3, #12]
 800cf2a:	2b02      	cmp	r3, #2
 800cf2c:	d001      	beq.n	800cf32 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800cf2e:	f7f3 fe77 	bl	8000c20 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800cf38:	7bfa      	ldrb	r2, [r7, #15]
 800cf3a:	4611      	mov	r1, r2
 800cf3c:	4618      	mov	r0, r3
 800cf3e:	f7fb febe 	bl	8008cbe <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800cf48:	4618      	mov	r0, r3
 800cf4a:	f7fb fe66 	bl	8008c1a <USBD_LL_Reset>
}
 800cf4e:	bf00      	nop
 800cf50:	3710      	adds	r7, #16
 800cf52:	46bd      	mov	sp, r7
 800cf54:	bd80      	pop	{r7, pc}
	...

0800cf58 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf58:	b580      	push	{r7, lr}
 800cf5a:	b082      	sub	sp, #8
 800cf5c:	af00      	add	r7, sp, #0
 800cf5e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800cf66:	4618      	mov	r0, r3
 800cf68:	f7fb feb9 	bl	8008cde <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	687a      	ldr	r2, [r7, #4]
 800cf78:	6812      	ldr	r2, [r2, #0]
 800cf7a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800cf7e:	f043 0301 	orr.w	r3, r3, #1
 800cf82:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	6a1b      	ldr	r3, [r3, #32]
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d005      	beq.n	800cf98 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cf8c:	4b04      	ldr	r3, [pc, #16]	; (800cfa0 <HAL_PCD_SuspendCallback+0x48>)
 800cf8e:	691b      	ldr	r3, [r3, #16]
 800cf90:	4a03      	ldr	r2, [pc, #12]	; (800cfa0 <HAL_PCD_SuspendCallback+0x48>)
 800cf92:	f043 0306 	orr.w	r3, r3, #6
 800cf96:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800cf98:	bf00      	nop
 800cf9a:	3708      	adds	r7, #8
 800cf9c:	46bd      	mov	sp, r7
 800cf9e:	bd80      	pop	{r7, pc}
 800cfa0:	e000ed00 	.word	0xe000ed00

0800cfa4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cfa4:	b580      	push	{r7, lr}
 800cfa6:	b082      	sub	sp, #8
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	f7fb fea9 	bl	8008d0a <USBD_LL_Resume>
}
 800cfb8:	bf00      	nop
 800cfba:	3708      	adds	r7, #8
 800cfbc:	46bd      	mov	sp, r7
 800cfbe:	bd80      	pop	{r7, pc}

0800cfc0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cfc0:	b580      	push	{r7, lr}
 800cfc2:	b082      	sub	sp, #8
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	6078      	str	r0, [r7, #4]
 800cfc8:	460b      	mov	r3, r1
 800cfca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800cfd2:	78fa      	ldrb	r2, [r7, #3]
 800cfd4:	4611      	mov	r1, r2
 800cfd6:	4618      	mov	r0, r3
 800cfd8:	f7fb ff01 	bl	8008dde <USBD_LL_IsoOUTIncomplete>
}
 800cfdc:	bf00      	nop
 800cfde:	3708      	adds	r7, #8
 800cfe0:	46bd      	mov	sp, r7
 800cfe2:	bd80      	pop	{r7, pc}

0800cfe4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cfe4:	b580      	push	{r7, lr}
 800cfe6:	b082      	sub	sp, #8
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	6078      	str	r0, [r7, #4]
 800cfec:	460b      	mov	r3, r1
 800cfee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800cff6:	78fa      	ldrb	r2, [r7, #3]
 800cff8:	4611      	mov	r1, r2
 800cffa:	4618      	mov	r0, r3
 800cffc:	f7fb febd 	bl	8008d7a <USBD_LL_IsoINIncomplete>
}
 800d000:	bf00      	nop
 800d002:	3708      	adds	r7, #8
 800d004:	46bd      	mov	sp, r7
 800d006:	bd80      	pop	{r7, pc}

0800d008 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d008:	b580      	push	{r7, lr}
 800d00a:	b082      	sub	sp, #8
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d016:	4618      	mov	r0, r3
 800d018:	f7fb ff13 	bl	8008e42 <USBD_LL_DevConnected>
}
 800d01c:	bf00      	nop
 800d01e:	3708      	adds	r7, #8
 800d020:	46bd      	mov	sp, r7
 800d022:	bd80      	pop	{r7, pc}

0800d024 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d024:	b580      	push	{r7, lr}
 800d026:	b082      	sub	sp, #8
 800d028:	af00      	add	r7, sp, #0
 800d02a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d032:	4618      	mov	r0, r3
 800d034:	f7fb ff10 	bl	8008e58 <USBD_LL_DevDisconnected>
}
 800d038:	bf00      	nop
 800d03a:	3708      	adds	r7, #8
 800d03c:	46bd      	mov	sp, r7
 800d03e:	bd80      	pop	{r7, pc}

0800d040 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d040:	b580      	push	{r7, lr}
 800d042:	b082      	sub	sp, #8
 800d044:	af00      	add	r7, sp, #0
 800d046:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	781b      	ldrb	r3, [r3, #0]
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d13c      	bne.n	800d0ca <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d050:	4a20      	ldr	r2, [pc, #128]	; (800d0d4 <USBD_LL_Init+0x94>)
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	4a1e      	ldr	r2, [pc, #120]	; (800d0d4 <USBD_LL_Init+0x94>)
 800d05c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d060:	4b1c      	ldr	r3, [pc, #112]	; (800d0d4 <USBD_LL_Init+0x94>)
 800d062:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800d066:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800d068:	4b1a      	ldr	r3, [pc, #104]	; (800d0d4 <USBD_LL_Init+0x94>)
 800d06a:	2204      	movs	r2, #4
 800d06c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d06e:	4b19      	ldr	r3, [pc, #100]	; (800d0d4 <USBD_LL_Init+0x94>)
 800d070:	2202      	movs	r2, #2
 800d072:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d074:	4b17      	ldr	r3, [pc, #92]	; (800d0d4 <USBD_LL_Init+0x94>)
 800d076:	2200      	movs	r2, #0
 800d078:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d07a:	4b16      	ldr	r3, [pc, #88]	; (800d0d4 <USBD_LL_Init+0x94>)
 800d07c:	2202      	movs	r2, #2
 800d07e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d080:	4b14      	ldr	r3, [pc, #80]	; (800d0d4 <USBD_LL_Init+0x94>)
 800d082:	2200      	movs	r2, #0
 800d084:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d086:	4b13      	ldr	r3, [pc, #76]	; (800d0d4 <USBD_LL_Init+0x94>)
 800d088:	2200      	movs	r2, #0
 800d08a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d08c:	4b11      	ldr	r3, [pc, #68]	; (800d0d4 <USBD_LL_Init+0x94>)
 800d08e:	2200      	movs	r2, #0
 800d090:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d092:	4b10      	ldr	r3, [pc, #64]	; (800d0d4 <USBD_LL_Init+0x94>)
 800d094:	2200      	movs	r2, #0
 800d096:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d098:	4b0e      	ldr	r3, [pc, #56]	; (800d0d4 <USBD_LL_Init+0x94>)
 800d09a:	2200      	movs	r2, #0
 800d09c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d09e:	480d      	ldr	r0, [pc, #52]	; (800d0d4 <USBD_LL_Init+0x94>)
 800d0a0:	f7f6 fde0 	bl	8003c64 <HAL_PCD_Init>
 800d0a4:	4603      	mov	r3, r0
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d001      	beq.n	800d0ae <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800d0aa:	f7f3 fdb9 	bl	8000c20 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d0ae:	2180      	movs	r1, #128	; 0x80
 800d0b0:	4808      	ldr	r0, [pc, #32]	; (800d0d4 <USBD_LL_Init+0x94>)
 800d0b2:	f7f8 f838 	bl	8005126 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d0b6:	2240      	movs	r2, #64	; 0x40
 800d0b8:	2100      	movs	r1, #0
 800d0ba:	4806      	ldr	r0, [pc, #24]	; (800d0d4 <USBD_LL_Init+0x94>)
 800d0bc:	f7f7 ffec 	bl	8005098 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d0c0:	2280      	movs	r2, #128	; 0x80
 800d0c2:	2101      	movs	r1, #1
 800d0c4:	4803      	ldr	r0, [pc, #12]	; (800d0d4 <USBD_LL_Init+0x94>)
 800d0c6:	f7f7 ffe7 	bl	8005098 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d0ca:	2300      	movs	r3, #0
}
 800d0cc:	4618      	mov	r0, r3
 800d0ce:	3708      	adds	r7, #8
 800d0d0:	46bd      	mov	sp, r7
 800d0d2:	bd80      	pop	{r7, pc}
 800d0d4:	20004fc4 	.word	0x20004fc4

0800d0d8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d0d8:	b580      	push	{r7, lr}
 800d0da:	b084      	sub	sp, #16
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d0e0:	2300      	movs	r3, #0
 800d0e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d0e4:	2300      	movs	r3, #0
 800d0e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d0ee:	4618      	mov	r0, r3
 800d0f0:	f7f6 fed5 	bl	8003e9e <HAL_PCD_Start>
 800d0f4:	4603      	mov	r3, r0
 800d0f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d0f8:	7bfb      	ldrb	r3, [r7, #15]
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	f000 f942 	bl	800d384 <USBD_Get_USB_Status>
 800d100:	4603      	mov	r3, r0
 800d102:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d104:	7bbb      	ldrb	r3, [r7, #14]
}
 800d106:	4618      	mov	r0, r3
 800d108:	3710      	adds	r7, #16
 800d10a:	46bd      	mov	sp, r7
 800d10c:	bd80      	pop	{r7, pc}

0800d10e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d10e:	b580      	push	{r7, lr}
 800d110:	b084      	sub	sp, #16
 800d112:	af00      	add	r7, sp, #0
 800d114:	6078      	str	r0, [r7, #4]
 800d116:	4608      	mov	r0, r1
 800d118:	4611      	mov	r1, r2
 800d11a:	461a      	mov	r2, r3
 800d11c:	4603      	mov	r3, r0
 800d11e:	70fb      	strb	r3, [r7, #3]
 800d120:	460b      	mov	r3, r1
 800d122:	70bb      	strb	r3, [r7, #2]
 800d124:	4613      	mov	r3, r2
 800d126:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d128:	2300      	movs	r3, #0
 800d12a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d12c:	2300      	movs	r3, #0
 800d12e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d136:	78bb      	ldrb	r3, [r7, #2]
 800d138:	883a      	ldrh	r2, [r7, #0]
 800d13a:	78f9      	ldrb	r1, [r7, #3]
 800d13c:	f7f7 fba6 	bl	800488c <HAL_PCD_EP_Open>
 800d140:	4603      	mov	r3, r0
 800d142:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d144:	7bfb      	ldrb	r3, [r7, #15]
 800d146:	4618      	mov	r0, r3
 800d148:	f000 f91c 	bl	800d384 <USBD_Get_USB_Status>
 800d14c:	4603      	mov	r3, r0
 800d14e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d150:	7bbb      	ldrb	r3, [r7, #14]
}
 800d152:	4618      	mov	r0, r3
 800d154:	3710      	adds	r7, #16
 800d156:	46bd      	mov	sp, r7
 800d158:	bd80      	pop	{r7, pc}

0800d15a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d15a:	b580      	push	{r7, lr}
 800d15c:	b084      	sub	sp, #16
 800d15e:	af00      	add	r7, sp, #0
 800d160:	6078      	str	r0, [r7, #4]
 800d162:	460b      	mov	r3, r1
 800d164:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d166:	2300      	movs	r3, #0
 800d168:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d16a:	2300      	movs	r3, #0
 800d16c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d174:	78fa      	ldrb	r2, [r7, #3]
 800d176:	4611      	mov	r1, r2
 800d178:	4618      	mov	r0, r3
 800d17a:	f7f7 fbef 	bl	800495c <HAL_PCD_EP_Close>
 800d17e:	4603      	mov	r3, r0
 800d180:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d182:	7bfb      	ldrb	r3, [r7, #15]
 800d184:	4618      	mov	r0, r3
 800d186:	f000 f8fd 	bl	800d384 <USBD_Get_USB_Status>
 800d18a:	4603      	mov	r3, r0
 800d18c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d18e:	7bbb      	ldrb	r3, [r7, #14]
}
 800d190:	4618      	mov	r0, r3
 800d192:	3710      	adds	r7, #16
 800d194:	46bd      	mov	sp, r7
 800d196:	bd80      	pop	{r7, pc}

0800d198 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d198:	b580      	push	{r7, lr}
 800d19a:	b084      	sub	sp, #16
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	6078      	str	r0, [r7, #4]
 800d1a0:	460b      	mov	r3, r1
 800d1a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d1a8:	2300      	movs	r3, #0
 800d1aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d1b2:	78fa      	ldrb	r2, [r7, #3]
 800d1b4:	4611      	mov	r1, r2
 800d1b6:	4618      	mov	r0, r3
 800d1b8:	f7f7 fcc7 	bl	8004b4a <HAL_PCD_EP_SetStall>
 800d1bc:	4603      	mov	r3, r0
 800d1be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d1c0:	7bfb      	ldrb	r3, [r7, #15]
 800d1c2:	4618      	mov	r0, r3
 800d1c4:	f000 f8de 	bl	800d384 <USBD_Get_USB_Status>
 800d1c8:	4603      	mov	r3, r0
 800d1ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d1cc:	7bbb      	ldrb	r3, [r7, #14]
}
 800d1ce:	4618      	mov	r0, r3
 800d1d0:	3710      	adds	r7, #16
 800d1d2:	46bd      	mov	sp, r7
 800d1d4:	bd80      	pop	{r7, pc}

0800d1d6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d1d6:	b580      	push	{r7, lr}
 800d1d8:	b084      	sub	sp, #16
 800d1da:	af00      	add	r7, sp, #0
 800d1dc:	6078      	str	r0, [r7, #4]
 800d1de:	460b      	mov	r3, r1
 800d1e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d1e2:	2300      	movs	r3, #0
 800d1e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d1f0:	78fa      	ldrb	r2, [r7, #3]
 800d1f2:	4611      	mov	r1, r2
 800d1f4:	4618      	mov	r0, r3
 800d1f6:	f7f7 fd0c 	bl	8004c12 <HAL_PCD_EP_ClrStall>
 800d1fa:	4603      	mov	r3, r0
 800d1fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d1fe:	7bfb      	ldrb	r3, [r7, #15]
 800d200:	4618      	mov	r0, r3
 800d202:	f000 f8bf 	bl	800d384 <USBD_Get_USB_Status>
 800d206:	4603      	mov	r3, r0
 800d208:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d20a:	7bbb      	ldrb	r3, [r7, #14]
}
 800d20c:	4618      	mov	r0, r3
 800d20e:	3710      	adds	r7, #16
 800d210:	46bd      	mov	sp, r7
 800d212:	bd80      	pop	{r7, pc}

0800d214 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d214:	b480      	push	{r7}
 800d216:	b085      	sub	sp, #20
 800d218:	af00      	add	r7, sp, #0
 800d21a:	6078      	str	r0, [r7, #4]
 800d21c:	460b      	mov	r3, r1
 800d21e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d226:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d228:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	da0b      	bge.n	800d248 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d230:	78fb      	ldrb	r3, [r7, #3]
 800d232:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d236:	68f9      	ldr	r1, [r7, #12]
 800d238:	4613      	mov	r3, r2
 800d23a:	00db      	lsls	r3, r3, #3
 800d23c:	4413      	add	r3, r2
 800d23e:	009b      	lsls	r3, r3, #2
 800d240:	440b      	add	r3, r1
 800d242:	333e      	adds	r3, #62	; 0x3e
 800d244:	781b      	ldrb	r3, [r3, #0]
 800d246:	e00b      	b.n	800d260 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d248:	78fb      	ldrb	r3, [r7, #3]
 800d24a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d24e:	68f9      	ldr	r1, [r7, #12]
 800d250:	4613      	mov	r3, r2
 800d252:	00db      	lsls	r3, r3, #3
 800d254:	4413      	add	r3, r2
 800d256:	009b      	lsls	r3, r3, #2
 800d258:	440b      	add	r3, r1
 800d25a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800d25e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d260:	4618      	mov	r0, r3
 800d262:	3714      	adds	r7, #20
 800d264:	46bd      	mov	sp, r7
 800d266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d26a:	4770      	bx	lr

0800d26c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d26c:	b580      	push	{r7, lr}
 800d26e:	b084      	sub	sp, #16
 800d270:	af00      	add	r7, sp, #0
 800d272:	6078      	str	r0, [r7, #4]
 800d274:	460b      	mov	r3, r1
 800d276:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d278:	2300      	movs	r3, #0
 800d27a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d27c:	2300      	movs	r3, #0
 800d27e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d286:	78fa      	ldrb	r2, [r7, #3]
 800d288:	4611      	mov	r1, r2
 800d28a:	4618      	mov	r0, r3
 800d28c:	f7f7 fad9 	bl	8004842 <HAL_PCD_SetAddress>
 800d290:	4603      	mov	r3, r0
 800d292:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d294:	7bfb      	ldrb	r3, [r7, #15]
 800d296:	4618      	mov	r0, r3
 800d298:	f000 f874 	bl	800d384 <USBD_Get_USB_Status>
 800d29c:	4603      	mov	r3, r0
 800d29e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d2a0:	7bbb      	ldrb	r3, [r7, #14]
}
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	3710      	adds	r7, #16
 800d2a6:	46bd      	mov	sp, r7
 800d2a8:	bd80      	pop	{r7, pc}

0800d2aa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d2aa:	b580      	push	{r7, lr}
 800d2ac:	b086      	sub	sp, #24
 800d2ae:	af00      	add	r7, sp, #0
 800d2b0:	60f8      	str	r0, [r7, #12]
 800d2b2:	607a      	str	r2, [r7, #4]
 800d2b4:	603b      	str	r3, [r7, #0]
 800d2b6:	460b      	mov	r3, r1
 800d2b8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d2ba:	2300      	movs	r3, #0
 800d2bc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d2be:	2300      	movs	r3, #0
 800d2c0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d2c8:	7af9      	ldrb	r1, [r7, #11]
 800d2ca:	683b      	ldr	r3, [r7, #0]
 800d2cc:	687a      	ldr	r2, [r7, #4]
 800d2ce:	f7f7 fbf2 	bl	8004ab6 <HAL_PCD_EP_Transmit>
 800d2d2:	4603      	mov	r3, r0
 800d2d4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d2d6:	7dfb      	ldrb	r3, [r7, #23]
 800d2d8:	4618      	mov	r0, r3
 800d2da:	f000 f853 	bl	800d384 <USBD_Get_USB_Status>
 800d2de:	4603      	mov	r3, r0
 800d2e0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d2e2:	7dbb      	ldrb	r3, [r7, #22]
}
 800d2e4:	4618      	mov	r0, r3
 800d2e6:	3718      	adds	r7, #24
 800d2e8:	46bd      	mov	sp, r7
 800d2ea:	bd80      	pop	{r7, pc}

0800d2ec <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d2ec:	b580      	push	{r7, lr}
 800d2ee:	b086      	sub	sp, #24
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	60f8      	str	r0, [r7, #12]
 800d2f4:	607a      	str	r2, [r7, #4]
 800d2f6:	603b      	str	r3, [r7, #0]
 800d2f8:	460b      	mov	r3, r1
 800d2fa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d2fc:	2300      	movs	r3, #0
 800d2fe:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d300:	2300      	movs	r3, #0
 800d302:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d30a:	7af9      	ldrb	r1, [r7, #11]
 800d30c:	683b      	ldr	r3, [r7, #0]
 800d30e:	687a      	ldr	r2, [r7, #4]
 800d310:	f7f7 fb6e 	bl	80049f0 <HAL_PCD_EP_Receive>
 800d314:	4603      	mov	r3, r0
 800d316:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d318:	7dfb      	ldrb	r3, [r7, #23]
 800d31a:	4618      	mov	r0, r3
 800d31c:	f000 f832 	bl	800d384 <USBD_Get_USB_Status>
 800d320:	4603      	mov	r3, r0
 800d322:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d324:	7dbb      	ldrb	r3, [r7, #22]
}
 800d326:	4618      	mov	r0, r3
 800d328:	3718      	adds	r7, #24
 800d32a:	46bd      	mov	sp, r7
 800d32c:	bd80      	pop	{r7, pc}

0800d32e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d32e:	b580      	push	{r7, lr}
 800d330:	b082      	sub	sp, #8
 800d332:	af00      	add	r7, sp, #0
 800d334:	6078      	str	r0, [r7, #4]
 800d336:	460b      	mov	r3, r1
 800d338:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d340:	78fa      	ldrb	r2, [r7, #3]
 800d342:	4611      	mov	r1, r2
 800d344:	4618      	mov	r0, r3
 800d346:	f7f7 fb9e 	bl	8004a86 <HAL_PCD_EP_GetRxCount>
 800d34a:	4603      	mov	r3, r0
}
 800d34c:	4618      	mov	r0, r3
 800d34e:	3708      	adds	r7, #8
 800d350:	46bd      	mov	sp, r7
 800d352:	bd80      	pop	{r7, pc}

0800d354 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d354:	b480      	push	{r7}
 800d356:	b083      	sub	sp, #12
 800d358:	af00      	add	r7, sp, #0
 800d35a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d35c:	4b03      	ldr	r3, [pc, #12]	; (800d36c <USBD_static_malloc+0x18>)
}
 800d35e:	4618      	mov	r0, r3
 800d360:	370c      	adds	r7, #12
 800d362:	46bd      	mov	sp, r7
 800d364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d368:	4770      	bx	lr
 800d36a:	bf00      	nop
 800d36c:	200054d0 	.word	0x200054d0

0800d370 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d370:	b480      	push	{r7}
 800d372:	b083      	sub	sp, #12
 800d374:	af00      	add	r7, sp, #0
 800d376:	6078      	str	r0, [r7, #4]

}
 800d378:	bf00      	nop
 800d37a:	370c      	adds	r7, #12
 800d37c:	46bd      	mov	sp, r7
 800d37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d382:	4770      	bx	lr

0800d384 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d384:	b480      	push	{r7}
 800d386:	b085      	sub	sp, #20
 800d388:	af00      	add	r7, sp, #0
 800d38a:	4603      	mov	r3, r0
 800d38c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d38e:	2300      	movs	r3, #0
 800d390:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d392:	79fb      	ldrb	r3, [r7, #7]
 800d394:	2b03      	cmp	r3, #3
 800d396:	d817      	bhi.n	800d3c8 <USBD_Get_USB_Status+0x44>
 800d398:	a201      	add	r2, pc, #4	; (adr r2, 800d3a0 <USBD_Get_USB_Status+0x1c>)
 800d39a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d39e:	bf00      	nop
 800d3a0:	0800d3b1 	.word	0x0800d3b1
 800d3a4:	0800d3b7 	.word	0x0800d3b7
 800d3a8:	0800d3bd 	.word	0x0800d3bd
 800d3ac:	0800d3c3 	.word	0x0800d3c3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d3b0:	2300      	movs	r3, #0
 800d3b2:	73fb      	strb	r3, [r7, #15]
    break;
 800d3b4:	e00b      	b.n	800d3ce <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d3b6:	2303      	movs	r3, #3
 800d3b8:	73fb      	strb	r3, [r7, #15]
    break;
 800d3ba:	e008      	b.n	800d3ce <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d3bc:	2301      	movs	r3, #1
 800d3be:	73fb      	strb	r3, [r7, #15]
    break;
 800d3c0:	e005      	b.n	800d3ce <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d3c2:	2303      	movs	r3, #3
 800d3c4:	73fb      	strb	r3, [r7, #15]
    break;
 800d3c6:	e002      	b.n	800d3ce <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d3c8:	2303      	movs	r3, #3
 800d3ca:	73fb      	strb	r3, [r7, #15]
    break;
 800d3cc:	bf00      	nop
  }
  return usb_status;
 800d3ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3d0:	4618      	mov	r0, r3
 800d3d2:	3714      	adds	r7, #20
 800d3d4:	46bd      	mov	sp, r7
 800d3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3da:	4770      	bx	lr

0800d3dc <AS5600_ReadRegister>:
	if (halStatus != HAL_OK) {
		AS5600_ResetI2C();
	}
}

uint8_t AS5600_ReadRegister(uint8_t Reg, I2C_HandleTypeDef __i2cHandleTypeDef) {
 800d3dc:	b084      	sub	sp, #16
 800d3de:	b590      	push	{r4, r7, lr}
 800d3e0:	b089      	sub	sp, #36	; 0x24
 800d3e2:	af04      	add	r7, sp, #16
 800d3e4:	4604      	mov	r4, r0
 800d3e6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800d3ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800d3ee:	4623      	mov	r3, r4
 800d3f0:	71fb      	strb	r3, [r7, #7]
	uint8_t DataRead = 0;
 800d3f2:	2300      	movs	r3, #0
 800d3f4:	73fb      	strb	r3, [r7, #15]
	halStatus = HAL_I2C_Mem_Read(&__i2cHandleTypeDef, (AS5600_ADDR << 1), Reg, 1, &DataRead,
 800d3f6:	79fb      	ldrb	r3, [r7, #7]
 800d3f8:	b29a      	uxth	r2, r3
 800d3fa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800d3fe:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800d402:	9302      	str	r3, [sp, #8]
 800d404:	2301      	movs	r3, #1
 800d406:	9301      	str	r3, [sp, #4]
 800d408:	f107 030f 	add.w	r3, r7, #15
 800d40c:	9300      	str	r3, [sp, #0]
 800d40e:	2301      	movs	r3, #1
 800d410:	216c      	movs	r1, #108	; 0x6c
 800d412:	f7f4 faa1 	bl	8001958 <HAL_I2C_Mem_Read>
 800d416:	4603      	mov	r3, r0
 800d418:	461a      	mov	r2, r3
 800d41a:	4b05      	ldr	r3, [pc, #20]	; (800d430 <AS5600_ReadRegister+0x54>)
 800d41c:	701a      	strb	r2, [r3, #0]
			1, 300);
	return DataRead;
 800d41e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d420:	4618      	mov	r0, r3
 800d422:	3714      	adds	r7, #20
 800d424:	46bd      	mov	sp, r7
 800d426:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800d42a:	b004      	add	sp, #16
 800d42c:	4770      	bx	lr
 800d42e:	bf00      	nop
 800d430:	200056f0 	.word	0x200056f0

0800d434 <AS5600_GetAngle>:

uint8_t AS5600_GetStatus(I2C_HandleTypeDef i2cHandleTypeDef) {
	return AS5600_ReadRegister(STATUS, i2cHandleTypeDef) & 0x38;
}

uint16_t AS5600_GetAngle(I2C_HandleTypeDef i2cHandleTypeDef) {
 800d434:	b084      	sub	sp, #16
 800d436:	b590      	push	{r4, r7, lr}
 800d438:	b093      	sub	sp, #76	; 0x4c
 800d43a:	af12      	add	r7, sp, #72	; 0x48
 800d43c:	f107 0410 	add.w	r4, r7, #16
 800d440:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	return (int) ((float) (AS5600_ReadRegister(ANGLE_L, i2cHandleTypeDef)
 800d444:	4668      	mov	r0, sp
 800d446:	f107 031c 	add.w	r3, r7, #28
 800d44a:	2248      	movs	r2, #72	; 0x48
 800d44c:	4619      	mov	r1, r3
 800d44e:	f000 f861 	bl	800d514 <memcpy>
 800d452:	f107 0310 	add.w	r3, r7, #16
 800d456:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d458:	200f      	movs	r0, #15
 800d45a:	f7ff ffbf 	bl	800d3dc <AS5600_ReadRegister>
 800d45e:	4603      	mov	r3, r0
 800d460:	461c      	mov	r4, r3
			+ (AS5600_ReadRegister(ANGLE_H, i2cHandleTypeDef) << 8)) / 4096 * 360);
 800d462:	4668      	mov	r0, sp
 800d464:	f107 031c 	add.w	r3, r7, #28
 800d468:	2248      	movs	r2, #72	; 0x48
 800d46a:	4619      	mov	r1, r3
 800d46c:	f000 f852 	bl	800d514 <memcpy>
 800d470:	f107 0310 	add.w	r3, r7, #16
 800d474:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d476:	200e      	movs	r0, #14
 800d478:	f7ff ffb0 	bl	800d3dc <AS5600_ReadRegister>
 800d47c:	4603      	mov	r3, r0
 800d47e:	021b      	lsls	r3, r3, #8
 800d480:	4423      	add	r3, r4
	return (int) ((float) (AS5600_ReadRegister(ANGLE_L, i2cHandleTypeDef)
 800d482:	ee07 3a90 	vmov	s15, r3
 800d486:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
			+ (AS5600_ReadRegister(ANGLE_H, i2cHandleTypeDef) << 8)) / 4096 * 360);
 800d48a:	eddf 6a0a 	vldr	s13, [pc, #40]	; 800d4b4 <AS5600_GetAngle+0x80>
 800d48e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d492:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800d4b8 <AS5600_GetAngle+0x84>
 800d496:	ee67 7a87 	vmul.f32	s15, s15, s14
	return (int) ((float) (AS5600_ReadRegister(ANGLE_L, i2cHandleTypeDef)
 800d49a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d49e:	ee17 3a90 	vmov	r3, s15
 800d4a2:	b29b      	uxth	r3, r3
}
 800d4a4:	4618      	mov	r0, r3
 800d4a6:	3704      	adds	r7, #4
 800d4a8:	46bd      	mov	sp, r7
 800d4aa:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800d4ae:	b004      	add	sp, #16
 800d4b0:	4770      	bx	lr
 800d4b2:	bf00      	nop
 800d4b4:	45800000 	.word	0x45800000
 800d4b8:	43b40000 	.word	0x43b40000

0800d4bc <__errno>:
 800d4bc:	4b01      	ldr	r3, [pc, #4]	; (800d4c4 <__errno+0x8>)
 800d4be:	6818      	ldr	r0, [r3, #0]
 800d4c0:	4770      	bx	lr
 800d4c2:	bf00      	nop
 800d4c4:	20000100 	.word	0x20000100

0800d4c8 <__libc_init_array>:
 800d4c8:	b570      	push	{r4, r5, r6, lr}
 800d4ca:	4d0d      	ldr	r5, [pc, #52]	; (800d500 <__libc_init_array+0x38>)
 800d4cc:	4c0d      	ldr	r4, [pc, #52]	; (800d504 <__libc_init_array+0x3c>)
 800d4ce:	1b64      	subs	r4, r4, r5
 800d4d0:	10a4      	asrs	r4, r4, #2
 800d4d2:	2600      	movs	r6, #0
 800d4d4:	42a6      	cmp	r6, r4
 800d4d6:	d109      	bne.n	800d4ec <__libc_init_array+0x24>
 800d4d8:	4d0b      	ldr	r5, [pc, #44]	; (800d508 <__libc_init_array+0x40>)
 800d4da:	4c0c      	ldr	r4, [pc, #48]	; (800d50c <__libc_init_array+0x44>)
 800d4dc:	f000 fd10 	bl	800df00 <_init>
 800d4e0:	1b64      	subs	r4, r4, r5
 800d4e2:	10a4      	asrs	r4, r4, #2
 800d4e4:	2600      	movs	r6, #0
 800d4e6:	42a6      	cmp	r6, r4
 800d4e8:	d105      	bne.n	800d4f6 <__libc_init_array+0x2e>
 800d4ea:	bd70      	pop	{r4, r5, r6, pc}
 800d4ec:	f855 3b04 	ldr.w	r3, [r5], #4
 800d4f0:	4798      	blx	r3
 800d4f2:	3601      	adds	r6, #1
 800d4f4:	e7ee      	b.n	800d4d4 <__libc_init_array+0xc>
 800d4f6:	f855 3b04 	ldr.w	r3, [r5], #4
 800d4fa:	4798      	blx	r3
 800d4fc:	3601      	adds	r6, #1
 800d4fe:	e7f2      	b.n	800d4e6 <__libc_init_array+0x1e>
 800d500:	0800e08c 	.word	0x0800e08c
 800d504:	0800e08c 	.word	0x0800e08c
 800d508:	0800e08c 	.word	0x0800e08c
 800d50c:	0800e090 	.word	0x0800e090

0800d510 <__retarget_lock_acquire_recursive>:
 800d510:	4770      	bx	lr

0800d512 <__retarget_lock_release_recursive>:
 800d512:	4770      	bx	lr

0800d514 <memcpy>:
 800d514:	440a      	add	r2, r1
 800d516:	4291      	cmp	r1, r2
 800d518:	f100 33ff 	add.w	r3, r0, #4294967295
 800d51c:	d100      	bne.n	800d520 <memcpy+0xc>
 800d51e:	4770      	bx	lr
 800d520:	b510      	push	{r4, lr}
 800d522:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d526:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d52a:	4291      	cmp	r1, r2
 800d52c:	d1f9      	bne.n	800d522 <memcpy+0xe>
 800d52e:	bd10      	pop	{r4, pc}

0800d530 <memset>:
 800d530:	4402      	add	r2, r0
 800d532:	4603      	mov	r3, r0
 800d534:	4293      	cmp	r3, r2
 800d536:	d100      	bne.n	800d53a <memset+0xa>
 800d538:	4770      	bx	lr
 800d53a:	f803 1b01 	strb.w	r1, [r3], #1
 800d53e:	e7f9      	b.n	800d534 <memset+0x4>

0800d540 <sbrk_aligned>:
 800d540:	b570      	push	{r4, r5, r6, lr}
 800d542:	4e0e      	ldr	r6, [pc, #56]	; (800d57c <sbrk_aligned+0x3c>)
 800d544:	460c      	mov	r4, r1
 800d546:	6831      	ldr	r1, [r6, #0]
 800d548:	4605      	mov	r5, r0
 800d54a:	b911      	cbnz	r1, 800d552 <sbrk_aligned+0x12>
 800d54c:	f000 f8f6 	bl	800d73c <_sbrk_r>
 800d550:	6030      	str	r0, [r6, #0]
 800d552:	4621      	mov	r1, r4
 800d554:	4628      	mov	r0, r5
 800d556:	f000 f8f1 	bl	800d73c <_sbrk_r>
 800d55a:	1c43      	adds	r3, r0, #1
 800d55c:	d00a      	beq.n	800d574 <sbrk_aligned+0x34>
 800d55e:	1cc4      	adds	r4, r0, #3
 800d560:	f024 0403 	bic.w	r4, r4, #3
 800d564:	42a0      	cmp	r0, r4
 800d566:	d007      	beq.n	800d578 <sbrk_aligned+0x38>
 800d568:	1a21      	subs	r1, r4, r0
 800d56a:	4628      	mov	r0, r5
 800d56c:	f000 f8e6 	bl	800d73c <_sbrk_r>
 800d570:	3001      	adds	r0, #1
 800d572:	d101      	bne.n	800d578 <sbrk_aligned+0x38>
 800d574:	f04f 34ff 	mov.w	r4, #4294967295
 800d578:	4620      	mov	r0, r4
 800d57a:	bd70      	pop	{r4, r5, r6, pc}
 800d57c:	200056f8 	.word	0x200056f8

0800d580 <_malloc_r>:
 800d580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d584:	1ccd      	adds	r5, r1, #3
 800d586:	f025 0503 	bic.w	r5, r5, #3
 800d58a:	3508      	adds	r5, #8
 800d58c:	2d0c      	cmp	r5, #12
 800d58e:	bf38      	it	cc
 800d590:	250c      	movcc	r5, #12
 800d592:	2d00      	cmp	r5, #0
 800d594:	4607      	mov	r7, r0
 800d596:	db01      	blt.n	800d59c <_malloc_r+0x1c>
 800d598:	42a9      	cmp	r1, r5
 800d59a:	d905      	bls.n	800d5a8 <_malloc_r+0x28>
 800d59c:	230c      	movs	r3, #12
 800d59e:	603b      	str	r3, [r7, #0]
 800d5a0:	2600      	movs	r6, #0
 800d5a2:	4630      	mov	r0, r6
 800d5a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5a8:	4e2e      	ldr	r6, [pc, #184]	; (800d664 <_malloc_r+0xe4>)
 800d5aa:	f000 f90f 	bl	800d7cc <__malloc_lock>
 800d5ae:	6833      	ldr	r3, [r6, #0]
 800d5b0:	461c      	mov	r4, r3
 800d5b2:	bb34      	cbnz	r4, 800d602 <_malloc_r+0x82>
 800d5b4:	4629      	mov	r1, r5
 800d5b6:	4638      	mov	r0, r7
 800d5b8:	f7ff ffc2 	bl	800d540 <sbrk_aligned>
 800d5bc:	1c43      	adds	r3, r0, #1
 800d5be:	4604      	mov	r4, r0
 800d5c0:	d14d      	bne.n	800d65e <_malloc_r+0xde>
 800d5c2:	6834      	ldr	r4, [r6, #0]
 800d5c4:	4626      	mov	r6, r4
 800d5c6:	2e00      	cmp	r6, #0
 800d5c8:	d140      	bne.n	800d64c <_malloc_r+0xcc>
 800d5ca:	6823      	ldr	r3, [r4, #0]
 800d5cc:	4631      	mov	r1, r6
 800d5ce:	4638      	mov	r0, r7
 800d5d0:	eb04 0803 	add.w	r8, r4, r3
 800d5d4:	f000 f8b2 	bl	800d73c <_sbrk_r>
 800d5d8:	4580      	cmp	r8, r0
 800d5da:	d13a      	bne.n	800d652 <_malloc_r+0xd2>
 800d5dc:	6821      	ldr	r1, [r4, #0]
 800d5de:	3503      	adds	r5, #3
 800d5e0:	1a6d      	subs	r5, r5, r1
 800d5e2:	f025 0503 	bic.w	r5, r5, #3
 800d5e6:	3508      	adds	r5, #8
 800d5e8:	2d0c      	cmp	r5, #12
 800d5ea:	bf38      	it	cc
 800d5ec:	250c      	movcc	r5, #12
 800d5ee:	4629      	mov	r1, r5
 800d5f0:	4638      	mov	r0, r7
 800d5f2:	f7ff ffa5 	bl	800d540 <sbrk_aligned>
 800d5f6:	3001      	adds	r0, #1
 800d5f8:	d02b      	beq.n	800d652 <_malloc_r+0xd2>
 800d5fa:	6823      	ldr	r3, [r4, #0]
 800d5fc:	442b      	add	r3, r5
 800d5fe:	6023      	str	r3, [r4, #0]
 800d600:	e00e      	b.n	800d620 <_malloc_r+0xa0>
 800d602:	6822      	ldr	r2, [r4, #0]
 800d604:	1b52      	subs	r2, r2, r5
 800d606:	d41e      	bmi.n	800d646 <_malloc_r+0xc6>
 800d608:	2a0b      	cmp	r2, #11
 800d60a:	d916      	bls.n	800d63a <_malloc_r+0xba>
 800d60c:	1961      	adds	r1, r4, r5
 800d60e:	42a3      	cmp	r3, r4
 800d610:	6025      	str	r5, [r4, #0]
 800d612:	bf18      	it	ne
 800d614:	6059      	strne	r1, [r3, #4]
 800d616:	6863      	ldr	r3, [r4, #4]
 800d618:	bf08      	it	eq
 800d61a:	6031      	streq	r1, [r6, #0]
 800d61c:	5162      	str	r2, [r4, r5]
 800d61e:	604b      	str	r3, [r1, #4]
 800d620:	4638      	mov	r0, r7
 800d622:	f104 060b 	add.w	r6, r4, #11
 800d626:	f000 f8d7 	bl	800d7d8 <__malloc_unlock>
 800d62a:	f026 0607 	bic.w	r6, r6, #7
 800d62e:	1d23      	adds	r3, r4, #4
 800d630:	1af2      	subs	r2, r6, r3
 800d632:	d0b6      	beq.n	800d5a2 <_malloc_r+0x22>
 800d634:	1b9b      	subs	r3, r3, r6
 800d636:	50a3      	str	r3, [r4, r2]
 800d638:	e7b3      	b.n	800d5a2 <_malloc_r+0x22>
 800d63a:	6862      	ldr	r2, [r4, #4]
 800d63c:	42a3      	cmp	r3, r4
 800d63e:	bf0c      	ite	eq
 800d640:	6032      	streq	r2, [r6, #0]
 800d642:	605a      	strne	r2, [r3, #4]
 800d644:	e7ec      	b.n	800d620 <_malloc_r+0xa0>
 800d646:	4623      	mov	r3, r4
 800d648:	6864      	ldr	r4, [r4, #4]
 800d64a:	e7b2      	b.n	800d5b2 <_malloc_r+0x32>
 800d64c:	4634      	mov	r4, r6
 800d64e:	6876      	ldr	r6, [r6, #4]
 800d650:	e7b9      	b.n	800d5c6 <_malloc_r+0x46>
 800d652:	230c      	movs	r3, #12
 800d654:	603b      	str	r3, [r7, #0]
 800d656:	4638      	mov	r0, r7
 800d658:	f000 f8be 	bl	800d7d8 <__malloc_unlock>
 800d65c:	e7a1      	b.n	800d5a2 <_malloc_r+0x22>
 800d65e:	6025      	str	r5, [r4, #0]
 800d660:	e7de      	b.n	800d620 <_malloc_r+0xa0>
 800d662:	bf00      	nop
 800d664:	200056f4 	.word	0x200056f4

0800d668 <cleanup_glue>:
 800d668:	b538      	push	{r3, r4, r5, lr}
 800d66a:	460c      	mov	r4, r1
 800d66c:	6809      	ldr	r1, [r1, #0]
 800d66e:	4605      	mov	r5, r0
 800d670:	b109      	cbz	r1, 800d676 <cleanup_glue+0xe>
 800d672:	f7ff fff9 	bl	800d668 <cleanup_glue>
 800d676:	4621      	mov	r1, r4
 800d678:	4628      	mov	r0, r5
 800d67a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d67e:	f000 b8b1 	b.w	800d7e4 <_free_r>
	...

0800d684 <_reclaim_reent>:
 800d684:	4b2c      	ldr	r3, [pc, #176]	; (800d738 <_reclaim_reent+0xb4>)
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	4283      	cmp	r3, r0
 800d68a:	b570      	push	{r4, r5, r6, lr}
 800d68c:	4604      	mov	r4, r0
 800d68e:	d051      	beq.n	800d734 <_reclaim_reent+0xb0>
 800d690:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800d692:	b143      	cbz	r3, 800d6a6 <_reclaim_reent+0x22>
 800d694:	68db      	ldr	r3, [r3, #12]
 800d696:	2b00      	cmp	r3, #0
 800d698:	d14a      	bne.n	800d730 <_reclaim_reent+0xac>
 800d69a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d69c:	6819      	ldr	r1, [r3, #0]
 800d69e:	b111      	cbz	r1, 800d6a6 <_reclaim_reent+0x22>
 800d6a0:	4620      	mov	r0, r4
 800d6a2:	f000 f89f 	bl	800d7e4 <_free_r>
 800d6a6:	6961      	ldr	r1, [r4, #20]
 800d6a8:	b111      	cbz	r1, 800d6b0 <_reclaim_reent+0x2c>
 800d6aa:	4620      	mov	r0, r4
 800d6ac:	f000 f89a 	bl	800d7e4 <_free_r>
 800d6b0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d6b2:	b111      	cbz	r1, 800d6ba <_reclaim_reent+0x36>
 800d6b4:	4620      	mov	r0, r4
 800d6b6:	f000 f895 	bl	800d7e4 <_free_r>
 800d6ba:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d6bc:	b111      	cbz	r1, 800d6c4 <_reclaim_reent+0x40>
 800d6be:	4620      	mov	r0, r4
 800d6c0:	f000 f890 	bl	800d7e4 <_free_r>
 800d6c4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800d6c6:	b111      	cbz	r1, 800d6ce <_reclaim_reent+0x4a>
 800d6c8:	4620      	mov	r0, r4
 800d6ca:	f000 f88b 	bl	800d7e4 <_free_r>
 800d6ce:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800d6d0:	b111      	cbz	r1, 800d6d8 <_reclaim_reent+0x54>
 800d6d2:	4620      	mov	r0, r4
 800d6d4:	f000 f886 	bl	800d7e4 <_free_r>
 800d6d8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800d6da:	b111      	cbz	r1, 800d6e2 <_reclaim_reent+0x5e>
 800d6dc:	4620      	mov	r0, r4
 800d6de:	f000 f881 	bl	800d7e4 <_free_r>
 800d6e2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800d6e4:	b111      	cbz	r1, 800d6ec <_reclaim_reent+0x68>
 800d6e6:	4620      	mov	r0, r4
 800d6e8:	f000 f87c 	bl	800d7e4 <_free_r>
 800d6ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d6ee:	b111      	cbz	r1, 800d6f6 <_reclaim_reent+0x72>
 800d6f0:	4620      	mov	r0, r4
 800d6f2:	f000 f877 	bl	800d7e4 <_free_r>
 800d6f6:	69a3      	ldr	r3, [r4, #24]
 800d6f8:	b1e3      	cbz	r3, 800d734 <_reclaim_reent+0xb0>
 800d6fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d6fc:	4620      	mov	r0, r4
 800d6fe:	4798      	blx	r3
 800d700:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800d702:	b1b9      	cbz	r1, 800d734 <_reclaim_reent+0xb0>
 800d704:	4620      	mov	r0, r4
 800d706:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d70a:	f7ff bfad 	b.w	800d668 <cleanup_glue>
 800d70e:	5949      	ldr	r1, [r1, r5]
 800d710:	b941      	cbnz	r1, 800d724 <_reclaim_reent+0xa0>
 800d712:	3504      	adds	r5, #4
 800d714:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d716:	2d80      	cmp	r5, #128	; 0x80
 800d718:	68d9      	ldr	r1, [r3, #12]
 800d71a:	d1f8      	bne.n	800d70e <_reclaim_reent+0x8a>
 800d71c:	4620      	mov	r0, r4
 800d71e:	f000 f861 	bl	800d7e4 <_free_r>
 800d722:	e7ba      	b.n	800d69a <_reclaim_reent+0x16>
 800d724:	680e      	ldr	r6, [r1, #0]
 800d726:	4620      	mov	r0, r4
 800d728:	f000 f85c 	bl	800d7e4 <_free_r>
 800d72c:	4631      	mov	r1, r6
 800d72e:	e7ef      	b.n	800d710 <_reclaim_reent+0x8c>
 800d730:	2500      	movs	r5, #0
 800d732:	e7ef      	b.n	800d714 <_reclaim_reent+0x90>
 800d734:	bd70      	pop	{r4, r5, r6, pc}
 800d736:	bf00      	nop
 800d738:	20000100 	.word	0x20000100

0800d73c <_sbrk_r>:
 800d73c:	b538      	push	{r3, r4, r5, lr}
 800d73e:	4d06      	ldr	r5, [pc, #24]	; (800d758 <_sbrk_r+0x1c>)
 800d740:	2300      	movs	r3, #0
 800d742:	4604      	mov	r4, r0
 800d744:	4608      	mov	r0, r1
 800d746:	602b      	str	r3, [r5, #0]
 800d748:	f7f3 fc3a 	bl	8000fc0 <_sbrk>
 800d74c:	1c43      	adds	r3, r0, #1
 800d74e:	d102      	bne.n	800d756 <_sbrk_r+0x1a>
 800d750:	682b      	ldr	r3, [r5, #0]
 800d752:	b103      	cbz	r3, 800d756 <_sbrk_r+0x1a>
 800d754:	6023      	str	r3, [r4, #0]
 800d756:	bd38      	pop	{r3, r4, r5, pc}
 800d758:	200056fc 	.word	0x200056fc

0800d75c <siprintf>:
 800d75c:	b40e      	push	{r1, r2, r3}
 800d75e:	b500      	push	{lr}
 800d760:	b09c      	sub	sp, #112	; 0x70
 800d762:	ab1d      	add	r3, sp, #116	; 0x74
 800d764:	9002      	str	r0, [sp, #8]
 800d766:	9006      	str	r0, [sp, #24]
 800d768:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d76c:	4809      	ldr	r0, [pc, #36]	; (800d794 <siprintf+0x38>)
 800d76e:	9107      	str	r1, [sp, #28]
 800d770:	9104      	str	r1, [sp, #16]
 800d772:	4909      	ldr	r1, [pc, #36]	; (800d798 <siprintf+0x3c>)
 800d774:	f853 2b04 	ldr.w	r2, [r3], #4
 800d778:	9105      	str	r1, [sp, #20]
 800d77a:	6800      	ldr	r0, [r0, #0]
 800d77c:	9301      	str	r3, [sp, #4]
 800d77e:	a902      	add	r1, sp, #8
 800d780:	f000 f8d8 	bl	800d934 <_svfiprintf_r>
 800d784:	9b02      	ldr	r3, [sp, #8]
 800d786:	2200      	movs	r2, #0
 800d788:	701a      	strb	r2, [r3, #0]
 800d78a:	b01c      	add	sp, #112	; 0x70
 800d78c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d790:	b003      	add	sp, #12
 800d792:	4770      	bx	lr
 800d794:	20000100 	.word	0x20000100
 800d798:	ffff0208 	.word	0xffff0208

0800d79c <strcat>:
 800d79c:	b510      	push	{r4, lr}
 800d79e:	4602      	mov	r2, r0
 800d7a0:	7814      	ldrb	r4, [r2, #0]
 800d7a2:	4613      	mov	r3, r2
 800d7a4:	3201      	adds	r2, #1
 800d7a6:	2c00      	cmp	r4, #0
 800d7a8:	d1fa      	bne.n	800d7a0 <strcat+0x4>
 800d7aa:	3b01      	subs	r3, #1
 800d7ac:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d7b0:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d7b4:	2a00      	cmp	r2, #0
 800d7b6:	d1f9      	bne.n	800d7ac <strcat+0x10>
 800d7b8:	bd10      	pop	{r4, pc}

0800d7ba <strcpy>:
 800d7ba:	4603      	mov	r3, r0
 800d7bc:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d7c0:	f803 2b01 	strb.w	r2, [r3], #1
 800d7c4:	2a00      	cmp	r2, #0
 800d7c6:	d1f9      	bne.n	800d7bc <strcpy+0x2>
 800d7c8:	4770      	bx	lr
	...

0800d7cc <__malloc_lock>:
 800d7cc:	4801      	ldr	r0, [pc, #4]	; (800d7d4 <__malloc_lock+0x8>)
 800d7ce:	f7ff be9f 	b.w	800d510 <__retarget_lock_acquire_recursive>
 800d7d2:	bf00      	nop
 800d7d4:	200056f1 	.word	0x200056f1

0800d7d8 <__malloc_unlock>:
 800d7d8:	4801      	ldr	r0, [pc, #4]	; (800d7e0 <__malloc_unlock+0x8>)
 800d7da:	f7ff be9a 	b.w	800d512 <__retarget_lock_release_recursive>
 800d7de:	bf00      	nop
 800d7e0:	200056f1 	.word	0x200056f1

0800d7e4 <_free_r>:
 800d7e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d7e6:	2900      	cmp	r1, #0
 800d7e8:	d044      	beq.n	800d874 <_free_r+0x90>
 800d7ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d7ee:	9001      	str	r0, [sp, #4]
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	f1a1 0404 	sub.w	r4, r1, #4
 800d7f6:	bfb8      	it	lt
 800d7f8:	18e4      	addlt	r4, r4, r3
 800d7fa:	f7ff ffe7 	bl	800d7cc <__malloc_lock>
 800d7fe:	4a1e      	ldr	r2, [pc, #120]	; (800d878 <_free_r+0x94>)
 800d800:	9801      	ldr	r0, [sp, #4]
 800d802:	6813      	ldr	r3, [r2, #0]
 800d804:	b933      	cbnz	r3, 800d814 <_free_r+0x30>
 800d806:	6063      	str	r3, [r4, #4]
 800d808:	6014      	str	r4, [r2, #0]
 800d80a:	b003      	add	sp, #12
 800d80c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d810:	f7ff bfe2 	b.w	800d7d8 <__malloc_unlock>
 800d814:	42a3      	cmp	r3, r4
 800d816:	d908      	bls.n	800d82a <_free_r+0x46>
 800d818:	6825      	ldr	r5, [r4, #0]
 800d81a:	1961      	adds	r1, r4, r5
 800d81c:	428b      	cmp	r3, r1
 800d81e:	bf01      	itttt	eq
 800d820:	6819      	ldreq	r1, [r3, #0]
 800d822:	685b      	ldreq	r3, [r3, #4]
 800d824:	1949      	addeq	r1, r1, r5
 800d826:	6021      	streq	r1, [r4, #0]
 800d828:	e7ed      	b.n	800d806 <_free_r+0x22>
 800d82a:	461a      	mov	r2, r3
 800d82c:	685b      	ldr	r3, [r3, #4]
 800d82e:	b10b      	cbz	r3, 800d834 <_free_r+0x50>
 800d830:	42a3      	cmp	r3, r4
 800d832:	d9fa      	bls.n	800d82a <_free_r+0x46>
 800d834:	6811      	ldr	r1, [r2, #0]
 800d836:	1855      	adds	r5, r2, r1
 800d838:	42a5      	cmp	r5, r4
 800d83a:	d10b      	bne.n	800d854 <_free_r+0x70>
 800d83c:	6824      	ldr	r4, [r4, #0]
 800d83e:	4421      	add	r1, r4
 800d840:	1854      	adds	r4, r2, r1
 800d842:	42a3      	cmp	r3, r4
 800d844:	6011      	str	r1, [r2, #0]
 800d846:	d1e0      	bne.n	800d80a <_free_r+0x26>
 800d848:	681c      	ldr	r4, [r3, #0]
 800d84a:	685b      	ldr	r3, [r3, #4]
 800d84c:	6053      	str	r3, [r2, #4]
 800d84e:	4421      	add	r1, r4
 800d850:	6011      	str	r1, [r2, #0]
 800d852:	e7da      	b.n	800d80a <_free_r+0x26>
 800d854:	d902      	bls.n	800d85c <_free_r+0x78>
 800d856:	230c      	movs	r3, #12
 800d858:	6003      	str	r3, [r0, #0]
 800d85a:	e7d6      	b.n	800d80a <_free_r+0x26>
 800d85c:	6825      	ldr	r5, [r4, #0]
 800d85e:	1961      	adds	r1, r4, r5
 800d860:	428b      	cmp	r3, r1
 800d862:	bf04      	itt	eq
 800d864:	6819      	ldreq	r1, [r3, #0]
 800d866:	685b      	ldreq	r3, [r3, #4]
 800d868:	6063      	str	r3, [r4, #4]
 800d86a:	bf04      	itt	eq
 800d86c:	1949      	addeq	r1, r1, r5
 800d86e:	6021      	streq	r1, [r4, #0]
 800d870:	6054      	str	r4, [r2, #4]
 800d872:	e7ca      	b.n	800d80a <_free_r+0x26>
 800d874:	b003      	add	sp, #12
 800d876:	bd30      	pop	{r4, r5, pc}
 800d878:	200056f4 	.word	0x200056f4

0800d87c <__ssputs_r>:
 800d87c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d880:	688e      	ldr	r6, [r1, #8]
 800d882:	429e      	cmp	r6, r3
 800d884:	4682      	mov	sl, r0
 800d886:	460c      	mov	r4, r1
 800d888:	4690      	mov	r8, r2
 800d88a:	461f      	mov	r7, r3
 800d88c:	d838      	bhi.n	800d900 <__ssputs_r+0x84>
 800d88e:	898a      	ldrh	r2, [r1, #12]
 800d890:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d894:	d032      	beq.n	800d8fc <__ssputs_r+0x80>
 800d896:	6825      	ldr	r5, [r4, #0]
 800d898:	6909      	ldr	r1, [r1, #16]
 800d89a:	eba5 0901 	sub.w	r9, r5, r1
 800d89e:	6965      	ldr	r5, [r4, #20]
 800d8a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d8a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d8a8:	3301      	adds	r3, #1
 800d8aa:	444b      	add	r3, r9
 800d8ac:	106d      	asrs	r5, r5, #1
 800d8ae:	429d      	cmp	r5, r3
 800d8b0:	bf38      	it	cc
 800d8b2:	461d      	movcc	r5, r3
 800d8b4:	0553      	lsls	r3, r2, #21
 800d8b6:	d531      	bpl.n	800d91c <__ssputs_r+0xa0>
 800d8b8:	4629      	mov	r1, r5
 800d8ba:	f7ff fe61 	bl	800d580 <_malloc_r>
 800d8be:	4606      	mov	r6, r0
 800d8c0:	b950      	cbnz	r0, 800d8d8 <__ssputs_r+0x5c>
 800d8c2:	230c      	movs	r3, #12
 800d8c4:	f8ca 3000 	str.w	r3, [sl]
 800d8c8:	89a3      	ldrh	r3, [r4, #12]
 800d8ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d8ce:	81a3      	strh	r3, [r4, #12]
 800d8d0:	f04f 30ff 	mov.w	r0, #4294967295
 800d8d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8d8:	6921      	ldr	r1, [r4, #16]
 800d8da:	464a      	mov	r2, r9
 800d8dc:	f7ff fe1a 	bl	800d514 <memcpy>
 800d8e0:	89a3      	ldrh	r3, [r4, #12]
 800d8e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d8e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d8ea:	81a3      	strh	r3, [r4, #12]
 800d8ec:	6126      	str	r6, [r4, #16]
 800d8ee:	6165      	str	r5, [r4, #20]
 800d8f0:	444e      	add	r6, r9
 800d8f2:	eba5 0509 	sub.w	r5, r5, r9
 800d8f6:	6026      	str	r6, [r4, #0]
 800d8f8:	60a5      	str	r5, [r4, #8]
 800d8fa:	463e      	mov	r6, r7
 800d8fc:	42be      	cmp	r6, r7
 800d8fe:	d900      	bls.n	800d902 <__ssputs_r+0x86>
 800d900:	463e      	mov	r6, r7
 800d902:	6820      	ldr	r0, [r4, #0]
 800d904:	4632      	mov	r2, r6
 800d906:	4641      	mov	r1, r8
 800d908:	f000 faa8 	bl	800de5c <memmove>
 800d90c:	68a3      	ldr	r3, [r4, #8]
 800d90e:	1b9b      	subs	r3, r3, r6
 800d910:	60a3      	str	r3, [r4, #8]
 800d912:	6823      	ldr	r3, [r4, #0]
 800d914:	4433      	add	r3, r6
 800d916:	6023      	str	r3, [r4, #0]
 800d918:	2000      	movs	r0, #0
 800d91a:	e7db      	b.n	800d8d4 <__ssputs_r+0x58>
 800d91c:	462a      	mov	r2, r5
 800d91e:	f000 fab7 	bl	800de90 <_realloc_r>
 800d922:	4606      	mov	r6, r0
 800d924:	2800      	cmp	r0, #0
 800d926:	d1e1      	bne.n	800d8ec <__ssputs_r+0x70>
 800d928:	6921      	ldr	r1, [r4, #16]
 800d92a:	4650      	mov	r0, sl
 800d92c:	f7ff ff5a 	bl	800d7e4 <_free_r>
 800d930:	e7c7      	b.n	800d8c2 <__ssputs_r+0x46>
	...

0800d934 <_svfiprintf_r>:
 800d934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d938:	4698      	mov	r8, r3
 800d93a:	898b      	ldrh	r3, [r1, #12]
 800d93c:	061b      	lsls	r3, r3, #24
 800d93e:	b09d      	sub	sp, #116	; 0x74
 800d940:	4607      	mov	r7, r0
 800d942:	460d      	mov	r5, r1
 800d944:	4614      	mov	r4, r2
 800d946:	d50e      	bpl.n	800d966 <_svfiprintf_r+0x32>
 800d948:	690b      	ldr	r3, [r1, #16]
 800d94a:	b963      	cbnz	r3, 800d966 <_svfiprintf_r+0x32>
 800d94c:	2140      	movs	r1, #64	; 0x40
 800d94e:	f7ff fe17 	bl	800d580 <_malloc_r>
 800d952:	6028      	str	r0, [r5, #0]
 800d954:	6128      	str	r0, [r5, #16]
 800d956:	b920      	cbnz	r0, 800d962 <_svfiprintf_r+0x2e>
 800d958:	230c      	movs	r3, #12
 800d95a:	603b      	str	r3, [r7, #0]
 800d95c:	f04f 30ff 	mov.w	r0, #4294967295
 800d960:	e0d1      	b.n	800db06 <_svfiprintf_r+0x1d2>
 800d962:	2340      	movs	r3, #64	; 0x40
 800d964:	616b      	str	r3, [r5, #20]
 800d966:	2300      	movs	r3, #0
 800d968:	9309      	str	r3, [sp, #36]	; 0x24
 800d96a:	2320      	movs	r3, #32
 800d96c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d970:	f8cd 800c 	str.w	r8, [sp, #12]
 800d974:	2330      	movs	r3, #48	; 0x30
 800d976:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800db20 <_svfiprintf_r+0x1ec>
 800d97a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d97e:	f04f 0901 	mov.w	r9, #1
 800d982:	4623      	mov	r3, r4
 800d984:	469a      	mov	sl, r3
 800d986:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d98a:	b10a      	cbz	r2, 800d990 <_svfiprintf_r+0x5c>
 800d98c:	2a25      	cmp	r2, #37	; 0x25
 800d98e:	d1f9      	bne.n	800d984 <_svfiprintf_r+0x50>
 800d990:	ebba 0b04 	subs.w	fp, sl, r4
 800d994:	d00b      	beq.n	800d9ae <_svfiprintf_r+0x7a>
 800d996:	465b      	mov	r3, fp
 800d998:	4622      	mov	r2, r4
 800d99a:	4629      	mov	r1, r5
 800d99c:	4638      	mov	r0, r7
 800d99e:	f7ff ff6d 	bl	800d87c <__ssputs_r>
 800d9a2:	3001      	adds	r0, #1
 800d9a4:	f000 80aa 	beq.w	800dafc <_svfiprintf_r+0x1c8>
 800d9a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d9aa:	445a      	add	r2, fp
 800d9ac:	9209      	str	r2, [sp, #36]	; 0x24
 800d9ae:	f89a 3000 	ldrb.w	r3, [sl]
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	f000 80a2 	beq.w	800dafc <_svfiprintf_r+0x1c8>
 800d9b8:	2300      	movs	r3, #0
 800d9ba:	f04f 32ff 	mov.w	r2, #4294967295
 800d9be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d9c2:	f10a 0a01 	add.w	sl, sl, #1
 800d9c6:	9304      	str	r3, [sp, #16]
 800d9c8:	9307      	str	r3, [sp, #28]
 800d9ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d9ce:	931a      	str	r3, [sp, #104]	; 0x68
 800d9d0:	4654      	mov	r4, sl
 800d9d2:	2205      	movs	r2, #5
 800d9d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d9d8:	4851      	ldr	r0, [pc, #324]	; (800db20 <_svfiprintf_r+0x1ec>)
 800d9da:	f7f2 fc09 	bl	80001f0 <memchr>
 800d9de:	9a04      	ldr	r2, [sp, #16]
 800d9e0:	b9d8      	cbnz	r0, 800da1a <_svfiprintf_r+0xe6>
 800d9e2:	06d0      	lsls	r0, r2, #27
 800d9e4:	bf44      	itt	mi
 800d9e6:	2320      	movmi	r3, #32
 800d9e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d9ec:	0711      	lsls	r1, r2, #28
 800d9ee:	bf44      	itt	mi
 800d9f0:	232b      	movmi	r3, #43	; 0x2b
 800d9f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d9f6:	f89a 3000 	ldrb.w	r3, [sl]
 800d9fa:	2b2a      	cmp	r3, #42	; 0x2a
 800d9fc:	d015      	beq.n	800da2a <_svfiprintf_r+0xf6>
 800d9fe:	9a07      	ldr	r2, [sp, #28]
 800da00:	4654      	mov	r4, sl
 800da02:	2000      	movs	r0, #0
 800da04:	f04f 0c0a 	mov.w	ip, #10
 800da08:	4621      	mov	r1, r4
 800da0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800da0e:	3b30      	subs	r3, #48	; 0x30
 800da10:	2b09      	cmp	r3, #9
 800da12:	d94e      	bls.n	800dab2 <_svfiprintf_r+0x17e>
 800da14:	b1b0      	cbz	r0, 800da44 <_svfiprintf_r+0x110>
 800da16:	9207      	str	r2, [sp, #28]
 800da18:	e014      	b.n	800da44 <_svfiprintf_r+0x110>
 800da1a:	eba0 0308 	sub.w	r3, r0, r8
 800da1e:	fa09 f303 	lsl.w	r3, r9, r3
 800da22:	4313      	orrs	r3, r2
 800da24:	9304      	str	r3, [sp, #16]
 800da26:	46a2      	mov	sl, r4
 800da28:	e7d2      	b.n	800d9d0 <_svfiprintf_r+0x9c>
 800da2a:	9b03      	ldr	r3, [sp, #12]
 800da2c:	1d19      	adds	r1, r3, #4
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	9103      	str	r1, [sp, #12]
 800da32:	2b00      	cmp	r3, #0
 800da34:	bfbb      	ittet	lt
 800da36:	425b      	neglt	r3, r3
 800da38:	f042 0202 	orrlt.w	r2, r2, #2
 800da3c:	9307      	strge	r3, [sp, #28]
 800da3e:	9307      	strlt	r3, [sp, #28]
 800da40:	bfb8      	it	lt
 800da42:	9204      	strlt	r2, [sp, #16]
 800da44:	7823      	ldrb	r3, [r4, #0]
 800da46:	2b2e      	cmp	r3, #46	; 0x2e
 800da48:	d10c      	bne.n	800da64 <_svfiprintf_r+0x130>
 800da4a:	7863      	ldrb	r3, [r4, #1]
 800da4c:	2b2a      	cmp	r3, #42	; 0x2a
 800da4e:	d135      	bne.n	800dabc <_svfiprintf_r+0x188>
 800da50:	9b03      	ldr	r3, [sp, #12]
 800da52:	1d1a      	adds	r2, r3, #4
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	9203      	str	r2, [sp, #12]
 800da58:	2b00      	cmp	r3, #0
 800da5a:	bfb8      	it	lt
 800da5c:	f04f 33ff 	movlt.w	r3, #4294967295
 800da60:	3402      	adds	r4, #2
 800da62:	9305      	str	r3, [sp, #20]
 800da64:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800db30 <_svfiprintf_r+0x1fc>
 800da68:	7821      	ldrb	r1, [r4, #0]
 800da6a:	2203      	movs	r2, #3
 800da6c:	4650      	mov	r0, sl
 800da6e:	f7f2 fbbf 	bl	80001f0 <memchr>
 800da72:	b140      	cbz	r0, 800da86 <_svfiprintf_r+0x152>
 800da74:	2340      	movs	r3, #64	; 0x40
 800da76:	eba0 000a 	sub.w	r0, r0, sl
 800da7a:	fa03 f000 	lsl.w	r0, r3, r0
 800da7e:	9b04      	ldr	r3, [sp, #16]
 800da80:	4303      	orrs	r3, r0
 800da82:	3401      	adds	r4, #1
 800da84:	9304      	str	r3, [sp, #16]
 800da86:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da8a:	4826      	ldr	r0, [pc, #152]	; (800db24 <_svfiprintf_r+0x1f0>)
 800da8c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800da90:	2206      	movs	r2, #6
 800da92:	f7f2 fbad 	bl	80001f0 <memchr>
 800da96:	2800      	cmp	r0, #0
 800da98:	d038      	beq.n	800db0c <_svfiprintf_r+0x1d8>
 800da9a:	4b23      	ldr	r3, [pc, #140]	; (800db28 <_svfiprintf_r+0x1f4>)
 800da9c:	bb1b      	cbnz	r3, 800dae6 <_svfiprintf_r+0x1b2>
 800da9e:	9b03      	ldr	r3, [sp, #12]
 800daa0:	3307      	adds	r3, #7
 800daa2:	f023 0307 	bic.w	r3, r3, #7
 800daa6:	3308      	adds	r3, #8
 800daa8:	9303      	str	r3, [sp, #12]
 800daaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800daac:	4433      	add	r3, r6
 800daae:	9309      	str	r3, [sp, #36]	; 0x24
 800dab0:	e767      	b.n	800d982 <_svfiprintf_r+0x4e>
 800dab2:	fb0c 3202 	mla	r2, ip, r2, r3
 800dab6:	460c      	mov	r4, r1
 800dab8:	2001      	movs	r0, #1
 800daba:	e7a5      	b.n	800da08 <_svfiprintf_r+0xd4>
 800dabc:	2300      	movs	r3, #0
 800dabe:	3401      	adds	r4, #1
 800dac0:	9305      	str	r3, [sp, #20]
 800dac2:	4619      	mov	r1, r3
 800dac4:	f04f 0c0a 	mov.w	ip, #10
 800dac8:	4620      	mov	r0, r4
 800daca:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dace:	3a30      	subs	r2, #48	; 0x30
 800dad0:	2a09      	cmp	r2, #9
 800dad2:	d903      	bls.n	800dadc <_svfiprintf_r+0x1a8>
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d0c5      	beq.n	800da64 <_svfiprintf_r+0x130>
 800dad8:	9105      	str	r1, [sp, #20]
 800dada:	e7c3      	b.n	800da64 <_svfiprintf_r+0x130>
 800dadc:	fb0c 2101 	mla	r1, ip, r1, r2
 800dae0:	4604      	mov	r4, r0
 800dae2:	2301      	movs	r3, #1
 800dae4:	e7f0      	b.n	800dac8 <_svfiprintf_r+0x194>
 800dae6:	ab03      	add	r3, sp, #12
 800dae8:	9300      	str	r3, [sp, #0]
 800daea:	462a      	mov	r2, r5
 800daec:	4b0f      	ldr	r3, [pc, #60]	; (800db2c <_svfiprintf_r+0x1f8>)
 800daee:	a904      	add	r1, sp, #16
 800daf0:	4638      	mov	r0, r7
 800daf2:	f3af 8000 	nop.w
 800daf6:	1c42      	adds	r2, r0, #1
 800daf8:	4606      	mov	r6, r0
 800dafa:	d1d6      	bne.n	800daaa <_svfiprintf_r+0x176>
 800dafc:	89ab      	ldrh	r3, [r5, #12]
 800dafe:	065b      	lsls	r3, r3, #25
 800db00:	f53f af2c 	bmi.w	800d95c <_svfiprintf_r+0x28>
 800db04:	9809      	ldr	r0, [sp, #36]	; 0x24
 800db06:	b01d      	add	sp, #116	; 0x74
 800db08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db0c:	ab03      	add	r3, sp, #12
 800db0e:	9300      	str	r3, [sp, #0]
 800db10:	462a      	mov	r2, r5
 800db12:	4b06      	ldr	r3, [pc, #24]	; (800db2c <_svfiprintf_r+0x1f8>)
 800db14:	a904      	add	r1, sp, #16
 800db16:	4638      	mov	r0, r7
 800db18:	f000 f87a 	bl	800dc10 <_printf_i>
 800db1c:	e7eb      	b.n	800daf6 <_svfiprintf_r+0x1c2>
 800db1e:	bf00      	nop
 800db20:	0800e050 	.word	0x0800e050
 800db24:	0800e05a 	.word	0x0800e05a
 800db28:	00000000 	.word	0x00000000
 800db2c:	0800d87d 	.word	0x0800d87d
 800db30:	0800e056 	.word	0x0800e056

0800db34 <_printf_common>:
 800db34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db38:	4616      	mov	r6, r2
 800db3a:	4699      	mov	r9, r3
 800db3c:	688a      	ldr	r2, [r1, #8]
 800db3e:	690b      	ldr	r3, [r1, #16]
 800db40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800db44:	4293      	cmp	r3, r2
 800db46:	bfb8      	it	lt
 800db48:	4613      	movlt	r3, r2
 800db4a:	6033      	str	r3, [r6, #0]
 800db4c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800db50:	4607      	mov	r7, r0
 800db52:	460c      	mov	r4, r1
 800db54:	b10a      	cbz	r2, 800db5a <_printf_common+0x26>
 800db56:	3301      	adds	r3, #1
 800db58:	6033      	str	r3, [r6, #0]
 800db5a:	6823      	ldr	r3, [r4, #0]
 800db5c:	0699      	lsls	r1, r3, #26
 800db5e:	bf42      	ittt	mi
 800db60:	6833      	ldrmi	r3, [r6, #0]
 800db62:	3302      	addmi	r3, #2
 800db64:	6033      	strmi	r3, [r6, #0]
 800db66:	6825      	ldr	r5, [r4, #0]
 800db68:	f015 0506 	ands.w	r5, r5, #6
 800db6c:	d106      	bne.n	800db7c <_printf_common+0x48>
 800db6e:	f104 0a19 	add.w	sl, r4, #25
 800db72:	68e3      	ldr	r3, [r4, #12]
 800db74:	6832      	ldr	r2, [r6, #0]
 800db76:	1a9b      	subs	r3, r3, r2
 800db78:	42ab      	cmp	r3, r5
 800db7a:	dc26      	bgt.n	800dbca <_printf_common+0x96>
 800db7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800db80:	1e13      	subs	r3, r2, #0
 800db82:	6822      	ldr	r2, [r4, #0]
 800db84:	bf18      	it	ne
 800db86:	2301      	movne	r3, #1
 800db88:	0692      	lsls	r2, r2, #26
 800db8a:	d42b      	bmi.n	800dbe4 <_printf_common+0xb0>
 800db8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800db90:	4649      	mov	r1, r9
 800db92:	4638      	mov	r0, r7
 800db94:	47c0      	blx	r8
 800db96:	3001      	adds	r0, #1
 800db98:	d01e      	beq.n	800dbd8 <_printf_common+0xa4>
 800db9a:	6823      	ldr	r3, [r4, #0]
 800db9c:	68e5      	ldr	r5, [r4, #12]
 800db9e:	6832      	ldr	r2, [r6, #0]
 800dba0:	f003 0306 	and.w	r3, r3, #6
 800dba4:	2b04      	cmp	r3, #4
 800dba6:	bf08      	it	eq
 800dba8:	1aad      	subeq	r5, r5, r2
 800dbaa:	68a3      	ldr	r3, [r4, #8]
 800dbac:	6922      	ldr	r2, [r4, #16]
 800dbae:	bf0c      	ite	eq
 800dbb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dbb4:	2500      	movne	r5, #0
 800dbb6:	4293      	cmp	r3, r2
 800dbb8:	bfc4      	itt	gt
 800dbba:	1a9b      	subgt	r3, r3, r2
 800dbbc:	18ed      	addgt	r5, r5, r3
 800dbbe:	2600      	movs	r6, #0
 800dbc0:	341a      	adds	r4, #26
 800dbc2:	42b5      	cmp	r5, r6
 800dbc4:	d11a      	bne.n	800dbfc <_printf_common+0xc8>
 800dbc6:	2000      	movs	r0, #0
 800dbc8:	e008      	b.n	800dbdc <_printf_common+0xa8>
 800dbca:	2301      	movs	r3, #1
 800dbcc:	4652      	mov	r2, sl
 800dbce:	4649      	mov	r1, r9
 800dbd0:	4638      	mov	r0, r7
 800dbd2:	47c0      	blx	r8
 800dbd4:	3001      	adds	r0, #1
 800dbd6:	d103      	bne.n	800dbe0 <_printf_common+0xac>
 800dbd8:	f04f 30ff 	mov.w	r0, #4294967295
 800dbdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dbe0:	3501      	adds	r5, #1
 800dbe2:	e7c6      	b.n	800db72 <_printf_common+0x3e>
 800dbe4:	18e1      	adds	r1, r4, r3
 800dbe6:	1c5a      	adds	r2, r3, #1
 800dbe8:	2030      	movs	r0, #48	; 0x30
 800dbea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800dbee:	4422      	add	r2, r4
 800dbf0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800dbf4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800dbf8:	3302      	adds	r3, #2
 800dbfa:	e7c7      	b.n	800db8c <_printf_common+0x58>
 800dbfc:	2301      	movs	r3, #1
 800dbfe:	4622      	mov	r2, r4
 800dc00:	4649      	mov	r1, r9
 800dc02:	4638      	mov	r0, r7
 800dc04:	47c0      	blx	r8
 800dc06:	3001      	adds	r0, #1
 800dc08:	d0e6      	beq.n	800dbd8 <_printf_common+0xa4>
 800dc0a:	3601      	adds	r6, #1
 800dc0c:	e7d9      	b.n	800dbc2 <_printf_common+0x8e>
	...

0800dc10 <_printf_i>:
 800dc10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dc14:	7e0f      	ldrb	r7, [r1, #24]
 800dc16:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800dc18:	2f78      	cmp	r7, #120	; 0x78
 800dc1a:	4691      	mov	r9, r2
 800dc1c:	4680      	mov	r8, r0
 800dc1e:	460c      	mov	r4, r1
 800dc20:	469a      	mov	sl, r3
 800dc22:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800dc26:	d807      	bhi.n	800dc38 <_printf_i+0x28>
 800dc28:	2f62      	cmp	r7, #98	; 0x62
 800dc2a:	d80a      	bhi.n	800dc42 <_printf_i+0x32>
 800dc2c:	2f00      	cmp	r7, #0
 800dc2e:	f000 80d8 	beq.w	800dde2 <_printf_i+0x1d2>
 800dc32:	2f58      	cmp	r7, #88	; 0x58
 800dc34:	f000 80a3 	beq.w	800dd7e <_printf_i+0x16e>
 800dc38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dc3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800dc40:	e03a      	b.n	800dcb8 <_printf_i+0xa8>
 800dc42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800dc46:	2b15      	cmp	r3, #21
 800dc48:	d8f6      	bhi.n	800dc38 <_printf_i+0x28>
 800dc4a:	a101      	add	r1, pc, #4	; (adr r1, 800dc50 <_printf_i+0x40>)
 800dc4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dc50:	0800dca9 	.word	0x0800dca9
 800dc54:	0800dcbd 	.word	0x0800dcbd
 800dc58:	0800dc39 	.word	0x0800dc39
 800dc5c:	0800dc39 	.word	0x0800dc39
 800dc60:	0800dc39 	.word	0x0800dc39
 800dc64:	0800dc39 	.word	0x0800dc39
 800dc68:	0800dcbd 	.word	0x0800dcbd
 800dc6c:	0800dc39 	.word	0x0800dc39
 800dc70:	0800dc39 	.word	0x0800dc39
 800dc74:	0800dc39 	.word	0x0800dc39
 800dc78:	0800dc39 	.word	0x0800dc39
 800dc7c:	0800ddc9 	.word	0x0800ddc9
 800dc80:	0800dced 	.word	0x0800dced
 800dc84:	0800ddab 	.word	0x0800ddab
 800dc88:	0800dc39 	.word	0x0800dc39
 800dc8c:	0800dc39 	.word	0x0800dc39
 800dc90:	0800ddeb 	.word	0x0800ddeb
 800dc94:	0800dc39 	.word	0x0800dc39
 800dc98:	0800dced 	.word	0x0800dced
 800dc9c:	0800dc39 	.word	0x0800dc39
 800dca0:	0800dc39 	.word	0x0800dc39
 800dca4:	0800ddb3 	.word	0x0800ddb3
 800dca8:	682b      	ldr	r3, [r5, #0]
 800dcaa:	1d1a      	adds	r2, r3, #4
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	602a      	str	r2, [r5, #0]
 800dcb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dcb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800dcb8:	2301      	movs	r3, #1
 800dcba:	e0a3      	b.n	800de04 <_printf_i+0x1f4>
 800dcbc:	6820      	ldr	r0, [r4, #0]
 800dcbe:	6829      	ldr	r1, [r5, #0]
 800dcc0:	0606      	lsls	r6, r0, #24
 800dcc2:	f101 0304 	add.w	r3, r1, #4
 800dcc6:	d50a      	bpl.n	800dcde <_printf_i+0xce>
 800dcc8:	680e      	ldr	r6, [r1, #0]
 800dcca:	602b      	str	r3, [r5, #0]
 800dccc:	2e00      	cmp	r6, #0
 800dcce:	da03      	bge.n	800dcd8 <_printf_i+0xc8>
 800dcd0:	232d      	movs	r3, #45	; 0x2d
 800dcd2:	4276      	negs	r6, r6
 800dcd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dcd8:	485e      	ldr	r0, [pc, #376]	; (800de54 <_printf_i+0x244>)
 800dcda:	230a      	movs	r3, #10
 800dcdc:	e019      	b.n	800dd12 <_printf_i+0x102>
 800dcde:	680e      	ldr	r6, [r1, #0]
 800dce0:	602b      	str	r3, [r5, #0]
 800dce2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800dce6:	bf18      	it	ne
 800dce8:	b236      	sxthne	r6, r6
 800dcea:	e7ef      	b.n	800dccc <_printf_i+0xbc>
 800dcec:	682b      	ldr	r3, [r5, #0]
 800dcee:	6820      	ldr	r0, [r4, #0]
 800dcf0:	1d19      	adds	r1, r3, #4
 800dcf2:	6029      	str	r1, [r5, #0]
 800dcf4:	0601      	lsls	r1, r0, #24
 800dcf6:	d501      	bpl.n	800dcfc <_printf_i+0xec>
 800dcf8:	681e      	ldr	r6, [r3, #0]
 800dcfa:	e002      	b.n	800dd02 <_printf_i+0xf2>
 800dcfc:	0646      	lsls	r6, r0, #25
 800dcfe:	d5fb      	bpl.n	800dcf8 <_printf_i+0xe8>
 800dd00:	881e      	ldrh	r6, [r3, #0]
 800dd02:	4854      	ldr	r0, [pc, #336]	; (800de54 <_printf_i+0x244>)
 800dd04:	2f6f      	cmp	r7, #111	; 0x6f
 800dd06:	bf0c      	ite	eq
 800dd08:	2308      	moveq	r3, #8
 800dd0a:	230a      	movne	r3, #10
 800dd0c:	2100      	movs	r1, #0
 800dd0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800dd12:	6865      	ldr	r5, [r4, #4]
 800dd14:	60a5      	str	r5, [r4, #8]
 800dd16:	2d00      	cmp	r5, #0
 800dd18:	bfa2      	ittt	ge
 800dd1a:	6821      	ldrge	r1, [r4, #0]
 800dd1c:	f021 0104 	bicge.w	r1, r1, #4
 800dd20:	6021      	strge	r1, [r4, #0]
 800dd22:	b90e      	cbnz	r6, 800dd28 <_printf_i+0x118>
 800dd24:	2d00      	cmp	r5, #0
 800dd26:	d04d      	beq.n	800ddc4 <_printf_i+0x1b4>
 800dd28:	4615      	mov	r5, r2
 800dd2a:	fbb6 f1f3 	udiv	r1, r6, r3
 800dd2e:	fb03 6711 	mls	r7, r3, r1, r6
 800dd32:	5dc7      	ldrb	r7, [r0, r7]
 800dd34:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800dd38:	4637      	mov	r7, r6
 800dd3a:	42bb      	cmp	r3, r7
 800dd3c:	460e      	mov	r6, r1
 800dd3e:	d9f4      	bls.n	800dd2a <_printf_i+0x11a>
 800dd40:	2b08      	cmp	r3, #8
 800dd42:	d10b      	bne.n	800dd5c <_printf_i+0x14c>
 800dd44:	6823      	ldr	r3, [r4, #0]
 800dd46:	07de      	lsls	r6, r3, #31
 800dd48:	d508      	bpl.n	800dd5c <_printf_i+0x14c>
 800dd4a:	6923      	ldr	r3, [r4, #16]
 800dd4c:	6861      	ldr	r1, [r4, #4]
 800dd4e:	4299      	cmp	r1, r3
 800dd50:	bfde      	ittt	le
 800dd52:	2330      	movle	r3, #48	; 0x30
 800dd54:	f805 3c01 	strble.w	r3, [r5, #-1]
 800dd58:	f105 35ff 	addle.w	r5, r5, #4294967295
 800dd5c:	1b52      	subs	r2, r2, r5
 800dd5e:	6122      	str	r2, [r4, #16]
 800dd60:	f8cd a000 	str.w	sl, [sp]
 800dd64:	464b      	mov	r3, r9
 800dd66:	aa03      	add	r2, sp, #12
 800dd68:	4621      	mov	r1, r4
 800dd6a:	4640      	mov	r0, r8
 800dd6c:	f7ff fee2 	bl	800db34 <_printf_common>
 800dd70:	3001      	adds	r0, #1
 800dd72:	d14c      	bne.n	800de0e <_printf_i+0x1fe>
 800dd74:	f04f 30ff 	mov.w	r0, #4294967295
 800dd78:	b004      	add	sp, #16
 800dd7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd7e:	4835      	ldr	r0, [pc, #212]	; (800de54 <_printf_i+0x244>)
 800dd80:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800dd84:	6829      	ldr	r1, [r5, #0]
 800dd86:	6823      	ldr	r3, [r4, #0]
 800dd88:	f851 6b04 	ldr.w	r6, [r1], #4
 800dd8c:	6029      	str	r1, [r5, #0]
 800dd8e:	061d      	lsls	r5, r3, #24
 800dd90:	d514      	bpl.n	800ddbc <_printf_i+0x1ac>
 800dd92:	07df      	lsls	r7, r3, #31
 800dd94:	bf44      	itt	mi
 800dd96:	f043 0320 	orrmi.w	r3, r3, #32
 800dd9a:	6023      	strmi	r3, [r4, #0]
 800dd9c:	b91e      	cbnz	r6, 800dda6 <_printf_i+0x196>
 800dd9e:	6823      	ldr	r3, [r4, #0]
 800dda0:	f023 0320 	bic.w	r3, r3, #32
 800dda4:	6023      	str	r3, [r4, #0]
 800dda6:	2310      	movs	r3, #16
 800dda8:	e7b0      	b.n	800dd0c <_printf_i+0xfc>
 800ddaa:	6823      	ldr	r3, [r4, #0]
 800ddac:	f043 0320 	orr.w	r3, r3, #32
 800ddb0:	6023      	str	r3, [r4, #0]
 800ddb2:	2378      	movs	r3, #120	; 0x78
 800ddb4:	4828      	ldr	r0, [pc, #160]	; (800de58 <_printf_i+0x248>)
 800ddb6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ddba:	e7e3      	b.n	800dd84 <_printf_i+0x174>
 800ddbc:	0659      	lsls	r1, r3, #25
 800ddbe:	bf48      	it	mi
 800ddc0:	b2b6      	uxthmi	r6, r6
 800ddc2:	e7e6      	b.n	800dd92 <_printf_i+0x182>
 800ddc4:	4615      	mov	r5, r2
 800ddc6:	e7bb      	b.n	800dd40 <_printf_i+0x130>
 800ddc8:	682b      	ldr	r3, [r5, #0]
 800ddca:	6826      	ldr	r6, [r4, #0]
 800ddcc:	6961      	ldr	r1, [r4, #20]
 800ddce:	1d18      	adds	r0, r3, #4
 800ddd0:	6028      	str	r0, [r5, #0]
 800ddd2:	0635      	lsls	r5, r6, #24
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	d501      	bpl.n	800dddc <_printf_i+0x1cc>
 800ddd8:	6019      	str	r1, [r3, #0]
 800ddda:	e002      	b.n	800dde2 <_printf_i+0x1d2>
 800dddc:	0670      	lsls	r0, r6, #25
 800ddde:	d5fb      	bpl.n	800ddd8 <_printf_i+0x1c8>
 800dde0:	8019      	strh	r1, [r3, #0]
 800dde2:	2300      	movs	r3, #0
 800dde4:	6123      	str	r3, [r4, #16]
 800dde6:	4615      	mov	r5, r2
 800dde8:	e7ba      	b.n	800dd60 <_printf_i+0x150>
 800ddea:	682b      	ldr	r3, [r5, #0]
 800ddec:	1d1a      	adds	r2, r3, #4
 800ddee:	602a      	str	r2, [r5, #0]
 800ddf0:	681d      	ldr	r5, [r3, #0]
 800ddf2:	6862      	ldr	r2, [r4, #4]
 800ddf4:	2100      	movs	r1, #0
 800ddf6:	4628      	mov	r0, r5
 800ddf8:	f7f2 f9fa 	bl	80001f0 <memchr>
 800ddfc:	b108      	cbz	r0, 800de02 <_printf_i+0x1f2>
 800ddfe:	1b40      	subs	r0, r0, r5
 800de00:	6060      	str	r0, [r4, #4]
 800de02:	6863      	ldr	r3, [r4, #4]
 800de04:	6123      	str	r3, [r4, #16]
 800de06:	2300      	movs	r3, #0
 800de08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800de0c:	e7a8      	b.n	800dd60 <_printf_i+0x150>
 800de0e:	6923      	ldr	r3, [r4, #16]
 800de10:	462a      	mov	r2, r5
 800de12:	4649      	mov	r1, r9
 800de14:	4640      	mov	r0, r8
 800de16:	47d0      	blx	sl
 800de18:	3001      	adds	r0, #1
 800de1a:	d0ab      	beq.n	800dd74 <_printf_i+0x164>
 800de1c:	6823      	ldr	r3, [r4, #0]
 800de1e:	079b      	lsls	r3, r3, #30
 800de20:	d413      	bmi.n	800de4a <_printf_i+0x23a>
 800de22:	68e0      	ldr	r0, [r4, #12]
 800de24:	9b03      	ldr	r3, [sp, #12]
 800de26:	4298      	cmp	r0, r3
 800de28:	bfb8      	it	lt
 800de2a:	4618      	movlt	r0, r3
 800de2c:	e7a4      	b.n	800dd78 <_printf_i+0x168>
 800de2e:	2301      	movs	r3, #1
 800de30:	4632      	mov	r2, r6
 800de32:	4649      	mov	r1, r9
 800de34:	4640      	mov	r0, r8
 800de36:	47d0      	blx	sl
 800de38:	3001      	adds	r0, #1
 800de3a:	d09b      	beq.n	800dd74 <_printf_i+0x164>
 800de3c:	3501      	adds	r5, #1
 800de3e:	68e3      	ldr	r3, [r4, #12]
 800de40:	9903      	ldr	r1, [sp, #12]
 800de42:	1a5b      	subs	r3, r3, r1
 800de44:	42ab      	cmp	r3, r5
 800de46:	dcf2      	bgt.n	800de2e <_printf_i+0x21e>
 800de48:	e7eb      	b.n	800de22 <_printf_i+0x212>
 800de4a:	2500      	movs	r5, #0
 800de4c:	f104 0619 	add.w	r6, r4, #25
 800de50:	e7f5      	b.n	800de3e <_printf_i+0x22e>
 800de52:	bf00      	nop
 800de54:	0800e061 	.word	0x0800e061
 800de58:	0800e072 	.word	0x0800e072

0800de5c <memmove>:
 800de5c:	4288      	cmp	r0, r1
 800de5e:	b510      	push	{r4, lr}
 800de60:	eb01 0402 	add.w	r4, r1, r2
 800de64:	d902      	bls.n	800de6c <memmove+0x10>
 800de66:	4284      	cmp	r4, r0
 800de68:	4623      	mov	r3, r4
 800de6a:	d807      	bhi.n	800de7c <memmove+0x20>
 800de6c:	1e43      	subs	r3, r0, #1
 800de6e:	42a1      	cmp	r1, r4
 800de70:	d008      	beq.n	800de84 <memmove+0x28>
 800de72:	f811 2b01 	ldrb.w	r2, [r1], #1
 800de76:	f803 2f01 	strb.w	r2, [r3, #1]!
 800de7a:	e7f8      	b.n	800de6e <memmove+0x12>
 800de7c:	4402      	add	r2, r0
 800de7e:	4601      	mov	r1, r0
 800de80:	428a      	cmp	r2, r1
 800de82:	d100      	bne.n	800de86 <memmove+0x2a>
 800de84:	bd10      	pop	{r4, pc}
 800de86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800de8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800de8e:	e7f7      	b.n	800de80 <memmove+0x24>

0800de90 <_realloc_r>:
 800de90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de94:	4680      	mov	r8, r0
 800de96:	4614      	mov	r4, r2
 800de98:	460e      	mov	r6, r1
 800de9a:	b921      	cbnz	r1, 800dea6 <_realloc_r+0x16>
 800de9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dea0:	4611      	mov	r1, r2
 800dea2:	f7ff bb6d 	b.w	800d580 <_malloc_r>
 800dea6:	b92a      	cbnz	r2, 800deb4 <_realloc_r+0x24>
 800dea8:	f7ff fc9c 	bl	800d7e4 <_free_r>
 800deac:	4625      	mov	r5, r4
 800deae:	4628      	mov	r0, r5
 800deb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800deb4:	f000 f81b 	bl	800deee <_malloc_usable_size_r>
 800deb8:	4284      	cmp	r4, r0
 800deba:	4607      	mov	r7, r0
 800debc:	d802      	bhi.n	800dec4 <_realloc_r+0x34>
 800debe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800dec2:	d812      	bhi.n	800deea <_realloc_r+0x5a>
 800dec4:	4621      	mov	r1, r4
 800dec6:	4640      	mov	r0, r8
 800dec8:	f7ff fb5a 	bl	800d580 <_malloc_r>
 800decc:	4605      	mov	r5, r0
 800dece:	2800      	cmp	r0, #0
 800ded0:	d0ed      	beq.n	800deae <_realloc_r+0x1e>
 800ded2:	42bc      	cmp	r4, r7
 800ded4:	4622      	mov	r2, r4
 800ded6:	4631      	mov	r1, r6
 800ded8:	bf28      	it	cs
 800deda:	463a      	movcs	r2, r7
 800dedc:	f7ff fb1a 	bl	800d514 <memcpy>
 800dee0:	4631      	mov	r1, r6
 800dee2:	4640      	mov	r0, r8
 800dee4:	f7ff fc7e 	bl	800d7e4 <_free_r>
 800dee8:	e7e1      	b.n	800deae <_realloc_r+0x1e>
 800deea:	4635      	mov	r5, r6
 800deec:	e7df      	b.n	800deae <_realloc_r+0x1e>

0800deee <_malloc_usable_size_r>:
 800deee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800def2:	1f18      	subs	r0, r3, #4
 800def4:	2b00      	cmp	r3, #0
 800def6:	bfbc      	itt	lt
 800def8:	580b      	ldrlt	r3, [r1, r0]
 800defa:	18c0      	addlt	r0, r0, r3
 800defc:	4770      	bx	lr
	...

0800df00 <_init>:
 800df00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df02:	bf00      	nop
 800df04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df06:	bc08      	pop	{r3}
 800df08:	469e      	mov	lr, r3
 800df0a:	4770      	bx	lr

0800df0c <_fini>:
 800df0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df0e:	bf00      	nop
 800df10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df12:	bc08      	pop	{r3}
 800df14:	469e      	mov	lr, r3
 800df16:	4770      	bx	lr
